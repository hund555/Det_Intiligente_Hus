
Mega2560Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800200  0000427a  0000430e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000427a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001bd  0080029a  0080029a  000043a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000043a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000043d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000bf8  00000000  00000000  00004418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001e38d  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004164  00000000  00000000  0002339d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007fa4  00000000  00000000  00027501  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000333c  00000000  00000000  0002f4a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005599  00000000  00000000  000327e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00018f62  00000000  00000000  00037d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e58  00000000  00000000  00050cdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fb c5       	rjmp	.+3062   	; 0xbf8 <__dtors_end>
       2:	00 00       	nop
       4:	2a c6       	rjmp	.+3156   	; 0xc5a <__bad_interrupt>
       6:	00 00       	nop
       8:	28 c6       	rjmp	.+3152   	; 0xc5a <__bad_interrupt>
       a:	00 00       	nop
       c:	26 c6       	rjmp	.+3148   	; 0xc5a <__bad_interrupt>
       e:	00 00       	nop
      10:	24 c6       	rjmp	.+3144   	; 0xc5a <__bad_interrupt>
      12:	00 00       	nop
      14:	22 c6       	rjmp	.+3140   	; 0xc5a <__bad_interrupt>
      16:	00 00       	nop
      18:	20 c6       	rjmp	.+3136   	; 0xc5a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1e c6       	rjmp	.+3132   	; 0xc5a <__bad_interrupt>
      1e:	00 00       	nop
      20:	1c c6       	rjmp	.+3128   	; 0xc5a <__bad_interrupt>
      22:	00 00       	nop
      24:	1a c6       	rjmp	.+3124   	; 0xc5a <__bad_interrupt>
      26:	00 00       	nop
      28:	18 c6       	rjmp	.+3120   	; 0xc5a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	16 c6       	rjmp	.+3116   	; 0xc5a <__bad_interrupt>
      2e:	00 00       	nop
      30:	14 c6       	rjmp	.+3112   	; 0xc5a <__bad_interrupt>
      32:	00 00       	nop
      34:	12 c6       	rjmp	.+3108   	; 0xc5a <__bad_interrupt>
      36:	00 00       	nop
      38:	10 c6       	rjmp	.+3104   	; 0xc5a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0e c6       	rjmp	.+3100   	; 0xc5a <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c c6       	rjmp	.+3096   	; 0xc5a <__bad_interrupt>
      42:	00 00       	nop
      44:	0a c6       	rjmp	.+3092   	; 0xc5a <__bad_interrupt>
      46:	00 00       	nop
      48:	08 c6       	rjmp	.+3088   	; 0xc5a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	06 c6       	rjmp	.+3084   	; 0xc5a <__bad_interrupt>
      4e:	00 00       	nop
      50:	04 c6       	rjmp	.+3080   	; 0xc5a <__bad_interrupt>
      52:	00 00       	nop
      54:	02 c6       	rjmp	.+3076   	; 0xc5a <__bad_interrupt>
      56:	00 00       	nop
      58:	00 c6       	rjmp	.+3072   	; 0xc5a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__vector_23>
      60:	fc c5       	rjmp	.+3064   	; 0xc5a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__vector_25>
      68:	0c 94 49 1a 	jmp	0x3492	; 0x3492 <__vector_26>
      6c:	f6 c5       	rjmp	.+3052   	; 0xc5a <__bad_interrupt>
      6e:	00 00       	nop
      70:	f4 c5       	rjmp	.+3048   	; 0xc5a <__bad_interrupt>
      72:	00 00       	nop
      74:	f2 c5       	rjmp	.+3044   	; 0xc5a <__bad_interrupt>
      76:	00 00       	nop
      78:	f0 c5       	rjmp	.+3040   	; 0xc5a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ee c5       	rjmp	.+3036   	; 0xc5a <__bad_interrupt>
      7e:	00 00       	nop
      80:	ec c5       	rjmp	.+3032   	; 0xc5a <__bad_interrupt>
      82:	00 00       	nop
      84:	ea c5       	rjmp	.+3028   	; 0xc5a <__bad_interrupt>
      86:	00 00       	nop
      88:	e8 c5       	rjmp	.+3024   	; 0xc5a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e6 c5       	rjmp	.+3020   	; 0xc5a <__bad_interrupt>
      8e:	00 00       	nop
      90:	e4 c5       	rjmp	.+3016   	; 0xc5a <__bad_interrupt>
      92:	00 00       	nop
      94:	e2 c5       	rjmp	.+3012   	; 0xc5a <__bad_interrupt>
      96:	00 00       	nop
      98:	e0 c5       	rjmp	.+3008   	; 0xc5a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 78 16 	jmp	0x2cf0	; 0x2cf0 <__vector_39>
      a0:	dc c5       	rjmp	.+3000   	; 0xc5a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	da c5       	rjmp	.+2996   	; 0xc5a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d8 c5       	rjmp	.+2992   	; 0xc5a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d6 c5       	rjmp	.+2988   	; 0xc5a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d4 c5       	rjmp	.+2984   	; 0xc5a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d2 c5       	rjmp	.+2980   	; 0xc5a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d0 c5       	rjmp	.+2976   	; 0xc5a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ce c5       	rjmp	.+2972   	; 0xc5a <__bad_interrupt>
      be:	00 00       	nop
      c0:	cc c5       	rjmp	.+2968   	; 0xc5a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ca c5       	rjmp	.+2964   	; 0xc5a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c8 c5       	rjmp	.+2960   	; 0xc5a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c6 c5       	rjmp	.+2956   	; 0xc5a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c4 c5       	rjmp	.+2952   	; 0xc5a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c2 c5       	rjmp	.+2948   	; 0xc5a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c0 c5       	rjmp	.+2944   	; 0xc5a <__bad_interrupt>
      da:	00 00       	nop
      dc:	be c5       	rjmp	.+2940   	; 0xc5a <__bad_interrupt>
      de:	00 00       	nop
      e0:	bc c5       	rjmp	.+2936   	; 0xc5a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	22 1d       	adc	r18, r2
      e6:	25 1d       	adc	r18, r5
      e8:	14 1d       	adc	r17, r4
      ea:	18 1d       	adc	r17, r8
      ec:	1e 1d       	adc	r17, r14
      ee:	5c 1d       	adc	r21, r12
      f0:	29 1d       	adc	r18, r9
      f2:	2d 1d       	adc	r18, r13
      f4:	33 1d       	adc	r19, r3
      f6:	37 1d       	adc	r19, r7
      f8:	3b 1d       	adc	r19, r11
      fa:	41 1d       	adc	r20, r1
      fc:	45 1d       	adc	r20, r5
      fe:	49 1d       	adc	r20, r9
     100:	5c 1d       	adc	r21, r12
     102:	4f 1d       	adc	r20, r15
     104:	53 1d       	adc	r21, r3
     106:	57 1d       	adc	r21, r7

00000108 <__trampolines_end>:
     108:	53 53       	subi	r21, 0x33	; 51
     10a:	44 31       	cpi	r20, 0x14	; 20
     10c:	33 30       	cpi	r19, 0x03	; 3
     10e:	36 20       	and	r3, r6
     110:	61 6c       	ori	r22, 0xC1	; 193
     112:	6c 6f       	ori	r22, 0xFC	; 252
     114:	63 61       	ori	r22, 0x13	; 19
     116:	74 69       	ori	r23, 0x94	; 148
     118:	6f 6e       	ori	r22, 0xEF	; 239
     11a:	20 66       	ori	r18, 0x60	; 96
     11c:	61 69       	ori	r22, 0x91	; 145
     11e:	6c 65       	ori	r22, 0x5C	; 92
     120:	64 00       	.word	0x0064	; ????

00000122 <_ZL4font>:
     122:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     132:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     142:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     152:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     162:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     172:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     182:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     192:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     1a2:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     1b2:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     1c2:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1d2:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     1e2:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     1f2:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     202:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     212:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     222:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     232:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     242:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     252:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     262:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     272:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     282:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     292:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2a2:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2b2:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     2c2:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     2d2:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     2e2:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     2f2:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     302:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     312:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     322:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     332:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     342:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     352:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     362:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     372:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     382:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     392:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     3a2:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     3b2:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     3c2:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     3d2:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     3e2:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     3f2:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     402:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     412:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     422:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     432:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     442:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     452:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     462:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     472:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     482:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     492:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     4a2:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     4b2:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     4c2:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     4d2:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     4e2:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     4f2:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     502:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     512:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     522:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     532:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     542:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     552:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     562:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     572:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     582:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     592:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     5a2:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     5b2:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     5c2:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     5d2:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     5e2:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     5f2:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     602:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     612:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000622 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
     622:	22 00 ff 21 00                                      "..!.

00000627 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE8postmask>:
     627:	00 01 03 07 0f 1f 3f 7f                             ......?.

0000062f <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE7premask>:
     62f:	00 80 c0 e0 f0 f8 fc fe                             ........

00000637 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
     637:	db 40 a4 a6 2e af                                   .@....

0000063d <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
     63d:	20 00 a1 c8                                          ...

00000641 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
     641:	d3 00 40 8d                                         ..@.

00000645 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
     645:	ae d5 80 a8                                         ....

00000649 <_ZL12splash2_data>:
     649:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     659:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     669:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     685:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     695:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     6a5:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     6b5:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     6c5:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     6d5:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     6e5:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     6f5:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     705:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     715:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     725:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     735:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     745:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     755:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     765:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     775:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     785:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     795:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     7a5:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     7b5:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     7c5:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     7dd:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     7ed:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     7fd:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     80d:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     81d:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

00000829 <_ZL12splash1_data>:
     829:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     839:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     849:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     859:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     869:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     879:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     891:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     8a1:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     8b1:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     8c1:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     8d1:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     8e1:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     8f1:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     901:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
     911:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
     921:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
     931:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
     941:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
     951:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
     961:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
     971:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
     981:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
     991:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
     9a1:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
     9b9:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
     9d1:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
     9e1:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
     9f1:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
     a01:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
     a11:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
     a21:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
     a31:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
     a41:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
     a51:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
     a61:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
     a71:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
     a81:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
     a91:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
     aa1:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
     ab1:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
     ac1:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
     ad1:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
     ae1:	ff fd 6b 5b db 6a fd c0                             ..k[.j..

00000ae9 <digital_pin_to_timer_PGM>:
     ae9:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     b15:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000b2f <digital_pin_to_bit_mask_PGM>:
     b2f:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     b3f:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     b4f:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     b5f:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     b6f:	04 08 10 20 40 80                                   ... @.

00000b75 <digital_pin_to_port_PGM>:
     b75:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     b85:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     b95:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     ba5:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     bb5:	0b 0b 0b 0b 0b 0b                                   ......

00000bbb <port_to_output_PGM>:
     bbb:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     bcb:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000bd5 <port_to_mode_PGM>:
     bd5:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     be5:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000bf0 <__ctors_start>:
     bf0:	fc 06       	cpc	r15, r28
     bf2:	a3 18       	sub	r10, r3
     bf4:	7b 1a       	sub	r7, r27

00000bf6 <__ctors_end>:
     bf6:	25 07       	cpc	r18, r21

00000bf8 <__dtors_end>:
     bf8:	11 24       	eor	r1, r1
     bfa:	1f be       	out	0x3f, r1	; 63
     bfc:	cf ef       	ldi	r28, 0xFF	; 255
     bfe:	d1 e2       	ldi	r29, 0x21	; 33
     c00:	de bf       	out	0x3e, r29	; 62
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	00 e0       	ldi	r16, 0x00	; 0
     c06:	0c bf       	out	0x3c, r16	; 60

00000c08 <__do_copy_data>:
     c08:	12 e0       	ldi	r17, 0x02	; 2
     c0a:	a0 e0       	ldi	r26, 0x00	; 0
     c0c:	b2 e0       	ldi	r27, 0x02	; 2
     c0e:	ea e7       	ldi	r30, 0x7A	; 122
     c10:	f2 e4       	ldi	r31, 0x42	; 66
     c12:	00 e0       	ldi	r16, 0x00	; 0
     c14:	0b bf       	out	0x3b, r16	; 59
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <__do_copy_data+0x14>
     c18:	07 90       	elpm	r0, Z+
     c1a:	0d 92       	st	X+, r0
     c1c:	aa 39       	cpi	r26, 0x9A	; 154
     c1e:	b1 07       	cpc	r27, r17
     c20:	d9 f7       	brne	.-10     	; 0xc18 <__do_copy_data+0x10>

00000c22 <__do_clear_bss>:
     c22:	24 e0       	ldi	r18, 0x04	; 4
     c24:	aa e9       	ldi	r26, 0x9A	; 154
     c26:	b2 e0       	ldi	r27, 0x02	; 2
     c28:	01 c0       	rjmp	.+2      	; 0xc2c <.do_clear_bss_start>

00000c2a <.do_clear_bss_loop>:
     c2a:	1d 92       	st	X+, r1

00000c2c <.do_clear_bss_start>:
     c2c:	a7 35       	cpi	r26, 0x57	; 87
     c2e:	b2 07       	cpc	r27, r18
     c30:	e1 f7       	brne	.-8      	; 0xc2a <.do_clear_bss_loop>

00000c32 <__do_global_ctors>:
     c32:	15 e0       	ldi	r17, 0x05	; 5
     c34:	cb ef       	ldi	r28, 0xFB	; 251
     c36:	d5 e0       	ldi	r29, 0x05	; 5
     c38:	00 e0       	ldi	r16, 0x00	; 0
     c3a:	06 c0       	rjmp	.+12     	; 0xc48 <__do_global_ctors+0x16>
     c3c:	21 97       	sbiw	r28, 0x01	; 1
     c3e:	01 09       	sbc	r16, r1
     c40:	80 2f       	mov	r24, r16
     c42:	fe 01       	movw	r30, r28
     c44:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <__tablejump2__>
     c48:	c8 3f       	cpi	r28, 0xF8	; 248
     c4a:	d1 07       	cpc	r29, r17
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	08 07       	cpc	r16, r24
     c50:	a9 f7       	brne	.-22     	; 0xc3c <__do_global_ctors+0xa>
     c52:	0e 94 a9 1a 	call	0x3552	; 0x3552 <main>
     c56:	0c 94 2c 21 	jmp	0x4258	; 0x4258 <__do_global_dtors>

00000c5a <__bad_interrupt>:
     c5a:	d2 c9       	rjmp	.-3164   	; 0x0 <__vectors>

00000c5c <setup>:
// delays
unsigned long previousMillis2 = 0;
int delay2Sec = 2000;

void setup (void)
{
     c5c:	0f 93       	push	r16
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     c5e:	26 e0       	ldi	r18, 0x06	; 6
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	52 ec       	ldi	r21, 0xC2	; 194
     c64:	61 e0       	ldi	r22, 0x01	; 1
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	8d ea       	ldi	r24, 0xAD	; 173
     c6a:	93 e0       	ldi	r25, 0x03	; 3
     c6c:	0e 94 b0 19 	call	0x3360	; 0x3360 <_ZN14HardwareSerial5beginEmh>

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
     c70:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <_ZN8SPIClass13interruptModeE>
     c74:	88 23       	and	r24, r24
     c76:	99 f0       	breq	.+38     	; 0xc9e <setup+0x42>
      uint8_t sreg = SREG;
     c78:	2f b7       	in	r18, 0x3f	; 63
      noInterrupts();
     c7a:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
     c7c:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <_ZN8SPIClass13interruptModeE>
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	59 f4       	brne	.+22     	; 0xc9a <setup+0x3e>
        interruptSave = SPI_AVR_EIMSK;
     c84:	8d b3       	in	r24, 0x1d	; 29
     c86:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
     c8a:	9d b3       	in	r25, 0x1d	; 29
     c8c:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <_ZN8SPIClass13interruptMaskE>
     c90:	80 95       	com	r24
     c92:	89 23       	and	r24, r25
     c94:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
     c96:	2f bf       	out	0x3f, r18	; 63
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <setup+0x42>
      } else
      #endif
      {
        interruptSave = sreg;
     c9a:	20 93 df 02 	sts	0x02DF, r18	; 0x8002df <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
     c9e:	80 e5       	ldi	r24, 0x50	; 80
     ca0:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
     ca2:	1d bc       	out	0x2d, r1	; 45
	Serial.begin(115200);												//set baud rate to 115200 for usart
	SPI.beginTransaction(SPISettings(4000000, MSBFIRST, SPI_MODE0));	// Set configuration for SPI
	SPI.begin();														// Initializes the SPI bus by setting SCK, MOSI, and SS to outputs, pulling SCK and MOSI low, and SS high.
     ca4:	0e 94 97 14 	call	0x292e	; 0x292e <_ZN8SPIClass5beginEv>
	
	if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C))
     ca8:	01 e0       	ldi	r16, 0x01	; 1
     caa:	21 e0       	ldi	r18, 0x01	; 1
     cac:	4c e3       	ldi	r20, 0x3C	; 60
     cae:	62 e0       	ldi	r22, 0x02	; 2
     cb0:	8f e9       	ldi	r24, 0x9F	; 159
     cb2:	92 e0       	ldi	r25, 0x02	; 2
     cb4:	0e 94 4b 10 	call	0x2096	; 0x2096 <_ZN16Adafruit_SSD13065beginEhhbb>
     cb8:	81 11       	cpse	r24, r1
     cba:	07 c0       	rjmp	.+14     	; 0xcca <setup+0x6e>
	{ // Address for 128x64
		Serial.println(F("SSD1306 allocation failed"));
     cbc:	68 e0       	ldi	r22, 0x08	; 8
     cbe:	71 e0       	ldi	r23, 0x01	; 1
     cc0:	8d ea       	ldi	r24, 0xAD	; 173
     cc2:	93 e0       	ldi	r25, 0x03	; 3
     cc4:	0e 94 30 1b 	call	0x3660	; 0x3660 <_ZN5Print7printlnEPK19__FlashStringHelper>
     cc8:	ff cf       	rjmp	.-2      	; 0xcc8 <setup+0x6c>
		for(;;); // Don't proceed, loop forever
	}
}
     cca:	0f 91       	pop	r16
     ccc:	08 95       	ret

00000cce <loop>:

void loop (void)
{
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <loop+0xa>
     cd8:	00 d0       	rcall	.+0      	; 0xcda <loop+0xc>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	display.clearDisplay();
     cde:	8f e9       	ldi	r24, 0x9F	; 159
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	0e 94 2d 10 	call	0x205a	; 0x205a <_ZN16Adafruit_SSD130612clearDisplayEv>
	
	display.setTextSize(1);			// Normal 1:1 pixel scale
     ce6:	61 e0       	ldi	r22, 0x01	; 1
     ce8:	8f e9       	ldi	r24, 0x9F	; 159
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	4d d7       	rcall	.+3738   	; 0x1b88 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <display+0x13>
     cf6:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <display+0x12>
     cfa:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <display+0x11>
     cfe:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <display+0x10>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
     d02:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <display+0xd>
     d06:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <display+0xc>
    cursor_y = y;
     d0a:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <display+0xf>
     d0e:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <display+0xe>
	display.setTextColor(WHITE);	// Draw white text
	display.setCursor(0,0);			// Start at top-left corner
	if (showTime)
     d12:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <showTime>
     d16:	81 11       	cpse	r24, r1
     d18:	60 c0       	rjmp	.+192    	; 0xdda <loop+0x10c>
	{
	}
	else
	{
		if (millis() - previousMillis2 >= delay2Sec)
     d1a:	0e 94 3c 1c 	call	0x3878	; 0x3878 <millis>
     d1e:	00 91 9a 02 	lds	r16, 0x029A	; 0x80029a <__data_end>
     d22:	10 91 9b 02 	lds	r17, 0x029B	; 0x80029b <__data_end+0x1>
     d26:	20 91 9c 02 	lds	r18, 0x029C	; 0x80029c <__data_end+0x2>
     d2a:	30 91 9d 02 	lds	r19, 0x029D	; 0x80029d <__data_end+0x3>
     d2e:	ab 01       	movw	r20, r22
     d30:	bc 01       	movw	r22, r24
     d32:	40 1b       	sub	r20, r16
     d34:	51 0b       	sbc	r21, r17
     d36:	62 0b       	sbc	r22, r18
     d38:	73 0b       	sbc	r23, r19
     d3a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <delay2Sec>
     d3e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <delay2Sec+0x1>
     d42:	09 2e       	mov	r0, r25
     d44:	00 0c       	add	r0, r0
     d46:	aa 0b       	sbc	r26, r26
     d48:	bb 0b       	sbc	r27, r27
     d4a:	48 17       	cp	r20, r24
     d4c:	59 07       	cpc	r21, r25
     d4e:	6a 07       	cpc	r22, r26
     d50:	7b 07       	cpc	r23, r27
     d52:	08 f4       	brcc	.+2      	; 0xd56 <loop+0x88>
     d54:	42 c0       	rjmp	.+132    	; 0xdda <loop+0x10c>
		{
			previousMillis2 = millis();
     d56:	0e 94 3c 1c 	call	0x3878	; 0x3878 <millis>
     d5a:	60 93 9a 02 	sts	0x029A, r22	; 0x80029a <__data_end>
     d5e:	70 93 9b 02 	sts	0x029B, r23	; 0x80029b <__data_end+0x1>
     d62:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <__data_end+0x2>
     d66:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <__data_end+0x3>
			digitalWrite(SS, LOW);				// enable Slave Select
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	85 e3       	ldi	r24, 0x35	; 53
     d6e:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <digitalWrite>
			
			// send test string
			int* temperature = 0;
			SPI.transfer(*temperature);
     d72:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7c0000>
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     d76:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     d78:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
     d7a:	0d b4       	in	r0, 0x2d	; 45
     d7c:	07 fe       	sbrs	r0, 7
     d7e:	fd cf       	rjmp	.-6      	; 0xd7a <loop+0xac>
    return SPDR;
     d80:	8e b5       	in	r24, 0x2e	; 46
			Serial.println(*temperature);
     d82:	60 91 00 00 	lds	r22, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7c0000>
     d86:	70 91 01 00 	lds	r23, 0x0001	; 0x800001 <__TEXT_REGION_LENGTH__+0x7c0001>
     d8a:	4a e0       	ldi	r20, 0x0A	; 10
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	8d ea       	ldi	r24, 0xAD	; 173
     d90:	93 e0       	ldi	r25, 0x03	; 3
     d92:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <_ZN5Print7printlnEii>
			
			digitalWrite(SS, HIGH);				// disable Slave Select
     d96:	61 e0       	ldi	r22, 0x01	; 1
     d98:	85 e3       	ldi	r24, 0x35	; 53
     d9a:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <digitalWrite>
			
			String dstr = "Temp: ";				//dstr = Display show temperature rounded
     d9e:	68 e0       	ldi	r22, 0x08	; 8
     da0:	72 e0       	ldi	r23, 0x02	; 2
     da2:	ce 01       	movw	r24, r28
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <_ZN6StringC1EPKc>
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
     daa:	60 91 00 00 	lds	r22, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7c0000>
     dae:	70 91 01 00 	lds	r23, 0x0001	; 0x800001 <__TEXT_REGION_LENGTH__+0x7c0001>
     db2:	ce 01       	movw	r24, r28
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <_ZN6String6concatEi>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     dba:	67 ef       	ldi	r22, 0xF7	; 247
     dbc:	ce 01       	movw	r24, r28
     dbe:	01 96       	adiw	r24, 0x01	; 1
     dc0:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <_ZN6String6concatEc>
			dstr += *temperature;
			dstr += (char)247;
			
			display.println(dstr);
     dc4:	be 01       	movw	r22, r28
     dc6:	6f 5f       	subi	r22, 0xFF	; 255
     dc8:	7f 4f       	sbci	r23, 0xFF	; 255
     dca:	8f e9       	ldi	r24, 0x9F	; 159
     dcc:	92 e0       	ldi	r25, 0x02	; 2
     dce:	0e 94 40 1b 	call	0x3680	; 0x3680 <_ZN5Print7printlnERK6String>
			SPI.transfer(*temperature);
			Serial.println(*temperature);
			
			digitalWrite(SS, HIGH);				// disable Slave Select
			
			String dstr = "Temp: ";				//dstr = Display show temperature rounded
     dd2:	ce 01       	movw	r24, r28
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <_ZN6StringD1Ev>
			
			display.println(dstr);
		}
	}
	
	display.display();
     dda:	8f e9       	ldi	r24, 0x9F	; 159
     ddc:	92 e0       	ldi	r25, 0x02	; 2
     dde:	0e 94 ae 13 	call	0x275c	; 0x275c <_ZN16Adafruit_SSD13067displayEv>
     de2:	26 96       	adiw	r28, 0x06	; 6
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	de bf       	out	0x3e, r29	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	08 95       	ret

00000df8 <_GLOBAL__sub_I_display>:
     df8:	8f 92       	push	r8
     dfa:	9f 92       	push	r9
     dfc:	af 92       	push	r10
     dfe:	bf 92       	push	r11
     e00:	cf 92       	push	r12
     e02:	df 92       	push	r13
     e04:	ef 92       	push	r14
     e06:	ff 92       	push	r15
     e08:	0f 93       	push	r16
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET 4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
     e0a:	80 ea       	ldi	r24, 0xA0	; 160
     e0c:	88 2e       	mov	r8, r24
     e0e:	86 e8       	ldi	r24, 0x86	; 134
     e10:	98 2e       	mov	r9, r24
     e12:	aa 24       	eor	r10, r10
     e14:	a3 94       	inc	r10
     e16:	b1 2c       	mov	r11, r1
     e18:	90 e8       	ldi	r25, 0x80	; 128
     e1a:	c9 2e       	mov	r12, r25
     e1c:	9a e1       	ldi	r25, 0x1A	; 26
     e1e:	d9 2e       	mov	r13, r25
     e20:	96 e0       	ldi	r25, 0x06	; 6
     e22:	e9 2e       	mov	r14, r25
     e24:	f1 2c       	mov	r15, r1
     e26:	04 e0       	ldi	r16, 0x04	; 4
     e28:	27 e5       	ldi	r18, 0x57	; 87
     e2a:	33 e0       	ldi	r19, 0x03	; 3
     e2c:	40 e4       	ldi	r20, 0x40	; 64
     e2e:	60 e8       	ldi	r22, 0x80	; 128
     e30:	8f e9       	ldi	r24, 0x9F	; 159
     e32:	92 e0       	ldi	r25, 0x02	; 2
     e34:	6f d7       	rcall	.+3806   	; 0x1d14 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
			display.println(dstr);
		}
	}
	
	display.display();
     e36:	0f 91       	pop	r16
     e38:	ff 90       	pop	r15
     e3a:	ef 90       	pop	r14
     e3c:	df 90       	pop	r13
     e3e:	cf 90       	pop	r12
     e40:	bf 90       	pop	r11
     e42:	af 90       	pop	r10
     e44:	9f 90       	pop	r9
     e46:	8f 90       	pop	r8
     e48:	08 95       	ret

00000e4a <_GLOBAL__sub_D_display>:
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET 4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
     e4a:	8f e9       	ldi	r24, 0x9F	; 159
     e4c:	92 e0       	ldi	r25, 0x02	; 2
     e4e:	ac c7       	rjmp	.+3928   	; 0x1da8 <_ZN16Adafruit_SSD1306D1Ev>

00000e50 <_ZN8SPIClass16beginTransactionE11SPISettings>:

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
     e50:	20 91 e1 02 	lds	r18, 0x02E1	; 0x8002e1 <_ZN8SPIClass13interruptModeE>
     e54:	22 23       	and	r18, r18
     e56:	99 f0       	breq	.+38     	; 0xe7e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      uint8_t sreg = SREG;
     e58:	4f b7       	in	r20, 0x3f	; 63
      noInterrupts();
     e5a:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
     e5c:	20 91 e1 02 	lds	r18, 0x02E1	; 0x8002e1 <_ZN8SPIClass13interruptModeE>
     e60:	21 30       	cpi	r18, 0x01	; 1
     e62:	59 f4       	brne	.+22     	; 0xe7a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
        interruptSave = SPI_AVR_EIMSK;
     e64:	2d b3       	in	r18, 0x1d	; 29
     e66:	20 93 df 02 	sts	0x02DF, r18	; 0x8002df <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
     e6a:	3d b3       	in	r19, 0x1d	; 29
     e6c:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <_ZN8SPIClass13interruptMaskE>
     e70:	20 95       	com	r18
     e72:	23 23       	and	r18, r19
     e74:	2d bb       	out	0x1d, r18	; 29
        SREG = sreg;
     e76:	4f bf       	out	0x3f, r20	; 63
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      } else
      #endif
      {
        interruptSave = sreg;
     e7a:	40 93 df 02 	sts	0x02DF, r20	; 0x8002df <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
     e7e:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
     e80:	9d bd       	out	0x2d, r25	; 45
     e82:	08 95       	ret

00000e84 <_ZN8SPIClass14endTransactionEv>:
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
     e84:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <_ZN8SPIClass13interruptModeE>
     e88:	88 23       	and	r24, r24
     e8a:	61 f0       	breq	.+24     	; 0xea4 <_ZN8SPIClass14endTransactionEv+0x20>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
     e8c:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
     e8e:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
     e90:	20 91 e1 02 	lds	r18, 0x02E1	; 0x8002e1 <_ZN8SPIClass13interruptModeE>
     e94:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <_ZN8SPIClass13interruptSaveE>
     e98:	21 30       	cpi	r18, 0x01	; 1
     e9a:	19 f4       	brne	.+6      	; 0xea2 <_ZN8SPIClass14endTransactionEv+0x1e>
        SPI_AVR_EIMSK = interruptSave;
     e9c:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
     e9e:	9f bf       	out	0x3f, r25	; 63
     ea0:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
     ea2:	8f bf       	out	0x3f, r24	; 63
     ea4:	08 95       	ret

00000ea6 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	08 95       	ret

00000eac <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     eac:	08 95       	ret

00000eae <_ZN12Adafruit_GFX9writeLineEiiiij>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
  drawChar(x, y, c, color, bg, size, size);
}
     eae:	2f 92       	push	r2
     eb0:	3f 92       	push	r3
     eb2:	4f 92       	push	r4
     eb4:	5f 92       	push	r5
     eb6:	6f 92       	push	r6
     eb8:	7f 92       	push	r7
     eba:	8f 92       	push	r8
     ebc:	9f 92       	push	r9
     ebe:	af 92       	push	r10
     ec0:	bf 92       	push	r11
     ec2:	cf 92       	push	r12
     ec4:	df 92       	push	r13
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	00 d0       	rcall	.+0      	; 0xed4 <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	2c 01       	movw	r4, r24
     edc:	7e 83       	std	Y+6, r23	; 0x06
     ede:	6d 83       	std	Y+5, r22	; 0x05
     ee0:	6a 01       	movw	r12, r20
     ee2:	59 01       	movw	r10, r18
     ee4:	c8 01       	movw	r24, r16
     ee6:	fc 82       	std	Y+4, r15	; 0x04
     ee8:	eb 82       	std	Y+3, r14	; 0x03
     eea:	48 01       	movw	r8, r16
     eec:	84 1a       	sub	r8, r20
     eee:	95 0a       	sbc	r9, r21
     ef0:	97 fe       	sbrs	r9, 7
     ef2:	03 c0       	rjmp	.+6      	; 0xefa <_ZN12Adafruit_GFX9writeLineEiiiij+0x4c>
     ef4:	91 94       	neg	r9
     ef6:	81 94       	neg	r8
     ef8:	91 08       	sbc	r9, r1
     efa:	35 01       	movw	r6, r10
     efc:	2d 81       	ldd	r18, Y+5	; 0x05
     efe:	3e 81       	ldd	r19, Y+6	; 0x06
     f00:	62 1a       	sub	r6, r18
     f02:	73 0a       	sbc	r7, r19
     f04:	77 fe       	sbrs	r7, 7
     f06:	03 c0       	rjmp	.+6      	; 0xf0e <_ZN12Adafruit_GFX9writeLineEiiiij+0x60>
     f08:	71 94       	neg	r7
     f0a:	61 94       	neg	r6
     f0c:	71 08       	sbc	r7, r1
     f0e:	68 14       	cp	r6, r8
     f10:	79 04       	cpc	r7, r9
     f12:	5c f4       	brge	.+22     	; 0xf2a <_ZN12Adafruit_GFX9writeLineEiiiij+0x7c>
     f14:	3a 2d       	mov	r19, r10
     f16:	2b 2d       	mov	r18, r11
     f18:	5c 01       	movw	r10, r24
     f1a:	83 2f       	mov	r24, r19
     f1c:	92 2f       	mov	r25, r18
     f1e:	3d 81       	ldd	r19, Y+5	; 0x05
     f20:	2e 81       	ldd	r18, Y+6	; 0x06
     f22:	de 82       	std	Y+6, r13	; 0x06
     f24:	cd 82       	std	Y+5, r12	; 0x05
     f26:	c3 2e       	mov	r12, r19
     f28:	d2 2e       	mov	r13, r18
     f2a:	ad 81       	ldd	r26, Y+5	; 0x05
     f2c:	be 81       	ldd	r27, Y+6	; 0x06
     f2e:	aa 16       	cp	r10, r26
     f30:	bb 06       	cpc	r11, r27
     f32:	5c f4       	brge	.+22     	; 0xf4a <_ZN12Adafruit_GFX9writeLineEiiiij+0x9c>
     f34:	3c 2d       	mov	r19, r12
     f36:	2d 2d       	mov	r18, r13
     f38:	6c 01       	movw	r12, r24
     f3a:	83 2f       	mov	r24, r19
     f3c:	92 2f       	mov	r25, r18
     f3e:	3d 81       	ldd	r19, Y+5	; 0x05
     f40:	2e 81       	ldd	r18, Y+6	; 0x06
     f42:	be 82       	std	Y+6, r11	; 0x06
     f44:	ad 82       	std	Y+5, r10	; 0x05
     f46:	a3 2e       	mov	r10, r19
     f48:	b2 2e       	mov	r11, r18
     f4a:	85 01       	movw	r16, r10
     f4c:	2d 81       	ldd	r18, Y+5	; 0x05
     f4e:	3e 81       	ldd	r19, Y+6	; 0x06
     f50:	02 1b       	sub	r16, r18
     f52:	13 0b       	sbc	r17, r19
     f54:	1c 01       	movw	r2, r24
     f56:	2c 18       	sub	r2, r12
     f58:	3d 08       	sbc	r3, r13
     f5a:	37 fe       	sbrs	r3, 7
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <_ZN12Adafruit_GFX9writeLineEiiiij+0xb6>
     f5e:	31 94       	neg	r3
     f60:	21 94       	neg	r2
     f62:	31 08       	sbc	r3, r1
     f64:	78 01       	movw	r14, r16
     f66:	17 ff       	sbrs	r17, 7
     f68:	03 c0       	rjmp	.+6      	; 0xf70 <_ZN12Adafruit_GFX9writeLineEiiiij+0xc2>
     f6a:	3f ef       	ldi	r19, 0xFF	; 255
     f6c:	e3 1a       	sub	r14, r19
     f6e:	f3 0a       	sbc	r15, r19
     f70:	f5 94       	asr	r15
     f72:	e7 94       	ror	r14
     f74:	c8 16       	cp	r12, r24
     f76:	d9 06       	cpc	r13, r25
     f78:	2c f0       	brlt	.+10     	; 0xf84 <_ZN12Adafruit_GFX9writeLineEiiiij+0xd6>
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	9f ef       	ldi	r25, 0xFF	; 255
     f7e:	9a 83       	std	Y+2, r25	; 0x02
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	04 c0       	rjmp	.+8      	; 0xf8c <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
     f84:	a1 e0       	ldi	r26, 0x01	; 1
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	ba 83       	std	Y+2, r27	; 0x02
     f8a:	a9 83       	std	Y+1, r26	; 0x01
     f8c:	2d 81       	ldd	r18, Y+5	; 0x05
     f8e:	3e 81       	ldd	r19, Y+6	; 0x06
     f90:	a2 16       	cp	r10, r18
     f92:	b3 06       	cpc	r11, r19
     f94:	24 f1       	brlt	.+72     	; 0xfde <_ZN12Adafruit_GFX9writeLineEiiiij+0x130>
     f96:	d2 01       	movw	r26, r4
     f98:	ed 91       	ld	r30, X+
     f9a:	fc 91       	ld	r31, X
     f9c:	04 84       	ldd	r0, Z+12	; 0x0c
     f9e:	f5 85       	ldd	r31, Z+13	; 0x0d
     fa0:	e0 2d       	mov	r30, r0
     fa2:	2b 81       	ldd	r18, Y+3	; 0x03
     fa4:	3c 81       	ldd	r19, Y+4	; 0x04
     fa6:	68 14       	cp	r6, r8
     fa8:	79 04       	cpc	r7, r9
     faa:	24 f4       	brge	.+8      	; 0xfb4 <_ZN12Adafruit_GFX9writeLineEiiiij+0x106>
     fac:	4d 81       	ldd	r20, Y+5	; 0x05
     fae:	5e 81       	ldd	r21, Y+6	; 0x06
     fb0:	b6 01       	movw	r22, r12
     fb2:	03 c0       	rjmp	.+6      	; 0xfba <_ZN12Adafruit_GFX9writeLineEiiiij+0x10c>
     fb4:	a6 01       	movw	r20, r12
     fb6:	6d 81       	ldd	r22, Y+5	; 0x05
     fb8:	7e 81       	ldd	r23, Y+6	; 0x06
     fba:	c2 01       	movw	r24, r4
     fbc:	19 95       	eicall
     fbe:	e2 18       	sub	r14, r2
     fc0:	f3 08       	sbc	r15, r3
     fc2:	f7 fe       	sbrs	r15, 7
     fc4:	06 c0       	rjmp	.+12     	; 0xfd2 <_ZN12Adafruit_GFX9writeLineEiiiij+0x124>
     fc6:	29 81       	ldd	r18, Y+1	; 0x01
     fc8:	3a 81       	ldd	r19, Y+2	; 0x02
     fca:	c2 0e       	add	r12, r18
     fcc:	d3 1e       	adc	r13, r19
     fce:	e0 0e       	add	r14, r16
     fd0:	f1 1e       	adc	r15, r17
     fd2:	8d 81       	ldd	r24, Y+5	; 0x05
     fd4:	9e 81       	ldd	r25, Y+6	; 0x06
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	9e 83       	std	Y+6, r25	; 0x06
     fda:	8d 83       	std	Y+5, r24	; 0x05
     fdc:	d7 cf       	rjmp	.-82     	; 0xf8c <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
     fde:	26 96       	adiw	r28, 0x06	; 6
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	cd bf       	out	0x3d, r28	; 61
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	9f 90       	pop	r9
    1000:	8f 90       	pop	r8
    1002:	7f 90       	pop	r7
    1004:	6f 90       	pop	r6
    1006:	5f 90       	pop	r5
    1008:	4f 90       	pop	r4
    100a:	3f 90       	pop	r3
    100c:	2f 90       	pop	r2
    100e:	08 95       	ret

00001010 <_ZN12Adafruit_GFX10writePixelEiij>:
    1010:	dc 01       	movw	r26, r24
    1012:	ed 91       	ld	r30, X+
    1014:	fc 91       	ld	r31, X
    1016:	00 84       	ldd	r0, Z+8	; 0x08
    1018:	f1 85       	ldd	r31, Z+9	; 0x09
    101a:	e0 2d       	mov	r30, r0
    101c:	19 94       	eijmp

0000101e <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	dc 01       	movw	r26, r24
    1024:	ed 91       	ld	r30, X+
    1026:	fc 91       	ld	r31, X
    1028:	04 8c       	ldd	r0, Z+28	; 0x1c
    102a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    102c:	e0 2d       	mov	r30, r0
    102e:	19 95       	eicall
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	08 95       	ret

00001036 <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	dc 01       	movw	r26, r24
    103c:	ed 91       	ld	r30, X+
    103e:	fc 91       	ld	r31, X
    1040:	06 8c       	ldd	r0, Z+30	; 0x1e
    1042:	f7 8d       	ldd	r31, Z+31	; 0x1f
    1044:	e0 2d       	mov	r30, r0
    1046:	19 95       	eicall
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	08 95       	ret

0000104e <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	dc 01       	movw	r26, r24
    1058:	ed 91       	ld	r30, X+
    105a:	fc 91       	ld	r31, X
    105c:	00 a0       	ldd	r0, Z+32	; 0x20
    105e:	f1 a1       	ldd	r31, Z+33	; 0x21
    1060:	e0 2d       	mov	r30, r0
    1062:	19 95       	eicall
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	08 95       	ret

0000106e <_ZN12Adafruit_GFX10startWriteEv>:
    106e:	08 95       	ret

00001070 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    1070:	8f 92       	push	r8
    1072:	9f 92       	push	r9
    1074:	af 92       	push	r10
    1076:	bf 92       	push	r11
    1078:	cf 92       	push	r12
    107a:	df 92       	push	r13
    107c:	ef 92       	push	r14
    107e:	ff 92       	push	r15
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	ec 01       	movw	r28, r24
    108a:	5b 01       	movw	r10, r22
    108c:	4a 01       	movw	r8, r20
    108e:	69 01       	movw	r12, r18
    1090:	78 01       	movw	r14, r16
    1092:	e8 81       	ld	r30, Y
    1094:	f9 81       	ldd	r31, Y+1	; 0x01
    1096:	02 84       	ldd	r0, Z+10	; 0x0a
    1098:	f3 85       	ldd	r31, Z+11	; 0x0b
    109a:	e0 2d       	mov	r30, r0
    109c:	19 95       	eicall
    109e:	c8 0c       	add	r12, r8
    10a0:	d9 1c       	adc	r13, r9
    10a2:	86 01       	movw	r16, r12
    10a4:	01 50       	subi	r16, 0x01	; 1
    10a6:	11 09       	sbc	r17, r1
    10a8:	e8 81       	ld	r30, Y
    10aa:	f9 81       	ldd	r31, Y+1	; 0x01
    10ac:	04 88       	ldd	r0, Z+20	; 0x14
    10ae:	f5 89       	ldd	r31, Z+21	; 0x15
    10b0:	e0 2d       	mov	r30, r0
    10b2:	95 01       	movw	r18, r10
    10b4:	a4 01       	movw	r20, r8
    10b6:	b5 01       	movw	r22, r10
    10b8:	ce 01       	movw	r24, r28
    10ba:	19 95       	eicall
    10bc:	e8 81       	ld	r30, Y
    10be:	f9 81       	ldd	r31, Y+1	; 0x01
    10c0:	06 88       	ldd	r0, Z+22	; 0x16
    10c2:	f7 89       	ldd	r31, Z+23	; 0x17
    10c4:	e0 2d       	mov	r30, r0
    10c6:	ce 01       	movw	r24, r28
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	ef 90       	pop	r14
    10d4:	df 90       	pop	r13
    10d6:	cf 90       	pop	r12
    10d8:	bf 90       	pop	r11
    10da:	af 90       	pop	r10
    10dc:	9f 90       	pop	r9
    10de:	8f 90       	pop	r8
    10e0:	19 94       	eijmp

000010e2 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    10e2:	8f 92       	push	r8
    10e4:	9f 92       	push	r9
    10e6:	af 92       	push	r10
    10e8:	bf 92       	push	r11
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	ec 01       	movw	r28, r24
    10fc:	5b 01       	movw	r10, r22
    10fe:	4a 01       	movw	r8, r20
    1100:	69 01       	movw	r12, r18
    1102:	e8 81       	ld	r30, Y
    1104:	f9 81       	ldd	r31, Y+1	; 0x01
    1106:	02 84       	ldd	r0, Z+10	; 0x0a
    1108:	f3 85       	ldd	r31, Z+11	; 0x0b
    110a:	e0 2d       	mov	r30, r0
    110c:	19 95       	eicall
    110e:	95 01       	movw	r18, r10
    1110:	2c 0d       	add	r18, r12
    1112:	3d 1d       	adc	r19, r13
    1114:	21 50       	subi	r18, 0x01	; 1
    1116:	31 09       	sbc	r19, r1
    1118:	e8 81       	ld	r30, Y
    111a:	f9 81       	ldd	r31, Y+1	; 0x01
    111c:	04 88       	ldd	r0, Z+20	; 0x14
    111e:	f5 89       	ldd	r31, Z+21	; 0x15
    1120:	e0 2d       	mov	r30, r0
    1122:	78 01       	movw	r14, r16
    1124:	84 01       	movw	r16, r8
    1126:	a4 01       	movw	r20, r8
    1128:	b5 01       	movw	r22, r10
    112a:	ce 01       	movw	r24, r28
    112c:	19 95       	eicall
    112e:	e8 81       	ld	r30, Y
    1130:	f9 81       	ldd	r31, Y+1	; 0x01
    1132:	06 88       	ldd	r0, Z+22	; 0x16
    1134:	f7 89       	ldd	r31, Z+23	; 0x17
    1136:	e0 2d       	mov	r30, r0
    1138:	ce 01       	movw	r24, r28
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	ff 90       	pop	r15
    1144:	ef 90       	pop	r14
    1146:	df 90       	pop	r13
    1148:	cf 90       	pop	r12
    114a:	bf 90       	pop	r11
    114c:	af 90       	pop	r10
    114e:	9f 90       	pop	r9
    1150:	8f 90       	pop	r8
    1152:	19 94       	eijmp

00001154 <_ZN12Adafruit_GFX8fillRectEiiiij>:
    1154:	4f 92       	push	r4
    1156:	5f 92       	push	r5
    1158:	6f 92       	push	r6
    115a:	7f 92       	push	r7
    115c:	8f 92       	push	r8
    115e:	9f 92       	push	r9
    1160:	af 92       	push	r10
    1162:	bf 92       	push	r11
    1164:	cf 92       	push	r12
    1166:	df 92       	push	r13
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	6c 01       	movw	r12, r24
    1176:	2b 01       	movw	r4, r22
    1178:	5a 01       	movw	r10, r20
    117a:	39 01       	movw	r6, r18
    117c:	48 01       	movw	r8, r16
    117e:	dc 01       	movw	r26, r24
    1180:	ed 91       	ld	r30, X+
    1182:	fc 91       	ld	r31, X
    1184:	02 84       	ldd	r0, Z+10	; 0x0a
    1186:	f3 85       	ldd	r31, Z+11	; 0x0b
    1188:	e0 2d       	mov	r30, r0
    118a:	19 95       	eicall
    118c:	e2 01       	movw	r28, r4
    118e:	64 0c       	add	r6, r4
    1190:	75 1c       	adc	r7, r5
    1192:	d6 01       	movw	r26, r12
    1194:	ed 91       	ld	r30, X+
    1196:	fc 91       	ld	r31, X
    1198:	c6 15       	cp	r28, r6
    119a:	d7 05       	cpc	r29, r7
    119c:	5c f4       	brge	.+22     	; 0x11b4 <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    119e:	00 88       	ldd	r0, Z+16	; 0x10
    11a0:	f1 89       	ldd	r31, Z+17	; 0x11
    11a2:	e0 2d       	mov	r30, r0
    11a4:	87 01       	movw	r16, r14
    11a6:	94 01       	movw	r18, r8
    11a8:	a5 01       	movw	r20, r10
    11aa:	be 01       	movw	r22, r28
    11ac:	c6 01       	movw	r24, r12
    11ae:	19 95       	eicall
    11b0:	21 96       	adiw	r28, 0x01	; 1
    11b2:	ef cf       	rjmp	.-34     	; 0x1192 <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    11b4:	06 88       	ldd	r0, Z+22	; 0x16
    11b6:	f7 89       	ldd	r31, Z+23	; 0x17
    11b8:	e0 2d       	mov	r30, r0
    11ba:	c6 01       	movw	r24, r12
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	df 90       	pop	r13
    11ca:	cf 90       	pop	r12
    11cc:	bf 90       	pop	r11
    11ce:	af 90       	pop	r10
    11d0:	9f 90       	pop	r9
    11d2:	8f 90       	pop	r8
    11d4:	7f 90       	pop	r7
    11d6:	6f 90       	pop	r6
    11d8:	5f 90       	pop	r5
    11da:	4f 90       	pop	r4
    11dc:	19 94       	eijmp

000011de <_ZN12Adafruit_GFX10fillScreenEj>:
    11de:	ef 92       	push	r14
    11e0:	ff 92       	push	r15
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	dc 01       	movw	r26, r24
    11e8:	1a 96       	adiw	r26, 0x0a	; 10
    11ea:	0d 91       	ld	r16, X+
    11ec:	1c 91       	ld	r17, X
    11ee:	1b 97       	sbiw	r26, 0x0b	; 11
    11f0:	18 96       	adiw	r26, 0x08	; 8
    11f2:	2d 91       	ld	r18, X+
    11f4:	3c 91       	ld	r19, X
    11f6:	19 97       	sbiw	r26, 0x09	; 9
    11f8:	ed 91       	ld	r30, X+
    11fa:	fc 91       	ld	r31, X
    11fc:	00 a0       	ldd	r0, Z+32	; 0x20
    11fe:	f1 a1       	ldd	r31, Z+33	; 0x21
    1200:	e0 2d       	mov	r30, r0
    1202:	7b 01       	movw	r14, r22
    1204:	40 e0       	ldi	r20, 0x00	; 0
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	19 95       	eicall
    120e:	1f 91       	pop	r17
    1210:	0f 91       	pop	r16
    1212:	ff 90       	pop	r15
    1214:	ef 90       	pop	r14
    1216:	08 95       	ret

00001218 <_ZN12Adafruit_GFX8drawLineEiiiij>:
    1218:	8f 92       	push	r8
    121a:	9f 92       	push	r9
    121c:	af 92       	push	r10
    121e:	bf 92       	push	r11
    1220:	cf 92       	push	r12
    1222:	df 92       	push	r13
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	4c 01       	movw	r8, r24
    1232:	6b 01       	movw	r12, r22
    1234:	5a 01       	movw	r10, r20
    1236:	e9 01       	movw	r28, r18
    1238:	dc 01       	movw	r26, r24
    123a:	ed 91       	ld	r30, X+
    123c:	fc 91       	ld	r31, X
    123e:	62 17       	cp	r22, r18
    1240:	73 07       	cpc	r23, r19
    1242:	81 f4       	brne	.+32     	; 0x1264 <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    1244:	04 17       	cp	r16, r20
    1246:	15 07       	cpc	r17, r21
    1248:	24 f4       	brge	.+8      	; 0x1252 <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    124a:	8b 2d       	mov	r24, r11
    124c:	58 01       	movw	r10, r16
    124e:	04 2f       	mov	r16, r20
    1250:	18 2f       	mov	r17, r24
    1252:	0a 19       	sub	r16, r10
    1254:	1b 09       	sbc	r17, r11
    1256:	98 01       	movw	r18, r16
    1258:	2f 5f       	subi	r18, 0xFF	; 255
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
    125c:	04 8c       	ldd	r0, Z+28	; 0x1c
    125e:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1260:	e0 2d       	mov	r30, r0
    1262:	12 c0       	rjmp	.+36     	; 0x1288 <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    1264:	40 17       	cp	r20, r16
    1266:	51 07       	cpc	r21, r17
    1268:	09 f5       	brne	.+66     	; 0x12ac <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    126a:	26 17       	cp	r18, r22
    126c:	37 07       	cpc	r19, r23
    126e:	24 f4       	brge	.+8      	; 0x1278 <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    1270:	8d 2d       	mov	r24, r13
    1272:	69 01       	movw	r12, r18
    1274:	c6 2f       	mov	r28, r22
    1276:	d8 2f       	mov	r29, r24
    1278:	9e 01       	movw	r18, r28
    127a:	2c 19       	sub	r18, r12
    127c:	3d 09       	sbc	r19, r13
    127e:	2f 5f       	subi	r18, 0xFF	; 255
    1280:	3f 4f       	sbci	r19, 0xFF	; 255
    1282:	06 8c       	ldd	r0, Z+30	; 0x1e
    1284:	f7 8d       	ldd	r31, Z+31	; 0x1f
    1286:	e0 2d       	mov	r30, r0
    1288:	87 01       	movw	r16, r14
    128a:	a5 01       	movw	r20, r10
    128c:	b6 01       	movw	r22, r12
    128e:	c4 01       	movw	r24, r8
    1290:	19 95       	eicall
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	ff 90       	pop	r15
    129c:	ef 90       	pop	r14
    129e:	df 90       	pop	r13
    12a0:	cf 90       	pop	r12
    12a2:	bf 90       	pop	r11
    12a4:	af 90       	pop	r10
    12a6:	9f 90       	pop	r9
    12a8:	8f 90       	pop	r8
    12aa:	08 95       	ret
    12ac:	02 84       	ldd	r0, Z+10	; 0x0a
    12ae:	f3 85       	ldd	r31, Z+11	; 0x0b
    12b0:	e0 2d       	mov	r30, r0
    12b2:	19 95       	eicall
    12b4:	d4 01       	movw	r26, r8
    12b6:	ed 91       	ld	r30, X+
    12b8:	fc 91       	ld	r31, X
    12ba:	04 88       	ldd	r0, Z+20	; 0x14
    12bc:	f5 89       	ldd	r31, Z+21	; 0x15
    12be:	e0 2d       	mov	r30, r0
    12c0:	9e 01       	movw	r18, r28
    12c2:	a5 01       	movw	r20, r10
    12c4:	b6 01       	movw	r22, r12
    12c6:	c4 01       	movw	r24, r8
    12c8:	19 95       	eicall
    12ca:	d4 01       	movw	r26, r8
    12cc:	ed 91       	ld	r30, X+
    12ce:	fc 91       	ld	r31, X
    12d0:	06 88       	ldd	r0, Z+22	; 0x16
    12d2:	f7 89       	ldd	r31, Z+23	; 0x17
    12d4:	e0 2d       	mov	r30, r0
    12d6:	c4 01       	movw	r24, r8
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	df 90       	pop	r13
    12e6:	cf 90       	pop	r12
    12e8:	bf 90       	pop	r11
    12ea:	af 90       	pop	r10
    12ec:	9f 90       	pop	r9
    12ee:	8f 90       	pop	r8
    12f0:	19 94       	eijmp

000012f2 <_ZN12Adafruit_GFX8drawRectEiiiij>:
    12f2:	6f 92       	push	r6
    12f4:	7f 92       	push	r7
    12f6:	8f 92       	push	r8
    12f8:	9f 92       	push	r9
    12fa:	af 92       	push	r10
    12fc:	bf 92       	push	r11
    12fe:	cf 92       	push	r12
    1300:	df 92       	push	r13
    1302:	ef 92       	push	r14
    1304:	ff 92       	push	r15
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	ec 01       	movw	r28, r24
    1310:	4b 01       	movw	r8, r22
    1312:	5a 01       	movw	r10, r20
    1314:	69 01       	movw	r12, r18
    1316:	38 01       	movw	r6, r16
    1318:	e8 81       	ld	r30, Y
    131a:	f9 81       	ldd	r31, Y+1	; 0x01
    131c:	02 84       	ldd	r0, Z+10	; 0x0a
    131e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1320:	e0 2d       	mov	r30, r0
    1322:	19 95       	eicall
    1324:	e8 81       	ld	r30, Y
    1326:	f9 81       	ldd	r31, Y+1	; 0x01
    1328:	02 88       	ldd	r0, Z+18	; 0x12
    132a:	f3 89       	ldd	r31, Z+19	; 0x13
    132c:	e0 2d       	mov	r30, r0
    132e:	87 01       	movw	r16, r14
    1330:	96 01       	movw	r18, r12
    1332:	a5 01       	movw	r20, r10
    1334:	b4 01       	movw	r22, r8
    1336:	ce 01       	movw	r24, r28
    1338:	19 95       	eicall
    133a:	a5 01       	movw	r20, r10
    133c:	46 0d       	add	r20, r6
    133e:	57 1d       	adc	r21, r7
    1340:	41 50       	subi	r20, 0x01	; 1
    1342:	51 09       	sbc	r21, r1
    1344:	e8 81       	ld	r30, Y
    1346:	f9 81       	ldd	r31, Y+1	; 0x01
    1348:	02 88       	ldd	r0, Z+18	; 0x12
    134a:	f3 89       	ldd	r31, Z+19	; 0x13
    134c:	e0 2d       	mov	r30, r0
    134e:	96 01       	movw	r18, r12
    1350:	b4 01       	movw	r22, r8
    1352:	ce 01       	movw	r24, r28
    1354:	19 95       	eicall
    1356:	e8 81       	ld	r30, Y
    1358:	f9 81       	ldd	r31, Y+1	; 0x01
    135a:	00 88       	ldd	r0, Z+16	; 0x10
    135c:	f1 89       	ldd	r31, Z+17	; 0x11
    135e:	e0 2d       	mov	r30, r0
    1360:	93 01       	movw	r18, r6
    1362:	a5 01       	movw	r20, r10
    1364:	b4 01       	movw	r22, r8
    1366:	ce 01       	movw	r24, r28
    1368:	19 95       	eicall
    136a:	c8 0c       	add	r12, r8
    136c:	d9 1c       	adc	r13, r9
    136e:	b6 01       	movw	r22, r12
    1370:	61 50       	subi	r22, 0x01	; 1
    1372:	71 09       	sbc	r23, r1
    1374:	e8 81       	ld	r30, Y
    1376:	f9 81       	ldd	r31, Y+1	; 0x01
    1378:	00 88       	ldd	r0, Z+16	; 0x10
    137a:	f1 89       	ldd	r31, Z+17	; 0x11
    137c:	e0 2d       	mov	r30, r0
    137e:	93 01       	movw	r18, r6
    1380:	a5 01       	movw	r20, r10
    1382:	ce 01       	movw	r24, r28
    1384:	19 95       	eicall
    1386:	e8 81       	ld	r30, Y
    1388:	f9 81       	ldd	r31, Y+1	; 0x01
    138a:	06 88       	ldd	r0, Z+22	; 0x16
    138c:	f7 89       	ldd	r31, Z+23	; 0x17
    138e:	e0 2d       	mov	r30, r0
    1390:	ce 01       	movw	r24, r28
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	df 90       	pop	r13
    13a0:	cf 90       	pop	r12
    13a2:	bf 90       	pop	r11
    13a4:	af 90       	pop	r10
    13a6:	9f 90       	pop	r9
    13a8:	8f 90       	pop	r8
    13aa:	7f 90       	pop	r7
    13ac:	6f 90       	pop	r6
    13ae:	19 94       	eijmp

000013b0 <_ZN12Adafruit_GFX13invertDisplayEb>:
    13b0:	08 95       	ret

000013b2 <_ZN12Adafruit_GFX11setRotationEh>:
    13b2:	fc 01       	movw	r30, r24
    13b4:	63 70       	andi	r22, 0x03	; 3
    13b6:	66 8b       	std	Z+22, r22	; 0x16
    13b8:	84 81       	ldd	r24, Z+4	; 0x04
    13ba:	95 81       	ldd	r25, Z+5	; 0x05
    13bc:	26 81       	ldd	r18, Z+6	; 0x06
    13be:	37 81       	ldd	r19, Z+7	; 0x07
    13c0:	61 30       	cpi	r22, 0x01	; 1
    13c2:	39 f0       	breq	.+14     	; 0x13d2 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    13c4:	63 30       	cpi	r22, 0x03	; 3
    13c6:	29 f0       	breq	.+10     	; 0x13d2 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    13c8:	91 87       	std	Z+9, r25	; 0x09
    13ca:	80 87       	std	Z+8, r24	; 0x08
    13cc:	33 87       	std	Z+11, r19	; 0x0b
    13ce:	22 87       	std	Z+10, r18	; 0x0a
    13d0:	08 95       	ret
    13d2:	31 87       	std	Z+9, r19	; 0x09
    13d4:	20 87       	std	Z+8, r18	; 0x08
    13d6:	93 87       	std	Z+11, r25	; 0x0b
    13d8:	82 87       	std	Z+10, r24	; 0x0a
    13da:	08 95       	ret

000013dc <_ZN12Adafruit_GFXC1Eii>:
    13dc:	fc 01       	movw	r30, r24
    13de:	13 82       	std	Z+3, r1	; 0x03
    13e0:	12 82       	std	Z+2, r1	; 0x02
    13e2:	83 e1       	ldi	r24, 0x13	; 19
    13e4:	92 e0       	ldi	r25, 0x02	; 2
    13e6:	91 83       	std	Z+1, r25	; 0x01
    13e8:	80 83       	st	Z, r24
    13ea:	75 83       	std	Z+5, r23	; 0x05
    13ec:	64 83       	std	Z+4, r22	; 0x04
    13ee:	57 83       	std	Z+7, r21	; 0x07
    13f0:	46 83       	std	Z+6, r20	; 0x06
    13f2:	71 87       	std	Z+9, r23	; 0x09
    13f4:	60 87       	std	Z+8, r22	; 0x08
    13f6:	53 87       	std	Z+11, r21	; 0x0b
    13f8:	42 87       	std	Z+10, r20	; 0x0a
    13fa:	16 8a       	std	Z+22, r1	; 0x16
    13fc:	15 86       	std	Z+13, r1	; 0x0d
    13fe:	14 86       	std	Z+12, r1	; 0x0c
    1400:	17 86       	std	Z+15, r1	; 0x0f
    1402:	16 86       	std	Z+14, r1	; 0x0e
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	85 8b       	std	Z+21, r24	; 0x15
    1408:	84 8b       	std	Z+20, r24	; 0x14
    140a:	2f ef       	ldi	r18, 0xFF	; 255
    140c:	3f ef       	ldi	r19, 0xFF	; 255
    140e:	33 8b       	std	Z+19, r19	; 0x13
    1410:	22 8b       	std	Z+18, r18	; 0x12
    1412:	31 8b       	std	Z+17, r19	; 0x11
    1414:	20 8b       	std	Z+16, r18	; 0x10
    1416:	87 8b       	std	Z+23, r24	; 0x17
    1418:	10 8e       	std	Z+24, r1	; 0x18
    141a:	12 8e       	std	Z+26, r1	; 0x1a
    141c:	11 8e       	std	Z+25, r1	; 0x19
    141e:	08 95       	ret

00001420 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>:
    1420:	3f 92       	push	r3
    1422:	4f 92       	push	r4
    1424:	5f 92       	push	r5
    1426:	6f 92       	push	r6
    1428:	7f 92       	push	r7
    142a:	8f 92       	push	r8
    142c:	9f 92       	push	r9
    142e:	af 92       	push	r10
    1430:	bf 92       	push	r11
    1432:	cf 92       	push	r12
    1434:	df 92       	push	r13
    1436:	ef 92       	push	r14
    1438:	ff 92       	push	r15
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	2a 97       	sbiw	r28, 0x0a	; 10
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	5c 01       	movw	r10, r24
    1454:	7e 83       	std	Y+6, r23	; 0x06
    1456:	6d 83       	std	Y+5, r22	; 0x05
    1458:	58 87       	std	Y+8, r21	; 0x08
    145a:	4f 83       	std	Y+7, r20	; 0x07
    145c:	29 01       	movw	r4, r18
    145e:	37 01       	movw	r6, r14
    1460:	dc 01       	movw	r26, r24
    1462:	ed 91       	ld	r30, X+
    1464:	fc 91       	ld	r31, X
    1466:	02 84       	ldd	r0, Z+10	; 0x0a
    1468:	f3 85       	ldd	r31, Z+11	; 0x0b
    146a:	e0 2d       	mov	r30, r0
    146c:	19 95       	eicall
    146e:	c8 01       	movw	r24, r16
    1470:	07 96       	adiw	r24, 0x07	; 7
    1472:	97 fd       	sbrc	r25, 7
    1474:	07 96       	adiw	r24, 0x07	; 7
    1476:	9c 01       	movw	r18, r24
    1478:	93 e0       	ldi	r25, 0x03	; 3
    147a:	35 95       	asr	r19
    147c:	27 95       	ror	r18
    147e:	9a 95       	dec	r25
    1480:	e1 f7       	brne	.-8      	; 0x147a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x5a>
    1482:	3a 83       	std	Y+2, r19	; 0x02
    1484:	29 83       	std	Y+1, r18	; 0x01
    1486:	81 2c       	mov	r8, r1
    1488:	91 2c       	mov	r9, r1
    148a:	e1 2c       	mov	r14, r1
    148c:	f1 2c       	mov	r15, r1
    148e:	31 2c       	mov	r3, r1
    1490:	8f 81       	ldd	r24, Y+7	; 0x07
    1492:	98 85       	ldd	r25, Y+8	; 0x08
    1494:	8e 0d       	add	r24, r14
    1496:	9f 1d       	adc	r25, r15
    1498:	9c 83       	std	Y+4, r25	; 0x04
    149a:	8b 83       	std	Y+3, r24	; 0x03
    149c:	e6 14       	cp	r14, r6
    149e:	f7 04       	cpc	r15, r7
    14a0:	0c f0       	brlt	.+2      	; 0x14a4 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x84>
    14a2:	3d c0       	rjmp	.+122    	; 0x151e <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xfe>
    14a4:	1a 86       	std	Y+10, r1	; 0x0a
    14a6:	19 86       	std	Y+9, r1	; 0x09
    14a8:	a9 85       	ldd	r26, Y+9	; 0x09
    14aa:	ba 85       	ldd	r27, Y+10	; 0x0a
    14ac:	a0 17       	cp	r26, r16
    14ae:	b1 07       	cpc	r27, r17
    14b0:	74 f5       	brge	.+92     	; 0x150e <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xee>
    14b2:	cd 01       	movw	r24, r26
    14b4:	87 70       	andi	r24, 0x07	; 7
    14b6:	99 27       	eor	r25, r25
    14b8:	89 2b       	or	r24, r25
    14ba:	11 f0       	breq	.+4      	; 0x14c0 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xa0>
    14bc:	33 0c       	add	r3, r3
    14be:	0e c0       	rjmp	.+28     	; 0x14dc <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xbc>
    14c0:	e9 85       	ldd	r30, Y+9	; 0x09
    14c2:	fa 85       	ldd	r31, Y+10	; 0x0a
    14c4:	f7 fd       	sbrc	r31, 7
    14c6:	37 96       	adiw	r30, 0x07	; 7
    14c8:	83 e0       	ldi	r24, 0x03	; 3
    14ca:	f5 95       	asr	r31
    14cc:	e7 95       	ror	r30
    14ce:	8a 95       	dec	r24
    14d0:	e1 f7       	brne	.-8      	; 0x14ca <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xaa>
    14d2:	e8 0d       	add	r30, r8
    14d4:	f9 1d       	adc	r31, r9
    14d6:	e4 0d       	add	r30, r4
    14d8:	f5 1d       	adc	r31, r5
    14da:	34 90       	lpm	r3, Z
    14dc:	37 fe       	sbrs	r3, 7
    14de:	11 c0       	rjmp	.+34     	; 0x1502 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xe2>
    14e0:	d5 01       	movw	r26, r10
    14e2:	ed 91       	ld	r30, X+
    14e4:	fc 91       	ld	r31, X
    14e6:	04 84       	ldd	r0, Z+12	; 0x0c
    14e8:	f5 85       	ldd	r31, Z+13	; 0x0d
    14ea:	e0 2d       	mov	r30, r0
    14ec:	96 01       	movw	r18, r12
    14ee:	4b 81       	ldd	r20, Y+3	; 0x03
    14f0:	5c 81       	ldd	r21, Y+4	; 0x04
    14f2:	6d 81       	ldd	r22, Y+5	; 0x05
    14f4:	7e 81       	ldd	r23, Y+6	; 0x06
    14f6:	89 85       	ldd	r24, Y+9	; 0x09
    14f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fa:	68 0f       	add	r22, r24
    14fc:	79 1f       	adc	r23, r25
    14fe:	c5 01       	movw	r24, r10
    1500:	19 95       	eicall
    1502:	a9 85       	ldd	r26, Y+9	; 0x09
    1504:	ba 85       	ldd	r27, Y+10	; 0x0a
    1506:	11 96       	adiw	r26, 0x01	; 1
    1508:	ba 87       	std	Y+10, r27	; 0x0a
    150a:	a9 87       	std	Y+9, r26	; 0x09
    150c:	cd cf       	rjmp	.-102    	; 0x14a8 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x88>
    150e:	bf ef       	ldi	r27, 0xFF	; 255
    1510:	eb 1a       	sub	r14, r27
    1512:	fb 0a       	sbc	r15, r27
    1514:	29 81       	ldd	r18, Y+1	; 0x01
    1516:	3a 81       	ldd	r19, Y+2	; 0x02
    1518:	82 0e       	add	r8, r18
    151a:	93 1e       	adc	r9, r19
    151c:	b9 cf       	rjmp	.-142    	; 0x1490 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x70>
    151e:	d5 01       	movw	r26, r10
    1520:	ed 91       	ld	r30, X+
    1522:	fc 91       	ld	r31, X
    1524:	06 88       	ldd	r0, Z+22	; 0x16
    1526:	f7 89       	ldd	r31, Z+23	; 0x17
    1528:	e0 2d       	mov	r30, r0
    152a:	c5 01       	movw	r24, r10
    152c:	2a 96       	adiw	r28, 0x0a	; 10
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	ff 90       	pop	r15
    1542:	ef 90       	pop	r14
    1544:	df 90       	pop	r13
    1546:	cf 90       	pop	r12
    1548:	bf 90       	pop	r11
    154a:	af 90       	pop	r10
    154c:	9f 90       	pop	r9
    154e:	8f 90       	pop	r8
    1550:	7f 90       	pop	r7
    1552:	6f 90       	pop	r6
    1554:	5f 90       	pop	r5
    1556:	4f 90       	pop	r4
    1558:	3f 90       	pop	r3
    155a:	19 94       	eijmp

0000155c <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    155c:	2f 92       	push	r2
    155e:	3f 92       	push	r3
    1560:	4f 92       	push	r4
    1562:	5f 92       	push	r5
    1564:	6f 92       	push	r6
    1566:	7f 92       	push	r7
    1568:	8f 92       	push	r8
    156a:	9f 92       	push	r9
    156c:	af 92       	push	r10
    156e:	bf 92       	push	r11
    1570:	cf 92       	push	r12
    1572:	df 92       	push	r13
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	6b 97       	sbiw	r28, 0x1b	; 27
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	9b 8f       	std	Y+27, r25	; 0x1b
    1592:	8a 8f       	std	Y+26, r24	; 0x1a
    1594:	2b 01       	movw	r4, r22
    1596:	5a 83       	std	Y+2, r21	; 0x02
    1598:	49 83       	std	Y+1, r20	; 0x01
    159a:	d2 2e       	mov	r13, r18
    159c:	19 87       	std	Y+9, r17	; 0x09
    159e:	08 87       	std	Y+8, r16	; 0x08
    15a0:	47 01       	movw	r8, r14
    15a2:	ab 82       	std	Y+3, r10	; 0x03
    15a4:	dc 01       	movw	r26, r24
    15a6:	59 96       	adiw	r26, 0x19	; 25
    15a8:	2d 91       	ld	r18, X+
    15aa:	3c 91       	ld	r19, X
    15ac:	5a 97       	sbiw	r26, 0x1a	; 26
    15ae:	21 15       	cp	r18, r1
    15b0:	31 05       	cpc	r19, r1
    15b2:	09 f0       	breq	.+2      	; 0x15b6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5a>
    15b4:	00 c1       	rjmp	.+512    	; 0x17b6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x25a>
    15b6:	18 96       	adiw	r26, 0x08	; 8
    15b8:	8d 91       	ld	r24, X+
    15ba:	9c 91       	ld	r25, X
    15bc:	19 97       	sbiw	r26, 0x09	; 9
    15be:	68 17       	cp	r22, r24
    15c0:	79 07       	cpc	r23, r25
    15c2:	0c f0       	brlt	.+2      	; 0x15c6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x6a>
    15c4:	e7 c1       	rjmp	.+974    	; 0x1994 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    15c6:	1a 96       	adiw	r26, 0x0a	; 10
    15c8:	8d 91       	ld	r24, X+
    15ca:	9c 91       	ld	r25, X
    15cc:	1b 97       	sbiw	r26, 0x0b	; 11
    15ce:	48 17       	cp	r20, r24
    15d0:	59 07       	cpc	r21, r25
    15d2:	0c f0       	brlt	.+2      	; 0x15d6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x7a>
    15d4:	df c1       	rjmp	.+958    	; 0x1994 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    15d6:	2c 2c       	mov	r2, r12
    15d8:	31 2c       	mov	r3, r1
    15da:	fb 01       	movw	r30, r22
    15dc:	26 e0       	ldi	r18, 0x06	; 6
    15de:	c2 9e       	mul	r12, r18
    15e0:	e0 0d       	add	r30, r0
    15e2:	f1 1d       	adc	r31, r1
    15e4:	11 24       	eor	r1, r1
    15e6:	fd 87       	std	Y+13, r31	; 0x0d
    15e8:	ec 87       	std	Y+12, r30	; 0x0c
    15ea:	1e 16       	cp	r1, r30
    15ec:	1f 06       	cpc	r1, r31
    15ee:	0c f0       	brlt	.+2      	; 0x15f2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x96>
    15f0:	d1 c1       	rjmp	.+930    	; 0x1994 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    15f2:	4a 2d       	mov	r20, r10
    15f4:	50 e0       	ldi	r21, 0x00	; 0
    15f6:	5b 87       	std	Y+11, r21	; 0x0b
    15f8:	4a 87       	std	Y+10, r20	; 0x0a
    15fa:	83 e0       	ldi	r24, 0x03	; 3
    15fc:	44 0f       	add	r20, r20
    15fe:	55 1f       	adc	r21, r21
    1600:	8a 95       	dec	r24
    1602:	e1 f7       	brne	.-8      	; 0x15fc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa0>
    1604:	5f 87       	std	Y+15, r21	; 0x0f
    1606:	4e 87       	std	Y+14, r20	; 0x0e
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	9a 81       	ldd	r25, Y+2	; 0x02
    160c:	84 0f       	add	r24, r20
    160e:	95 1f       	adc	r25, r21
    1610:	18 16       	cp	r1, r24
    1612:	19 06       	cpc	r1, r25
    1614:	0c f0       	brlt	.+2      	; 0x1618 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xbc>
    1616:	be c1       	rjmp	.+892    	; 0x1994 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    1618:	58 96       	adiw	r26, 0x18	; 24
    161a:	8c 91       	ld	r24, X
    161c:	81 11       	cpse	r24, r1
    161e:	04 c0       	rjmp	.+8      	; 0x1628 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    1620:	6f ea       	ldi	r22, 0xAF	; 175
    1622:	6d 15       	cp	r22, r13
    1624:	08 f4       	brcc	.+2      	; 0x1628 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    1626:	d3 94       	inc	r13
    1628:	aa 8d       	ldd	r26, Y+26	; 0x1a
    162a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    162c:	ed 91       	ld	r30, X+
    162e:	fc 91       	ld	r31, X
    1630:	11 97       	sbiw	r26, 0x01	; 1
    1632:	02 84       	ldd	r0, Z+10	; 0x0a
    1634:	f3 85       	ldd	r31, Z+11	; 0x0b
    1636:	e0 2d       	mov	r30, r0
    1638:	cd 01       	movw	r24, r26
    163a:	19 95       	eicall
    163c:	b5 e0       	ldi	r27, 0x05	; 5
    163e:	db 9e       	mul	r13, r27
    1640:	c0 01       	movw	r24, r0
    1642:	11 24       	eor	r1, r1
    1644:	ec 2d       	mov	r30, r12
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	f9 8b       	std	Y+17, r31	; 0x11
    164a:	e8 8b       	std	Y+16, r30	; 0x10
    164c:	92 01       	movw	r18, r4
    164e:	2b 5f       	subi	r18, 0xFB	; 251
    1650:	3f 4f       	sbci	r19, 0xFF	; 255
    1652:	3b 8b       	std	Y+19, r19	; 0x13
    1654:	2a 8b       	std	Y+18, r18	; 0x12
    1656:	32 01       	movw	r6, r4
    1658:	5d 82       	std	Y+5, r5	; 0x05
    165a:	4c 82       	std	Y+4, r4	; 0x04
    165c:	ac 01       	movw	r20, r24
    165e:	44 19       	sub	r20, r4
    1660:	55 09       	sbc	r21, r5
    1662:	5d 8b       	std	Y+21, r21	; 0x15
    1664:	4c 8b       	std	Y+20, r20	; 0x14
    1666:	7b 81       	ldd	r23, Y+3	; 0x03
    1668:	67 2f       	mov	r22, r23
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	7f 8b       	std	Y+23, r23	; 0x17
    166e:	6e 8b       	std	Y+22, r22	; 0x16
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	9a 81       	ldd	r25, Y+2	; 0x02
    1674:	08 96       	adiw	r24, 0x08	; 8
    1676:	99 8f       	std	Y+25, r25	; 0x19
    1678:	88 8f       	std	Y+24, r24	; 0x18
    167a:	ec 89       	ldd	r30, Y+20	; 0x14
    167c:	fd 89       	ldd	r31, Y+21	; 0x15
    167e:	e6 0d       	add	r30, r6
    1680:	f7 1d       	adc	r31, r7
    1682:	ee 5d       	subi	r30, 0xDE	; 222
    1684:	fe 4f       	sbci	r31, 0xFE	; 254
    1686:	d4 90       	lpm	r13, Z
    1688:	a9 81       	ldd	r26, Y+1	; 0x01
    168a:	ba 81       	ldd	r27, Y+2	; 0x02
    168c:	bf 83       	std	Y+7, r27	; 0x07
    168e:	ae 83       	std	Y+6, r26	; 0x06
    1690:	5d 01       	movw	r10, r26
    1692:	d0 fe       	sbrs	r13, 0
    1694:	16 c0       	rjmp	.+44     	; 0x16c2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x166>
    1696:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1698:	bb 8d       	ldd	r27, Y+27	; 0x1b
    169a:	ed 91       	ld	r30, X+
    169c:	fc 91       	ld	r31, X
    169e:	b1 e0       	ldi	r27, 0x01	; 1
    16a0:	cb 12       	cpse	r12, r27
    16a2:	09 c0       	rjmp	.+18     	; 0x16b6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    16a4:	2b 81       	ldd	r18, Y+3	; 0x03
    16a6:	21 30       	cpi	r18, 0x01	; 1
    16a8:	31 f4       	brne	.+12     	; 0x16b6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    16aa:	04 84       	ldd	r0, Z+12	; 0x0c
    16ac:	f5 85       	ldd	r31, Z+13	; 0x0d
    16ae:	e0 2d       	mov	r30, r0
    16b0:	28 85       	ldd	r18, Y+8	; 0x08
    16b2:	39 85       	ldd	r19, Y+9	; 0x09
    16b4:	19 c0       	rjmp	.+50     	; 0x16e8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x18c>
    16b6:	06 84       	ldd	r0, Z+14	; 0x0e
    16b8:	f7 85       	ldd	r31, Z+15	; 0x0f
    16ba:	e0 2d       	mov	r30, r0
    16bc:	e8 84       	ldd	r14, Y+8	; 0x08
    16be:	f9 84       	ldd	r15, Y+9	; 0x09
    16c0:	1d c0       	rjmp	.+58     	; 0x16fc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a0>
    16c2:	48 85       	ldd	r20, Y+8	; 0x08
    16c4:	59 85       	ldd	r21, Y+9	; 0x09
    16c6:	48 15       	cp	r20, r8
    16c8:	59 05       	cpc	r21, r9
    16ca:	11 f1       	breq	.+68     	; 0x1710 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    16cc:	aa 8d       	ldd	r26, Y+26	; 0x1a
    16ce:	bb 8d       	ldd	r27, Y+27	; 0x1b
    16d0:	ed 91       	ld	r30, X+
    16d2:	fc 91       	ld	r31, X
    16d4:	b1 e0       	ldi	r27, 0x01	; 1
    16d6:	cb 12       	cpse	r12, r27
    16d8:	0d c0       	rjmp	.+26     	; 0x16f4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    16da:	2b 81       	ldd	r18, Y+3	; 0x03
    16dc:	21 30       	cpi	r18, 0x01	; 1
    16de:	51 f4       	brne	.+20     	; 0x16f4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    16e0:	04 84       	ldd	r0, Z+12	; 0x0c
    16e2:	f5 85       	ldd	r31, Z+13	; 0x0d
    16e4:	e0 2d       	mov	r30, r0
    16e6:	94 01       	movw	r18, r8
    16e8:	a5 01       	movw	r20, r10
    16ea:	b3 01       	movw	r22, r6
    16ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16f0:	19 95       	eicall
    16f2:	0e c0       	rjmp	.+28     	; 0x1710 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    16f4:	06 84       	ldd	r0, Z+14	; 0x0e
    16f6:	f7 85       	ldd	r31, Z+15	; 0x0f
    16f8:	e0 2d       	mov	r30, r0
    16fa:	74 01       	movw	r14, r8
    16fc:	0a 85       	ldd	r16, Y+10	; 0x0a
    16fe:	1b 85       	ldd	r17, Y+11	; 0x0b
    1700:	91 01       	movw	r18, r2
    1702:	4e 81       	ldd	r20, Y+6	; 0x06
    1704:	5f 81       	ldd	r21, Y+7	; 0x07
    1706:	6c 81       	ldd	r22, Y+4	; 0x04
    1708:	7d 81       	ldd	r23, Y+5	; 0x05
    170a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    170c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    170e:	19 95       	eicall
    1710:	d6 94       	lsr	r13
    1712:	4e 81       	ldd	r20, Y+6	; 0x06
    1714:	5f 81       	ldd	r21, Y+7	; 0x07
    1716:	6e 89       	ldd	r22, Y+22	; 0x16
    1718:	7f 89       	ldd	r23, Y+23	; 0x17
    171a:	46 0f       	add	r20, r22
    171c:	57 1f       	adc	r21, r23
    171e:	5f 83       	std	Y+7, r21	; 0x07
    1720:	4e 83       	std	Y+6, r20	; 0x06
    1722:	7f ef       	ldi	r23, 0xFF	; 255
    1724:	a7 1a       	sub	r10, r23
    1726:	b7 0a       	sbc	r11, r23
    1728:	88 8d       	ldd	r24, Y+24	; 0x18
    172a:	99 8d       	ldd	r25, Y+25	; 0x19
    172c:	a8 16       	cp	r10, r24
    172e:	b9 06       	cpc	r11, r25
    1730:	09 f0       	breq	.+2      	; 0x1734 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1d8>
    1732:	af cf       	rjmp	.-162    	; 0x1692 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x136>
    1734:	ac 81       	ldd	r26, Y+4	; 0x04
    1736:	bd 81       	ldd	r27, Y+5	; 0x05
    1738:	e8 89       	ldd	r30, Y+16	; 0x10
    173a:	f9 89       	ldd	r31, Y+17	; 0x11
    173c:	ae 0f       	add	r26, r30
    173e:	bf 1f       	adc	r27, r31
    1740:	bd 83       	std	Y+5, r27	; 0x05
    1742:	ac 83       	std	Y+4, r26	; 0x04
    1744:	ff ef       	ldi	r31, 0xFF	; 255
    1746:	6f 1a       	sub	r6, r31
    1748:	7f 0a       	sbc	r7, r31
    174a:	2a 89       	ldd	r18, Y+18	; 0x12
    174c:	3b 89       	ldd	r19, Y+19	; 0x13
    174e:	62 16       	cp	r6, r18
    1750:	73 06       	cpc	r7, r19
    1752:	09 f0       	breq	.+2      	; 0x1756 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1fa>
    1754:	92 cf       	rjmp	.-220    	; 0x167a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x11e>
    1756:	48 85       	ldd	r20, Y+8	; 0x08
    1758:	59 85       	ldd	r21, Y+9	; 0x09
    175a:	48 15       	cp	r20, r8
    175c:	59 05       	cpc	r21, r9
    175e:	09 f4       	brne	.+2      	; 0x1762 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x206>
    1760:	f7 c0       	rjmp	.+494    	; 0x1950 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    1762:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1764:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1766:	ed 91       	ld	r30, X+
    1768:	fc 91       	ld	r31, X
    176a:	b1 e0       	ldi	r27, 0x01	; 1
    176c:	cb 12       	cpse	r12, r27
    176e:	12 c0       	rjmp	.+36     	; 0x1794 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    1770:	2b 81       	ldd	r18, Y+3	; 0x03
    1772:	21 30       	cpi	r18, 0x01	; 1
    1774:	79 f4       	brne	.+30     	; 0x1794 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    1776:	b2 01       	movw	r22, r4
    1778:	6b 5f       	subi	r22, 0xFB	; 251
    177a:	7f 4f       	sbci	r23, 0xFF	; 255
    177c:	00 88       	ldd	r0, Z+16	; 0x10
    177e:	f1 89       	ldd	r31, Z+17	; 0x11
    1780:	e0 2d       	mov	r30, r0
    1782:	84 01       	movw	r16, r8
    1784:	28 e0       	ldi	r18, 0x08	; 8
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	49 81       	ldd	r20, Y+1	; 0x01
    178a:	5a 81       	ldd	r21, Y+2	; 0x02
    178c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    178e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1790:	19 95       	eicall
    1792:	de c0       	rjmp	.+444    	; 0x1950 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    1794:	6c 85       	ldd	r22, Y+12	; 0x0c
    1796:	7d 85       	ldd	r23, Y+13	; 0x0d
    1798:	62 19       	sub	r22, r2
    179a:	73 09       	sbc	r23, r3
    179c:	06 84       	ldd	r0, Z+14	; 0x0e
    179e:	f7 85       	ldd	r31, Z+15	; 0x0f
    17a0:	e0 2d       	mov	r30, r0
    17a2:	74 01       	movw	r14, r8
    17a4:	0e 85       	ldd	r16, Y+14	; 0x0e
    17a6:	1f 85       	ldd	r17, Y+15	; 0x0f
    17a8:	91 01       	movw	r18, r2
    17aa:	49 81       	ldd	r20, Y+1	; 0x01
    17ac:	5a 81       	ldd	r21, Y+2	; 0x02
    17ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17b0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17b2:	19 95       	eicall
    17b4:	cd c0       	rjmp	.+410    	; 0x1950 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    17b6:	f9 01       	movw	r30, r18
    17b8:	34 96       	adiw	r30, 0x04	; 4
    17ba:	e4 91       	lpm	r30, Z
    17bc:	de 1a       	sub	r13, r30
    17be:	f9 01       	movw	r30, r18
    17c0:	32 96       	adiw	r30, 0x02	; 2
    17c2:	85 91       	lpm	r24, Z+
    17c4:	94 91       	lpm	r25, Z
    17c6:	b7 e0       	ldi	r27, 0x07	; 7
    17c8:	db 9e       	mul	r13, r27
    17ca:	80 0d       	add	r24, r0
    17cc:	91 1d       	adc	r25, r1
    17ce:	11 24       	eor	r1, r1
    17d0:	f9 01       	movw	r30, r18
    17d2:	25 91       	lpm	r18, Z+
    17d4:	34 91       	lpm	r19, Z
    17d6:	39 8b       	std	Y+17, r19	; 0x11
    17d8:	28 8b       	std	Y+16, r18	; 0x10
    17da:	fc 01       	movw	r30, r24
    17dc:	25 90       	lpm	r2, Z+
    17de:	34 90       	lpm	r3, Z
    17e0:	fc 01       	movw	r30, r24
    17e2:	32 96       	adiw	r30, 0x02	; 2
    17e4:	74 90       	lpm	r7, Z
    17e6:	31 96       	adiw	r30, 0x01	; 1
    17e8:	a4 90       	lpm	r10, Z
    17ea:	32 96       	adiw	r30, 0x02	; 2
    17ec:	94 90       	lpm	r9, Z
    17ee:	31 96       	adiw	r30, 0x01	; 1
    17f0:	b4 90       	lpm	r11, Z
    17f2:	31 e0       	ldi	r19, 0x01	; 1
    17f4:	3c 15       	cp	r19, r12
    17f6:	18 f0       	brcs	.+6      	; 0x17fe <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2a2>
    17f8:	4b 81       	ldd	r20, Y+3	; 0x03
    17fa:	42 30       	cpi	r20, 0x02	; 2
    17fc:	68 f0       	brcs	.+26     	; 0x1818 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2bc>
    17fe:	69 2d       	mov	r22, r9
    1800:	09 2c       	mov	r0, r9
    1802:	00 0c       	add	r0, r0
    1804:	77 0b       	sbc	r23, r23
    1806:	7d 83       	std	Y+5, r23	; 0x05
    1808:	6c 83       	std	Y+4, r22	; 0x04
    180a:	8b 2d       	mov	r24, r11
    180c:	0b 2c       	mov	r0, r11
    180e:	00 0c       	add	r0, r0
    1810:	99 0b       	sbc	r25, r25
    1812:	9f 83       	std	Y+7, r25	; 0x07
    1814:	8e 83       	std	Y+6, r24	; 0x06
    1816:	04 c0       	rjmp	.+8      	; 0x1820 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2c4>
    1818:	1f 82       	std	Y+7, r1	; 0x07
    181a:	1e 82       	std	Y+6, r1	; 0x06
    181c:	1d 82       	std	Y+5, r1	; 0x05
    181e:	1c 82       	std	Y+4, r1	; 0x04
    1820:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1822:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1824:	ed 91       	ld	r30, X+
    1826:	fc 91       	ld	r31, X
    1828:	11 97       	sbiw	r26, 0x01	; 1
    182a:	02 84       	ldd	r0, Z+10	; 0x0a
    182c:	f3 85       	ldd	r31, Z+11	; 0x0b
    182e:	e0 2d       	mov	r30, r0
    1830:	cd 01       	movw	r24, r26
    1832:	19 95       	eicall
    1834:	61 2c       	mov	r6, r1
    1836:	d1 2c       	mov	r13, r1
    1838:	81 2c       	mov	r8, r1
    183a:	fb 81       	ldd	r31, Y+3	; 0x03
    183c:	ef 2f       	mov	r30, r31
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	fb 87       	std	Y+11, r31	; 0x0b
    1842:	ea 87       	std	Y+10, r30	; 0x0a
    1844:	2c 2d       	mov	r18, r12
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	3d 87       	std	Y+13, r19	; 0x0d
    184a:	2c 87       	std	Y+12, r18	; 0x0c
    184c:	49 81       	ldd	r20, Y+1	; 0x01
    184e:	5a 81       	ldd	r21, Y+2	; 0x02
    1850:	4b 0d       	add	r20, r11
    1852:	51 1d       	adc	r21, r1
    1854:	b7 fc       	sbrc	r11, 7
    1856:	5a 95       	dec	r21
    1858:	5d 8b       	std	Y+21, r21	; 0x15
    185a:	4c 8b       	std	Y+20, r20	; 0x14
    185c:	b2 01       	movw	r22, r4
    185e:	69 0d       	add	r22, r9
    1860:	71 1d       	adc	r23, r1
    1862:	97 fc       	sbrc	r9, 7
    1864:	7a 95       	dec	r23
    1866:	7f 8b       	std	Y+23, r23	; 0x17
    1868:	6e 8b       	std	Y+22, r22	; 0x16
    186a:	8a 14       	cp	r8, r10
    186c:	08 f0       	brcs	.+2      	; 0x1870 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x314>
    186e:	70 c0       	rjmp	.+224    	; 0x1950 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    1870:	28 2d       	mov	r18, r8
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	4e 81       	ldd	r20, Y+6	; 0x06
    1876:	5f 81       	ldd	r21, Y+7	; 0x07
    1878:	42 0f       	add	r20, r18
    187a:	53 1f       	adc	r21, r19
    187c:	aa 85       	ldd	r26, Y+10	; 0x0a
    187e:	bb 85       	ldd	r27, Y+11	; 0x0b
    1880:	a4 9f       	mul	r26, r20
    1882:	c0 01       	movw	r24, r0
    1884:	a5 9f       	mul	r26, r21
    1886:	90 0d       	add	r25, r0
    1888:	b4 9f       	mul	r27, r20
    188a:	90 0d       	add	r25, r0
    188c:	11 24       	eor	r1, r1
    188e:	e9 81       	ldd	r30, Y+1	; 0x01
    1890:	fa 81       	ldd	r31, Y+2	; 0x02
    1892:	e8 0f       	add	r30, r24
    1894:	f9 1f       	adc	r31, r25
    1896:	ff 87       	std	Y+15, r31	; 0x0f
    1898:	ee 87       	std	Y+14, r30	; 0x0e
    189a:	86 2d       	mov	r24, r6
    189c:	91 2c       	mov	r9, r1
    189e:	4c 89       	ldd	r20, Y+20	; 0x14
    18a0:	5d 89       	ldd	r21, Y+21	; 0x15
    18a2:	42 0f       	add	r20, r18
    18a4:	53 1f       	adc	r21, r19
    18a6:	5b 8b       	std	Y+19, r21	; 0x13
    18a8:	4a 8b       	std	Y+18, r20	; 0x12
    18aa:	97 14       	cp	r9, r7
    18ac:	08 f0       	brcs	.+2      	; 0x18b0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x354>
    18ae:	4d c0       	rjmp	.+154    	; 0x194a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3ee>
    18b0:	bb 24       	eor	r11, r11
    18b2:	b3 94       	inc	r11
    18b4:	b8 0e       	add	r11, r24
    18b6:	87 70       	andi	r24, 0x07	; 7
    18b8:	41 f4       	brne	.+16     	; 0x18ca <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x36e>
    18ba:	c1 01       	movw	r24, r2
    18bc:	01 96       	adiw	r24, 0x01	; 1
    18be:	e8 89       	ldd	r30, Y+16	; 0x10
    18c0:	f9 89       	ldd	r31, Y+17	; 0x11
    18c2:	e2 0d       	add	r30, r2
    18c4:	f3 1d       	adc	r31, r3
    18c6:	d4 90       	lpm	r13, Z
    18c8:	1c 01       	movw	r2, r24
    18ca:	d7 fe       	sbrs	r13, 7
    18cc:	3a c0       	rjmp	.+116    	; 0x1942 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    18ce:	51 e0       	ldi	r21, 0x01	; 1
    18d0:	c5 12       	cpse	r12, r21
    18d2:	16 c0       	rjmp	.+44     	; 0x1900 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    18d4:	6b 81       	ldd	r22, Y+3	; 0x03
    18d6:	61 30       	cpi	r22, 0x01	; 1
    18d8:	99 f4       	brne	.+38     	; 0x1900 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    18da:	aa 8d       	ldd	r26, Y+26	; 0x1a
    18dc:	bb 8d       	ldd	r27, Y+27	; 0x1b
    18de:	ed 91       	ld	r30, X+
    18e0:	fc 91       	ld	r31, X
    18e2:	11 97       	sbiw	r26, 0x01	; 1
    18e4:	04 84       	ldd	r0, Z+12	; 0x0c
    18e6:	f5 85       	ldd	r31, Z+13	; 0x0d
    18e8:	e0 2d       	mov	r30, r0
    18ea:	28 85       	ldd	r18, Y+8	; 0x08
    18ec:	39 85       	ldd	r19, Y+9	; 0x09
    18ee:	4a 89       	ldd	r20, Y+18	; 0x12
    18f0:	5b 89       	ldd	r21, Y+19	; 0x13
    18f2:	6e 89       	ldd	r22, Y+22	; 0x16
    18f4:	7f 89       	ldd	r23, Y+23	; 0x17
    18f6:	69 0d       	add	r22, r9
    18f8:	71 1d       	adc	r23, r1
    18fa:	cd 01       	movw	r24, r26
    18fc:	19 95       	eicall
    18fe:	21 c0       	rjmp	.+66     	; 0x1942 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    1900:	8c 81       	ldd	r24, Y+4	; 0x04
    1902:	9d 81       	ldd	r25, Y+5	; 0x05
    1904:	89 0d       	add	r24, r9
    1906:	91 1d       	adc	r25, r1
    1908:	ec 85       	ldd	r30, Y+12	; 0x0c
    190a:	fd 85       	ldd	r31, Y+13	; 0x0d
    190c:	8e 9f       	mul	r24, r30
    190e:	b0 01       	movw	r22, r0
    1910:	8f 9f       	mul	r24, r31
    1912:	70 0d       	add	r23, r0
    1914:	9e 9f       	mul	r25, r30
    1916:	70 0d       	add	r23, r0
    1918:	11 24       	eor	r1, r1
    191a:	64 0d       	add	r22, r4
    191c:	75 1d       	adc	r23, r5
    191e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1920:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1922:	ed 91       	ld	r30, X+
    1924:	fc 91       	ld	r31, X
    1926:	11 97       	sbiw	r26, 0x01	; 1
    1928:	06 84       	ldd	r0, Z+14	; 0x0e
    192a:	f7 85       	ldd	r31, Z+15	; 0x0f
    192c:	e0 2d       	mov	r30, r0
    192e:	e8 84       	ldd	r14, Y+8	; 0x08
    1930:	f9 84       	ldd	r15, Y+9	; 0x09
    1932:	0a 85       	ldd	r16, Y+10	; 0x0a
    1934:	1b 85       	ldd	r17, Y+11	; 0x0b
    1936:	2c 85       	ldd	r18, Y+12	; 0x0c
    1938:	3d 85       	ldd	r19, Y+13	; 0x0d
    193a:	4e 85       	ldd	r20, Y+14	; 0x0e
    193c:	5f 85       	ldd	r21, Y+15	; 0x0f
    193e:	cd 01       	movw	r24, r26
    1940:	19 95       	eicall
    1942:	dd 0c       	add	r13, r13
    1944:	93 94       	inc	r9
    1946:	8b 2d       	mov	r24, r11
    1948:	b0 cf       	rjmp	.-160    	; 0x18aa <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x34e>
    194a:	67 0c       	add	r6, r7
    194c:	83 94       	inc	r8
    194e:	8d cf       	rjmp	.-230    	; 0x186a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x30e>
    1950:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1952:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1954:	ed 91       	ld	r30, X+
    1956:	fc 91       	ld	r31, X
    1958:	11 97       	sbiw	r26, 0x01	; 1
    195a:	06 88       	ldd	r0, Z+22	; 0x16
    195c:	f7 89       	ldd	r31, Z+23	; 0x17
    195e:	e0 2d       	mov	r30, r0
    1960:	cd 01       	movw	r24, r26
    1962:	6b 96       	adiw	r28, 0x1b	; 27
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	df 91       	pop	r29
    1970:	cf 91       	pop	r28
    1972:	1f 91       	pop	r17
    1974:	0f 91       	pop	r16
    1976:	ff 90       	pop	r15
    1978:	ef 90       	pop	r14
    197a:	df 90       	pop	r13
    197c:	cf 90       	pop	r12
    197e:	bf 90       	pop	r11
    1980:	af 90       	pop	r10
    1982:	9f 90       	pop	r9
    1984:	8f 90       	pop	r8
    1986:	7f 90       	pop	r7
    1988:	6f 90       	pop	r6
    198a:	5f 90       	pop	r5
    198c:	4f 90       	pop	r4
    198e:	3f 90       	pop	r3
    1990:	2f 90       	pop	r2
    1992:	19 94       	eijmp
    1994:	6b 96       	adiw	r28, 0x1b	; 27
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	df 91       	pop	r29
    19a2:	cf 91       	pop	r28
    19a4:	1f 91       	pop	r17
    19a6:	0f 91       	pop	r16
    19a8:	ff 90       	pop	r15
    19aa:	ef 90       	pop	r14
    19ac:	df 90       	pop	r13
    19ae:	cf 90       	pop	r12
    19b0:	bf 90       	pop	r11
    19b2:	af 90       	pop	r10
    19b4:	9f 90       	pop	r9
    19b6:	8f 90       	pop	r8
    19b8:	7f 90       	pop	r7
    19ba:	6f 90       	pop	r6
    19bc:	5f 90       	pop	r5
    19be:	4f 90       	pop	r4
    19c0:	3f 90       	pop	r3
    19c2:	2f 90       	pop	r2
    19c4:	08 95       	ret

000019c6 <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    19c6:	8f 92       	push	r8
    19c8:	9f 92       	push	r9
    19ca:	af 92       	push	r10
    19cc:	cf 92       	push	r12
    19ce:	ef 92       	push	r14
    19d0:	ff 92       	push	r15
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	ec 01       	movw	r28, r24
    19dc:	26 2f       	mov	r18, r22
  if (!gfxFont) { // 'Classic' built-in font
    19de:	89 8d       	ldd	r24, Y+25	; 0x19
    19e0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <_ZN12Adafruit_GFX5writeEh+0x22>
    19e6:	41 c0       	rjmp	.+130    	; 0x1a6a <_ZN12Adafruit_GFX5writeEh+0xa4>

    if (c == '\n') {              // Newline?
    19e8:	6a 30       	cpi	r22, 0x0A	; 10
    19ea:	59 f4       	brne	.+22     	; 0x1a02 <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
    19ec:	1d 86       	std	Y+13, r1	; 0x0d
    19ee:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += textsize_y * 8; // advance y one line
    19f0:	2d 89       	ldd	r18, Y+21	; 0x15
    19f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    19f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    19f6:	38 e0       	ldi	r19, 0x08	; 8
    19f8:	23 9f       	mul	r18, r19
    19fa:	80 0d       	add	r24, r0
    19fc:	91 1d       	adc	r25, r1
    19fe:	11 24       	eor	r1, r1
    1a00:	42 c0       	rjmp	.+132    	; 0x1a86 <_ZN12Adafruit_GFX5writeEh+0xc0>
    } else if (c != '\r') {       // Ignore carriage returns
    1a02:	6d 30       	cpi	r22, 0x0D	; 13
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <_ZN12Adafruit_GFX5writeEh+0x42>
    1a06:	a8 c0       	rjmp	.+336    	; 0x1b58 <_ZN12Adafruit_GFX5writeEh+0x192>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    1a08:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0a:	88 23       	and	r24, r24
    1a0c:	c9 f0       	breq	.+50     	; 0x1a40 <_ZN12Adafruit_GFX5writeEh+0x7a>
    1a0e:	3c 89       	ldd	r19, Y+20	; 0x14
    1a10:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a12:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a14:	46 e0       	ldi	r20, 0x06	; 6
    1a16:	34 9f       	mul	r19, r20
    1a18:	80 0d       	add	r24, r0
    1a1a:	91 1d       	adc	r25, r1
    1a1c:	11 24       	eor	r1, r1
    1a1e:	48 85       	ldd	r20, Y+8	; 0x08
    1a20:	59 85       	ldd	r21, Y+9	; 0x09
    1a22:	48 17       	cp	r20, r24
    1a24:	59 07       	cpc	r21, r25
    1a26:	64 f4       	brge	.+24     	; 0x1a40 <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x = 0;                                       // Reset x to zero,
    1a28:	1d 86       	std	Y+13, r1	; 0x0d
    1a2a:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize_y * 8; // advance y one line
    1a2c:	3d 89       	ldd	r19, Y+21	; 0x15
    1a2e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a30:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a32:	48 e0       	ldi	r20, 0x08	; 8
    1a34:	34 9f       	mul	r19, r20
    1a36:	80 0d       	add	r24, r0
    1a38:	91 1d       	adc	r25, r1
    1a3a:	11 24       	eor	r1, r1
    1a3c:	9f 87       	std	Y+15, r25	; 0x0f
    1a3e:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
               textsize_y);
    1a40:	ea 88       	ldd	r14, Y+18	; 0x12
    1a42:	fb 88       	ldd	r15, Y+19	; 0x13
    1a44:	08 89       	ldd	r16, Y+16	; 0x10
    1a46:	19 89       	ldd	r17, Y+17	; 0x11
    1a48:	4e 85       	ldd	r20, Y+14	; 0x0e
    1a4a:	5f 85       	ldd	r21, Y+15	; 0x0f
    1a4c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a4e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a50:	ad 88       	ldd	r10, Y+21	; 0x15
    1a52:	cc 88       	ldd	r12, Y+20	; 0x14
    1a54:	ce 01       	movw	r24, r28
    1a56:	82 dd       	rcall	.-1276   	; 0x155c <_ZN12Adafruit_GFX8drawCharEiihjjhh>
      cursor_x += textsize_x * 6; // Advance x one char
    1a58:	2c 89       	ldd	r18, Y+20	; 0x14
    1a5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a5c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a5e:	36 e0       	ldi	r19, 0x06	; 6
    1a60:	23 9f       	mul	r18, r19
    1a62:	80 0d       	add	r24, r0
    1a64:	91 1d       	adc	r25, r1
    1a66:	11 24       	eor	r1, r1
    1a68:	3e c0       	rjmp	.+124    	; 0x1ae6 <_ZN12Adafruit_GFX5writeEh+0x120>
    }

  } else { // Custom font

    if (c == '\n') {
    1a6a:	6a 30       	cpi	r22, 0x0A	; 10
    1a6c:	79 f4       	brne	.+30     	; 0x1a8c <_ZN12Adafruit_GFX5writeEh+0xc6>
      cursor_x = 0;
    1a6e:	1d 86       	std	Y+13, r1	; 0x0d
    1a70:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    1a72:	2d 89       	ldd	r18, Y+21	; 0x15
    1a74:	fc 01       	movw	r30, r24
    1a76:	38 96       	adiw	r30, 0x08	; 8
    1a78:	e4 91       	lpm	r30, Z
    1a7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a7e:	2e 9f       	mul	r18, r30
    1a80:	80 0d       	add	r24, r0
    1a82:	91 1d       	adc	r25, r1
    1a84:	11 24       	eor	r1, r1
    1a86:	9f 87       	std	Y+15, r25	; 0x0f
    1a88:	8e 87       	std	Y+14, r24	; 0x0e
    1a8a:	66 c0       	rjmp	.+204    	; 0x1b58 <_ZN12Adafruit_GFX5writeEh+0x192>
    } else if (c != '\r') {
    1a8c:	6d 30       	cpi	r22, 0x0D	; 13
    1a8e:	09 f4       	brne	.+2      	; 0x1a92 <_ZN12Adafruit_GFX5writeEh+0xcc>
    1a90:	63 c0       	rjmp	.+198    	; 0x1b58 <_ZN12Adafruit_GFX5writeEh+0x192>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    1a92:	fc 01       	movw	r30, r24
    1a94:	34 96       	adiw	r30, 0x04	; 4
    1a96:	34 91       	lpm	r19, Z
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    1a98:	63 17       	cp	r22, r19
    1a9a:	08 f4       	brcc	.+2      	; 0x1a9e <_ZN12Adafruit_GFX5writeEh+0xd8>
    1a9c:	5d c0       	rjmp	.+186    	; 0x1b58 <_ZN12Adafruit_GFX5writeEh+0x192>
    1a9e:	32 96       	adiw	r30, 0x02	; 2
    1aa0:	e4 91       	lpm	r30, Z
    1aa2:	e6 17       	cp	r30, r22
    1aa4:	08 f4       	brcc	.+2      	; 0x1aa8 <_ZN12Adafruit_GFX5writeEh+0xe2>
    1aa6:	58 c0       	rjmp	.+176    	; 0x1b58 <_ZN12Adafruit_GFX5writeEh+0x192>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    1aa8:	46 2f       	mov	r20, r22
    1aaa:	43 1b       	sub	r20, r19
    1aac:	34 2f       	mov	r19, r20
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    1aae:	fc 01       	movw	r30, r24
    1ab0:	32 96       	adiw	r30, 0x02	; 2
    1ab2:	85 90       	lpm	r8, Z+
    1ab4:	94 90       	lpm	r9, Z
    1ab6:	47 e0       	ldi	r20, 0x07	; 7
    1ab8:	34 9f       	mul	r19, r20
    1aba:	80 0c       	add	r8, r0
    1abc:	91 1c       	adc	r9, r1
    1abe:	11 24       	eor	r1, r1
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    1ac0:	f4 01       	movw	r30, r8
    1ac2:	32 96       	adiw	r30, 0x02	; 2
    1ac4:	34 91       	lpm	r19, Z
                h = pgm_read_byte(&glyph->height);
    1ac6:	31 96       	adiw	r30, 0x01	; 1
    1ac8:	e4 91       	lpm	r30, Z
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    1aca:	33 23       	and	r19, r19
    1acc:	11 f0       	breq	.+4      	; 0x1ad2 <_ZN12Adafruit_GFX5writeEh+0x10c>
    1ace:	e1 11       	cpse	r30, r1
    1ad0:	0d c0       	rjmp	.+26     	; 0x1aec <_ZN12Adafruit_GFX5writeEh+0x126>
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    1ad2:	f4 01       	movw	r30, r8
    1ad4:	34 96       	adiw	r30, 0x04	; 4
    1ad6:	e4 91       	lpm	r30, Z
    1ad8:	2c 89       	ldd	r18, Y+20	; 0x14
    1ada:	8c 85       	ldd	r24, Y+12	; 0x0c
    1adc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ade:	e2 9f       	mul	r30, r18
    1ae0:	80 0d       	add	r24, r0
    1ae2:	91 1d       	adc	r25, r1
    1ae4:	11 24       	eor	r1, r1
    1ae6:	9d 87       	std	Y+13, r25	; 0x0d
    1ae8:	8c 87       	std	Y+12, r24	; 0x0c
      }
    }
  }
  return 1;
    1aea:	36 c0       	rjmp	.+108    	; 0x1b58 <_ZN12Adafruit_GFX5writeEh+0x192>
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    1aec:	f4 01       	movw	r30, r8
    1aee:	35 96       	adiw	r30, 0x05	; 5
    1af0:	44 91       	lpm	r20, Z
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    1af2:	5f 89       	ldd	r21, Y+23	; 0x17
    1af4:	55 23       	and	r21, r21
    1af6:	19 f1       	breq	.+70     	; 0x1b3e <_ZN12Adafruit_GFX5writeEh+0x178>
    1af8:	5c 89       	ldd	r21, Y+20	; 0x14
    1afa:	e3 2f       	mov	r30, r19
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	e4 0f       	add	r30, r20
    1b00:	f1 1d       	adc	r31, r1
    1b02:	47 fd       	sbrc	r20, 7
    1b04:	fa 95       	dec	r31
    1b06:	5e 9f       	mul	r21, r30
    1b08:	b0 01       	movw	r22, r0
    1b0a:	5f 9f       	mul	r21, r31
    1b0c:	70 0d       	add	r23, r0
    1b0e:	11 24       	eor	r1, r1
    1b10:	4c 85       	ldd	r20, Y+12	; 0x0c
    1b12:	5d 85       	ldd	r21, Y+13	; 0x0d
    1b14:	46 0f       	add	r20, r22
    1b16:	57 1f       	adc	r21, r23
    1b18:	68 85       	ldd	r22, Y+8	; 0x08
    1b1a:	79 85       	ldd	r23, Y+9	; 0x09
    1b1c:	64 17       	cp	r22, r20
    1b1e:	75 07       	cpc	r23, r21
    1b20:	74 f4       	brge	.+28     	; 0x1b3e <_ZN12Adafruit_GFX5writeEh+0x178>
            cursor_x = 0;
    1b22:	1d 86       	std	Y+13, r1	; 0x0d
    1b24:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize_y *
    1b26:	3d 89       	ldd	r19, Y+21	; 0x15
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    1b28:	fc 01       	movw	r30, r24
    1b2a:	38 96       	adiw	r30, 0x08	; 8
    1b2c:	e4 91       	lpm	r30, Z
    1b2e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b30:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b32:	3e 9f       	mul	r19, r30
    1b34:	80 0d       	add	r24, r0
    1b36:	91 1d       	adc	r25, r1
    1b38:	11 24       	eor	r1, r1
    1b3a:	9f 87       	std	Y+15, r25	; 0x0f
    1b3c:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
    1b3e:	ea 88       	ldd	r14, Y+18	; 0x12
    1b40:	fb 88       	ldd	r15, Y+19	; 0x13
    1b42:	08 89       	ldd	r16, Y+16	; 0x10
    1b44:	19 89       	ldd	r17, Y+17	; 0x11
    1b46:	4e 85       	ldd	r20, Y+14	; 0x0e
    1b48:	5f 85       	ldd	r21, Y+15	; 0x0f
    1b4a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b4c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b4e:	ad 88       	ldd	r10, Y+21	; 0x15
    1b50:	cc 88       	ldd	r12, Y+20	; 0x14
    1b52:	ce 01       	movw	r24, r28
    1b54:	03 dd       	rcall	.-1530   	; 0x155c <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    1b56:	bd cf       	rjmp	.-134    	; 0x1ad2 <_ZN12Adafruit_GFX5writeEh+0x10c>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	ff 90       	pop	r15
    1b66:	ef 90       	pop	r14
    1b68:	cf 90       	pop	r12
    1b6a:	af 90       	pop	r10
    1b6c:	9f 90       	pop	r9
    1b6e:	8f 90       	pop	r8
    1b70:	08 95       	ret

00001b72 <_ZN12Adafruit_GFX11setTextSizeEhh>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    1b72:	61 11       	cpse	r22, r1
    1b74:	01 c0       	rjmp	.+2      	; 0x1b78 <_ZN12Adafruit_GFX11setTextSizeEhh+0x6>
    1b76:	61 e0       	ldi	r22, 0x01	; 1
    1b78:	fc 01       	movw	r30, r24
    1b7a:	64 8b       	std	Z+20, r22	; 0x14
  textsize_y = (s_y > 0) ? s_y : 1;
    1b7c:	41 11       	cpse	r20, r1
    1b7e:	01 c0       	rjmp	.+2      	; 0x1b82 <_ZN12Adafruit_GFX11setTextSizeEhh+0x10>
    1b80:	41 e0       	ldi	r20, 0x01	; 1
    1b82:	fc 01       	movw	r30, r24
    1b84:	45 8b       	std	Z+21, r20	; 0x15
    1b86:	08 95       	ret

00001b88 <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
    1b88:	46 2f       	mov	r20, r22
    1b8a:	f3 cf       	rjmp	.-26     	; 0x1b72 <_ZN12Adafruit_GFX11setTextSizeEhh>

00001b8c <_ZN16Adafruit_SSD13069drawPixelEiij>:
/*!
    @brief  Get base address of display buffer for direct reading or writing.
    @return Pointer to an unsigned 8-bit array, column-major, columns padded
            to full byte boundary if needed.
*/
uint8_t *Adafruit_SSD1306::getBuffer(void) { return buffer; }
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	77 fd       	sbrc	r23, 7
    1b90:	b9 c0       	rjmp	.+370    	; 0x1d04 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    1b92:	80 85       	ldd	r24, Z+8	; 0x08
    1b94:	91 85       	ldd	r25, Z+9	; 0x09
    1b96:	68 17       	cp	r22, r24
    1b98:	79 07       	cpc	r23, r25
    1b9a:	0c f0       	brlt	.+2      	; 0x1b9e <_ZN16Adafruit_SSD13069drawPixelEiij+0x12>
    1b9c:	b3 c0       	rjmp	.+358    	; 0x1d04 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    1b9e:	57 fd       	sbrc	r21, 7
    1ba0:	b1 c0       	rjmp	.+354    	; 0x1d04 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    1ba2:	82 85       	ldd	r24, Z+10	; 0x0a
    1ba4:	93 85       	ldd	r25, Z+11	; 0x0b
    1ba6:	48 17       	cp	r20, r24
    1ba8:	59 07       	cpc	r21, r25
    1baa:	0c f0       	brlt	.+2      	; 0x1bae <_ZN16Adafruit_SSD13069drawPixelEiij+0x22>
    1bac:	08 95       	ret
    1bae:	86 89       	ldd	r24, Z+22	; 0x16
    1bb0:	82 30       	cpi	r24, 0x02	; 2
    1bb2:	79 f4       	brne	.+30     	; 0x1bd2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x46>
    1bb4:	84 81       	ldd	r24, Z+4	; 0x04
    1bb6:	95 81       	ldd	r25, Z+5	; 0x05
    1bb8:	dc 01       	movw	r26, r24
    1bba:	a6 1b       	sub	r26, r22
    1bbc:	b7 0b       	sbc	r27, r23
    1bbe:	bd 01       	movw	r22, r26
    1bc0:	61 50       	subi	r22, 0x01	; 1
    1bc2:	71 09       	sbc	r23, r1
    1bc4:	86 81       	ldd	r24, Z+6	; 0x06
    1bc6:	97 81       	ldd	r25, Z+7	; 0x07
    1bc8:	dc 01       	movw	r26, r24
    1bca:	a4 1b       	sub	r26, r20
    1bcc:	b5 0b       	sbc	r27, r21
    1bce:	ad 01       	movw	r20, r26
    1bd0:	0e c0       	rjmp	.+28     	; 0x1bee <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    1bd2:	83 30       	cpi	r24, 0x03	; 3
    1bd4:	09 f0       	breq	.+2      	; 0x1bd8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x4c>
    1bd6:	84 c0       	rjmp	.+264    	; 0x1ce0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x154>
    1bd8:	64 27       	eor	r22, r20
    1bda:	75 27       	eor	r23, r21
    1bdc:	ca 01       	movw	r24, r20
    1bde:	86 27       	eor	r24, r22
    1be0:	97 27       	eor	r25, r23
    1be2:	68 27       	eor	r22, r24
    1be4:	79 27       	eor	r23, r25
    1be6:	46 81       	ldd	r20, Z+6	; 0x06
    1be8:	57 81       	ldd	r21, Z+7	; 0x07
    1bea:	48 1b       	sub	r20, r24
    1bec:	59 0b       	sbc	r21, r25
    1bee:	41 50       	subi	r20, 0x01	; 1
    1bf0:	51 09       	sbc	r21, r1
    1bf2:	21 30       	cpi	r18, 0x01	; 1
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	31 f0       	breq	.+12     	; 0x1c04 <_ZN16Adafruit_SSD13069drawPixelEiij+0x78>
    1bf8:	48 f1       	brcs	.+82     	; 0x1c4c <_ZN16Adafruit_SSD13069drawPixelEiij+0xc0>
    1bfa:	22 30       	cpi	r18, 0x02	; 2
    1bfc:	31 05       	cpc	r19, r1
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <_ZN16Adafruit_SSD13069drawPixelEiij+0x76>
    1c00:	4a c0       	rjmp	.+148    	; 0x1c96 <_ZN16Adafruit_SSD13069drawPixelEiij+0x10a>
    1c02:	08 95       	ret
    1c04:	ca 01       	movw	r24, r20
    1c06:	57 fd       	sbrc	r21, 7
    1c08:	07 96       	adiw	r24, 0x07	; 7
    1c0a:	9c 01       	movw	r18, r24
    1c0c:	a3 e0       	ldi	r26, 0x03	; 3
    1c0e:	35 95       	asr	r19
    1c10:	27 95       	ror	r18
    1c12:	aa 95       	dec	r26
    1c14:	e1 f7       	brne	.-8      	; 0x1c0e <_ZN16Adafruit_SSD13069drawPixelEiij+0x82>
    1c16:	a4 81       	ldd	r26, Z+4	; 0x04
    1c18:	b5 81       	ldd	r27, Z+5	; 0x05
    1c1a:	2a 9f       	mul	r18, r26
    1c1c:	c0 01       	movw	r24, r0
    1c1e:	2b 9f       	mul	r18, r27
    1c20:	90 0d       	add	r25, r0
    1c22:	3a 9f       	mul	r19, r26
    1c24:	90 0d       	add	r25, r0
    1c26:	11 24       	eor	r1, r1
    1c28:	68 0f       	add	r22, r24
    1c2a:	79 1f       	adc	r23, r25
    1c2c:	07 8c       	ldd	r0, Z+31	; 0x1f
    1c2e:	f0 a1       	ldd	r31, Z+32	; 0x20
    1c30:	e0 2d       	mov	r30, r0
    1c32:	e6 0f       	add	r30, r22
    1c34:	f7 1f       	adc	r31, r23
    1c36:	47 70       	andi	r20, 0x07	; 7
    1c38:	55 27       	eor	r21, r21
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	01 c0       	rjmp	.+2      	; 0x1c42 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb6>
    1c40:	88 0f       	add	r24, r24
    1c42:	4a 95       	dec	r20
    1c44:	ea f7       	brpl	.-6      	; 0x1c40 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb4>
    1c46:	90 81       	ld	r25, Z
    1c48:	89 2b       	or	r24, r25
    1c4a:	48 c0       	rjmp	.+144    	; 0x1cdc <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    1c4c:	ca 01       	movw	r24, r20
    1c4e:	57 fd       	sbrc	r21, 7
    1c50:	07 96       	adiw	r24, 0x07	; 7
    1c52:	9c 01       	movw	r18, r24
    1c54:	93 e0       	ldi	r25, 0x03	; 3
    1c56:	35 95       	asr	r19
    1c58:	27 95       	ror	r18
    1c5a:	9a 95       	dec	r25
    1c5c:	e1 f7       	brne	.-8      	; 0x1c56 <_ZN16Adafruit_SSD13069drawPixelEiij+0xca>
    1c5e:	a4 81       	ldd	r26, Z+4	; 0x04
    1c60:	b5 81       	ldd	r27, Z+5	; 0x05
    1c62:	2a 9f       	mul	r18, r26
    1c64:	c0 01       	movw	r24, r0
    1c66:	2b 9f       	mul	r18, r27
    1c68:	90 0d       	add	r25, r0
    1c6a:	3a 9f       	mul	r19, r26
    1c6c:	90 0d       	add	r25, r0
    1c6e:	11 24       	eor	r1, r1
    1c70:	68 0f       	add	r22, r24
    1c72:	79 1f       	adc	r23, r25
    1c74:	07 8c       	ldd	r0, Z+31	; 0x1f
    1c76:	f0 a1       	ldd	r31, Z+32	; 0x20
    1c78:	e0 2d       	mov	r30, r0
    1c7a:	e6 0f       	add	r30, r22
    1c7c:	f7 1f       	adc	r31, r23
    1c7e:	47 70       	andi	r20, 0x07	; 7
    1c80:	55 27       	eor	r21, r21
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	01 c0       	rjmp	.+2      	; 0x1c8a <_ZN16Adafruit_SSD13069drawPixelEiij+0xfe>
    1c88:	88 0f       	add	r24, r24
    1c8a:	4a 95       	dec	r20
    1c8c:	ea f7       	brpl	.-6      	; 0x1c88 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfc>
    1c8e:	80 95       	com	r24
    1c90:	90 81       	ld	r25, Z
    1c92:	89 23       	and	r24, r25
    1c94:	23 c0       	rjmp	.+70     	; 0x1cdc <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    1c96:	ca 01       	movw	r24, r20
    1c98:	57 fd       	sbrc	r21, 7
    1c9a:	07 96       	adiw	r24, 0x07	; 7
    1c9c:	9c 01       	movw	r18, r24
    1c9e:	83 e0       	ldi	r24, 0x03	; 3
    1ca0:	35 95       	asr	r19
    1ca2:	27 95       	ror	r18
    1ca4:	8a 95       	dec	r24
    1ca6:	e1 f7       	brne	.-8      	; 0x1ca0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x114>
    1ca8:	a4 81       	ldd	r26, Z+4	; 0x04
    1caa:	b5 81       	ldd	r27, Z+5	; 0x05
    1cac:	2a 9f       	mul	r18, r26
    1cae:	c0 01       	movw	r24, r0
    1cb0:	2b 9f       	mul	r18, r27
    1cb2:	90 0d       	add	r25, r0
    1cb4:	3a 9f       	mul	r19, r26
    1cb6:	90 0d       	add	r25, r0
    1cb8:	11 24       	eor	r1, r1
    1cba:	68 0f       	add	r22, r24
    1cbc:	79 1f       	adc	r23, r25
    1cbe:	07 8c       	ldd	r0, Z+31	; 0x1f
    1cc0:	f0 a1       	ldd	r31, Z+32	; 0x20
    1cc2:	e0 2d       	mov	r30, r0
    1cc4:	e6 0f       	add	r30, r22
    1cc6:	f7 1f       	adc	r31, r23
    1cc8:	47 70       	andi	r20, 0x07	; 7
    1cca:	55 27       	eor	r21, r21
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	01 c0       	rjmp	.+2      	; 0x1cd4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x148>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	4a 95       	dec	r20
    1cd6:	ea f7       	brpl	.-6      	; 0x1cd2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x146>
    1cd8:	90 81       	ld	r25, Z
    1cda:	89 27       	eor	r24, r25
    1cdc:	80 83       	st	Z, r24
    1cde:	08 95       	ret
    1ce0:	81 30       	cpi	r24, 0x01	; 1
    1ce2:	09 f0       	breq	.+2      	; 0x1ce6 <_ZN16Adafruit_SSD13069drawPixelEiij+0x15a>
    1ce4:	86 cf       	rjmp	.-244    	; 0x1bf2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    1ce6:	64 27       	eor	r22, r20
    1ce8:	75 27       	eor	r23, r21
    1cea:	46 27       	eor	r20, r22
    1cec:	57 27       	eor	r21, r23
    1cee:	64 27       	eor	r22, r20
    1cf0:	75 27       	eor	r23, r21
    1cf2:	84 81       	ldd	r24, Z+4	; 0x04
    1cf4:	95 81       	ldd	r25, Z+5	; 0x05
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	a6 1b       	sub	r26, r22
    1cfa:	b7 0b       	sbc	r27, r23
    1cfc:	bd 01       	movw	r22, r26
    1cfe:	61 50       	subi	r22, 0x01	; 1
    1d00:	71 09       	sbc	r23, r1
    1d02:	77 cf       	rjmp	.-274    	; 0x1bf2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    1d04:	08 95       	ret

00001d06 <_ZN8SPIClass8transferEh>:
    1d06:	8e bd       	out	0x2e, r24	; 46
    1d08:	00 00       	nop
    1d0a:	0d b4       	in	r0, 0x2d	; 45
    1d0c:	07 fe       	sbrs	r0, 7
    1d0e:	fd cf       	rjmp	.-6      	; 0x1d0a <_ZN8SPIClass8transferEh+0x4>
    1d10:	8e b5       	in	r24, 0x2e	; 46
    1d12:	08 95       	ret

00001d14 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
    1d14:	4f 92       	push	r4
    1d16:	5f 92       	push	r5
    1d18:	6f 92       	push	r6
    1d1a:	7f 92       	push	r7
    1d1c:	8f 92       	push	r8
    1d1e:	9f 92       	push	r9
    1d20:	af 92       	push	r10
    1d22:	bf 92       	push	r11
    1d24:	cf 92       	push	r12
    1d26:	df 92       	push	r13
    1d28:	ef 92       	push	r14
    1d2a:	ff 92       	push	r15
    1d2c:	0f 93       	push	r16
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	3c 01       	movw	r6, r24
    1d38:	29 01       	movw	r4, r18
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	70 e0       	ldi	r23, 0x00	; 0
    1d3e:	4e db       	rcall	.-2404   	; 0x13dc <_ZN12Adafruit_GFXC1Eii>
    1d40:	8f e3       	ldi	r24, 0x3F	; 63
    1d42:	92 e0       	ldi	r25, 0x02	; 2
    1d44:	f3 01       	movw	r30, r6
    1d46:	91 83       	std	Z+1, r25	; 0x01
    1d48:	80 83       	st	Z, r24
    1d4a:	14 8e       	std	Z+28, r1	; 0x1c
    1d4c:	13 8e       	std	Z+27, r1	; 0x1b
    1d4e:	41 14       	cp	r4, r1
    1d50:	51 04       	cpc	r5, r1
    1d52:	11 f0       	breq	.+4      	; 0x1d58 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x44>
    1d54:	c2 01       	movw	r24, r4
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x48>
    1d58:	87 e5       	ldi	r24, 0x57	; 87
    1d5a:	93 e0       	ldi	r25, 0x03	; 3
    1d5c:	f3 01       	movw	r30, r6
    1d5e:	96 8f       	std	Z+30, r25	; 0x1e
    1d60:	85 8f       	std	Z+29, r24	; 0x1d
    1d62:	10 a2       	std	Z+32, r1	; 0x20
    1d64:	17 8e       	std	Z+31, r1	; 0x1f
    1d66:	8f ef       	ldi	r24, 0xFF	; 255
    1d68:	84 a3       	std	Z+36, r24	; 0x24
    1d6a:	85 a3       	std	Z+37, r24	; 0x25
    1d6c:	86 a3       	std	Z+38, r24	; 0x26
    1d6e:	87 a3       	std	Z+39, r24	; 0x27
    1d70:	00 a7       	std	Z+40, r16	; 0x28
    1d72:	c5 aa       	std	Z+53, r12	; 0x35
    1d74:	d6 aa       	std	Z+54, r13	; 0x36
    1d76:	e7 aa       	std	Z+55, r14	; 0x37
    1d78:	f0 ae       	std	Z+56, r15	; 0x38
    1d7a:	81 ae       	std	Z+57, r8	; 0x39
    1d7c:	92 ae       	std	Z+58, r9	; 0x3a
    1d7e:	a3 ae       	std	Z+59, r10	; 0x3b
    1d80:	b4 ae       	std	Z+60, r11	; 0x3c
    1d82:	80 e5       	ldi	r24, 0x50	; 80
    1d84:	86 af       	std	Z+62, r24	; 0x3e
    1d86:	17 ae       	std	Z+63, r1	; 0x3f
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	0f 91       	pop	r16
    1d8e:	ff 90       	pop	r15
    1d90:	ef 90       	pop	r14
    1d92:	df 90       	pop	r13
    1d94:	cf 90       	pop	r12
    1d96:	bf 90       	pop	r11
    1d98:	af 90       	pop	r10
    1d9a:	9f 90       	pop	r9
    1d9c:	8f 90       	pop	r8
    1d9e:	7f 90       	pop	r7
    1da0:	6f 90       	pop	r6
    1da2:	5f 90       	pop	r5
    1da4:	4f 90       	pop	r4
    1da6:	08 95       	ret

00001da8 <_ZN16Adafruit_SSD1306D1Ev>:
    1da8:	2f e3       	ldi	r18, 0x3F	; 63
    1daa:	32 e0       	ldi	r19, 0x02	; 2
    1dac:	fc 01       	movw	r30, r24
    1dae:	31 83       	std	Z+1, r19	; 0x01
    1db0:	20 83       	st	Z, r18
    1db2:	87 8d       	ldd	r24, Z+31	; 0x1f
    1db4:	90 a1       	ldd	r25, Z+32	; 0x20
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	11 f0       	breq	.+4      	; 0x1dbe <_ZN16Adafruit_SSD1306D1Ev+0x16>
    1dba:	0c 94 75 1f 	jmp	0x3eea	; 0x3eea <free>
    1dbe:	08 95       	ret

00001dc0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
    1dc0:	1f 93       	push	r17
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	85 8d       	ldd	r24, Z+29	; 0x1d
    1dca:	96 8d       	ldd	r25, Z+30	; 0x1e
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	19 f1       	breq	.+70     	; 0x1e16 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x56>
    1dd0:	16 2f       	mov	r17, r22
    1dd2:	ef 01       	movw	r28, r30
    1dd4:	61 a1       	ldd	r22, Z+33	; 0x21
    1dd6:	06 2e       	mov	r0, r22
    1dd8:	00 0c       	add	r0, r0
    1dda:	77 0b       	sbc	r23, r23
    1ddc:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN7TwoWire17beginTransmissionEi>
    1de0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1de2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1de4:	dc 01       	movw	r26, r24
    1de6:	ed 91       	ld	r30, X+
    1de8:	fc 91       	ld	r31, X
    1dea:	01 90       	ld	r0, Z+
    1dec:	f0 81       	ld	r31, Z
    1dee:	e0 2d       	mov	r30, r0
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	19 95       	eicall
    1df4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1df6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1df8:	dc 01       	movw	r26, r24
    1dfa:	ed 91       	ld	r30, X+
    1dfc:	fc 91       	ld	r31, X
    1dfe:	01 90       	ld	r0, Z+
    1e00:	f0 81       	ld	r31, Z
    1e02:	e0 2d       	mov	r30, r0
    1e04:	61 2f       	mov	r22, r17
    1e06:	19 95       	eicall
    1e08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	1f 91       	pop	r17
    1e12:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <_ZN7TwoWire15endTransmissionEv>
    1e16:	a5 a5       	ldd	r26, Z+45	; 0x2d
    1e18:	b6 a5       	ldd	r27, Z+46	; 0x2e
    1e1a:	9c 91       	ld	r25, X
    1e1c:	83 a9       	ldd	r24, Z+51	; 0x33
    1e1e:	80 95       	com	r24
    1e20:	89 23       	and	r24, r25
    1e22:	8c 93       	st	X, r24
    1e24:	83 8d       	ldd	r24, Z+27	; 0x1b
    1e26:	94 8d       	ldd	r25, Z+28	; 0x1c
    1e28:	89 2b       	or	r24, r25
    1e2a:	29 f0       	breq	.+10     	; 0x1e36 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x76>
    1e2c:	86 2f       	mov	r24, r22
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	1f 91       	pop	r17
    1e34:	68 cf       	rjmp	.-304    	; 0x1d06 <_ZN8SPIClass8transferEh>
    1e36:	28 e0       	ldi	r18, 0x08	; 8
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	80 e8       	ldi	r24, 0x80	; 128
    1e3c:	a1 a5       	ldd	r26, Z+41	; 0x29
    1e3e:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1e40:	91 a9       	ldd	r25, Z+49	; 0x31
    1e42:	46 2f       	mov	r20, r22
    1e44:	48 23       	and	r20, r24
    1e46:	19 f0       	breq	.+6      	; 0x1e4e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x8e>
    1e48:	4c 91       	ld	r20, X
    1e4a:	94 2b       	or	r25, r20
    1e4c:	03 c0       	rjmp	.+6      	; 0x1e54 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x94>
    1e4e:	4c 91       	ld	r20, X
    1e50:	90 95       	com	r25
    1e52:	94 23       	and	r25, r20
    1e54:	9c 93       	st	X, r25
    1e56:	a3 a5       	ldd	r26, Z+43	; 0x2b
    1e58:	b4 a5       	ldd	r27, Z+44	; 0x2c
    1e5a:	4c 91       	ld	r20, X
    1e5c:	92 a9       	ldd	r25, Z+50	; 0x32
    1e5e:	94 2b       	or	r25, r20
    1e60:	9c 93       	st	X, r25
    1e62:	a3 a5       	ldd	r26, Z+43	; 0x2b
    1e64:	b4 a5       	ldd	r27, Z+44	; 0x2c
    1e66:	4c 91       	ld	r20, X
    1e68:	92 a9       	ldd	r25, Z+50	; 0x32
    1e6a:	90 95       	com	r25
    1e6c:	94 23       	and	r25, r20
    1e6e:	9c 93       	st	X, r25
    1e70:	86 95       	lsr	r24
    1e72:	21 50       	subi	r18, 0x01	; 1
    1e74:	31 09       	sbc	r19, r1
    1e76:	11 f7       	brne	.-60     	; 0x1e3c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x7c>
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	1f 91       	pop	r17
    1e7e:	08 95       	ret

00001e80 <_ZN16Adafruit_SSD130613invertDisplayEb>:
    1e80:	1f 93       	push	r17
    1e82:	cf 93       	push	r28
    1e84:	df 93       	push	r29
    1e86:	ec 01       	movw	r28, r24
    1e88:	16 2f       	mov	r17, r22
    1e8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	39 f0       	breq	.+14     	; 0x1ea0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x20>
    1e92:	4d a9       	ldd	r20, Y+53	; 0x35
    1e94:	5e a9       	ldd	r21, Y+54	; 0x36
    1e96:	6f a9       	ldd	r22, Y+55	; 0x37
    1e98:	78 ad       	ldd	r23, Y+56	; 0x38
    1e9a:	0e 94 81 18 	call	0x3102	; 0x3102 <_ZN7TwoWire8setClockEm>
    1e9e:	0f c0       	rjmp	.+30     	; 0x1ebe <_ZN16Adafruit_SSD130613invertDisplayEb+0x3e>
    1ea0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ea2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ea4:	89 2b       	or	r24, r25
    1ea6:	21 f0       	breq	.+8      	; 0x1eb0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x30>
    1ea8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1eaa:	9f ad       	ldd	r25, Y+63	; 0x3f
    1eac:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN8SPIClass16beginTransactionE11SPISettings>
    1eb0:	ef a5       	ldd	r30, Y+47	; 0x2f
    1eb2:	f8 a9       	ldd	r31, Y+48	; 0x30
    1eb4:	90 81       	ld	r25, Z
    1eb6:	8c a9       	ldd	r24, Y+52	; 0x34
    1eb8:	80 95       	com	r24
    1eba:	89 23       	and	r24, r25
    1ebc:	80 83       	st	Z, r24
    1ebe:	11 11       	cpse	r17, r1
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
    1ec2:	66 ea       	ldi	r22, 0xA6	; 166
    1ec4:	01 c0       	rjmp	.+2      	; 0x1ec8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x48>
    1ec6:	67 ea       	ldi	r22, 0xA7	; 167
    1ec8:	ce 01       	movw	r24, r28
    1eca:	7a df       	rcall	.-268    	; 0x1dc0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    1ecc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ece:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	49 f0       	breq	.+18     	; 0x1ee6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x66>
    1ed4:	49 ad       	ldd	r20, Y+57	; 0x39
    1ed6:	5a ad       	ldd	r21, Y+58	; 0x3a
    1ed8:	6b ad       	ldd	r22, Y+59	; 0x3b
    1eda:	7c ad       	ldd	r23, Y+60	; 0x3c
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	1f 91       	pop	r17
    1ee2:	0c 94 81 18 	jmp	0x3102	; 0x3102 <_ZN7TwoWire8setClockEm>
    1ee6:	ef a5       	ldd	r30, Y+47	; 0x2f
    1ee8:	f8 a9       	ldd	r31, Y+48	; 0x30
    1eea:	90 81       	ld	r25, Z
    1eec:	8c a9       	ldd	r24, Y+52	; 0x34
    1eee:	89 2b       	or	r24, r25
    1ef0:	80 83       	st	Z, r24
    1ef2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ef4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ef6:	89 2b       	or	r24, r25
    1ef8:	29 f0       	breq	.+10     	; 0x1f04 <_ZN16Adafruit_SSD130613invertDisplayEb+0x84>
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	1f 91       	pop	r17
    1f00:	0c 94 42 07 	jmp	0xe84	; 0xe84 <_ZN8SPIClass14endTransactionEv>
    1f04:	df 91       	pop	r29
    1f06:	cf 91       	pop	r28
    1f08:	1f 91       	pop	r17
    1f0a:	08 95       	ret

00001f0c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
    1f0c:	bf 92       	push	r11
    1f0e:	cf 92       	push	r12
    1f10:	df 92       	push	r13
    1f12:	ef 92       	push	r14
    1f14:	ff 92       	push	r15
    1f16:	0f 93       	push	r16
    1f18:	1f 93       	push	r17
    1f1a:	cf 93       	push	r28
    1f1c:	df 93       	push	r29
    1f1e:	ec 01       	movw	r28, r24
    1f20:	b6 2e       	mov	r11, r22
    1f22:	07 2f       	mov	r16, r23
    1f24:	14 2f       	mov	r17, r20
    1f26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x24>
    1f2e:	52 c0       	rjmp	.+164    	; 0x1fd4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xc8>
    1f30:	69 a1       	ldd	r22, Y+33	; 0x21
    1f32:	06 2e       	mov	r0, r22
    1f34:	00 0c       	add	r0, r0
    1f36:	77 0b       	sbc	r23, r23
    1f38:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN7TwoWire17beginTransmissionEi>
    1f3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f3e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f40:	dc 01       	movw	r26, r24
    1f42:	ed 91       	ld	r30, X+
    1f44:	fc 91       	ld	r31, X
    1f46:	01 90       	ld	r0, Z+
    1f48:	f0 81       	ld	r31, Z
    1f4a:	e0 2d       	mov	r30, r0
    1f4c:	60 e0       	ldi	r22, 0x00	; 0
    1f4e:	19 95       	eicall
    1f50:	cb 2c       	mov	r12, r11
    1f52:	d0 2e       	mov	r13, r16
    1f54:	ee 24       	eor	r14, r14
    1f56:	e3 94       	inc	r14
    1f58:	f1 2c       	mov	r15, r1
    1f5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f5c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f5e:	11 23       	and	r17, r17
    1f60:	71 f1       	breq	.+92     	; 0x1fbe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb2>
    1f62:	b0 e2       	ldi	r27, 0x20	; 32
    1f64:	eb 16       	cp	r14, r27
    1f66:	f1 04       	cpc	r15, r1
    1f68:	b8 f0       	brcs	.+46     	; 0x1f98 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x8c>
    1f6a:	0e 94 a1 18 	call	0x3142	; 0x3142 <_ZN7TwoWire15endTransmissionEv>
    1f6e:	69 a1       	ldd	r22, Y+33	; 0x21
    1f70:	06 2e       	mov	r0, r22
    1f72:	00 0c       	add	r0, r0
    1f74:	77 0b       	sbc	r23, r23
    1f76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f7a:	0e 94 8e 18 	call	0x311c	; 0x311c <_ZN7TwoWire17beginTransmissionEi>
    1f7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f82:	dc 01       	movw	r26, r24
    1f84:	ed 91       	ld	r30, X+
    1f86:	fc 91       	ld	r31, X
    1f88:	01 90       	ld	r0, Z+
    1f8a:	f0 81       	ld	r31, Z
    1f8c:	e0 2d       	mov	r30, r0
    1f8e:	60 e0       	ldi	r22, 0x00	; 0
    1f90:	19 95       	eicall
    1f92:	ee 24       	eor	r14, r14
    1f94:	e3 94       	inc	r14
    1f96:	f1 2c       	mov	r15, r1
    1f98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f9c:	f6 01       	movw	r30, r12
    1f9e:	64 91       	lpm	r22, Z
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	ed 91       	ld	r30, X+
    1fa4:	fc 91       	ld	r31, X
    1fa6:	01 90       	ld	r0, Z+
    1fa8:	f0 81       	ld	r31, Z
    1faa:	e0 2d       	mov	r30, r0
    1fac:	19 95       	eicall
    1fae:	bf ef       	ldi	r27, 0xFF	; 255
    1fb0:	eb 1a       	sub	r14, r27
    1fb2:	fb 0a       	sbc	r15, r27
    1fb4:	11 50       	subi	r17, 0x01	; 1
    1fb6:	f6 01       	movw	r30, r12
    1fb8:	31 96       	adiw	r30, 0x01	; 1
    1fba:	6f 01       	movw	r12, r30
    1fbc:	ce cf       	rjmp	.-100    	; 0x1f5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x4e>
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	1f 91       	pop	r17
    1fc4:	0f 91       	pop	r16
    1fc6:	ff 90       	pop	r15
    1fc8:	ef 90       	pop	r14
    1fca:	df 90       	pop	r13
    1fcc:	cf 90       	pop	r12
    1fce:	bf 90       	pop	r11
    1fd0:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <_ZN7TwoWire15endTransmissionEv>
    1fd4:	ed a5       	ldd	r30, Y+45	; 0x2d
    1fd6:	fe a5       	ldd	r31, Y+46	; 0x2e
    1fd8:	90 81       	ld	r25, Z
    1fda:	8b a9       	ldd	r24, Y+51	; 0x33
    1fdc:	80 95       	com	r24
    1fde:	89 23       	and	r24, r25
    1fe0:	80 83       	st	Z, r24
    1fe2:	e6 2e       	mov	r14, r22
    1fe4:	f7 2e       	mov	r15, r23
    1fe6:	11 23       	and	r17, r17
    1fe8:	71 f1       	breq	.+92     	; 0x2046 <__DATA_REGION_LENGTH__+0x46>
    1fea:	f7 01       	movw	r30, r14
    1fec:	84 91       	lpm	r24, Z
    1fee:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1ff0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1ff2:	23 2b       	or	r18, r19
    1ff4:	31 f0       	breq	.+12     	; 0x2002 <__DATA_REGION_LENGTH__+0x2>
    1ff6:	87 de       	rcall	.-754    	; 0x1d06 <_ZN8SPIClass8transferEh>
    1ff8:	11 50       	subi	r17, 0x01	; 1
    1ffa:	c7 01       	movw	r24, r14
    1ffc:	01 96       	adiw	r24, 0x01	; 1
    1ffe:	7c 01       	movw	r14, r24
    2000:	f2 cf       	rjmp	.-28     	; 0x1fe6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xda>
    2002:	28 e0       	ldi	r18, 0x08	; 8
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e8       	ldi	r20, 0x80	; 128
    2008:	e9 a5       	ldd	r30, Y+41	; 0x29
    200a:	fa a5       	ldd	r31, Y+42	; 0x2a
    200c:	99 a9       	ldd	r25, Y+49	; 0x31
    200e:	58 2f       	mov	r21, r24
    2010:	54 23       	and	r21, r20
    2012:	19 f0       	breq	.+6      	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    2014:	50 81       	ld	r21, Z
    2016:	95 2b       	or	r25, r21
    2018:	03 c0       	rjmp	.+6      	; 0x2020 <__DATA_REGION_LENGTH__+0x20>
    201a:	50 81       	ld	r21, Z
    201c:	90 95       	com	r25
    201e:	95 23       	and	r25, r21
    2020:	90 83       	st	Z, r25
    2022:	eb a5       	ldd	r30, Y+43	; 0x2b
    2024:	fc a5       	ldd	r31, Y+44	; 0x2c
    2026:	50 81       	ld	r21, Z
    2028:	9a a9       	ldd	r25, Y+50	; 0x32
    202a:	95 2b       	or	r25, r21
    202c:	90 83       	st	Z, r25
    202e:	eb a5       	ldd	r30, Y+43	; 0x2b
    2030:	fc a5       	ldd	r31, Y+44	; 0x2c
    2032:	50 81       	ld	r21, Z
    2034:	9a a9       	ldd	r25, Y+50	; 0x32
    2036:	90 95       	com	r25
    2038:	95 23       	and	r25, r21
    203a:	90 83       	st	Z, r25
    203c:	46 95       	lsr	r20
    203e:	21 50       	subi	r18, 0x01	; 1
    2040:	31 09       	sbc	r19, r1
    2042:	11 f7       	brne	.-60     	; 0x2008 <__DATA_REGION_LENGTH__+0x8>
    2044:	d9 cf       	rjmp	.-78     	; 0x1ff8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xec>
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	1f 91       	pop	r17
    204c:	0f 91       	pop	r16
    204e:	ff 90       	pop	r15
    2050:	ef 90       	pop	r14
    2052:	df 90       	pop	r13
    2054:	cf 90       	pop	r12
    2056:	bf 90       	pop	r11
    2058:	08 95       	ret

0000205a <_ZN16Adafruit_SSD130612clearDisplayEv>:
    205a:	fc 01       	movw	r30, r24
    205c:	86 81       	ldd	r24, Z+6	; 0x06
    205e:	97 81       	ldd	r25, Z+7	; 0x07
    2060:	9c 01       	movw	r18, r24
    2062:	29 5f       	subi	r18, 0xF9	; 249
    2064:	3f 4f       	sbci	r19, 0xFF	; 255
    2066:	37 ff       	sbrs	r19, 7
    2068:	02 c0       	rjmp	.+4      	; 0x206e <_ZN16Adafruit_SSD130612clearDisplayEv+0x14>
    206a:	29 5f       	subi	r18, 0xF9	; 249
    206c:	3f 4f       	sbci	r19, 0xFF	; 255
    206e:	83 e0       	ldi	r24, 0x03	; 3
    2070:	35 95       	asr	r19
    2072:	27 95       	ror	r18
    2074:	8a 95       	dec	r24
    2076:	e1 f7       	brne	.-8      	; 0x2070 <_ZN16Adafruit_SSD130612clearDisplayEv+0x16>
    2078:	84 81       	ldd	r24, Z+4	; 0x04
    207a:	95 81       	ldd	r25, Z+5	; 0x05
    207c:	28 9f       	mul	r18, r24
    207e:	a0 01       	movw	r20, r0
    2080:	29 9f       	mul	r18, r25
    2082:	50 0d       	add	r21, r0
    2084:	38 9f       	mul	r19, r24
    2086:	50 0d       	add	r21, r0
    2088:	11 24       	eor	r1, r1
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	87 8d       	ldd	r24, Z+31	; 0x1f
    2090:	90 a1       	ldd	r25, Z+32	; 0x20
    2092:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <memset>

00002096 <_ZN16Adafruit_SSD13065beginEhhbb>:
    2096:	8f 92       	push	r8
    2098:	9f 92       	push	r9
    209a:	af 92       	push	r10
    209c:	bf 92       	push	r11
    209e:	cf 92       	push	r12
    20a0:	df 92       	push	r13
    20a2:	ef 92       	push	r14
    20a4:	ff 92       	push	r15
    20a6:	0f 93       	push	r16
    20a8:	1f 93       	push	r17
    20aa:	cf 93       	push	r28
    20ac:	df 93       	push	r29
    20ae:	ec 01       	movw	r28, r24
    20b0:	86 2e       	mov	r8, r22
    20b2:	b4 2e       	mov	r11, r20
    20b4:	a2 2e       	mov	r10, r18
    20b6:	90 2e       	mov	r9, r16
    20b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20ba:	98 a1       	ldd	r25, Y+32	; 0x20
    20bc:	89 2b       	or	r24, r25
    20be:	e9 f4       	brne	.+58     	; 0x20fa <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    20c0:	2e 81       	ldd	r18, Y+6	; 0x06
    20c2:	3f 81       	ldd	r19, Y+7	; 0x07
    20c4:	c9 01       	movw	r24, r18
    20c6:	07 96       	adiw	r24, 0x07	; 7
    20c8:	97 fd       	sbrc	r25, 7
    20ca:	07 96       	adiw	r24, 0x07	; 7
    20cc:	23 e0       	ldi	r18, 0x03	; 3
    20ce:	95 95       	asr	r25
    20d0:	87 95       	ror	r24
    20d2:	2a 95       	dec	r18
    20d4:	e1 f7       	brne	.-8      	; 0x20ce <_ZN16Adafruit_SSD13065beginEhhbb+0x38>
    20d6:	2c 81       	ldd	r18, Y+4	; 0x04
    20d8:	3d 81       	ldd	r19, Y+5	; 0x05
    20da:	ac 01       	movw	r20, r24
    20dc:	42 9f       	mul	r20, r18
    20de:	c0 01       	movw	r24, r0
    20e0:	43 9f       	mul	r20, r19
    20e2:	90 0d       	add	r25, r0
    20e4:	52 9f       	mul	r21, r18
    20e6:	90 0d       	add	r25, r0
    20e8:	11 24       	eor	r1, r1
    20ea:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <malloc>
    20ee:	98 a3       	std	Y+32, r25	; 0x20
    20f0:	8f 8f       	std	Y+31, r24	; 0x1f
    20f2:	89 2b       	or	r24, r25
    20f4:	11 f4       	brne	.+4      	; 0x20fa <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	80 c1       	rjmp	.+768    	; 0x23fa <__stack+0x1fb>
    20fa:	ce 01       	movw	r24, r28
    20fc:	ae df       	rcall	.-164    	; 0x205a <_ZN16Adafruit_SSD130612clearDisplayEv>
    20fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2100:	9f 81       	ldd	r25, Y+7	; 0x07
    2102:	6c 81       	ldd	r22, Y+4	; 0x04
    2104:	7d 81       	ldd	r23, Y+5	; 0x05
    2106:	81 32       	cpi	r24, 0x21	; 33
    2108:	91 05       	cpc	r25, r1
    210a:	e4 f0       	brlt	.+56     	; 0x2144 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    210c:	ac 01       	movw	r20, r24
    210e:	40 54       	subi	r20, 0x40	; 64
    2110:	51 09       	sbc	r21, r1
    2112:	57 ff       	sbrs	r21, 7
    2114:	02 c0       	rjmp	.+4      	; 0x211a <_ZN16Adafruit_SSD13065beginEhhbb+0x84>
    2116:	4f 5f       	subi	r20, 0xFF	; 255
    2118:	5f 4f       	sbci	r21, 0xFF	; 255
    211a:	55 95       	asr	r21
    211c:	47 95       	ror	r20
    211e:	62 55       	subi	r22, 0x52	; 82
    2120:	71 09       	sbc	r23, r1
    2122:	77 ff       	sbrs	r23, 7
    2124:	02 c0       	rjmp	.+4      	; 0x212a <_ZN16Adafruit_SSD13065beginEhhbb+0x94>
    2126:	6f 5f       	subi	r22, 0xFF	; 255
    2128:	7f 4f       	sbci	r23, 0xFF	; 255
    212a:	75 95       	asr	r23
    212c:	67 95       	ror	r22
    212e:	cc 24       	eor	r12, r12
    2130:	c3 94       	inc	r12
    2132:	d1 2c       	mov	r13, r1
    2134:	80 e4       	ldi	r24, 0x40	; 64
    2136:	e8 2e       	mov	r14, r24
    2138:	f1 2c       	mov	r15, r1
    213a:	02 e5       	ldi	r16, 0x52	; 82
    213c:	10 e0       	ldi	r17, 0x00	; 0
    213e:	29 e2       	ldi	r18, 0x29	; 41
    2140:	38 e0       	ldi	r19, 0x08	; 8
    2142:	1b c0       	rjmp	.+54     	; 0x217a <_ZN16Adafruit_SSD13065beginEhhbb+0xe4>
    2144:	ac 01       	movw	r20, r24
    2146:	40 52       	subi	r20, 0x20	; 32
    2148:	51 09       	sbc	r21, r1
    214a:	57 ff       	sbrs	r21, 7
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
    214e:	4f 5f       	subi	r20, 0xFF	; 255
    2150:	5f 4f       	sbci	r21, 0xFF	; 255
    2152:	55 95       	asr	r21
    2154:	47 95       	ror	r20
    2156:	63 57       	subi	r22, 0x73	; 115
    2158:	71 09       	sbc	r23, r1
    215a:	77 ff       	sbrs	r23, 7
    215c:	02 c0       	rjmp	.+4      	; 0x2162 <_ZN16Adafruit_SSD13065beginEhhbb+0xcc>
    215e:	6f 5f       	subi	r22, 0xFF	; 255
    2160:	7f 4f       	sbci	r23, 0xFF	; 255
    2162:	75 95       	asr	r23
    2164:	67 95       	ror	r22
    2166:	cc 24       	eor	r12, r12
    2168:	c3 94       	inc	r12
    216a:	d1 2c       	mov	r13, r1
    216c:	a0 e2       	ldi	r26, 0x20	; 32
    216e:	ea 2e       	mov	r14, r26
    2170:	f1 2c       	mov	r15, r1
    2172:	03 e7       	ldi	r16, 0x73	; 115
    2174:	10 e0       	ldi	r17, 0x00	; 0
    2176:	29 e4       	ldi	r18, 0x49	; 73
    2178:	36 e0       	ldi	r19, 0x06	; 6
    217a:	ce 01       	movw	r24, r28
    217c:	51 d9       	rcall	.-3422   	; 0x1420 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    217e:	8a a2       	std	Y+34, r8	; 0x22
    2180:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2182:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	91 f0       	breq	.+36     	; 0x21ac <_ZN16Adafruit_SSD13065beginEhhbb+0x116>
    2188:	b1 10       	cpse	r11, r1
    218a:	07 c0       	rjmp	.+14     	; 0x219a <_ZN16Adafruit_SSD13065beginEhhbb+0x104>
    218c:	2e 81       	ldd	r18, Y+6	; 0x06
    218e:	3f 81       	ldd	r19, Y+7	; 0x07
    2190:	20 32       	cpi	r18, 0x20	; 32
    2192:	31 05       	cpc	r19, r1
    2194:	21 f4       	brne	.+8      	; 0x219e <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
    2196:	2c e3       	ldi	r18, 0x3C	; 60
    2198:	03 c0       	rjmp	.+6      	; 0x21a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
    219a:	2b 2d       	mov	r18, r11
    219c:	01 c0       	rjmp	.+2      	; 0x21a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
    219e:	2d e3       	ldi	r18, 0x3D	; 61
    21a0:	29 a3       	std	Y+33, r18	; 0x21
    21a2:	99 20       	and	r9, r9
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x112>
    21a6:	26 c1       	rjmp	.+588    	; 0x23f4 <__stack+0x1f5>
    21a8:	9d d7       	rcall	.+3898   	; 0x30e4 <_ZN7TwoWire5beginEv>
    21aa:	78 c0       	rjmp	.+240    	; 0x229c <__stack+0x9d>
    21ac:	61 e0       	ldi	r22, 0x01	; 1
    21ae:	8e a1       	ldd	r24, Y+38	; 0x26
    21b0:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <pinMode>
    21b4:	61 e0       	ldi	r22, 0x01	; 1
    21b6:	8f a1       	ldd	r24, Y+39	; 0x27
    21b8:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <pinMode>
    21bc:	8e a1       	ldd	r24, Y+38	; 0x26
    21be:	08 2e       	mov	r0, r24
    21c0:	00 0c       	add	r0, r0
    21c2:	99 0b       	sbc	r25, r25
    21c4:	fc 01       	movw	r30, r24
    21c6:	eb 58       	subi	r30, 0x8B	; 139
    21c8:	f4 4f       	sbci	r31, 0xF4	; 244
    21ca:	e4 91       	lpm	r30, Z
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	ee 0f       	add	r30, r30
    21d0:	ff 1f       	adc	r31, r31
    21d2:	e5 54       	subi	r30, 0x45	; 69
    21d4:	f4 4f       	sbci	r31, 0xF4	; 244
    21d6:	25 91       	lpm	r18, Z+
    21d8:	34 91       	lpm	r19, Z
    21da:	3e a7       	std	Y+46, r19	; 0x2e
    21dc:	2d a7       	std	Y+45, r18	; 0x2d
    21de:	fc 01       	movw	r30, r24
    21e0:	e1 5d       	subi	r30, 0xD1	; 209
    21e2:	f4 4f       	sbci	r31, 0xF4	; 244
    21e4:	e4 91       	lpm	r30, Z
    21e6:	eb ab       	std	Y+51, r30	; 0x33
    21e8:	8f a1       	ldd	r24, Y+39	; 0x27
    21ea:	08 2e       	mov	r0, r24
    21ec:	00 0c       	add	r0, r0
    21ee:	99 0b       	sbc	r25, r25
    21f0:	fc 01       	movw	r30, r24
    21f2:	eb 58       	subi	r30, 0x8B	; 139
    21f4:	f4 4f       	sbci	r31, 0xF4	; 244
    21f6:	e4 91       	lpm	r30, Z
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	ee 0f       	add	r30, r30
    21fc:	ff 1f       	adc	r31, r31
    21fe:	e5 54       	subi	r30, 0x45	; 69
    2200:	f4 4f       	sbci	r31, 0xF4	; 244
    2202:	a5 91       	lpm	r26, Z+
    2204:	b4 91       	lpm	r27, Z
    2206:	b8 ab       	std	Y+48, r27	; 0x30
    2208:	af a7       	std	Y+47, r26	; 0x2f
    220a:	fc 01       	movw	r30, r24
    220c:	e1 5d       	subi	r30, 0xD1	; 209
    220e:	f4 4f       	sbci	r31, 0xF4	; 244
    2210:	e4 91       	lpm	r30, Z
    2212:	ec ab       	std	Y+52, r30	; 0x34
    2214:	8c 91       	ld	r24, X
    2216:	e8 2b       	or	r30, r24
    2218:	ec 93       	st	X, r30
    221a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    221c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    221e:	89 2b       	or	r24, r25
    2220:	29 f0       	breq	.+10     	; 0x222c <__stack+0x2d>
    2222:	99 20       	and	r9, r9
    2224:	09 f4       	brne	.+2      	; 0x2228 <__stack+0x29>
    2226:	3a c0       	rjmp	.+116    	; 0x229c <__stack+0x9d>
    2228:	82 d3       	rcall	.+1796   	; 0x292e <_ZN8SPIClass5beginEv>
    222a:	38 c0       	rjmp	.+112    	; 0x229c <__stack+0x9d>
    222c:	61 e0       	ldi	r22, 0x01	; 1
    222e:	8c a1       	ldd	r24, Y+36	; 0x24
    2230:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <pinMode>
    2234:	61 e0       	ldi	r22, 0x01	; 1
    2236:	8d a1       	ldd	r24, Y+37	; 0x25
    2238:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <pinMode>
    223c:	8c a1       	ldd	r24, Y+36	; 0x24
    223e:	08 2e       	mov	r0, r24
    2240:	00 0c       	add	r0, r0
    2242:	99 0b       	sbc	r25, r25
    2244:	fc 01       	movw	r30, r24
    2246:	eb 58       	subi	r30, 0x8B	; 139
    2248:	f4 4f       	sbci	r31, 0xF4	; 244
    224a:	e4 91       	lpm	r30, Z
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	ee 0f       	add	r30, r30
    2250:	ff 1f       	adc	r31, r31
    2252:	e5 54       	subi	r30, 0x45	; 69
    2254:	f4 4f       	sbci	r31, 0xF4	; 244
    2256:	25 91       	lpm	r18, Z+
    2258:	34 91       	lpm	r19, Z
    225a:	3a a7       	std	Y+42, r19	; 0x2a
    225c:	29 a7       	std	Y+41, r18	; 0x29
    225e:	fc 01       	movw	r30, r24
    2260:	e1 5d       	subi	r30, 0xD1	; 209
    2262:	f4 4f       	sbci	r31, 0xF4	; 244
    2264:	e4 91       	lpm	r30, Z
    2266:	e9 ab       	std	Y+49, r30	; 0x31
    2268:	8d a1       	ldd	r24, Y+37	; 0x25
    226a:	08 2e       	mov	r0, r24
    226c:	00 0c       	add	r0, r0
    226e:	99 0b       	sbc	r25, r25
    2270:	fc 01       	movw	r30, r24
    2272:	eb 58       	subi	r30, 0x8B	; 139
    2274:	f4 4f       	sbci	r31, 0xF4	; 244
    2276:	e4 91       	lpm	r30, Z
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	ee 0f       	add	r30, r30
    227c:	ff 1f       	adc	r31, r31
    227e:	e5 54       	subi	r30, 0x45	; 69
    2280:	f4 4f       	sbci	r31, 0xF4	; 244
    2282:	a5 91       	lpm	r26, Z+
    2284:	b4 91       	lpm	r27, Z
    2286:	bc a7       	std	Y+44, r27	; 0x2c
    2288:	ab a7       	std	Y+43, r26	; 0x2b
    228a:	fc 01       	movw	r30, r24
    228c:	e1 5d       	subi	r30, 0xD1	; 209
    228e:	f4 4f       	sbci	r31, 0xF4	; 244
    2290:	e4 91       	lpm	r30, Z
    2292:	ea ab       	std	Y+50, r30	; 0x32
    2294:	8c 91       	ld	r24, X
    2296:	e0 95       	com	r30
    2298:	e8 23       	and	r30, r24
    229a:	ec 93       	st	X, r30
    229c:	aa 20       	and	r10, r10
    229e:	f1 f0       	breq	.+60     	; 0x22dc <__stack+0xdd>
    22a0:	88 a5       	ldd	r24, Y+40	; 0x28
    22a2:	87 fd       	sbrc	r24, 7
    22a4:	1b c0       	rjmp	.+54     	; 0x22dc <__stack+0xdd>
    22a6:	61 e0       	ldi	r22, 0x01	; 1
    22a8:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <pinMode>
    22ac:	61 e0       	ldi	r22, 0x01	; 1
    22ae:	88 a5       	ldd	r24, Y+40	; 0x28
    22b0:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <digitalWrite>
    22b4:	61 e0       	ldi	r22, 0x01	; 1
    22b6:	70 e0       	ldi	r23, 0x00	; 0
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	0e 94 6d 1c 	call	0x38da	; 0x38da <delay>
    22c0:	60 e0       	ldi	r22, 0x00	; 0
    22c2:	88 a5       	ldd	r24, Y+40	; 0x28
    22c4:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <digitalWrite>
    22c8:	6a e0       	ldi	r22, 0x0A	; 10
    22ca:	70 e0       	ldi	r23, 0x00	; 0
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	0e 94 6d 1c 	call	0x38da	; 0x38da <delay>
    22d4:	61 e0       	ldi	r22, 0x01	; 1
    22d6:	88 a5       	ldd	r24, Y+40	; 0x28
    22d8:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <digitalWrite>
    22dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22e0:	00 97       	sbiw	r24, 0x00	; 0
    22e2:	31 f0       	breq	.+12     	; 0x22f0 <__stack+0xf1>
    22e4:	4d a9       	ldd	r20, Y+53	; 0x35
    22e6:	5e a9       	ldd	r21, Y+54	; 0x36
    22e8:	6f a9       	ldd	r22, Y+55	; 0x37
    22ea:	78 ad       	ldd	r23, Y+56	; 0x38
    22ec:	0a d7       	rcall	.+3604   	; 0x3102 <_ZN7TwoWire8setClockEm>
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <__stack+0x10f>
    22f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22f4:	89 2b       	or	r24, r25
    22f6:	21 f0       	breq	.+8      	; 0x2300 <__stack+0x101>
    22f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    22fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    22fc:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2300:	ef a5       	ldd	r30, Y+47	; 0x2f
    2302:	f8 a9       	ldd	r31, Y+48	; 0x30
    2304:	90 81       	ld	r25, Z
    2306:	8c a9       	ldd	r24, Y+52	; 0x34
    2308:	80 95       	com	r24
    230a:	89 23       	and	r24, r25
    230c:	80 83       	st	Z, r24
    230e:	44 e0       	ldi	r20, 0x04	; 4
    2310:	65 e4       	ldi	r22, 0x45	; 69
    2312:	76 e0       	ldi	r23, 0x06	; 6
    2314:	ce 01       	movw	r24, r28
    2316:	fa dd       	rcall	.-1036   	; 0x1f0c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    2318:	6e 81       	ldd	r22, Y+6	; 0x06
    231a:	61 50       	subi	r22, 0x01	; 1
    231c:	ce 01       	movw	r24, r28
    231e:	50 dd       	rcall	.-1376   	; 0x1dc0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2320:	44 e0       	ldi	r20, 0x04	; 4
    2322:	61 e4       	ldi	r22, 0x41	; 65
    2324:	76 e0       	ldi	r23, 0x06	; 6
    2326:	ce 01       	movw	r24, r28
    2328:	f1 dd       	rcall	.-1054   	; 0x1f0c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    232a:	8a a1       	ldd	r24, Y+34	; 0x22
    232c:	81 30       	cpi	r24, 0x01	; 1
    232e:	11 f4       	brne	.+4      	; 0x2334 <__stack+0x135>
    2330:	60 e1       	ldi	r22, 0x10	; 16
    2332:	01 c0       	rjmp	.+2      	; 0x2336 <__stack+0x137>
    2334:	64 e1       	ldi	r22, 0x14	; 20
    2336:	ce 01       	movw	r24, r28
    2338:	43 dd       	rcall	.-1402   	; 0x1dc0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    233a:	44 e0       	ldi	r20, 0x04	; 4
    233c:	6d e3       	ldi	r22, 0x3D	; 61
    233e:	76 e0       	ldi	r23, 0x06	; 6
    2340:	ce 01       	movw	r24, r28
    2342:	e4 dd       	rcall	.-1080   	; 0x1f0c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    2344:	8f e8       	ldi	r24, 0x8F	; 143
    2346:	8d af       	std	Y+61, r24	; 0x3d
    2348:	8c 81       	ldd	r24, Y+4	; 0x04
    234a:	9d 81       	ldd	r25, Y+5	; 0x05
    234c:	80 38       	cpi	r24, 0x80	; 128
    234e:	91 05       	cpc	r25, r1
    2350:	71 f4       	brne	.+28     	; 0x236e <__stack+0x16f>
    2352:	8e 81       	ldd	r24, Y+6	; 0x06
    2354:	9f 81       	ldd	r25, Y+7	; 0x07
    2356:	80 34       	cpi	r24, 0x40	; 64
    2358:	91 05       	cpc	r25, r1
    235a:	b9 f4       	brne	.+46     	; 0x238a <__stack+0x18b>
    235c:	8a a1       	ldd	r24, Y+34	; 0x22
    235e:	81 30       	cpi	r24, 0x01	; 1
    2360:	11 f4       	brne	.+4      	; 0x2366 <__stack+0x167>
    2362:	8f e9       	ldi	r24, 0x9F	; 159
    2364:	01 c0       	rjmp	.+2      	; 0x2368 <__stack+0x169>
    2366:	8f ec       	ldi	r24, 0xCF	; 207
    2368:	8d af       	std	Y+61, r24	; 0x3d
    236a:	12 e1       	ldi	r17, 0x12	; 18
    236c:	0f c0       	rjmp	.+30     	; 0x238c <__stack+0x18d>
    236e:	80 36       	cpi	r24, 0x60	; 96
    2370:	91 05       	cpc	r25, r1
    2372:	59 f4       	brne	.+22     	; 0x238a <__stack+0x18b>
    2374:	8e 81       	ldd	r24, Y+6	; 0x06
    2376:	9f 81       	ldd	r25, Y+7	; 0x07
    2378:	40 97       	sbiw	r24, 0x10	; 16
    237a:	39 f4       	brne	.+14     	; 0x238a <__stack+0x18b>
    237c:	8a a1       	ldd	r24, Y+34	; 0x22
    237e:	81 30       	cpi	r24, 0x01	; 1
    2380:	11 f4       	brne	.+4      	; 0x2386 <__stack+0x187>
    2382:	80 e1       	ldi	r24, 0x10	; 16
    2384:	01 c0       	rjmp	.+2      	; 0x2388 <__stack+0x189>
    2386:	8f ea       	ldi	r24, 0xAF	; 175
    2388:	8d af       	std	Y+61, r24	; 0x3d
    238a:	12 e0       	ldi	r17, 0x02	; 2
    238c:	6a ed       	ldi	r22, 0xDA	; 218
    238e:	ce 01       	movw	r24, r28
    2390:	17 dd       	rcall	.-1490   	; 0x1dc0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2392:	61 2f       	mov	r22, r17
    2394:	ce 01       	movw	r24, r28
    2396:	14 dd       	rcall	.-1496   	; 0x1dc0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2398:	61 e8       	ldi	r22, 0x81	; 129
    239a:	ce 01       	movw	r24, r28
    239c:	11 dd       	rcall	.-1502   	; 0x1dc0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    239e:	6d ad       	ldd	r22, Y+61	; 0x3d
    23a0:	ce 01       	movw	r24, r28
    23a2:	0e dd       	rcall	.-1508   	; 0x1dc0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    23a4:	69 ed       	ldi	r22, 0xD9	; 217
    23a6:	ce 01       	movw	r24, r28
    23a8:	0b dd       	rcall	.-1514   	; 0x1dc0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    23aa:	8a a1       	ldd	r24, Y+34	; 0x22
    23ac:	81 30       	cpi	r24, 0x01	; 1
    23ae:	11 f4       	brne	.+4      	; 0x23b4 <__stack+0x1b5>
    23b0:	62 e2       	ldi	r22, 0x22	; 34
    23b2:	01 c0       	rjmp	.+2      	; 0x23b6 <__stack+0x1b7>
    23b4:	61 ef       	ldi	r22, 0xF1	; 241
    23b6:	ce 01       	movw	r24, r28
    23b8:	03 dd       	rcall	.-1530   	; 0x1dc0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    23ba:	46 e0       	ldi	r20, 0x06	; 6
    23bc:	67 e3       	ldi	r22, 0x37	; 55
    23be:	76 e0       	ldi	r23, 0x06	; 6
    23c0:	ce 01       	movw	r24, r28
    23c2:	a4 dd       	rcall	.-1208   	; 0x1f0c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    23c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	31 f0       	breq	.+12     	; 0x23d8 <__stack+0x1d9>
    23cc:	49 ad       	ldd	r20, Y+57	; 0x39
    23ce:	5a ad       	ldd	r21, Y+58	; 0x3a
    23d0:	6b ad       	ldd	r22, Y+59	; 0x3b
    23d2:	7c ad       	ldd	r23, Y+60	; 0x3c
    23d4:	96 d6       	rcall	.+3372   	; 0x3102 <_ZN7TwoWire8setClockEm>
    23d6:	0c c0       	rjmp	.+24     	; 0x23f0 <__stack+0x1f1>
    23d8:	ef a5       	ldd	r30, Y+47	; 0x2f
    23da:	f8 a9       	ldd	r31, Y+48	; 0x30
    23dc:	90 81       	ld	r25, Z
    23de:	8c a9       	ldd	r24, Y+52	; 0x34
    23e0:	89 2b       	or	r24, r25
    23e2:	80 83       	st	Z, r24
    23e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23e8:	89 2b       	or	r24, r25
    23ea:	11 f0       	breq	.+4      	; 0x23f0 <__stack+0x1f1>
    23ec:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZN8SPIClass14endTransactionEv>
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	03 c0       	rjmp	.+6      	; 0x23fa <__stack+0x1fb>
    23f4:	a1 10       	cpse	r10, r1
    23f6:	54 cf       	rjmp	.-344    	; 0x22a0 <__stack+0xa1>
    23f8:	75 cf       	rjmp	.-278    	; 0x22e4 <__stack+0xe5>
    23fa:	df 91       	pop	r29
    23fc:	cf 91       	pop	r28
    23fe:	1f 91       	pop	r17
    2400:	0f 91       	pop	r16
    2402:	ff 90       	pop	r15
    2404:	ef 90       	pop	r14
    2406:	df 90       	pop	r13
    2408:	cf 90       	pop	r12
    240a:	bf 90       	pop	r11
    240c:	af 90       	pop	r10
    240e:	9f 90       	pop	r9
    2410:	8f 90       	pop	r8
    2412:	08 95       	ret

00002414 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>:
    2414:	0f 93       	push	r16
    2416:	1f 93       	push	r17
    2418:	cf 93       	push	r28
    241a:	df 93       	push	r29
    241c:	dc 01       	movw	r26, r24
    241e:	57 fd       	sbrc	r21, 7
    2420:	64 c0       	rjmp	.+200    	; 0x24ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2422:	16 96       	adiw	r26, 0x06	; 6
    2424:	8d 91       	ld	r24, X+
    2426:	9c 91       	ld	r25, X
    2428:	17 97       	sbiw	r26, 0x07	; 7
    242a:	48 17       	cp	r20, r24
    242c:	59 07       	cpc	r21, r25
    242e:	0c f0       	brlt	.+2      	; 0x2432 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1e>
    2430:	5c c0       	rjmp	.+184    	; 0x24ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2432:	77 ff       	sbrs	r23, 7
    2434:	04 c0       	rjmp	.+8      	; 0x243e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x2a>
    2436:	26 0f       	add	r18, r22
    2438:	37 1f       	adc	r19, r23
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	70 e0       	ldi	r23, 0x00	; 0
    243e:	14 96       	adiw	r26, 0x04	; 4
    2440:	cd 91       	ld	r28, X+
    2442:	dc 91       	ld	r29, X
    2444:	15 97       	sbiw	r26, 0x05	; 5
    2446:	cb 01       	movw	r24, r22
    2448:	82 0f       	add	r24, r18
    244a:	93 1f       	adc	r25, r19
    244c:	c8 17       	cp	r28, r24
    244e:	d9 07       	cpc	r29, r25
    2450:	1c f4       	brge	.+6      	; 0x2458 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x44>
    2452:	9e 01       	movw	r18, r28
    2454:	26 1b       	sub	r18, r22
    2456:	37 0b       	sbc	r19, r23
    2458:	12 16       	cp	r1, r18
    245a:	13 06       	cpc	r1, r19
    245c:	0c f0       	brlt	.+2      	; 0x2460 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x4c>
    245e:	45 c0       	rjmp	.+138    	; 0x24ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2460:	fa 01       	movw	r30, r20
    2462:	57 fd       	sbrc	r21, 7
    2464:	37 96       	adiw	r30, 0x07	; 7
    2466:	cf 01       	movw	r24, r30
    2468:	e3 e0       	ldi	r30, 0x03	; 3
    246a:	95 95       	asr	r25
    246c:	87 95       	ror	r24
    246e:	ea 95       	dec	r30
    2470:	e1 f7       	brne	.-8      	; 0x246a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x56>
    2472:	8c 9f       	mul	r24, r28
    2474:	f0 01       	movw	r30, r0
    2476:	8d 9f       	mul	r24, r29
    2478:	f0 0d       	add	r31, r0
    247a:	9c 9f       	mul	r25, r28
    247c:	f0 0d       	add	r31, r0
    247e:	11 24       	eor	r1, r1
    2480:	6e 0f       	add	r22, r30
    2482:	7f 1f       	adc	r23, r31
    2484:	5f 96       	adiw	r26, 0x1f	; 31
    2486:	ed 91       	ld	r30, X+
    2488:	fc 91       	ld	r31, X
    248a:	90 97       	sbiw	r26, 0x20	; 32
    248c:	e6 0f       	add	r30, r22
    248e:	f7 1f       	adc	r31, r23
    2490:	47 70       	andi	r20, 0x07	; 7
    2492:	55 27       	eor	r21, r21
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	01 c0       	rjmp	.+2      	; 0x249c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x88>
    249a:	88 0f       	add	r24, r24
    249c:	4a 95       	dec	r20
    249e:	ea f7       	brpl	.-6      	; 0x249a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x86>
    24a0:	48 2f       	mov	r20, r24
    24a2:	01 30       	cpi	r16, 0x01	; 1
    24a4:	11 05       	cpc	r17, r1
    24a6:	39 f0       	breq	.+14     	; 0x24b6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa2>
    24a8:	78 f0       	brcs	.+30     	; 0x24c8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xb4>
    24aa:	02 30       	cpi	r16, 0x02	; 2
    24ac:	11 05       	cpc	r17, r1
    24ae:	e9 f4       	brne	.+58     	; 0x24ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    24b0:	2e 0f       	add	r18, r30
    24b2:	3f 1f       	adc	r19, r31
    24b4:	13 c0       	rjmp	.+38     	; 0x24dc <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    24b6:	2e 0f       	add	r18, r30
    24b8:	3f 1f       	adc	r19, r31
    24ba:	e2 17       	cp	r30, r18
    24bc:	f3 07       	cpc	r31, r19
    24be:	a9 f0       	breq	.+42     	; 0x24ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    24c0:	80 81       	ld	r24, Z
    24c2:	84 2b       	or	r24, r20
    24c4:	81 93       	st	Z+, r24
    24c6:	f9 cf       	rjmp	.-14     	; 0x24ba <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa6>
    24c8:	80 95       	com	r24
    24ca:	2e 0f       	add	r18, r30
    24cc:	3f 1f       	adc	r19, r31
    24ce:	e2 17       	cp	r30, r18
    24d0:	f3 07       	cpc	r31, r19
    24d2:	59 f0       	breq	.+22     	; 0x24ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    24d4:	90 81       	ld	r25, Z
    24d6:	98 23       	and	r25, r24
    24d8:	91 93       	st	Z+, r25
    24da:	f9 cf       	rjmp	.-14     	; 0x24ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xba>
    24dc:	e2 17       	cp	r30, r18
    24de:	f3 07       	cpc	r31, r19
    24e0:	21 f0       	breq	.+8      	; 0x24ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    24e2:	80 81       	ld	r24, Z
    24e4:	84 27       	eor	r24, r20
    24e6:	81 93       	st	Z+, r24
    24e8:	f9 cf       	rjmp	.-14     	; 0x24dc <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    24ea:	df 91       	pop	r29
    24ec:	cf 91       	pop	r28
    24ee:	1f 91       	pop	r17
    24f0:	0f 91       	pop	r16
    24f2:	08 95       	ret

000024f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>:
    24f4:	ef 92       	push	r14
    24f6:	ff 92       	push	r15
    24f8:	0f 93       	push	r16
    24fa:	1f 93       	push	r17
    24fc:	cf 93       	push	r28
    24fe:	df 93       	push	r29
    2500:	ec 01       	movw	r28, r24
    2502:	77 fd       	sbrc	r23, 7
    2504:	a5 c0       	rjmp	.+330    	; 0x2650 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2506:	ec 80       	ldd	r14, Y+4	; 0x04
    2508:	fd 80       	ldd	r15, Y+5	; 0x05
    250a:	6e 15       	cp	r22, r14
    250c:	7f 05       	cpc	r23, r15
    250e:	0c f0       	brlt	.+2      	; 0x2512 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1e>
    2510:	9f c0       	rjmp	.+318    	; 0x2650 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2512:	57 ff       	sbrs	r21, 7
    2514:	04 c0       	rjmp	.+8      	; 0x251e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2a>
    2516:	24 0f       	add	r18, r20
    2518:	35 1f       	adc	r19, r21
    251a:	40 e0       	ldi	r20, 0x00	; 0
    251c:	50 e0       	ldi	r21, 0x00	; 0
    251e:	8e 81       	ldd	r24, Y+6	; 0x06
    2520:	9f 81       	ldd	r25, Y+7	; 0x07
    2522:	fa 01       	movw	r30, r20
    2524:	e2 0f       	add	r30, r18
    2526:	f3 1f       	adc	r31, r19
    2528:	8e 17       	cp	r24, r30
    252a:	9f 07       	cpc	r25, r31
    252c:	1c f4       	brge	.+6      	; 0x2534 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x40>
    252e:	9c 01       	movw	r18, r24
    2530:	24 1b       	sub	r18, r20
    2532:	35 0b       	sbc	r19, r21
    2534:	12 16       	cp	r1, r18
    2536:	13 06       	cpc	r1, r19
    2538:	0c f0       	brlt	.+2      	; 0x253c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x48>
    253a:	8a c0       	rjmp	.+276    	; 0x2650 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    253c:	92 2f       	mov	r25, r18
    253e:	84 2f       	mov	r24, r20
    2540:	86 95       	lsr	r24
    2542:	86 95       	lsr	r24
    2544:	86 95       	lsr	r24
    2546:	8e 9d       	mul	r24, r14
    2548:	d0 01       	movw	r26, r0
    254a:	8f 9d       	mul	r24, r15
    254c:	b0 0d       	add	r27, r0
    254e:	11 24       	eor	r1, r1
    2550:	6a 0f       	add	r22, r26
    2552:	7b 1f       	adc	r23, r27
    2554:	af 8d       	ldd	r26, Y+31	; 0x1f
    2556:	b8 a1       	ldd	r27, Y+32	; 0x20
    2558:	a6 0f       	add	r26, r22
    255a:	b7 1f       	adc	r27, r23
    255c:	47 70       	andi	r20, 0x07	; 7
    255e:	b1 f1       	breq	.+108    	; 0x25cc <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    2560:	88 e0       	ldi	r24, 0x08	; 8
    2562:	84 1b       	sub	r24, r20
    2564:	48 2f       	mov	r20, r24
    2566:	68 2f       	mov	r22, r24
    2568:	70 e0       	ldi	r23, 0x00	; 0
    256a:	fb 01       	movw	r30, r22
    256c:	e1 5d       	subi	r30, 0xD1	; 209
    256e:	f9 4f       	sbci	r31, 0xF9	; 249
    2570:	e4 91       	lpm	r30, Z
    2572:	28 17       	cp	r18, r24
    2574:	98 f4       	brcc	.+38     	; 0x259c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa8>
    2576:	62 1b       	sub	r22, r18
    2578:	71 09       	sbc	r23, r1
    257a:	2f ef       	ldi	r18, 0xFF	; 255
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x90>
    2580:	35 95       	asr	r19
    2582:	27 95       	ror	r18
    2584:	6a 95       	dec	r22
    2586:	e2 f7       	brpl	.-8      	; 0x2580 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x8c>
    2588:	e2 23       	and	r30, r18
    258a:	01 30       	cpi	r16, 0x01	; 1
    258c:	11 05       	cpc	r17, r1
    258e:	49 f0       	breq	.+18     	; 0x25a2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xae>
    2590:	78 f0       	brcs	.+30     	; 0x25b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    2592:	02 30       	cpi	r16, 0x02	; 2
    2594:	11 05       	cpc	r17, r1
    2596:	09 f0       	breq	.+2      	; 0x259a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa6>
    2598:	5b c0       	rjmp	.+182    	; 0x2650 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    259a:	0e c0       	rjmp	.+28     	; 0x25b8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    259c:	01 30       	cpi	r16, 0x01	; 1
    259e:	11 05       	cpc	r17, r1
    25a0:	19 f4       	brne	.+6      	; 0x25a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xb4>
    25a2:	8c 91       	ld	r24, X
    25a4:	e8 2b       	or	r30, r24
    25a6:	0a c0       	rjmp	.+20     	; 0x25bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    25a8:	01 30       	cpi	r16, 0x01	; 1
    25aa:	11 05       	cpc	r17, r1
    25ac:	08 f0       	brcs	.+2      	; 0x25b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    25ae:	49 c0       	rjmp	.+146    	; 0x2642 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14e>
    25b0:	e0 95       	com	r30
    25b2:	8c 91       	ld	r24, X
    25b4:	e8 23       	and	r30, r24
    25b6:	02 c0       	rjmp	.+4      	; 0x25bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    25b8:	8c 91       	ld	r24, X
    25ba:	e8 27       	eor	r30, r24
    25bc:	ec 93       	st	X, r30
    25be:	94 17       	cp	r25, r20
    25c0:	08 f4       	brcc	.+2      	; 0x25c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd0>
    25c2:	46 c0       	rjmp	.+140    	; 0x2650 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    25c4:	2c 81       	ldd	r18, Y+4	; 0x04
    25c6:	3d 81       	ldd	r19, Y+5	; 0x05
    25c8:	a2 0f       	add	r26, r18
    25ca:	b3 1f       	adc	r27, r19
    25cc:	e9 2f       	mov	r30, r25
    25ce:	e4 1b       	sub	r30, r20
    25d0:	e8 30       	cpi	r30, 0x08	; 8
    25d2:	f8 f0       	brcs	.+62     	; 0x2612 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11e>
    25d4:	02 30       	cpi	r16, 0x02	; 2
    25d6:	11 05       	cpc	r17, r1
    25d8:	61 f4       	brne	.+24     	; 0x25f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xfe>
    25da:	8e 2f       	mov	r24, r30
    25dc:	9c 91       	ld	r25, X
    25de:	90 95       	com	r25
    25e0:	9c 93       	st	X, r25
    25e2:	2c 81       	ldd	r18, Y+4	; 0x04
    25e4:	3d 81       	ldd	r19, Y+5	; 0x05
    25e6:	a2 0f       	add	r26, r18
    25e8:	b3 1f       	adc	r27, r19
    25ea:	88 50       	subi	r24, 0x08	; 8
    25ec:	88 30       	cpi	r24, 0x08	; 8
    25ee:	b0 f7       	brcc	.-20     	; 0x25dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xe8>
    25f0:	0f c0       	rjmp	.+30     	; 0x2610 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11c>
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	01 15       	cp	r16, r1
    25f6:	11 05       	cpc	r17, r1
    25f8:	09 f4       	brne	.+2      	; 0x25fc <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x108>
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	81 95       	neg	r24
    25fe:	9e 2f       	mov	r25, r30
    2600:	8c 93       	st	X, r24
    2602:	2c 81       	ldd	r18, Y+4	; 0x04
    2604:	3d 81       	ldd	r19, Y+5	; 0x05
    2606:	a2 0f       	add	r26, r18
    2608:	b3 1f       	adc	r27, r19
    260a:	98 50       	subi	r25, 0x08	; 8
    260c:	98 30       	cpi	r25, 0x08	; 8
    260e:	c0 f7       	brcc	.-16     	; 0x2600 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x10c>
    2610:	e7 70       	andi	r30, 0x07	; 7
    2612:	ee 23       	and	r30, r30
    2614:	e9 f0       	breq	.+58     	; 0x2650 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	e9 5d       	subi	r30, 0xD9	; 217
    261a:	f9 4f       	sbci	r31, 0xF9	; 249
    261c:	e4 91       	lpm	r30, Z
    261e:	01 30       	cpi	r16, 0x01	; 1
    2620:	11 05       	cpc	r17, r1
    2622:	39 f0       	breq	.+14     	; 0x2632 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x13e>
    2624:	48 f0       	brcs	.+18     	; 0x2638 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x144>
    2626:	02 30       	cpi	r16, 0x02	; 2
    2628:	11 05       	cpc	r17, r1
    262a:	91 f4       	brne	.+36     	; 0x2650 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    262c:	8c 91       	ld	r24, X
    262e:	e8 27       	eor	r30, r24
    2630:	06 c0       	rjmp	.+12     	; 0x263e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    2632:	8c 91       	ld	r24, X
    2634:	e8 2b       	or	r30, r24
    2636:	03 c0       	rjmp	.+6      	; 0x263e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    2638:	e0 95       	com	r30
    263a:	8c 91       	ld	r24, X
    263c:	e8 23       	and	r30, r24
    263e:	ec 93       	st	X, r30
    2640:	07 c0       	rjmp	.+14     	; 0x2650 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2642:	02 30       	cpi	r16, 0x02	; 2
    2644:	11 05       	cpc	r17, r1
    2646:	09 f4       	brne	.+2      	; 0x264a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x156>
    2648:	b7 cf       	rjmp	.-146    	; 0x25b8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    264a:	ae 0d       	add	r26, r14
    264c:	bf 1d       	adc	r27, r15
    264e:	be cf       	rjmp	.-132    	; 0x25cc <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	1f 91       	pop	r17
    2656:	0f 91       	pop	r16
    2658:	ff 90       	pop	r15
    265a:	ef 90       	pop	r14
    265c:	08 95       	ret

0000265e <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    265e:	0f 93       	push	r16
    2660:	1f 93       	push	r17
    2662:	dc 01       	movw	r26, r24
    2664:	56 96       	adiw	r26, 0x16	; 22
    2666:	ec 91       	ld	r30, X
    2668:	56 97       	sbiw	r26, 0x16	; 22
    266a:	e2 30       	cpi	r30, 0x02	; 2
    266c:	61 f0       	breq	.+24     	; 0x2686 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28>
    266e:	e3 30       	cpi	r30, 0x03	; 3
    2670:	09 f1       	breq	.+66     	; 0x26b4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x56>
    2672:	e1 30       	cpi	r30, 0x01	; 1
    2674:	79 f5       	brne	.+94     	; 0x26d4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x76>
    2676:	14 96       	adiw	r26, 0x04	; 4
    2678:	ed 91       	ld	r30, X+
    267a:	fc 91       	ld	r31, X
    267c:	15 97       	sbiw	r26, 0x05	; 5
    267e:	e4 1b       	sub	r30, r20
    2680:	f5 0b       	sbc	r31, r21
    2682:	31 97       	sbiw	r30, 0x01	; 1
    2684:	23 c0       	rjmp	.+70     	; 0x26cc <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x6e>
    2686:	dc 01       	movw	r26, r24
    2688:	14 96       	adiw	r26, 0x04	; 4
    268a:	ed 91       	ld	r30, X+
    268c:	fc 91       	ld	r31, X
    268e:	15 97       	sbiw	r26, 0x05	; 5
    2690:	df 01       	movw	r26, r30
    2692:	a6 1b       	sub	r26, r22
    2694:	b7 0b       	sbc	r27, r23
    2696:	bd 01       	movw	r22, r26
    2698:	dc 01       	movw	r26, r24
    269a:	16 96       	adiw	r26, 0x06	; 6
    269c:	ed 91       	ld	r30, X+
    269e:	fc 91       	ld	r31, X
    26a0:	17 97       	sbiw	r26, 0x07	; 7
    26a2:	df 01       	movw	r26, r30
    26a4:	a4 1b       	sub	r26, r20
    26a6:	b5 0b       	sbc	r27, r21
    26a8:	ad 01       	movw	r20, r26
    26aa:	41 50       	subi	r20, 0x01	; 1
    26ac:	51 09       	sbc	r21, r1
    26ae:	62 1b       	sub	r22, r18
    26b0:	73 0b       	sbc	r23, r19
    26b2:	10 c0       	rjmp	.+32     	; 0x26d4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x76>
    26b4:	fa 01       	movw	r30, r20
    26b6:	dc 01       	movw	r26, r24
    26b8:	16 96       	adiw	r26, 0x06	; 6
    26ba:	4d 91       	ld	r20, X+
    26bc:	5c 91       	ld	r21, X
    26be:	17 97       	sbiw	r26, 0x07	; 7
    26c0:	da 01       	movw	r26, r20
    26c2:	a6 1b       	sub	r26, r22
    26c4:	b7 0b       	sbc	r27, r23
    26c6:	bd 01       	movw	r22, r26
    26c8:	62 1b       	sub	r22, r18
    26ca:	73 0b       	sbc	r23, r19
    26cc:	ab 01       	movw	r20, r22
    26ce:	bf 01       	movw	r22, r30
    26d0:	11 df       	rcall	.-478    	; 0x24f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    26d2:	01 c0       	rjmp	.+2      	; 0x26d6 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    26d4:	9f de       	rcall	.-706    	; 0x2414 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    26d6:	1f 91       	pop	r17
    26d8:	0f 91       	pop	r16
    26da:	08 95       	ret

000026dc <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    26dc:	0f 93       	push	r16
    26de:	1f 93       	push	r17
    26e0:	dc 01       	movw	r26, r24
    26e2:	56 96       	adiw	r26, 0x16	; 22
    26e4:	ec 91       	ld	r30, X
    26e6:	56 97       	sbiw	r26, 0x16	; 22
    26e8:	e2 30       	cpi	r30, 0x02	; 2
    26ea:	69 f0       	breq	.+26     	; 0x2706 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a>
    26ec:	e3 30       	cpi	r30, 0x03	; 3
    26ee:	11 f1       	breq	.+68     	; 0x2734 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x58>
    26f0:	e1 30       	cpi	r30, 0x01	; 1
    26f2:	81 f5       	brne	.+96     	; 0x2754 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x78>
    26f4:	14 96       	adiw	r26, 0x04	; 4
    26f6:	ed 91       	ld	r30, X+
    26f8:	fc 91       	ld	r31, X
    26fa:	15 97       	sbiw	r26, 0x05	; 5
    26fc:	e4 1b       	sub	r30, r20
    26fe:	f5 0b       	sbc	r31, r21
    2700:	e2 1b       	sub	r30, r18
    2702:	f3 0b       	sbc	r31, r19
    2704:	23 c0       	rjmp	.+70     	; 0x274c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x70>
    2706:	dc 01       	movw	r26, r24
    2708:	14 96       	adiw	r26, 0x04	; 4
    270a:	ed 91       	ld	r30, X+
    270c:	fc 91       	ld	r31, X
    270e:	15 97       	sbiw	r26, 0x05	; 5
    2710:	df 01       	movw	r26, r30
    2712:	a6 1b       	sub	r26, r22
    2714:	b7 0b       	sbc	r27, r23
    2716:	bd 01       	movw	r22, r26
    2718:	61 50       	subi	r22, 0x01	; 1
    271a:	71 09       	sbc	r23, r1
    271c:	dc 01       	movw	r26, r24
    271e:	16 96       	adiw	r26, 0x06	; 6
    2720:	ed 91       	ld	r30, X+
    2722:	fc 91       	ld	r31, X
    2724:	17 97       	sbiw	r26, 0x07	; 7
    2726:	df 01       	movw	r26, r30
    2728:	a4 1b       	sub	r26, r20
    272a:	b5 0b       	sbc	r27, r21
    272c:	ad 01       	movw	r20, r26
    272e:	42 1b       	sub	r20, r18
    2730:	53 0b       	sbc	r21, r19
    2732:	10 c0       	rjmp	.+32     	; 0x2754 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x78>
    2734:	fa 01       	movw	r30, r20
    2736:	dc 01       	movw	r26, r24
    2738:	16 96       	adiw	r26, 0x06	; 6
    273a:	4d 91       	ld	r20, X+
    273c:	5c 91       	ld	r21, X
    273e:	17 97       	sbiw	r26, 0x07	; 7
    2740:	da 01       	movw	r26, r20
    2742:	a6 1b       	sub	r26, r22
    2744:	b7 0b       	sbc	r27, r23
    2746:	bd 01       	movw	r22, r26
    2748:	61 50       	subi	r22, 0x01	; 1
    274a:	71 09       	sbc	r23, r1
    274c:	ab 01       	movw	r20, r22
    274e:	bf 01       	movw	r22, r30
    2750:	61 de       	rcall	.-830    	; 0x2414 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    2752:	01 c0       	rjmp	.+2      	; 0x2756 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    2754:	cf de       	rcall	.-610    	; 0x24f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    2756:	1f 91       	pop	r17
    2758:	0f 91       	pop	r16
    275a:	08 95       	ret

0000275c <_ZN16Adafruit_SSD13067displayEv>:
    @return None (void).
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
    275c:	cf 92       	push	r12
    275e:	df 92       	push	r13
    2760:	ef 92       	push	r14
    2762:	ff 92       	push	r15
    2764:	0f 93       	push	r16
    2766:	1f 93       	push	r17
    2768:	cf 93       	push	r28
    276a:	df 93       	push	r29
    276c:	ec 01       	movw	r28, r24
  TRANSACTION_START
    276e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2770:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2772:	00 97       	sbiw	r24, 0x00	; 0
    2774:	31 f0       	breq	.+12     	; 0x2782 <_ZN16Adafruit_SSD13067displayEv+0x26>
    2776:	4d a9       	ldd	r20, Y+53	; 0x35
    2778:	5e a9       	ldd	r21, Y+54	; 0x36
    277a:	6f a9       	ldd	r22, Y+55	; 0x37
    277c:	78 ad       	ldd	r23, Y+56	; 0x38
    277e:	c1 d4       	rcall	.+2434   	; 0x3102 <_ZN7TwoWire8setClockEm>
    2780:	0f c0       	rjmp	.+30     	; 0x27a0 <_ZN16Adafruit_SSD13067displayEv+0x44>
    2782:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2784:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2786:	89 2b       	or	r24, r25
    2788:	21 f0       	breq	.+8      	; 0x2792 <_ZN16Adafruit_SSD13067displayEv+0x36>
    278a:	8e ad       	ldd	r24, Y+62	; 0x3e
    278c:	9f ad       	ldd	r25, Y+63	; 0x3f
    278e:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2792:	ef a5       	ldd	r30, Y+47	; 0x2f
    2794:	f8 a9       	ldd	r31, Y+48	; 0x30
    2796:	90 81       	ld	r25, Z
    2798:	8c a9       	ldd	r24, Y+52	; 0x34
    279a:	80 95       	com	r24
    279c:	89 23       	and	r24, r25
    279e:	80 83       	st	Z, r24
  static const uint8_t PROGMEM dlist1[] = {
      SSD1306_PAGEADDR,
      0,                      // Page start address
      0xFF,                   // Page end (not really, but works here)
      SSD1306_COLUMNADDR, 0}; // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
    27a0:	45 e0       	ldi	r20, 0x05	; 5
    27a2:	62 e2       	ldi	r22, 0x22	; 34
    27a4:	76 e0       	ldi	r23, 0x06	; 6
    27a6:	ce 01       	movw	r24, r28
    27a8:	b1 db       	rcall	.-2206   	; 0x1f0c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
    27aa:	6c 81       	ldd	r22, Y+4	; 0x04
    27ac:	61 50       	subi	r22, 0x01	; 1
    27ae:	ce 01       	movw	r24, r28
    27b0:	07 db       	rcall	.-2546   	; 0x1dc0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    27b2:	2e 81       	ldd	r18, Y+6	; 0x06
    27b4:	3f 81       	ldd	r19, Y+7	; 0x07
    27b6:	c9 01       	movw	r24, r18
    27b8:	07 96       	adiw	r24, 0x07	; 7
    27ba:	97 fd       	sbrc	r25, 7
    27bc:	07 96       	adiw	r24, 0x07	; 7
    27be:	23 e0       	ldi	r18, 0x03	; 3
    27c0:	95 95       	asr	r25
    27c2:	87 95       	ror	r24
    27c4:	2a 95       	dec	r18
    27c6:	e1 f7       	brne	.-8      	; 0x27c0 <_ZN16Adafruit_SSD13067displayEv+0x64>
    27c8:	2c 81       	ldd	r18, Y+4	; 0x04
    27ca:	3d 81       	ldd	r19, Y+5	; 0x05
    27cc:	82 9f       	mul	r24, r18
    27ce:	70 01       	movw	r14, r0
    27d0:	83 9f       	mul	r24, r19
    27d2:	f0 0c       	add	r15, r0
    27d4:	92 9f       	mul	r25, r18
    27d6:	f0 0c       	add	r15, r0
    27d8:	11 24       	eor	r1, r1
  uint8_t *ptr = buffer;
    27da:	0f 8d       	ldd	r16, Y+31	; 0x1f
    27dc:	18 a1       	ldd	r17, Y+32	; 0x20
  if (wire) { // I2C
    27de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27e2:	e0 0e       	add	r14, r16
    27e4:	f1 1e       	adc	r15, r17
    27e6:	00 97       	sbiw	r24, 0x00	; 0
    27e8:	09 f4       	brne	.+2      	; 0x27ec <_ZN16Adafruit_SSD13067displayEv+0x90>
    27ea:	3f c0       	rjmp	.+126    	; 0x286a <_ZN16Adafruit_SSD13067displayEv+0x10e>
    wire->beginTransmission(i2caddr);
    27ec:	69 a1       	ldd	r22, Y+33	; 0x21
    27ee:	06 2e       	mov	r0, r22
    27f0:	00 0c       	add	r0, r0
    27f2:	77 0b       	sbc	r23, r23
    27f4:	93 d4       	rcall	.+2342   	; 0x311c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
    27f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27fa:	dc 01       	movw	r26, r24
    27fc:	ed 91       	ld	r30, X+
    27fe:	fc 91       	ld	r31, X
    2800:	01 90       	ld	r0, Z+
    2802:	f0 81       	ld	r31, Z
    2804:	e0 2d       	mov	r30, r0
    2806:	60 e4       	ldi	r22, 0x40	; 64
    2808:	19 95       	eicall
    280a:	68 01       	movw	r12, r16
    uint16_t bytesOut = 1;
    280c:	01 e0       	ldi	r16, 0x01	; 1
    280e:	10 e0       	ldi	r17, 0x00	; 0
    2810:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2812:	9e 8d       	ldd	r25, Y+30	; 0x1e
    while (count--) {
    2814:	ec 14       	cp	r14, r12
    2816:	fd 04       	cpc	r15, r13
      if (bytesOut >= WIRE_MAX) {
    2818:	31 f1       	breq	.+76     	; 0x2866 <_ZN16Adafruit_SSD13067displayEv+0x10a>
    281a:	00 32       	cpi	r16, 0x20	; 32
    281c:	11 05       	cpc	r17, r1
        wire->endTransmission();
    281e:	a0 f0       	brcs	.+40     	; 0x2848 <_ZN16Adafruit_SSD13067displayEv+0xec>
    2820:	90 d4       	rcall	.+2336   	; 0x3142 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
    2822:	69 a1       	ldd	r22, Y+33	; 0x21
    2824:	06 2e       	mov	r0, r22
    2826:	00 0c       	add	r0, r0
    2828:	77 0b       	sbc	r23, r23
    282a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    282c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    282e:	76 d4       	rcall	.+2284   	; 0x311c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
    2830:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2832:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2834:	dc 01       	movw	r26, r24
    2836:	ed 91       	ld	r30, X+
    2838:	fc 91       	ld	r31, X
    283a:	01 90       	ld	r0, Z+
    283c:	f0 81       	ld	r31, Z
    283e:	e0 2d       	mov	r30, r0
    2840:	60 e4       	ldi	r22, 0x40	; 64
    2842:	19 95       	eicall
        bytesOut = 1;
    2844:	01 e0       	ldi	r16, 0x01	; 1
    2846:	10 e0       	ldi	r17, 0x00	; 0
      }
      WIRE_WRITE(*ptr++);
    2848:	8d 8d       	ldd	r24, Y+29	; 0x1d
    284a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    284c:	f6 01       	movw	r30, r12
    284e:	61 91       	ld	r22, Z+
    2850:	6f 01       	movw	r12, r30
    2852:	dc 01       	movw	r26, r24
    2854:	ed 91       	ld	r30, X+
    2856:	fc 91       	ld	r31, X
    2858:	01 90       	ld	r0, Z+
    285a:	f0 81       	ld	r31, Z
    285c:	e0 2d       	mov	r30, r0
      bytesOut++;
    285e:	19 95       	eicall
    2860:	0f 5f       	subi	r16, 0xFF	; 255
  uint8_t *ptr = buffer;
  if (wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    uint16_t bytesOut = 1;
    while (count--) {
    2862:	1f 4f       	sbci	r17, 0xFF	; 255
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
    2864:	d5 cf       	rjmp	.-86     	; 0x2810 <_ZN16Adafruit_SSD13067displayEv+0xb4>
    2866:	6d d4       	rcall	.+2266   	; 0x3142 <_ZN7TwoWire15endTransmissionEv>
    2868:	34 c0       	rjmp	.+104    	; 0x28d2 <_ZN16Adafruit_SSD13067displayEv+0x176>
  } else { // SPI
    SSD1306_MODE_DATA
    286a:	ed a5       	ldd	r30, Y+45	; 0x2d
    286c:	fe a5       	ldd	r31, Y+46	; 0x2e
    286e:	90 81       	ld	r25, Z
    2870:	8b a9       	ldd	r24, Y+51	; 0x33
    2872:	89 2b       	or	r24, r25
    2874:	80 83       	st	Z, r24
    while (count--)
    2876:	0e 15       	cp	r16, r14
    2878:	1f 05       	cpc	r17, r15
    287a:	59 f1       	breq	.+86     	; 0x28d2 <_ZN16Adafruit_SSD13067displayEv+0x176>
      SPIwrite(*ptr++);
    287c:	f8 01       	movw	r30, r16
    287e:	81 91       	ld	r24, Z+
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    2880:	8f 01       	movw	r16, r30
    2882:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2884:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2886:	23 2b       	or	r18, r19
    (void)spi->transfer(d);
    2888:	11 f0       	breq	.+4      	; 0x288e <_ZN16Adafruit_SSD13067displayEv+0x132>
    288a:	3d da       	rcall	.-2950   	; 0x1d06 <_ZN8SPIClass8transferEh>
    288c:	f4 cf       	rjmp	.-24     	; 0x2876 <_ZN16Adafruit_SSD13067displayEv+0x11a>
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    288e:	28 e0       	ldi	r18, 0x08	; 8
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e8       	ldi	r20, 0x80	; 128
    2894:	e9 a5       	ldd	r30, Y+41	; 0x29
    2896:	fa a5       	ldd	r31, Y+42	; 0x2a
    2898:	99 a9       	ldd	r25, Y+49	; 0x31
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
#ifdef HAVE_PORTREG
      if (d & bit)
    289a:	58 2f       	mov	r21, r24
    289c:	54 23       	and	r21, r20
    289e:	19 f0       	breq	.+6      	; 0x28a6 <_ZN16Adafruit_SSD13067displayEv+0x14a>
        *mosiPort |= mosiPinMask;
    28a0:	50 81       	ld	r21, Z
    28a2:	95 2b       	or	r25, r21
    28a4:	03 c0       	rjmp	.+6      	; 0x28ac <_ZN16Adafruit_SSD13067displayEv+0x150>
      else
        *mosiPort &= ~mosiPinMask;
    28a6:	50 81       	ld	r21, Z
    28a8:	90 95       	com	r25
    28aa:	95 23       	and	r25, r21
    28ac:	90 83       	st	Z, r25
      *clkPort |= clkPinMask;  // Clock high
    28ae:	eb a5       	ldd	r30, Y+43	; 0x2b
    28b0:	fc a5       	ldd	r31, Y+44	; 0x2c
    28b2:	50 81       	ld	r21, Z
    28b4:	9a a9       	ldd	r25, Y+50	; 0x32
    28b6:	95 2b       	or	r25, r21
    28b8:	90 83       	st	Z, r25
      *clkPort &= ~clkPinMask; // Clock low
    28ba:	eb a5       	ldd	r30, Y+43	; 0x2b
    28bc:	fc a5       	ldd	r31, Y+44	; 0x2c
    28be:	50 81       	ld	r21, Z
    28c0:	9a a9       	ldd	r25, Y+50	; 0x32
    28c2:	90 95       	com	r25
    28c4:	95 23       	and	r25, r21
    28c6:	90 83       	st	Z, r25
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    28c8:	46 95       	lsr	r20
    28ca:	21 50       	subi	r18, 0x01	; 1
    28cc:	31 09       	sbc	r19, r1
    28ce:	11 f7       	brne	.-60     	; 0x2894 <_ZN16Adafruit_SSD13067displayEv+0x138>
    28d0:	d2 cf       	rjmp	.-92     	; 0x2876 <_ZN16Adafruit_SSD13067displayEv+0x11a>
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    28d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	69 f0       	breq	.+26     	; 0x28f4 <_ZN16Adafruit_SSD13067displayEv+0x198>
    28da:	49 ad       	ldd	r20, Y+57	; 0x39
    28dc:	5a ad       	ldd	r21, Y+58	; 0x3a
    28de:	6b ad       	ldd	r22, Y+59	; 0x3b
    28e0:	7c ad       	ldd	r23, Y+60	; 0x3c
#if defined(ESP8266)
  yield();
#endif
}
    28e2:	df 91       	pop	r29
    28e4:	cf 91       	pop	r28
    28e6:	1f 91       	pop	r17
    28e8:	0f 91       	pop	r16
    28ea:	ff 90       	pop	r15
    28ec:	ef 90       	pop	r14
    28ee:	df 90       	pop	r13
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    28f0:	cf 90       	pop	r12
    28f2:	07 c4       	rjmp	.+2062   	; 0x3102 <_ZN7TwoWire8setClockEm>
    28f4:	ef a5       	ldd	r30, Y+47	; 0x2f
    28f6:	f8 a9       	ldd	r31, Y+48	; 0x30
    28f8:	90 81       	ld	r25, Z
    28fa:	8c a9       	ldd	r24, Y+52	; 0x34
    28fc:	89 2b       	or	r24, r25
    28fe:	80 83       	st	Z, r24
    2900:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2902:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2904:	89 2b       	or	r24, r25
    2906:	51 f0       	breq	.+20     	; 0x291c <_ZN16Adafruit_SSD13067displayEv+0x1c0>
#if defined(ESP8266)
  yield();
#endif
}
    2908:	df 91       	pop	r29
    290a:	cf 91       	pop	r28
    290c:	1f 91       	pop	r17
    290e:	0f 91       	pop	r16
    2910:	ff 90       	pop	r15
    2912:	ef 90       	pop	r14
    2914:	df 90       	pop	r13
    2916:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    2918:	0c 94 42 07 	jmp	0xe84	; 0xe84 <_ZN8SPIClass14endTransactionEv>
#if defined(ESP8266)
  yield();
#endif
}
    291c:	df 91       	pop	r29
    291e:	cf 91       	pop	r28
    2920:	1f 91       	pop	r17
    2922:	0f 91       	pop	r16
    2924:	ff 90       	pop	r15
    2926:	ef 90       	pop	r14
    2928:	df 90       	pop	r13
    292a:	cf 90       	pop	r12
    292c:	08 95       	ret

0000292e <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    292e:	cf 93       	push	r28
  uint8_t sreg = SREG;
    2930:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    2932:	f8 94       	cli
  if (!initialized) {
    2934:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <_ZN8SPIClass11initializedE>
    2938:	81 11       	cpse	r24, r1
    293a:	27 c0       	rjmp	.+78     	; 0x298a <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    293c:	ea ea       	ldi	r30, 0xAA	; 170
    293e:	fb e0       	ldi	r31, 0x0B	; 11
    2940:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    2942:	e4 e6       	ldi	r30, 0x64	; 100
    2944:	fb e0       	ldi	r31, 0x0B	; 11
    2946:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    2948:	e8 2f       	mov	r30, r24
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	ee 0f       	add	r30, r30
    294e:	ff 1f       	adc	r31, r31
    2950:	eb 52       	subi	r30, 0x2B	; 43
    2952:	f4 4f       	sbci	r31, 0xF4	; 244
    2954:	a5 91       	lpm	r26, Z+
    2956:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    2958:	ec 91       	ld	r30, X
    295a:	e9 23       	and	r30, r25
    295c:	21 f4       	brne	.+8      	; 0x2966 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    295e:	61 e0       	ldi	r22, 0x01	; 1
    2960:	85 e3       	ldi	r24, 0x35	; 53
    2962:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    2966:	61 e0       	ldi	r22, 0x01	; 1
    2968:	85 e3       	ldi	r24, 0x35	; 53
    296a:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    296e:	8c b5       	in	r24, 0x2c	; 44
    2970:	80 61       	ori	r24, 0x10	; 16
    2972:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    2974:	8c b5       	in	r24, 0x2c	; 44
    2976:	80 64       	ori	r24, 0x40	; 64
    2978:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    297a:	61 e0       	ldi	r22, 0x01	; 1
    297c:	84 e3       	ldi	r24, 0x34	; 52
    297e:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <pinMode>
    pinMode(MOSI, OUTPUT);
    2982:	61 e0       	ldi	r22, 0x01	; 1
    2984:	83 e3       	ldi	r24, 0x33	; 51
    2986:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <pinMode>
  }
  initialized++; // reference count
    298a:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <_ZN8SPIClass11initializedE>
    298e:	8f 5f       	subi	r24, 0xFF	; 255
    2990:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    2994:	cf bf       	out	0x3f, r28	; 63
}
    2996:	cf 91       	pop	r28
    2998:	08 95       	ret

0000299a <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    299a:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <twi_state>
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <twi_sendStop>
    29a4:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <twi_inRepStart>
    29a8:	61 e0       	ldi	r22, 0x01	; 1
    29aa:	84 e1       	ldi	r24, 0x14	; 20
    29ac:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <digitalWrite>
    29b0:	61 e0       	ldi	r22, 0x01	; 1
    29b2:	85 e1       	ldi	r24, 0x15	; 21
    29b4:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <digitalWrite>
    29b8:	e9 eb       	ldi	r30, 0xB9	; 185
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	8e 7f       	andi	r24, 0xFE	; 254
    29c0:	80 83       	st	Z, r24
    29c2:	80 81       	ld	r24, Z
    29c4:	8d 7f       	andi	r24, 0xFD	; 253
    29c6:	80 83       	st	Z, r24
    29c8:	88 e4       	ldi	r24, 0x48	; 72
    29ca:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    29ce:	85 e4       	ldi	r24, 0x45	; 69
    29d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    29d4:	08 95       	ret

000029d6 <twi_disable>:
    29d6:	ec eb       	ldi	r30, 0xBC	; 188
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	8a 7b       	andi	r24, 0xBA	; 186
    29de:	80 83       	st	Z, r24
    29e0:	60 e0       	ldi	r22, 0x00	; 0
    29e2:	84 e1       	ldi	r24, 0x14	; 20
    29e4:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <digitalWrite>
    29e8:	60 e0       	ldi	r22, 0x00	; 0
    29ea:	85 e1       	ldi	r24, 0x15	; 21
    29ec:	0c 94 99 1d 	jmp	0x3b32	; 0x3b32 <digitalWrite>

000029f0 <twi_setFrequency>:
    29f0:	9b 01       	movw	r18, r22
    29f2:	ac 01       	movw	r20, r24
    29f4:	60 e0       	ldi	r22, 0x00	; 0
    29f6:	74 e2       	ldi	r23, 0x24	; 36
    29f8:	84 ef       	ldi	r24, 0xF4	; 244
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__udivmodsi4>
    2a00:	da 01       	movw	r26, r20
    2a02:	c9 01       	movw	r24, r18
    2a04:	40 97       	sbiw	r24, 0x10	; 16
    2a06:	a1 09       	sbc	r26, r1
    2a08:	b1 09       	sbc	r27, r1
    2a0a:	b6 95       	lsr	r27
    2a0c:	a7 95       	ror	r26
    2a0e:	97 95       	ror	r25
    2a10:	87 95       	ror	r24
    2a12:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2a16:	08 95       	ret

00002a18 <twi_transmit>:
    2a18:	40 91 05 03 	lds	r20, 0x0305	; 0x800305 <twi_txBufferLength>
    2a1c:	26 2f       	mov	r18, r22
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	24 0f       	add	r18, r20
    2a22:	31 1d       	adc	r19, r1
    2a24:	21 32       	cpi	r18, 0x21	; 33
    2a26:	31 05       	cpc	r19, r1
    2a28:	dc f4       	brge	.+54     	; 0x2a60 <twi_transmit+0x48>
    2a2a:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <twi_state>
    2a2e:	24 30       	cpi	r18, 0x04	; 4
    2a30:	c9 f4       	brne	.+50     	; 0x2a64 <twi_transmit+0x4c>
    2a32:	fc 01       	movw	r30, r24
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	86 17       	cp	r24, r22
    2a3a:	58 f4       	brcc	.+22     	; 0x2a52 <twi_transmit+0x3a>
    2a3c:	30 91 05 03 	lds	r19, 0x0305	; 0x800305 <twi_txBufferLength>
    2a40:	21 91       	ld	r18, Z+
    2a42:	dc 01       	movw	r26, r24
    2a44:	a9 5f       	subi	r26, 0xF9	; 249
    2a46:	bc 4f       	sbci	r27, 0xFC	; 252
    2a48:	a3 0f       	add	r26, r19
    2a4a:	b1 1d       	adc	r27, r1
    2a4c:	2c 93       	st	X, r18
    2a4e:	01 96       	adiw	r24, 0x01	; 1
    2a50:	f3 cf       	rjmp	.-26     	; 0x2a38 <twi_transmit+0x20>
    2a52:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <twi_txBufferLength>
    2a56:	68 0f       	add	r22, r24
    2a58:	60 93 05 03 	sts	0x0305, r22	; 0x800305 <twi_txBufferLength>
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	08 95       	ret
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	08 95       	ret
    2a64:	82 e0       	ldi	r24, 0x02	; 2
    2a66:	08 95       	ret

00002a68 <twi_attachSlaveRxEvent>:
    2a68:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <twi_onSlaveReceive+0x1>
    2a6c:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <twi_onSlaveReceive>
    2a70:	08 95       	ret

00002a72 <twi_attachSlaveTxEvent>:
    2a72:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <twi_onSlaveTransmit+0x1>
    2a76:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <twi_onSlaveTransmit>
    2a7a:	08 95       	ret

00002a7c <twi_releaseBus>:
    2a7c:	85 ec       	ldi	r24, 0xC5	; 197
    2a7e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2a82:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <twi_state>
    2a86:	08 95       	ret

00002a88 <twi_handleTimeout>:
    2a88:	cf 93       	push	r28
    2a8a:	df 93       	push	r29
    2a8c:	91 e0       	ldi	r25, 0x01	; 1
    2a8e:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <twi_timed_out_flag>
    2a92:	88 23       	and	r24, r24
    2a94:	51 f0       	breq	.+20     	; 0x2aaa <twi_handleTimeout+0x22>
    2a96:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2a9a:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    2a9e:	9b df       	rcall	.-202    	; 0x29d6 <twi_disable>
    2aa0:	7c df       	rcall	.-264    	; 0x299a <twi_init>
    2aa2:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    2aa6:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2aaa:	df 91       	pop	r29
    2aac:	cf 91       	pop	r28
    2aae:	08 95       	ret

00002ab0 <twi_writeTo>:
    2ab0:	4f 92       	push	r4
    2ab2:	5f 92       	push	r5
    2ab4:	6f 92       	push	r6
    2ab6:	7f 92       	push	r7
    2ab8:	8f 92       	push	r8
    2aba:	9f 92       	push	r9
    2abc:	af 92       	push	r10
    2abe:	bf 92       	push	r11
    2ac0:	cf 92       	push	r12
    2ac2:	df 92       	push	r13
    2ac4:	ef 92       	push	r14
    2ac6:	ff 92       	push	r15
    2ac8:	0f 93       	push	r16
    2aca:	1f 93       	push	r17
    2acc:	cf 93       	push	r28
    2ace:	df 93       	push	r29
    2ad0:	41 32       	cpi	r20, 0x21	; 33
    2ad2:	08 f0       	brcs	.+2      	; 0x2ad6 <twi_writeTo+0x26>
    2ad4:	bf c0       	rjmp	.+382    	; 0x2c54 <twi_writeTo+0x1a4>
    2ad6:	12 2f       	mov	r17, r18
    2ad8:	f4 2e       	mov	r15, r20
    2ada:	d7 2e       	mov	r13, r23
    2adc:	e6 2e       	mov	r14, r22
    2ade:	d8 2f       	mov	r29, r24
    2ae0:	d7 d6       	rcall	.+3502   	; 0x3890 <micros>
    2ae2:	4b 01       	movw	r8, r22
    2ae4:	5c 01       	movw	r10, r24
    2ae6:	c0 91 56 03 	lds	r28, 0x0356	; 0x800356 <twi_state>
    2aea:	cc 23       	and	r28, r28
    2aec:	09 f1       	breq	.+66     	; 0x2b30 <twi_writeTo+0x80>
    2aee:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <twi_timeout_us>
    2af2:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <twi_timeout_us+0x1>
    2af6:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <twi_timeout_us+0x2>
    2afa:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <twi_timeout_us+0x3>
    2afe:	89 2b       	or	r24, r25
    2b00:	8a 2b       	or	r24, r26
    2b02:	8b 2b       	or	r24, r27
    2b04:	81 f3       	breq	.-32     	; 0x2ae6 <twi_writeTo+0x36>
    2b06:	c4 d6       	rcall	.+3464   	; 0x3890 <micros>
    2b08:	40 90 4f 03 	lds	r4, 0x034F	; 0x80034f <twi_timeout_us>
    2b0c:	50 90 50 03 	lds	r5, 0x0350	; 0x800350 <twi_timeout_us+0x1>
    2b10:	60 90 51 03 	lds	r6, 0x0351	; 0x800351 <twi_timeout_us+0x2>
    2b14:	70 90 52 03 	lds	r7, 0x0352	; 0x800352 <twi_timeout_us+0x3>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	88 19       	sub	r24, r8
    2b1e:	99 09       	sbc	r25, r9
    2b20:	aa 09       	sbc	r26, r10
    2b22:	bb 09       	sbc	r27, r11
    2b24:	48 16       	cp	r4, r24
    2b26:	59 06       	cpc	r5, r25
    2b28:	6a 06       	cpc	r6, r26
    2b2a:	7b 06       	cpc	r7, r27
    2b2c:	e0 f6       	brcc	.-72     	; 0x2ae6 <twi_writeTo+0x36>
    2b2e:	7f c0       	rjmp	.+254    	; 0x2c2e <twi_writeTo+0x17e>
    2b30:	82 e0       	ldi	r24, 0x02	; 2
    2b32:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <twi_state>
    2b36:	00 93 54 03 	sts	0x0354, r16	; 0x800354 <twi_sendStop>
    2b3a:	8f ef       	ldi	r24, 0xFF	; 255
    2b3c:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi_error>
    2b40:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <twi_masterBufferIndex>
    2b44:	f0 92 27 03 	sts	0x0327, r15	; 0x800327 <twi_masterBufferLength>
    2b48:	9e 2d       	mov	r25, r14
    2b4a:	a9 e2       	ldi	r26, 0x29	; 41
    2b4c:	b3 e0       	ldi	r27, 0x03	; 3
    2b4e:	ee 2d       	mov	r30, r14
    2b50:	fd 2d       	mov	r31, r13
    2b52:	8e 2f       	mov	r24, r30
    2b54:	89 1b       	sub	r24, r25
    2b56:	8f 15       	cp	r24, r15
    2b58:	18 f4       	brcc	.+6      	; 0x2b60 <twi_writeTo+0xb0>
    2b5a:	81 91       	ld	r24, Z+
    2b5c:	8d 93       	st	X+, r24
    2b5e:	f9 cf       	rjmp	.-14     	; 0x2b52 <twi_writeTo+0xa2>
    2b60:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <twi_slarw>
    2b64:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <twi_slarw>
    2b68:	dd 0f       	add	r29, r29
    2b6a:	d9 2b       	or	r29, r25
    2b6c:	d0 93 55 03 	sts	0x0355, r29	; 0x800355 <twi_slarw>
    2b70:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <twi_inRepStart>
    2b74:	81 30       	cpi	r24, 0x01	; 1
    2b76:	79 f5       	brne	.+94     	; 0x2bd6 <twi_writeTo+0x126>
    2b78:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <twi_inRepStart>
    2b7c:	89 d6       	rcall	.+3346   	; 0x3890 <micros>
    2b7e:	6b 01       	movw	r12, r22
    2b80:	7c 01       	movw	r14, r24
    2b82:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <twi_slarw>
    2b86:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2b8a:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <twi_timeout_us>
    2b8e:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <twi_timeout_us+0x1>
    2b92:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <twi_timeout_us+0x2>
    2b96:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <twi_timeout_us+0x3>
    2b9a:	89 2b       	or	r24, r25
    2b9c:	8a 2b       	or	r24, r26
    2b9e:	8b 2b       	or	r24, r27
    2ba0:	a1 f0       	breq	.+40     	; 0x2bca <twi_writeTo+0x11a>
    2ba2:	76 d6       	rcall	.+3308   	; 0x3890 <micros>
    2ba4:	80 90 4f 03 	lds	r8, 0x034F	; 0x80034f <twi_timeout_us>
    2ba8:	90 90 50 03 	lds	r9, 0x0350	; 0x800350 <twi_timeout_us+0x1>
    2bac:	a0 90 51 03 	lds	r10, 0x0351	; 0x800351 <twi_timeout_us+0x2>
    2bb0:	b0 90 52 03 	lds	r11, 0x0352	; 0x800352 <twi_timeout_us+0x3>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	8c 19       	sub	r24, r12
    2bba:	9d 09       	sbc	r25, r13
    2bbc:	ae 09       	sbc	r26, r14
    2bbe:	bf 09       	sbc	r27, r15
    2bc0:	88 16       	cp	r8, r24
    2bc2:	99 06       	cpc	r9, r25
    2bc4:	aa 06       	cpc	r10, r26
    2bc6:	bb 06       	cpc	r11, r27
    2bc8:	90 f1       	brcs	.+100    	; 0x2c2e <twi_writeTo+0x17e>
    2bca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2bce:	83 fd       	sbrc	r24, 3
    2bd0:	d8 cf       	rjmp	.-80     	; 0x2b82 <twi_writeTo+0xd2>
    2bd2:	85 ec       	ldi	r24, 0xC5	; 197
    2bd4:	01 c0       	rjmp	.+2      	; 0x2bd8 <twi_writeTo+0x128>
    2bd6:	85 ee       	ldi	r24, 0xE5	; 229
    2bd8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2bdc:	59 d6       	rcall	.+3250   	; 0x3890 <micros>
    2bde:	6b 01       	movw	r12, r22
    2be0:	7c 01       	movw	r14, r24
    2be2:	11 23       	and	r17, r17
    2be4:	49 f1       	breq	.+82     	; 0x2c38 <twi_writeTo+0x188>
    2be6:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <twi_state>
    2bea:	82 30       	cpi	r24, 0x02	; 2
    2bec:	29 f5       	brne	.+74     	; 0x2c38 <twi_writeTo+0x188>
    2bee:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <twi_timeout_us>
    2bf2:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <twi_timeout_us+0x1>
    2bf6:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <twi_timeout_us+0x2>
    2bfa:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <twi_timeout_us+0x3>
    2bfe:	89 2b       	or	r24, r25
    2c00:	8a 2b       	or	r24, r26
    2c02:	8b 2b       	or	r24, r27
    2c04:	71 f3       	breq	.-36     	; 0x2be2 <twi_writeTo+0x132>
    2c06:	44 d6       	rcall	.+3208   	; 0x3890 <micros>
    2c08:	80 90 4f 03 	lds	r8, 0x034F	; 0x80034f <twi_timeout_us>
    2c0c:	90 90 50 03 	lds	r9, 0x0350	; 0x800350 <twi_timeout_us+0x1>
    2c10:	a0 90 51 03 	lds	r10, 0x0351	; 0x800351 <twi_timeout_us+0x2>
    2c14:	b0 90 52 03 	lds	r11, 0x0352	; 0x800352 <twi_timeout_us+0x3>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	8c 19       	sub	r24, r12
    2c1e:	9d 09       	sbc	r25, r13
    2c20:	ae 09       	sbc	r26, r14
    2c22:	bf 09       	sbc	r27, r15
    2c24:	88 16       	cp	r8, r24
    2c26:	99 06       	cpc	r9, r25
    2c28:	aa 06       	cpc	r10, r26
    2c2a:	bb 06       	cpc	r11, r27
    2c2c:	d0 f6       	brcc	.-76     	; 0x2be2 <twi_writeTo+0x132>
    2c2e:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <twi_do_reset_on_timeout>
    2c32:	2a df       	rcall	.-428    	; 0x2a88 <twi_handleTimeout>
    2c34:	c5 e0       	ldi	r28, 0x05	; 5
    2c36:	13 c0       	rjmp	.+38     	; 0x2c5e <twi_writeTo+0x1ae>
    2c38:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <twi_error>
    2c3c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c3e:	79 f0       	breq	.+30     	; 0x2c5e <twi_writeTo+0x1ae>
    2c40:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <twi_error>
    2c44:	80 32       	cpi	r24, 0x20	; 32
    2c46:	41 f0       	breq	.+16     	; 0x2c58 <twi_writeTo+0x1a8>
    2c48:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <twi_error>
    2c4c:	80 33       	cpi	r24, 0x30	; 48
    2c4e:	31 f0       	breq	.+12     	; 0x2c5c <twi_writeTo+0x1ac>
    2c50:	c4 e0       	ldi	r28, 0x04	; 4
    2c52:	05 c0       	rjmp	.+10     	; 0x2c5e <twi_writeTo+0x1ae>
    2c54:	c1 e0       	ldi	r28, 0x01	; 1
    2c56:	03 c0       	rjmp	.+6      	; 0x2c5e <twi_writeTo+0x1ae>
    2c58:	c2 e0       	ldi	r28, 0x02	; 2
    2c5a:	01 c0       	rjmp	.+2      	; 0x2c5e <twi_writeTo+0x1ae>
    2c5c:	c3 e0       	ldi	r28, 0x03	; 3
    2c5e:	8c 2f       	mov	r24, r28
    2c60:	df 91       	pop	r29
    2c62:	cf 91       	pop	r28
    2c64:	1f 91       	pop	r17
    2c66:	0f 91       	pop	r16
    2c68:	ff 90       	pop	r15
    2c6a:	ef 90       	pop	r14
    2c6c:	df 90       	pop	r13
    2c6e:	cf 90       	pop	r12
    2c70:	bf 90       	pop	r11
    2c72:	af 90       	pop	r10
    2c74:	9f 90       	pop	r9
    2c76:	8f 90       	pop	r8
    2c78:	7f 90       	pop	r7
    2c7a:	6f 90       	pop	r6
    2c7c:	5f 90       	pop	r5
    2c7e:	4f 90       	pop	r4
    2c80:	08 95       	ret

00002c82 <twi_stop>:
    2c82:	85 ed       	ldi	r24, 0xD5	; 213
    2c84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2c88:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <twi_timeout_us>
    2c8c:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <twi_timeout_us+0x1>
    2c90:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <twi_timeout_us+0x2>
    2c94:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <twi_timeout_us+0x3>
    2c98:	07 96       	adiw	r24, 0x07	; 7
    2c9a:	a1 1d       	adc	r26, r1
    2c9c:	b1 1d       	adc	r27, r1
    2c9e:	23 e0       	ldi	r18, 0x03	; 3
    2ca0:	b6 95       	lsr	r27
    2ca2:	a7 95       	ror	r26
    2ca4:	97 95       	ror	r25
    2ca6:	87 95       	ror	r24
    2ca8:	2a 95       	dec	r18
    2caa:	d1 f7       	brne	.-12     	; 0x2ca0 <twi_stop+0x1e>
    2cac:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2cb0:	24 ff       	sbrs	r18, 4
    2cb2:	1b c0       	rjmp	.+54     	; 0x2cea <twi_stop+0x68>
    2cb4:	40 91 4f 03 	lds	r20, 0x034F	; 0x80034f <twi_timeout_us>
    2cb8:	50 91 50 03 	lds	r21, 0x0350	; 0x800350 <twi_timeout_us+0x1>
    2cbc:	60 91 51 03 	lds	r22, 0x0351	; 0x800351 <twi_timeout_us+0x2>
    2cc0:	70 91 52 03 	lds	r23, 0x0352	; 0x800352 <twi_timeout_us+0x3>
    2cc4:	45 2b       	or	r20, r21
    2cc6:	46 2b       	or	r20, r22
    2cc8:	47 2b       	or	r20, r23
    2cca:	81 f3       	breq	.-32     	; 0x2cac <twi_stop+0x2a>
    2ccc:	00 97       	sbiw	r24, 0x00	; 0
    2cce:	a1 05       	cpc	r26, r1
    2cd0:	b1 05       	cpc	r27, r1
    2cd2:	41 f0       	breq	.+16     	; 0x2ce4 <twi_stop+0x62>
    2cd4:	25 e3       	ldi	r18, 0x35	; 53
    2cd6:	2a 95       	dec	r18
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <twi_stop+0x54>
    2cda:	00 00       	nop
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	a1 09       	sbc	r26, r1
    2ce0:	b1 09       	sbc	r27, r1
    2ce2:	e4 cf       	rjmp	.-56     	; 0x2cac <twi_stop+0x2a>
    2ce4:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <twi_do_reset_on_timeout>
    2ce8:	cf ce       	rjmp	.-610    	; 0x2a88 <twi_handleTimeout>
    2cea:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <twi_state>
    2cee:	08 95       	ret

00002cf0 <__vector_39>:

ISR(TWI_vect)
{
    2cf0:	1f 92       	push	r1
    2cf2:	0f 92       	push	r0
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	0f 92       	push	r0
    2cf8:	11 24       	eor	r1, r1
    2cfa:	0b b6       	in	r0, 0x3b	; 59
    2cfc:	0f 92       	push	r0
    2cfe:	2f 93       	push	r18
    2d00:	3f 93       	push	r19
    2d02:	4f 93       	push	r20
    2d04:	5f 93       	push	r21
    2d06:	6f 93       	push	r22
    2d08:	7f 93       	push	r23
    2d0a:	8f 93       	push	r24
    2d0c:	9f 93       	push	r25
    2d0e:	af 93       	push	r26
    2d10:	bf 93       	push	r27
    2d12:	ef 93       	push	r30
    2d14:	ff 93       	push	r31
  switch(TW_STATUS){
    2d16:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    2d1a:	88 7f       	andi	r24, 0xF8	; 248
    2d1c:	80 36       	cpi	r24, 0x60	; 96
    2d1e:	09 f4       	brne	.+2      	; 0x2d22 <__vector_39+0x32>
    2d20:	9d c0       	rjmp	.+314    	; 0x2e5c <__vector_39+0x16c>
    2d22:	70 f5       	brcc	.+92     	; 0x2d80 <__vector_39+0x90>
    2d24:	88 32       	cpi	r24, 0x28	; 40
    2d26:	09 f4       	brne	.+2      	; 0x2d2a <__vector_39+0x3a>
    2d28:	5c c0       	rjmp	.+184    	; 0x2de2 <__vector_39+0xf2>
    2d2a:	90 f4       	brcc	.+36     	; 0x2d50 <__vector_39+0x60>
    2d2c:	80 31       	cpi	r24, 0x10	; 16
    2d2e:	09 f4       	brne	.+2      	; 0x2d32 <__vector_39+0x42>
    2d30:	55 c0       	rjmp	.+170    	; 0x2ddc <__vector_39+0xec>
    2d32:	38 f4       	brcc	.+14     	; 0x2d42 <__vector_39+0x52>
    2d34:	88 23       	and	r24, r24
    2d36:	09 f4       	brne	.+2      	; 0x2d3a <__vector_39+0x4a>
    2d38:	f3 c0       	rjmp	.+486    	; 0x2f20 <__vector_39+0x230>
    2d3a:	88 30       	cpi	r24, 0x08	; 8
    2d3c:	09 f4       	brne	.+2      	; 0x2d40 <__vector_39+0x50>
    2d3e:	4e c0       	rjmp	.+156    	; 0x2ddc <__vector_39+0xec>
    2d40:	f2 c0       	rjmp	.+484    	; 0x2f26 <__vector_39+0x236>
    2d42:	88 31       	cpi	r24, 0x18	; 24
    2d44:	09 f4       	brne	.+2      	; 0x2d48 <__vector_39+0x58>
    2d46:	4d c0       	rjmp	.+154    	; 0x2de2 <__vector_39+0xf2>
    2d48:	80 32       	cpi	r24, 0x20	; 32
    2d4a:	09 f4       	brne	.+2      	; 0x2d4e <__vector_39+0x5e>
    2d4c:	5e c0       	rjmp	.+188    	; 0x2e0a <__vector_39+0x11a>
    2d4e:	eb c0       	rjmp	.+470    	; 0x2f26 <__vector_39+0x236>
    2d50:	80 34       	cpi	r24, 0x40	; 64
    2d52:	09 f4       	brne	.+2      	; 0x2d56 <__vector_39+0x66>
    2d54:	69 c0       	rjmp	.+210    	; 0x2e28 <__vector_39+0x138>
    2d56:	50 f4       	brcc	.+20     	; 0x2d6c <__vector_39+0x7c>
    2d58:	80 33       	cpi	r24, 0x30	; 48
    2d5a:	09 f4       	brne	.+2      	; 0x2d5e <__vector_39+0x6e>
    2d5c:	56 c0       	rjmp	.+172    	; 0x2e0a <__vector_39+0x11a>
    2d5e:	88 33       	cpi	r24, 0x38	; 56
    2d60:	09 f0       	breq	.+2      	; 0x2d64 <__vector_39+0x74>
    2d62:	e1 c0       	rjmp	.+450    	; 0x2f26 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2d64:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi_error>
      twi_releaseBus();
    2d68:	89 de       	rcall	.-750    	; 0x2a7c <twi_releaseBus>
      break;
    2d6a:	dd c0       	rjmp	.+442    	; 0x2f26 <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2d6c:	80 35       	cpi	r24, 0x50	; 80
    2d6e:	09 f4       	brne	.+2      	; 0x2d72 <__vector_39+0x82>
    2d70:	4f c0       	rjmp	.+158    	; 0x2e10 <__vector_39+0x120>
    2d72:	88 35       	cpi	r24, 0x58	; 88
    2d74:	09 f4       	brne	.+2      	; 0x2d78 <__vector_39+0x88>
    2d76:	5d c0       	rjmp	.+186    	; 0x2e32 <__vector_39+0x142>
    2d78:	88 34       	cpi	r24, 0x48	; 72
    2d7a:	09 f0       	breq	.+2      	; 0x2d7e <__vector_39+0x8e>
    2d7c:	d4 c0       	rjmp	.+424    	; 0x2f26 <__vector_39+0x236>
    2d7e:	d2 c0       	rjmp	.+420    	; 0x2f24 <__vector_39+0x234>
    2d80:	88 39       	cpi	r24, 0x98	; 152
    2d82:	09 f4       	brne	.+2      	; 0x2d86 <__vector_39+0x96>
    2d84:	c3 c0       	rjmp	.+390    	; 0x2f0c <__vector_39+0x21c>
    2d86:	a8 f4       	brcc	.+42     	; 0x2db2 <__vector_39+0xc2>
    2d88:	88 37       	cpi	r24, 0x78	; 120
    2d8a:	09 f4       	brne	.+2      	; 0x2d8e <__vector_39+0x9e>
    2d8c:	67 c0       	rjmp	.+206    	; 0x2e5c <__vector_39+0x16c>
    2d8e:	38 f4       	brcc	.+14     	; 0x2d9e <__vector_39+0xae>
    2d90:	88 36       	cpi	r24, 0x68	; 104
    2d92:	09 f4       	brne	.+2      	; 0x2d96 <__vector_39+0xa6>
    2d94:	63 c0       	rjmp	.+198    	; 0x2e5c <__vector_39+0x16c>
    2d96:	80 37       	cpi	r24, 0x70	; 112
    2d98:	09 f4       	brne	.+2      	; 0x2d9c <__vector_39+0xac>
    2d9a:	60 c0       	rjmp	.+192    	; 0x2e5c <__vector_39+0x16c>
    2d9c:	c4 c0       	rjmp	.+392    	; 0x2f26 <__vector_39+0x236>
    2d9e:	88 38       	cpi	r24, 0x88	; 136
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <__vector_39+0xb4>
    2da2:	b4 c0       	rjmp	.+360    	; 0x2f0c <__vector_39+0x21c>
    2da4:	80 39       	cpi	r24, 0x90	; 144
    2da6:	09 f4       	brne	.+2      	; 0x2daa <__vector_39+0xba>
    2da8:	5f c0       	rjmp	.+190    	; 0x2e68 <__vector_39+0x178>
    2daa:	80 38       	cpi	r24, 0x80	; 128
    2dac:	09 f0       	breq	.+2      	; 0x2db0 <__vector_39+0xc0>
    2dae:	bb c0       	rjmp	.+374    	; 0x2f26 <__vector_39+0x236>
    2db0:	5b c0       	rjmp	.+182    	; 0x2e68 <__vector_39+0x178>
    2db2:	80 3b       	cpi	r24, 0xB0	; 176
    2db4:	09 f4       	brne	.+2      	; 0x2db8 <__vector_39+0xc8>
    2db6:	82 c0       	rjmp	.+260    	; 0x2ebc <__vector_39+0x1cc>
    2db8:	38 f4       	brcc	.+14     	; 0x2dc8 <__vector_39+0xd8>
    2dba:	80 3a       	cpi	r24, 0xA0	; 160
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <__vector_39+0xd0>
    2dbe:	66 c0       	rjmp	.+204    	; 0x2e8c <__vector_39+0x19c>
    2dc0:	88 3a       	cpi	r24, 0xA8	; 168
    2dc2:	09 f4       	brne	.+2      	; 0x2dc6 <__vector_39+0xd6>
    2dc4:	7b c0       	rjmp	.+246    	; 0x2ebc <__vector_39+0x1cc>
    2dc6:	af c0       	rjmp	.+350    	; 0x2f26 <__vector_39+0x236>
    2dc8:	80 3c       	cpi	r24, 0xC0	; 192
    2dca:	09 f4       	brne	.+2      	; 0x2dce <__vector_39+0xde>
    2dcc:	a3 c0       	rjmp	.+326    	; 0x2f14 <__vector_39+0x224>
    2dce:	88 3c       	cpi	r24, 0xC8	; 200
    2dd0:	09 f4       	brne	.+2      	; 0x2dd4 <__vector_39+0xe4>
    2dd2:	a0 c0       	rjmp	.+320    	; 0x2f14 <__vector_39+0x224>
    2dd4:	88 3b       	cpi	r24, 0xB8	; 184
    2dd6:	09 f4       	brne	.+2      	; 0x2dda <__vector_39+0xea>
    2dd8:	86 c0       	rjmp	.+268    	; 0x2ee6 <__vector_39+0x1f6>
    2dda:	a5 c0       	rjmp	.+330    	; 0x2f26 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2ddc:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <twi_slarw>
    2de0:	10 c0       	rjmp	.+32     	; 0x2e02 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2de2:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <twi_masterBufferIndex>
    2de6:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <twi_masterBufferLength>
    2dea:	98 17       	cp	r25, r24
    2dec:	70 f5       	brcc	.+92     	; 0x2e4a <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2dee:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <twi_masterBufferIndex>
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	8e 0f       	add	r24, r30
    2df6:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <twi_masterBufferIndex>
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	e7 5d       	subi	r30, 0xD7	; 215
    2dfe:	fc 4f       	sbci	r31, 0xFC	; 252
    2e00:	80 81       	ld	r24, Z
    2e02:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2e06:	85 ec       	ldi	r24, 0xC5	; 197
    2e08:	82 c0       	rjmp	.+260    	; 0x2f0e <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2e0a:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi_error>
    2e0e:	8a c0       	rjmp	.+276    	; 0x2f24 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2e10:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <twi_masterBufferIndex>
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	8e 0f       	add	r24, r30
    2e18:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <twi_masterBufferIndex>
    2e1c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	e7 5d       	subi	r30, 0xD7	; 215
    2e24:	fc 4f       	sbci	r31, 0xFC	; 252
    2e26:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2e28:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <twi_masterBufferIndex>
    2e2c:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <twi_masterBufferLength>
    2e30:	6a c0       	rjmp	.+212    	; 0x2f06 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2e32:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <twi_masterBufferIndex>
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	8e 0f       	add	r24, r30
    2e3a:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <twi_masterBufferIndex>
    2e3e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	e7 5d       	subi	r30, 0xD7	; 215
    2e46:	fc 4f       	sbci	r31, 0xFC	; 252
    2e48:	80 83       	st	Z, r24
      if (twi_sendStop){
    2e4a:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <twi_sendStop>
    2e4e:	81 11       	cpse	r24, r1
    2e50:	69 c0       	rjmp	.+210    	; 0x2f24 <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2e58:	84 ea       	ldi	r24, 0xA4	; 164
    2e5a:	5d c0       	rjmp	.+186    	; 0x2f16 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2e5c:	83 e0       	ldi	r24, 0x03	; 3
    2e5e:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2e62:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi_rxBufferIndex>
    2e66:	cf cf       	rjmp	.-98     	; 0x2e06 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2e68:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <twi_rxBufferIndex>
    2e6c:	80 32       	cpi	r24, 0x20	; 32
    2e6e:	08 f0       	brcs	.+2      	; 0x2e72 <__vector_39+0x182>
    2e70:	4d c0       	rjmp	.+154    	; 0x2f0c <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2e72:	e0 91 e4 02 	lds	r30, 0x02E4	; 0x8002e4 <twi_rxBufferIndex>
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	8e 0f       	add	r24, r30
    2e7a:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi_rxBufferIndex>
    2e7e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	eb 51       	subi	r30, 0x1B	; 27
    2e86:	fd 4f       	sbci	r31, 0xFD	; 253
    2e88:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2e8a:	bd cf       	rjmp	.-134    	; 0x2e06 <__vector_39+0x116>
    2e8c:	f7 dd       	rcall	.-1042   	; 0x2a7c <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2e8e:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <twi_rxBufferIndex>
    2e92:	80 32       	cpi	r24, 0x20	; 32
    2e94:	30 f4       	brcc	.+12     	; 0x2ea2 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2e96:	e0 91 e4 02 	lds	r30, 0x02E4	; 0x8002e4 <twi_rxBufferIndex>
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	eb 51       	subi	r30, 0x1B	; 27
    2e9e:	fd 4f       	sbci	r31, 0xFD	; 253
    2ea0:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2ea2:	60 91 e4 02 	lds	r22, 0x02E4	; 0x8002e4 <twi_rxBufferIndex>
    2ea6:	70 e0       	ldi	r23, 0x00	; 0
    2ea8:	e0 91 49 03 	lds	r30, 0x0349	; 0x800349 <twi_onSlaveReceive>
    2eac:	f0 91 4a 03 	lds	r31, 0x034A	; 0x80034a <twi_onSlaveReceive+0x1>
    2eb0:	85 ee       	ldi	r24, 0xE5	; 229
    2eb2:	92 e0       	ldi	r25, 0x02	; 2
    2eb4:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2eb6:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi_rxBufferIndex>
      break;
    2eba:	35 c0       	rjmp	.+106    	; 0x2f26 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2ebc:	84 e0       	ldi	r24, 0x04	; 4
    2ebe:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2ec2:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2ec6:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2eca:	e0 91 4b 03 	lds	r30, 0x034B	; 0x80034b <twi_onSlaveTransmit>
    2ece:	f0 91 4c 03 	lds	r31, 0x034C	; 0x80034c <twi_onSlaveTransmit+0x1>
    2ed2:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2ed4:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <twi_txBufferLength>
    2ed8:	81 11       	cpse	r24, r1
    2eda:	05 c0       	rjmp	.+10     	; 0x2ee6 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2ee2:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2ee6:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <twi_txBufferIndex>
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	8e 0f       	add	r24, r30
    2eee:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <twi_txBufferIndex>
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	e9 5f       	subi	r30, 0xF9	; 249
    2ef6:	fc 4f       	sbci	r31, 0xFC	; 252
    2ef8:	80 81       	ld	r24, Z
    2efa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2efe:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <twi_txBufferIndex>
    2f02:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <twi_txBufferLength>
    2f06:	98 17       	cp	r25, r24
    2f08:	08 f4       	brcc	.+2      	; 0x2f0c <__vector_39+0x21c>
    2f0a:	7d cf       	rjmp	.-262    	; 0x2e06 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2f0c:	85 e8       	ldi	r24, 0x85	; 133
    2f0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2f12:	09 c0       	rjmp	.+18     	; 0x2f26 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2f14:	85 ec       	ldi	r24, 0xC5	; 197
    2f16:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2f1a:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <twi_state>
      break;
    2f1e:	03 c0       	rjmp	.+6      	; 0x2f26 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2f20:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <twi_error>
      twi_stop();
    2f24:	ae de       	rcall	.-676    	; 0x2c82 <twi_stop>
      break;
  }
}
    2f26:	ff 91       	pop	r31
    2f28:	ef 91       	pop	r30
    2f2a:	bf 91       	pop	r27
    2f2c:	af 91       	pop	r26
    2f2e:	9f 91       	pop	r25
    2f30:	8f 91       	pop	r24
    2f32:	7f 91       	pop	r23
    2f34:	6f 91       	pop	r22
    2f36:	5f 91       	pop	r21
    2f38:	4f 91       	pop	r20
    2f3a:	3f 91       	pop	r19
    2f3c:	2f 91       	pop	r18
    2f3e:	0f 90       	pop	r0
    2f40:	0b be       	out	0x3b, r0	; 59
    2f42:	0f 90       	pop	r0
    2f44:	0f be       	out	0x3f, r0	; 63
    2f46:	0f 90       	pop	r0
    2f48:	1f 90       	pop	r1
    2f4a:	18 95       	reti

00002f4c <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2f4c:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <_ZN7TwoWire14rxBufferLengthE>
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <_ZN7TwoWire13rxBufferIndexE>
    2f56:	82 1b       	sub	r24, r18
    2f58:	91 09       	sbc	r25, r1
    2f5a:	08 95       	ret

00002f5c <_ZN7TwoWire4readEv>:
    2f5c:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <_ZN7TwoWire13rxBufferIndexE>
    2f60:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <_ZN7TwoWire14rxBufferLengthE>
    2f64:	98 17       	cp	r25, r24
    2f66:	50 f4       	brcc	.+20     	; 0x2f7c <_ZN7TwoWire4readEv+0x20>
    2f68:	e9 2f       	mov	r30, r25
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	e3 57       	subi	r30, 0x73	; 115
    2f6e:	fc 4f       	sbci	r31, 0xFC	; 252
    2f70:	20 81       	ld	r18, Z
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	9f 5f       	subi	r25, 0xFF	; 255
    2f76:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <_ZN7TwoWire13rxBufferIndexE>
    2f7a:	02 c0       	rjmp	.+4      	; 0x2f80 <_ZN7TwoWire4readEv+0x24>
    2f7c:	2f ef       	ldi	r18, 0xFF	; 255
    2f7e:	3f ef       	ldi	r19, 0xFF	; 255
    2f80:	c9 01       	movw	r24, r18
    2f82:	08 95       	ret

00002f84 <_ZN7TwoWire4peekEv>:
    2f84:	e0 91 8c 03 	lds	r30, 0x038C	; 0x80038c <_ZN7TwoWire13rxBufferIndexE>
    2f88:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <_ZN7TwoWire14rxBufferLengthE>
    2f8c:	e8 17       	cp	r30, r24
    2f8e:	30 f4       	brcc	.+12     	; 0x2f9c <_ZN7TwoWire4peekEv+0x18>
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	e3 57       	subi	r30, 0x73	; 115
    2f94:	fc 4f       	sbci	r31, 0xFC	; 252
    2f96:	80 81       	ld	r24, Z
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	08 95       	ret
    2f9c:	8f ef       	ldi	r24, 0xFF	; 255
    2f9e:	9f ef       	ldi	r25, 0xFF	; 255
    2fa0:	08 95       	ret

00002fa2 <_ZN7TwoWire5flushEv>:
    2fa2:	08 95       	ret

00002fa4 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2fa4:	cf 93       	push	r28
    2fa6:	df 93       	push	r29
    2fa8:	ec 01       	movw	r28, r24
    2faa:	e0 91 63 03 	lds	r30, 0x0363	; 0x800363 <_ZN7TwoWire14user_onReceiveE>
    2fae:	f0 91 64 03 	lds	r31, 0x0364	; 0x800364 <_ZN7TwoWire14user_onReceiveE+0x1>
    2fb2:	30 97       	sbiw	r30, 0x00	; 0
    2fb4:	f1 f0       	breq	.+60     	; 0x2ff2 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2fb6:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <_ZN7TwoWire13rxBufferIndexE>
    2fba:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <_ZN7TwoWire14rxBufferLengthE>
    2fbe:	98 17       	cp	r25, r24
    2fc0:	c0 f0       	brcs	.+48     	; 0x2ff2 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	29 2f       	mov	r18, r25
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	26 17       	cp	r18, r22
    2fca:	37 07       	cpc	r19, r23
    2fcc:	54 f4       	brge	.+20     	; 0x2fe2 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2fce:	de 01       	movw	r26, r28
    2fd0:	a2 0f       	add	r26, r18
    2fd2:	b3 1f       	adc	r27, r19
    2fd4:	4c 91       	ld	r20, X
    2fd6:	d9 01       	movw	r26, r18
    2fd8:	a3 57       	subi	r26, 0x73	; 115
    2fda:	bc 4f       	sbci	r27, 0xFC	; 252
    2fdc:	4c 93       	st	X, r20
    2fde:	9f 5f       	subi	r25, 0xFF	; 255
    2fe0:	f1 cf       	rjmp	.-30     	; 0x2fc4 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2fe2:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <_ZN7TwoWire13rxBufferIndexE>
    2fe6:	60 93 8b 03 	sts	0x038B, r22	; 0x80038b <_ZN7TwoWire14rxBufferLengthE>
    2fea:	cb 01       	movw	r24, r22
    2fec:	df 91       	pop	r29
    2fee:	cf 91       	pop	r28
    2ff0:	19 94       	eijmp
    2ff2:	df 91       	pop	r29
    2ff4:	cf 91       	pop	r28
    2ff6:	08 95       	ret

00002ff8 <_ZN7TwoWire16onRequestServiceEv>:
    2ff8:	e0 91 65 03 	lds	r30, 0x0365	; 0x800365 <_ZN7TwoWire14user_onRequestE>
    2ffc:	f0 91 66 03 	lds	r31, 0x0366	; 0x800366 <_ZN7TwoWire14user_onRequestE+0x1>
    3000:	30 97       	sbiw	r30, 0x00	; 0
    3002:	29 f0       	breq	.+10     	; 0x300e <_ZN7TwoWire16onRequestServiceEv+0x16>
    3004:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <_ZN7TwoWire13txBufferIndexE>
    3008:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <_ZN7TwoWire14txBufferLengthE>
    300c:	19 94       	eijmp
    300e:	08 95       	ret

00003010 <_ZN7TwoWire5writeEPKhj>:
    3010:	cf 92       	push	r12
    3012:	df 92       	push	r13
    3014:	ef 92       	push	r14
    3016:	ff 92       	push	r15
    3018:	0f 93       	push	r16
    301a:	1f 93       	push	r17
    301c:	cf 93       	push	r28
    301e:	df 93       	push	r29
    3020:	7c 01       	movw	r14, r24
    3022:	cb 01       	movw	r24, r22
    3024:	8a 01       	movw	r16, r20
    3026:	20 91 67 03 	lds	r18, 0x0367	; 0x800367 <_ZN7TwoWire12transmittingE>
    302a:	22 23       	and	r18, r18
    302c:	89 f0       	breq	.+34     	; 0x3050 <_ZN7TwoWire5writeEPKhj+0x40>
    302e:	eb 01       	movw	r28, r22
    3030:	6b 01       	movw	r12, r22
    3032:	c4 0e       	add	r12, r20
    3034:	d5 1e       	adc	r13, r21
    3036:	cc 15       	cp	r28, r12
    3038:	dd 05       	cpc	r29, r13
    303a:	61 f0       	breq	.+24     	; 0x3054 <_ZN7TwoWire5writeEPKhj+0x44>
    303c:	69 91       	ld	r22, Y+
    303e:	d7 01       	movw	r26, r14
    3040:	ed 91       	ld	r30, X+
    3042:	fc 91       	ld	r31, X
    3044:	01 90       	ld	r0, Z+
    3046:	f0 81       	ld	r31, Z
    3048:	e0 2d       	mov	r30, r0
    304a:	c7 01       	movw	r24, r14
    304c:	19 95       	eicall
    304e:	f3 cf       	rjmp	.-26     	; 0x3036 <_ZN7TwoWire5writeEPKhj+0x26>
    3050:	64 2f       	mov	r22, r20
    3052:	e2 dc       	rcall	.-1596   	; 0x2a18 <twi_transmit>
    3054:	c8 01       	movw	r24, r16
    3056:	df 91       	pop	r29
    3058:	cf 91       	pop	r28
    305a:	1f 91       	pop	r17
    305c:	0f 91       	pop	r16
    305e:	ff 90       	pop	r15
    3060:	ef 90       	pop	r14
    3062:	df 90       	pop	r13
    3064:	cf 90       	pop	r12
    3066:	08 95       	ret

00003068 <_ZN7TwoWire5writeEh>:
    3068:	cf 93       	push	r28
    306a:	df 93       	push	r29
    306c:	1f 92       	push	r1
    306e:	cd b7       	in	r28, 0x3d	; 61
    3070:	de b7       	in	r29, 0x3e	; 62
    3072:	69 83       	std	Y+1, r22	; 0x01
    3074:	20 91 67 03 	lds	r18, 0x0367	; 0x800367 <_ZN7TwoWire12transmittingE>
    3078:	22 23       	and	r18, r18
    307a:	d1 f0       	breq	.+52     	; 0x30b0 <_ZN7TwoWire5writeEh+0x48>
    307c:	20 91 68 03 	lds	r18, 0x0368	; 0x800368 <_ZN7TwoWire14txBufferLengthE>
    3080:	20 32       	cpi	r18, 0x20	; 32
    3082:	40 f0       	brcs	.+16     	; 0x3094 <_ZN7TwoWire5writeEh+0x2c>
    3084:	21 e0       	ldi	r18, 0x01	; 1
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	fc 01       	movw	r30, r24
    308a:	33 83       	std	Z+3, r19	; 0x03
    308c:	22 83       	std	Z+2, r18	; 0x02
    308e:	80 e0       	ldi	r24, 0x00	; 0
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	14 c0       	rjmp	.+40     	; 0x30bc <_ZN7TwoWire5writeEh+0x54>
    3094:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <_ZN7TwoWire13txBufferIndexE>
    3098:	e8 2f       	mov	r30, r24
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	e6 59       	subi	r30, 0x96	; 150
    309e:	fc 4f       	sbci	r31, 0xFC	; 252
    30a0:	99 81       	ldd	r25, Y+1	; 0x01
    30a2:	90 83       	st	Z, r25
    30a4:	8f 5f       	subi	r24, 0xFF	; 255
    30a6:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <_ZN7TwoWire13txBufferIndexE>
    30aa:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <_ZN7TwoWire14txBufferLengthE>
    30ae:	04 c0       	rjmp	.+8      	; 0x30b8 <_ZN7TwoWire5writeEh+0x50>
    30b0:	61 e0       	ldi	r22, 0x01	; 1
    30b2:	ce 01       	movw	r24, r28
    30b4:	01 96       	adiw	r24, 0x01	; 1
    30b6:	b0 dc       	rcall	.-1696   	; 0x2a18 <twi_transmit>
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	0f 90       	pop	r0
    30be:	df 91       	pop	r29
    30c0:	cf 91       	pop	r28
    30c2:	08 95       	ret

000030c4 <_ZN7TwoWireC1Ev>:
    30c4:	fc 01       	movw	r30, r24
    30c6:	13 82       	std	Z+3, r1	; 0x03
    30c8:	12 82       	std	Z+2, r1	; 0x02
    30ca:	88 ee       	ldi	r24, 0xE8	; 232
    30cc:	93 e0       	ldi	r25, 0x03	; 3
    30ce:	a0 e0       	ldi	r26, 0x00	; 0
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	84 83       	std	Z+4, r24	; 0x04
    30d4:	95 83       	std	Z+5, r25	; 0x05
    30d6:	a6 83       	std	Z+6, r26	; 0x06
    30d8:	b7 83       	std	Z+7, r27	; 0x07
    30da:	8b e6       	ldi	r24, 0x6B	; 107
    30dc:	92 e0       	ldi	r25, 0x02	; 2
    30de:	91 83       	std	Z+1, r25	; 0x01
    30e0:	80 83       	st	Z, r24
    30e2:	08 95       	ret

000030e4 <_ZN7TwoWire5beginEv>:
    30e4:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <_ZN7TwoWire13rxBufferIndexE>
    30e8:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <_ZN7TwoWire14rxBufferLengthE>
    30ec:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <_ZN7TwoWire13txBufferIndexE>
    30f0:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <_ZN7TwoWire14txBufferLengthE>
    30f4:	52 dc       	rcall	.-1884   	; 0x299a <twi_init>
    30f6:	8c ef       	ldi	r24, 0xFC	; 252
    30f8:	97 e1       	ldi	r25, 0x17	; 23
    30fa:	bb dc       	rcall	.-1674   	; 0x2a72 <twi_attachSlaveTxEvent>
    30fc:	82 ed       	ldi	r24, 0xD2	; 210
    30fe:	97 e1       	ldi	r25, 0x17	; 23
    3100:	b3 cc       	rjmp	.-1690   	; 0x2a68 <twi_attachSlaveRxEvent>

00003102 <_ZN7TwoWire8setClockEm>:
    3102:	cb 01       	movw	r24, r22
    3104:	ba 01       	movw	r22, r20
    3106:	74 cc       	rjmp	.-1816   	; 0x29f0 <twi_setFrequency>

00003108 <_ZN7TwoWire17beginTransmissionEh>:
    3108:	81 e0       	ldi	r24, 0x01	; 1
    310a:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <_ZN7TwoWire12transmittingE>
    310e:	60 93 8a 03 	sts	0x038A, r22	; 0x80038a <_ZN7TwoWire9txAddressE>
    3112:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <_ZN7TwoWire13txBufferIndexE>
    3116:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <_ZN7TwoWire14txBufferLengthE>
    311a:	08 95       	ret

0000311c <_ZN7TwoWire17beginTransmissionEi>:
    311c:	f5 cf       	rjmp	.-22     	; 0x3108 <_ZN7TwoWire17beginTransmissionEh>

0000311e <_ZN7TwoWire15endTransmissionEh>:
    311e:	0f 93       	push	r16
    3120:	06 2f       	mov	r16, r22
    3122:	21 e0       	ldi	r18, 0x01	; 1
    3124:	40 91 68 03 	lds	r20, 0x0368	; 0x800368 <_ZN7TwoWire14txBufferLengthE>
    3128:	6a e6       	ldi	r22, 0x6A	; 106
    312a:	73 e0       	ldi	r23, 0x03	; 3
    312c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <_ZN7TwoWire9txAddressE>
    3130:	bf dc       	rcall	.-1666   	; 0x2ab0 <twi_writeTo>
    3132:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <_ZN7TwoWire13txBufferIndexE>
    3136:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <_ZN7TwoWire14txBufferLengthE>
    313a:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <_ZN7TwoWire12transmittingE>
    313e:	0f 91       	pop	r16
    3140:	08 95       	ret

00003142 <_ZN7TwoWire15endTransmissionEv>:
    3142:	61 e0       	ldi	r22, 0x01	; 1
    3144:	ec cf       	rjmp	.-40     	; 0x311e <_ZN7TwoWire15endTransmissionEh>

00003146 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3146:	87 e5       	ldi	r24, 0x57	; 87
    3148:	93 e0       	ldi	r25, 0x03	; 3
    314a:	bc cf       	rjmp	.-136    	; 0x30c4 <_ZN7TwoWireC1Ev>

0000314c <__cxa_pure_virtual>:
    314c:	0e 94 de 20 	call	0x41bc	; 0x41bc <abort>

00003150 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3150:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3152:	91 8d       	ldd	r25, Z+25	; 0x19
    3154:	22 8d       	ldd	r18, Z+26	; 0x1a
    3156:	89 2f       	mov	r24, r25
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	80 5c       	subi	r24, 0xC0	; 192
    315c:	9f 4f       	sbci	r25, 0xFF	; 255
    315e:	82 1b       	sub	r24, r18
    3160:	91 09       	sbc	r25, r1
}
    3162:	8f 73       	andi	r24, 0x3F	; 63
    3164:	99 27       	eor	r25, r25
    3166:	08 95       	ret

00003168 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3168:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    316a:	91 8d       	ldd	r25, Z+25	; 0x19
    316c:	82 8d       	ldd	r24, Z+26	; 0x1a
    316e:	98 17       	cp	r25, r24
    3170:	31 f0       	breq	.+12     	; 0x317e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3172:	82 8d       	ldd	r24, Z+26	; 0x1a
    3174:	e8 0f       	add	r30, r24
    3176:	f1 1d       	adc	r31, r1
    3178:	85 8d       	ldd	r24, Z+29	; 0x1d
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    317e:	8f ef       	ldi	r24, 0xFF	; 255
    3180:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3182:	08 95       	ret

00003184 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3184:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3186:	91 8d       	ldd	r25, Z+25	; 0x19
    3188:	82 8d       	ldd	r24, Z+26	; 0x1a
    318a:	98 17       	cp	r25, r24
    318c:	61 f0       	breq	.+24     	; 0x31a6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    318e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3190:	df 01       	movw	r26, r30
    3192:	a8 0f       	add	r26, r24
    3194:	b1 1d       	adc	r27, r1
    3196:	5d 96       	adiw	r26, 0x1d	; 29
    3198:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    319a:	92 8d       	ldd	r25, Z+26	; 0x1a
    319c:	9f 5f       	subi	r25, 0xFF	; 255
    319e:	9f 73       	andi	r25, 0x3F	; 63
    31a0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    31a6:	8f ef       	ldi	r24, 0xFF	; 255
    31a8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    31aa:	08 95       	ret

000031ac <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    31ac:	fc 01       	movw	r30, r24
    31ae:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    31b0:	44 8d       	ldd	r20, Z+28	; 0x1c
    31b2:	25 2f       	mov	r18, r21
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	84 2f       	mov	r24, r20
    31b8:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    31ba:	82 1b       	sub	r24, r18
    31bc:	93 0b       	sbc	r25, r19
    31be:	54 17       	cp	r21, r20
    31c0:	10 f0       	brcs	.+4      	; 0x31c6 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    31c2:	cf 96       	adiw	r24, 0x3f	; 63
    31c4:	08 95       	ret
  return tail - head - 1;
    31c6:	01 97       	sbiw	r24, 0x01	; 1
}
    31c8:	08 95       	ret

000031ca <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    31ca:	82 e7       	ldi	r24, 0x72	; 114
    31cc:	9a e1       	ldi	r25, 0x1A	; 26
    31ce:	89 2b       	or	r24, r25
    31d0:	39 f0       	breq	.+14     	; 0x31e0 <_Z14serialEventRunv+0x16>
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	89 2b       	or	r24, r25
    31d8:	19 f0       	breq	.+6      	; 0x31e0 <_Z14serialEventRunv+0x16>
    31da:	84 d1       	rcall	.+776    	; 0x34e4 <_Z17Serial0_availablev>
    31dc:	81 11       	cpse	r24, r1
    31de:	25 c0       	rjmp	.+74     	; 0x322a <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	89 2b       	or	r24, r25
    31e6:	41 f0       	breq	.+16     	; 0x31f8 <_Z14serialEventRunv+0x2e>
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	89 2b       	or	r24, r25
    31ee:	21 f0       	breq	.+8      	; 0x31f8 <_Z14serialEventRunv+0x2e>
    31f0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    31f4:	81 11       	cpse	r24, r1
    31f6:	1c c0       	rjmp	.+56     	; 0x3230 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    31f8:	80 e0       	ldi	r24, 0x00	; 0
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	89 2b       	or	r24, r25
    31fe:	41 f0       	breq	.+16     	; 0x3210 <_Z14serialEventRunv+0x46>
    3200:	80 e0       	ldi	r24, 0x00	; 0
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	89 2b       	or	r24, r25
    3206:	21 f0       	breq	.+8      	; 0x3210 <_Z14serialEventRunv+0x46>
    3208:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    320c:	81 11       	cpse	r24, r1
    320e:	13 c0       	rjmp	.+38     	; 0x3236 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	89 2b       	or	r24, r25
    3216:	a1 f0       	breq	.+40     	; 0x3240 <_Z14serialEventRunv+0x76>
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	89 2b       	or	r24, r25
    321e:	81 f0       	breq	.+32     	; 0x3240 <_Z14serialEventRunv+0x76>
    3220:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3224:	81 11       	cpse	r24, r1
    3226:	0a c0       	rjmp	.+20     	; 0x323c <_Z14serialEventRunv+0x72>
    3228:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    322a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    322e:	d8 cf       	rjmp	.-80     	; 0x31e0 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    3230:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3234:	e1 cf       	rjmp	.-62     	; 0x31f8 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    3236:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    323a:	ea cf       	rjmp	.-44     	; 0x3210 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    323c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3240:	08 95       	ret

00003242 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3242:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3244:	84 8d       	ldd	r24, Z+28	; 0x1c
    3246:	df 01       	movw	r26, r30
    3248:	a8 0f       	add	r26, r24
    324a:	b1 1d       	adc	r27, r1
    324c:	a3 5a       	subi	r26, 0xA3	; 163
    324e:	bf 4f       	sbci	r27, 0xFF	; 255
    3250:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3252:	84 8d       	ldd	r24, Z+28	; 0x1c
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	01 96       	adiw	r24, 0x01	; 1
    3258:	8f 73       	andi	r24, 0x3F	; 63
    325a:	99 27       	eor	r25, r25
    325c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    325e:	a6 89       	ldd	r26, Z+22	; 0x16
    3260:	b7 89       	ldd	r27, Z+23	; 0x17
    3262:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3264:	a0 89       	ldd	r26, Z+16	; 0x10
    3266:	b1 89       	ldd	r27, Z+17	; 0x11
    3268:	8c 91       	ld	r24, X
    326a:	83 70       	andi	r24, 0x03	; 3
    326c:	80 64       	ori	r24, 0x40	; 64
    326e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    3270:	93 8d       	ldd	r25, Z+27	; 0x1b
    3272:	84 8d       	ldd	r24, Z+28	; 0x1c
    3274:	98 13       	cpse	r25, r24
    3276:	06 c0       	rjmp	.+12     	; 0x3284 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3278:	02 88       	ldd	r0, Z+18	; 0x12
    327a:	f3 89       	ldd	r31, Z+19	; 0x13
    327c:	e0 2d       	mov	r30, r0
    327e:	80 81       	ld	r24, Z
    3280:	8f 7d       	andi	r24, 0xDF	; 223
    3282:	80 83       	st	Z, r24
    3284:	08 95       	ret

00003286 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3286:	ef 92       	push	r14
    3288:	ff 92       	push	r15
    328a:	0f 93       	push	r16
    328c:	1f 93       	push	r17
    328e:	cf 93       	push	r28
    3290:	df 93       	push	r29
    3292:	ec 01       	movw	r28, r24
  _written = true;
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3298:	9b 8d       	ldd	r25, Y+27	; 0x1b
    329a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    329c:	98 13       	cpse	r25, r24
    329e:	05 c0       	rjmp	.+10     	; 0x32aa <_ZN14HardwareSerial5writeEh+0x24>
    32a0:	e8 89       	ldd	r30, Y+16	; 0x10
    32a2:	f9 89       	ldd	r31, Y+17	; 0x11
    32a4:	80 81       	ld	r24, Z
    32a6:	85 fd       	sbrc	r24, 5
    32a8:	25 c0       	rjmp	.+74     	; 0x32f4 <_ZN14HardwareSerial5writeEh+0x6e>
    32aa:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    32ac:	0b 8d       	ldd	r16, Y+27	; 0x1b
    32ae:	10 e0       	ldi	r17, 0x00	; 0
    32b0:	0f 5f       	subi	r16, 0xFF	; 255
    32b2:	1f 4f       	sbci	r17, 0xFF	; 255
    32b4:	0f 73       	andi	r16, 0x3F	; 63
    32b6:	11 27       	eor	r17, r17
    32b8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    32ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32bc:	e8 12       	cpse	r14, r24
    32be:	0b c0       	rjmp	.+22     	; 0x32d6 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    32c0:	0f b6       	in	r0, 0x3f	; 63
    32c2:	07 fc       	sbrc	r0, 7
    32c4:	fa cf       	rjmp	.-12     	; 0x32ba <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    32c6:	e8 89       	ldd	r30, Y+16	; 0x10
    32c8:	f9 89       	ldd	r31, Y+17	; 0x11
    32ca:	80 81       	ld	r24, Z
    32cc:	85 ff       	sbrs	r24, 5
    32ce:	f5 cf       	rjmp	.-22     	; 0x32ba <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    32d0:	ce 01       	movw	r24, r28
    32d2:	b7 df       	rcall	.-146    	; 0x3242 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    32d4:	f2 cf       	rjmp	.-28     	; 0x32ba <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    32d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32d8:	fe 01       	movw	r30, r28
    32da:	e8 0f       	add	r30, r24
    32dc:	f1 1d       	adc	r31, r1
    32de:	e3 5a       	subi	r30, 0xA3	; 163
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    32e4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    32e6:	f8 94       	cli
    _tx_buffer_head = i;
    32e8:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    32ea:	ea 89       	ldd	r30, Y+18	; 0x12
    32ec:	fb 89       	ldd	r31, Y+19	; 0x13
    32ee:	80 81       	ld	r24, Z
    32f0:	80 62       	ori	r24, 0x20	; 32
    32f2:	0a c0       	rjmp	.+20     	; 0x3308 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    32f4:	9f b7       	in	r25, 0x3f	; 63
    32f6:	f8 94       	cli
      *_udr = c;
    32f8:	ee 89       	ldd	r30, Y+22	; 0x16
    32fa:	ff 89       	ldd	r31, Y+23	; 0x17
    32fc:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    32fe:	e8 89       	ldd	r30, Y+16	; 0x10
    3300:	f9 89       	ldd	r31, Y+17	; 0x11
    3302:	80 81       	ld	r24, Z
    3304:	83 70       	andi	r24, 0x03	; 3
    3306:	80 64       	ori	r24, 0x40	; 64
    3308:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    330a:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	df 91       	pop	r29
    3312:	cf 91       	pop	r28
    3314:	1f 91       	pop	r17
    3316:	0f 91       	pop	r16
    3318:	ff 90       	pop	r15
    331a:	ef 90       	pop	r14
    331c:	08 95       	ret

0000331e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    331e:	cf 93       	push	r28
    3320:	df 93       	push	r29
    3322:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3324:	88 8d       	ldd	r24, Y+24	; 0x18
    3326:	88 23       	and	r24, r24
    3328:	c1 f0       	breq	.+48     	; 0x335a <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    332a:	ea 89       	ldd	r30, Y+18	; 0x12
    332c:	fb 89       	ldd	r31, Y+19	; 0x13
    332e:	80 81       	ld	r24, Z
    3330:	85 fd       	sbrc	r24, 5
    3332:	05 c0       	rjmp	.+10     	; 0x333e <_ZN14HardwareSerial5flushEv+0x20>
    3334:	a8 89       	ldd	r26, Y+16	; 0x10
    3336:	b9 89       	ldd	r27, Y+17	; 0x11
    3338:	8c 91       	ld	r24, X
    333a:	86 fd       	sbrc	r24, 6
    333c:	0e c0       	rjmp	.+28     	; 0x335a <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	07 fc       	sbrc	r0, 7
    3342:	f5 cf       	rjmp	.-22     	; 0x332e <_ZN14HardwareSerial5flushEv+0x10>
    3344:	80 81       	ld	r24, Z
    3346:	85 ff       	sbrs	r24, 5
    3348:	f2 cf       	rjmp	.-28     	; 0x332e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    334a:	a8 89       	ldd	r26, Y+16	; 0x10
    334c:	b9 89       	ldd	r27, Y+17	; 0x11
    334e:	8c 91       	ld	r24, X
    3350:	85 ff       	sbrs	r24, 5
    3352:	ed cf       	rjmp	.-38     	; 0x332e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3354:	ce 01       	movw	r24, r28
    3356:	75 df       	rcall	.-278    	; 0x3242 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3358:	e8 cf       	rjmp	.-48     	; 0x332a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    335a:	df 91       	pop	r29
    335c:	cf 91       	pop	r28
    335e:	08 95       	ret

00003360 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3360:	cf 92       	push	r12
    3362:	df 92       	push	r13
    3364:	ef 92       	push	r14
    3366:	ff 92       	push	r15
    3368:	1f 93       	push	r17
    336a:	cf 93       	push	r28
    336c:	df 93       	push	r29
    336e:	ec 01       	movw	r28, r24
    3370:	6a 01       	movw	r12, r20
    3372:	7b 01       	movw	r14, r22
    3374:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3376:	e8 89       	ldd	r30, Y+16	; 0x10
    3378:	f9 89       	ldd	r31, Y+17	; 0x11
    337a:	82 e0       	ldi	r24, 0x02	; 2
    337c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    337e:	41 15       	cp	r20, r1
    3380:	51 4e       	sbci	r21, 0xE1	; 225
    3382:	61 05       	cpc	r22, r1
    3384:	71 05       	cpc	r23, r1
    3386:	a9 f0       	breq	.+42     	; 0x33b2 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3388:	60 e0       	ldi	r22, 0x00	; 0
    338a:	79 e0       	ldi	r23, 0x09	; 9
    338c:	8d e3       	ldi	r24, 0x3D	; 61
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	a7 01       	movw	r20, r14
    3392:	96 01       	movw	r18, r12
    3394:	e8 d4       	rcall	.+2512   	; 0x3d66 <__udivmodsi4>
    3396:	da 01       	movw	r26, r20
    3398:	c9 01       	movw	r24, r18
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	a1 09       	sbc	r26, r1
    339e:	b1 09       	sbc	r27, r1
    33a0:	b6 95       	lsr	r27
    33a2:	a7 95       	ror	r26
    33a4:	97 95       	ror	r25
    33a6:	87 95       	ror	r24
    33a8:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    33aa:	21 15       	cp	r18, r1
    33ac:	80 e1       	ldi	r24, 0x10	; 16
    33ae:	38 07       	cpc	r19, r24
    33b0:	a0 f0       	brcs	.+40     	; 0x33da <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    33b2:	e8 89       	ldd	r30, Y+16	; 0x10
    33b4:	f9 89       	ldd	r31, Y+17	; 0x11
    33b6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    33b8:	60 e8       	ldi	r22, 0x80	; 128
    33ba:	74 e8       	ldi	r23, 0x84	; 132
    33bc:	8e e1       	ldi	r24, 0x1E	; 30
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	a7 01       	movw	r20, r14
    33c2:	96 01       	movw	r18, r12
    33c4:	d0 d4       	rcall	.+2464   	; 0x3d66 <__udivmodsi4>
    33c6:	da 01       	movw	r26, r20
    33c8:	c9 01       	movw	r24, r18
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	a1 09       	sbc	r26, r1
    33ce:	b1 09       	sbc	r27, r1
    33d0:	b6 95       	lsr	r27
    33d2:	a7 95       	ror	r26
    33d4:	97 95       	ror	r25
    33d6:	87 95       	ror	r24
    33d8:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    33da:	ec 85       	ldd	r30, Y+12	; 0x0c
    33dc:	fd 85       	ldd	r31, Y+13	; 0x0d
    33de:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    33e0:	ee 85       	ldd	r30, Y+14	; 0x0e
    33e2:	ff 85       	ldd	r31, Y+15	; 0x0f
    33e4:	20 83       	st	Z, r18

  _written = false;
    33e6:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    33e8:	ec 89       	ldd	r30, Y+20	; 0x14
    33ea:	fd 89       	ldd	r31, Y+21	; 0x15
    33ec:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    33ee:	ea 89       	ldd	r30, Y+18	; 0x12
    33f0:	fb 89       	ldd	r31, Y+19	; 0x13
    33f2:	80 81       	ld	r24, Z
    33f4:	80 61       	ori	r24, 0x10	; 16
    33f6:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    33f8:	ea 89       	ldd	r30, Y+18	; 0x12
    33fa:	fb 89       	ldd	r31, Y+19	; 0x13
    33fc:	80 81       	ld	r24, Z
    33fe:	88 60       	ori	r24, 0x08	; 8
    3400:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3402:	ea 89       	ldd	r30, Y+18	; 0x12
    3404:	fb 89       	ldd	r31, Y+19	; 0x13
    3406:	80 81       	ld	r24, Z
    3408:	80 68       	ori	r24, 0x80	; 128
    340a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    340c:	ea 89       	ldd	r30, Y+18	; 0x12
    340e:	fb 89       	ldd	r31, Y+19	; 0x13
    3410:	80 81       	ld	r24, Z
    3412:	8f 7d       	andi	r24, 0xDF	; 223
    3414:	80 83       	st	Z, r24
}
    3416:	df 91       	pop	r29
    3418:	cf 91       	pop	r28
    341a:	1f 91       	pop	r17
    341c:	ff 90       	pop	r15
    341e:	ef 90       	pop	r14
    3420:	df 90       	pop	r13
    3422:	cf 90       	pop	r12
    3424:	08 95       	ret

00003426 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3426:	1f 92       	push	r1
    3428:	0f 92       	push	r0
    342a:	0f b6       	in	r0, 0x3f	; 63
    342c:	0f 92       	push	r0
    342e:	11 24       	eor	r1, r1
    3430:	0b b6       	in	r0, 0x3b	; 59
    3432:	0f 92       	push	r0
    3434:	2f 93       	push	r18
    3436:	8f 93       	push	r24
    3438:	9f 93       	push	r25
    343a:	ef 93       	push	r30
    343c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    343e:	e0 91 bd 03 	lds	r30, 0x03BD	; 0x8003bd <Serial+0x10>
    3442:	f0 91 be 03 	lds	r31, 0x03BE	; 0x8003be <Serial+0x11>
    3446:	80 81       	ld	r24, Z
    3448:	e0 91 c3 03 	lds	r30, 0x03C3	; 0x8003c3 <Serial+0x16>
    344c:	f0 91 c4 03 	lds	r31, 0x03C4	; 0x8003c4 <Serial+0x17>
    3450:	82 fd       	sbrc	r24, 2
    3452:	12 c0       	rjmp	.+36     	; 0x3478 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3454:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3456:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <Serial+0x19>
    345a:	8f 5f       	subi	r24, 0xFF	; 255
    345c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    345e:	20 91 c7 03 	lds	r18, 0x03C7	; 0x8003c7 <Serial+0x1a>
    3462:	82 17       	cp	r24, r18
    3464:	51 f0       	breq	.+20     	; 0x347a <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    3466:	e0 91 c6 03 	lds	r30, 0x03C6	; 0x8003c6 <Serial+0x19>
    346a:	f0 e0       	ldi	r31, 0x00	; 0
    346c:	e3 55       	subi	r30, 0x53	; 83
    346e:	fc 4f       	sbci	r31, 0xFC	; 252
    3470:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3472:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <Serial+0x19>
    3476:	01 c0       	rjmp	.+2      	; 0x347a <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3478:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    347a:	ff 91       	pop	r31
    347c:	ef 91       	pop	r30
    347e:	9f 91       	pop	r25
    3480:	8f 91       	pop	r24
    3482:	2f 91       	pop	r18
    3484:	0f 90       	pop	r0
    3486:	0b be       	out	0x3b, r0	; 59
    3488:	0f 90       	pop	r0
    348a:	0f be       	out	0x3f, r0	; 63
    348c:	0f 90       	pop	r0
    348e:	1f 90       	pop	r1
    3490:	18 95       	reti

00003492 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3492:	1f 92       	push	r1
    3494:	0f 92       	push	r0
    3496:	0f b6       	in	r0, 0x3f	; 63
    3498:	0f 92       	push	r0
    349a:	11 24       	eor	r1, r1
    349c:	0b b6       	in	r0, 0x3b	; 59
    349e:	0f 92       	push	r0
    34a0:	2f 93       	push	r18
    34a2:	3f 93       	push	r19
    34a4:	4f 93       	push	r20
    34a6:	5f 93       	push	r21
    34a8:	6f 93       	push	r22
    34aa:	7f 93       	push	r23
    34ac:	8f 93       	push	r24
    34ae:	9f 93       	push	r25
    34b0:	af 93       	push	r26
    34b2:	bf 93       	push	r27
    34b4:	ef 93       	push	r30
    34b6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    34b8:	8d ea       	ldi	r24, 0xAD	; 173
    34ba:	93 e0       	ldi	r25, 0x03	; 3
    34bc:	c2 de       	rcall	.-636    	; 0x3242 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    34be:	ff 91       	pop	r31
    34c0:	ef 91       	pop	r30
    34c2:	bf 91       	pop	r27
    34c4:	af 91       	pop	r26
    34c6:	9f 91       	pop	r25
    34c8:	8f 91       	pop	r24
    34ca:	7f 91       	pop	r23
    34cc:	6f 91       	pop	r22
    34ce:	5f 91       	pop	r21
    34d0:	4f 91       	pop	r20
    34d2:	3f 91       	pop	r19
    34d4:	2f 91       	pop	r18
    34d6:	0f 90       	pop	r0
    34d8:	0b be       	out	0x3b, r0	; 59
    34da:	0f 90       	pop	r0
    34dc:	0f be       	out	0x3f, r0	; 63
    34de:	0f 90       	pop	r0
    34e0:	1f 90       	pop	r1
    34e2:	18 95       	reti

000034e4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    34e4:	8d ea       	ldi	r24, 0xAD	; 173
    34e6:	93 e0       	ldi	r25, 0x03	; 3
    34e8:	33 de       	rcall	.-922    	; 0x3150 <_ZN14HardwareSerial9availableEv>
    34ea:	21 e0       	ldi	r18, 0x01	; 1
    34ec:	89 2b       	or	r24, r25
    34ee:	09 f4       	brne	.+2      	; 0x34f2 <_Z17Serial0_availablev+0xe>
    34f0:	20 e0       	ldi	r18, 0x00	; 0
}
    34f2:	82 2f       	mov	r24, r18
    34f4:	08 95       	ret

000034f6 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    34f6:	ed ea       	ldi	r30, 0xAD	; 173
    34f8:	f3 e0       	ldi	r31, 0x03	; 3
    34fa:	13 82       	std	Z+3, r1	; 0x03
    34fc:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    34fe:	88 ee       	ldi	r24, 0xE8	; 232
    3500:	93 e0       	ldi	r25, 0x03	; 3
    3502:	a0 e0       	ldi	r26, 0x00	; 0
    3504:	b0 e0       	ldi	r27, 0x00	; 0
    3506:	84 83       	std	Z+4, r24	; 0x04
    3508:	95 83       	std	Z+5, r25	; 0x05
    350a:	a6 83       	std	Z+6, r26	; 0x06
    350c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    350e:	8d e7       	ldi	r24, 0x7D	; 125
    3510:	92 e0       	ldi	r25, 0x02	; 2
    3512:	91 83       	std	Z+1, r25	; 0x01
    3514:	80 83       	st	Z, r24
    3516:	85 ec       	ldi	r24, 0xC5	; 197
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	95 87       	std	Z+13, r25	; 0x0d
    351c:	84 87       	std	Z+12, r24	; 0x0c
    351e:	84 ec       	ldi	r24, 0xC4	; 196
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	97 87       	std	Z+15, r25	; 0x0f
    3524:	86 87       	std	Z+14, r24	; 0x0e
    3526:	80 ec       	ldi	r24, 0xC0	; 192
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	91 8b       	std	Z+17, r25	; 0x11
    352c:	80 8b       	std	Z+16, r24	; 0x10
    352e:	81 ec       	ldi	r24, 0xC1	; 193
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	93 8b       	std	Z+19, r25	; 0x13
    3534:	82 8b       	std	Z+18, r24	; 0x12
    3536:	82 ec       	ldi	r24, 0xC2	; 194
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	95 8b       	std	Z+21, r25	; 0x15
    353c:	84 8b       	std	Z+20, r24	; 0x14
    353e:	86 ec       	ldi	r24, 0xC6	; 198
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	97 8b       	std	Z+23, r25	; 0x17
    3544:	86 8b       	std	Z+22, r24	; 0x16
    3546:	11 8e       	std	Z+25, r1	; 0x19
    3548:	12 8e       	std	Z+26, r1	; 0x1a
    354a:	13 8e       	std	Z+27, r1	; 0x1b
    354c:	14 8e       	std	Z+28, r1	; 0x1c
    354e:	08 95       	ret

00003550 <initVariant>:
    3550:	08 95       	ret

00003552 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    3552:	fc d1       	rcall	.+1016   	; 0x394c <init>

	initVariant();
    3554:	fd df       	rcall	.-6      	; 0x3550 <initVariant>
    3556:	0e 94 2e 06 	call	0xc5c	; 0xc5c <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    355a:	c5 ee       	ldi	r28, 0xE5	; 229
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    355c:	d8 e1       	ldi	r29, 0x18	; 24
    355e:	0e 94 67 06 	call	0xcce	; 0xcce <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    3562:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    3564:	e1 f3       	breq	.-8      	; 0x355e <main+0xc>
    3566:	31 de       	rcall	.-926    	; 0x31ca <_Z14serialEventRunv>
    3568:	fa cf       	rjmp	.-12     	; 0x355e <main+0xc>

0000356a <_ZN5Print5writeEPKhj>:
    356a:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    356c:	df 92       	push	r13
    356e:	ef 92       	push	r14
    3570:	ff 92       	push	r15
    3572:	0f 93       	push	r16
    3574:	1f 93       	push	r17
    3576:	cf 93       	push	r28
    3578:	df 93       	push	r29
    357a:	6c 01       	movw	r12, r24
    357c:	7a 01       	movw	r14, r20
    357e:	8b 01       	movw	r16, r22
    3580:	c0 e0       	ldi	r28, 0x00	; 0
    3582:	d0 e0       	ldi	r29, 0x00	; 0
    3584:	ce 15       	cp	r28, r14
    3586:	df 05       	cpc	r29, r15
    3588:	81 f0       	breq	.+32     	; 0x35aa <_ZN5Print5writeEPKhj+0x40>
    358a:	d8 01       	movw	r26, r16
    358c:	6d 91       	ld	r22, X+
    358e:	8d 01       	movw	r16, r26
    3590:	d6 01       	movw	r26, r12
    3592:	ed 91       	ld	r30, X+
    3594:	fc 91       	ld	r31, X
    3596:	01 90       	ld	r0, Z+
    3598:	f0 81       	ld	r31, Z
    359a:	e0 2d       	mov	r30, r0
    359c:	c6 01       	movw	r24, r12
    359e:	19 95       	eicall
    35a0:	89 2b       	or	r24, r25
    35a2:	11 f0       	breq	.+4      	; 0x35a8 <_ZN5Print5writeEPKhj+0x3e>
    35a4:	21 96       	adiw	r28, 0x01	; 1
    35a6:	ee cf       	rjmp	.-36     	; 0x3584 <_ZN5Print5writeEPKhj+0x1a>
    35a8:	7e 01       	movw	r14, r28
    35aa:	c7 01       	movw	r24, r14
    35ac:	df 91       	pop	r29
    35ae:	cf 91       	pop	r28
    35b0:	1f 91       	pop	r17
    35b2:	0f 91       	pop	r16
    35b4:	ff 90       	pop	r15
    35b6:	ef 90       	pop	r14
    35b8:	df 90       	pop	r13
    35ba:	cf 90       	pop	r12
    35bc:	08 95       	ret

000035be <_ZN5Print5writeEPKc>:
    35be:	61 15       	cp	r22, r1
    35c0:	71 05       	cpc	r23, r1
    35c2:	79 f0       	breq	.+30     	; 0x35e2 <_ZN5Print5writeEPKc+0x24>
    35c4:	fb 01       	movw	r30, r22
    35c6:	01 90       	ld	r0, Z+
    35c8:	00 20       	and	r0, r0
    35ca:	e9 f7       	brne	.-6      	; 0x35c6 <_ZN5Print5writeEPKc+0x8>
    35cc:	31 97       	sbiw	r30, 0x01	; 1
    35ce:	af 01       	movw	r20, r30
    35d0:	46 1b       	sub	r20, r22
    35d2:	57 0b       	sbc	r21, r23
    35d4:	dc 01       	movw	r26, r24
    35d6:	ed 91       	ld	r30, X+
    35d8:	fc 91       	ld	r31, X
    35da:	02 80       	ldd	r0, Z+2	; 0x02
    35dc:	f3 81       	ldd	r31, Z+3	; 0x03
    35de:	e0 2d       	mov	r30, r0
    35e0:	19 94       	eijmp
    35e2:	80 e0       	ldi	r24, 0x00	; 0
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	08 95       	ret

000035e8 <_ZN5Print5printEPK19__FlashStringHelper>:
    35e8:	ef 92       	push	r14
    35ea:	ff 92       	push	r15
    35ec:	0f 93       	push	r16
    35ee:	1f 93       	push	r17
    35f0:	cf 93       	push	r28
    35f2:	df 93       	push	r29
    35f4:	8c 01       	movw	r16, r24
    35f6:	7b 01       	movw	r14, r22
    35f8:	c0 e0       	ldi	r28, 0x00	; 0
    35fa:	d0 e0       	ldi	r29, 0x00	; 0
    35fc:	f7 01       	movw	r30, r14
    35fe:	ec 0f       	add	r30, r28
    3600:	fd 1f       	adc	r31, r29
    3602:	64 91       	lpm	r22, Z
    3604:	66 23       	and	r22, r22
    3606:	61 f0       	breq	.+24     	; 0x3620 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3608:	d8 01       	movw	r26, r16
    360a:	ed 91       	ld	r30, X+
    360c:	fc 91       	ld	r31, X
    360e:	01 90       	ld	r0, Z+
    3610:	f0 81       	ld	r31, Z
    3612:	e0 2d       	mov	r30, r0
    3614:	c8 01       	movw	r24, r16
    3616:	19 95       	eicall
    3618:	89 2b       	or	r24, r25
    361a:	11 f0       	breq	.+4      	; 0x3620 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    361c:	21 96       	adiw	r28, 0x01	; 1
    361e:	ee cf       	rjmp	.-36     	; 0x35fc <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    3620:	ce 01       	movw	r24, r28
    3622:	df 91       	pop	r29
    3624:	cf 91       	pop	r28
    3626:	1f 91       	pop	r17
    3628:	0f 91       	pop	r16
    362a:	ff 90       	pop	r15
    362c:	ef 90       	pop	r14
    362e:	08 95       	ret

00003630 <_ZN5Print5printERK6String>:
    3630:	db 01       	movw	r26, r22
    3632:	14 96       	adiw	r26, 0x04	; 4
    3634:	4d 91       	ld	r20, X+
    3636:	5c 91       	ld	r21, X
    3638:	15 97       	sbiw	r26, 0x05	; 5
    363a:	6d 91       	ld	r22, X+
    363c:	7c 91       	ld	r23, X
    363e:	dc 01       	movw	r26, r24
    3640:	ed 91       	ld	r30, X+
    3642:	fc 91       	ld	r31, X
    3644:	02 80       	ldd	r0, Z+2	; 0x02
    3646:	f3 81       	ldd	r31, Z+3	; 0x03
    3648:	e0 2d       	mov	r30, r0
    364a:	19 94       	eijmp

0000364c <_ZN5Print5printEc>:
    364c:	dc 01       	movw	r26, r24
    364e:	ed 91       	ld	r30, X+
    3650:	fc 91       	ld	r31, X
    3652:	01 90       	ld	r0, Z+
    3654:	f0 81       	ld	r31, Z
    3656:	e0 2d       	mov	r30, r0
    3658:	19 94       	eijmp

0000365a <_ZN5Print7printlnEv>:
    365a:	6b e8       	ldi	r22, 0x8B	; 139
    365c:	72 e0       	ldi	r23, 0x02	; 2
    365e:	af cf       	rjmp	.-162    	; 0x35be <_ZN5Print5writeEPKc>

00003660 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    3660:	0f 93       	push	r16
    3662:	1f 93       	push	r17
    3664:	cf 93       	push	r28
    3666:	df 93       	push	r29
    3668:	ec 01       	movw	r28, r24
    366a:	be df       	rcall	.-132    	; 0x35e8 <_ZN5Print5printEPK19__FlashStringHelper>
    366c:	8c 01       	movw	r16, r24
    366e:	ce 01       	movw	r24, r28
    3670:	f4 df       	rcall	.-24     	; 0x365a <_ZN5Print7printlnEv>
    3672:	80 0f       	add	r24, r16
    3674:	91 1f       	adc	r25, r17
    3676:	df 91       	pop	r29
    3678:	cf 91       	pop	r28
    367a:	1f 91       	pop	r17
    367c:	0f 91       	pop	r16
    367e:	08 95       	ret

00003680 <_ZN5Print7printlnERK6String>:
    3680:	0f 93       	push	r16
    3682:	1f 93       	push	r17
    3684:	cf 93       	push	r28
    3686:	df 93       	push	r29
    3688:	ec 01       	movw	r28, r24
    368a:	d2 df       	rcall	.-92     	; 0x3630 <_ZN5Print5printERK6String>
    368c:	8c 01       	movw	r16, r24
    368e:	ce 01       	movw	r24, r28
    3690:	e4 df       	rcall	.-56     	; 0x365a <_ZN5Print7printlnEv>
    3692:	80 0f       	add	r24, r16
    3694:	91 1f       	adc	r25, r17
    3696:	df 91       	pop	r29
    3698:	cf 91       	pop	r28
    369a:	1f 91       	pop	r17
    369c:	0f 91       	pop	r16
    369e:	08 95       	ret

000036a0 <_ZN5Print11printNumberEmh>:
    36a0:	8f 92       	push	r8
    36a2:	9f 92       	push	r9
    36a4:	af 92       	push	r10
    36a6:	bf 92       	push	r11
    36a8:	ef 92       	push	r14
    36aa:	ff 92       	push	r15
    36ac:	0f 93       	push	r16
    36ae:	1f 93       	push	r17
    36b0:	cf 93       	push	r28
    36b2:	df 93       	push	r29
    36b4:	cd b7       	in	r28, 0x3d	; 61
    36b6:	de b7       	in	r29, 0x3e	; 62
    36b8:	a1 97       	sbiw	r28, 0x21	; 33
    36ba:	0f b6       	in	r0, 0x3f	; 63
    36bc:	f8 94       	cli
    36be:	de bf       	out	0x3e, r29	; 62
    36c0:	0f be       	out	0x3f, r0	; 63
    36c2:	cd bf       	out	0x3d, r28	; 61
    36c4:	7c 01       	movw	r14, r24
    36c6:	fa 01       	movw	r30, r20
    36c8:	cb 01       	movw	r24, r22
    36ca:	19 a2       	std	Y+33, r1	; 0x21
    36cc:	22 30       	cpi	r18, 0x02	; 2
    36ce:	08 f4       	brcc	.+2      	; 0x36d2 <_ZN5Print11printNumberEmh+0x32>
    36d0:	2a e0       	ldi	r18, 0x0A	; 10
    36d2:	8e 01       	movw	r16, r28
    36d4:	0f 5d       	subi	r16, 0xDF	; 223
    36d6:	1f 4f       	sbci	r17, 0xFF	; 255
    36d8:	82 2e       	mov	r8, r18
    36da:	91 2c       	mov	r9, r1
    36dc:	a1 2c       	mov	r10, r1
    36de:	b1 2c       	mov	r11, r1
    36e0:	bf 01       	movw	r22, r30
    36e2:	a5 01       	movw	r20, r10
    36e4:	94 01       	movw	r18, r8
    36e6:	3f d3       	rcall	.+1662   	; 0x3d66 <__udivmodsi4>
    36e8:	f9 01       	movw	r30, r18
    36ea:	ca 01       	movw	r24, r20
    36ec:	01 50       	subi	r16, 0x01	; 1
    36ee:	11 09       	sbc	r17, r1
    36f0:	6a 30       	cpi	r22, 0x0A	; 10
    36f2:	10 f4       	brcc	.+4      	; 0x36f8 <_ZN5Print11printNumberEmh+0x58>
    36f4:	60 5d       	subi	r22, 0xD0	; 208
    36f6:	01 c0       	rjmp	.+2      	; 0x36fa <_ZN5Print11printNumberEmh+0x5a>
    36f8:	69 5c       	subi	r22, 0xC9	; 201
    36fa:	d8 01       	movw	r26, r16
    36fc:	6c 93       	st	X, r22
    36fe:	23 2b       	or	r18, r19
    3700:	24 2b       	or	r18, r20
    3702:	25 2b       	or	r18, r21
    3704:	69 f7       	brne	.-38     	; 0x36e0 <_ZN5Print11printNumberEmh+0x40>
    3706:	b8 01       	movw	r22, r16
    3708:	c7 01       	movw	r24, r14
    370a:	59 df       	rcall	.-334    	; 0x35be <_ZN5Print5writeEPKc>
    370c:	a1 96       	adiw	r28, 0x21	; 33
    370e:	0f b6       	in	r0, 0x3f	; 63
    3710:	f8 94       	cli
    3712:	de bf       	out	0x3e, r29	; 62
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	cd bf       	out	0x3d, r28	; 61
    3718:	df 91       	pop	r29
    371a:	cf 91       	pop	r28
    371c:	1f 91       	pop	r17
    371e:	0f 91       	pop	r16
    3720:	ff 90       	pop	r15
    3722:	ef 90       	pop	r14
    3724:	bf 90       	pop	r11
    3726:	af 90       	pop	r10
    3728:	9f 90       	pop	r9
    372a:	8f 90       	pop	r8
    372c:	08 95       	ret

0000372e <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    372e:	cf 92       	push	r12
    3730:	df 92       	push	r13
    3732:	ef 92       	push	r14
    3734:	ff 92       	push	r15
    3736:	0f 93       	push	r16
    3738:	1f 93       	push	r17
    373a:	cf 93       	push	r28
    373c:	df 93       	push	r29
  if (base == 0) {
    373e:	21 15       	cp	r18, r1
    3740:	31 05       	cpc	r19, r1
    3742:	81 f4       	brne	.+32     	; 0x3764 <_ZN5Print5printEli+0x36>
    return write(n);
    3744:	dc 01       	movw	r26, r24
    3746:	ed 91       	ld	r30, X+
    3748:	fc 91       	ld	r31, X
    374a:	01 90       	ld	r0, Z+
    374c:	f0 81       	ld	r31, Z
    374e:	e0 2d       	mov	r30, r0
    3750:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3752:	df 91       	pop	r29
    3754:	cf 91       	pop	r28
    3756:	1f 91       	pop	r17
    3758:	0f 91       	pop	r16
    375a:	ff 90       	pop	r15
    375c:	ef 90       	pop	r14
    375e:	df 90       	pop	r13
    3760:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    3762:	19 94       	eijmp
  } else if (base == 10) {
    3764:	2a 30       	cpi	r18, 0x0A	; 10
    3766:	31 05       	cpc	r19, r1
    3768:	f1 f4       	brne	.+60     	; 0x37a6 <_ZN5Print5printEli+0x78>
    if (n < 0) {
    376a:	77 ff       	sbrs	r23, 7
    376c:	1b c0       	rjmp	.+54     	; 0x37a4 <_ZN5Print5printEli+0x76>
    376e:	6a 01       	movw	r12, r20
    3770:	7b 01       	movw	r14, r22
    3772:	ec 01       	movw	r28, r24
      int t = print('-');
    3774:	6d e2       	ldi	r22, 0x2D	; 45
    3776:	6a df       	rcall	.-300    	; 0x364c <_ZN5Print5printEc>
    3778:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    377a:	44 27       	eor	r20, r20
    377c:	55 27       	eor	r21, r21
    377e:	ba 01       	movw	r22, r20
    3780:	4c 19       	sub	r20, r12
    3782:	5d 09       	sbc	r21, r13
    3784:	6e 09       	sbc	r22, r14
    3786:	7f 09       	sbc	r23, r15
    3788:	2a e0       	ldi	r18, 0x0A	; 10
    378a:	ce 01       	movw	r24, r28
    378c:	89 df       	rcall	.-238    	; 0x36a0 <_ZN5Print11printNumberEmh>
    378e:	80 0f       	add	r24, r16
    3790:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3792:	df 91       	pop	r29
    3794:	cf 91       	pop	r28
    3796:	1f 91       	pop	r17
    3798:	0f 91       	pop	r16
    379a:	ff 90       	pop	r15
    379c:	ef 90       	pop	r14
    379e:	df 90       	pop	r13
    37a0:	cf 90       	pop	r12
    37a2:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    37a4:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    37a6:	df 91       	pop	r29
    37a8:	cf 91       	pop	r28
    37aa:	1f 91       	pop	r17
    37ac:	0f 91       	pop	r16
    37ae:	ff 90       	pop	r15
    37b0:	ef 90       	pop	r14
    37b2:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    37b4:	cf 90       	pop	r12
    37b6:	74 cf       	rjmp	.-280    	; 0x36a0 <_ZN5Print11printNumberEmh>

000037b8 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    37b8:	9a 01       	movw	r18, r20
  return print((long) n, base);
    37ba:	ab 01       	movw	r20, r22
    37bc:	77 0f       	add	r23, r23
    37be:	66 0b       	sbc	r22, r22
    37c0:	77 0b       	sbc	r23, r23
    37c2:	b5 cf       	rjmp	.-150    	; 0x372e <_ZN5Print5printEli>

000037c4 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    37c4:	0f 93       	push	r16
    37c6:	1f 93       	push	r17
    37c8:	cf 93       	push	r28
    37ca:	df 93       	push	r29
    37cc:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    37ce:	f4 df       	rcall	.-24     	; 0x37b8 <_ZN5Print5printEii>
    37d0:	8c 01       	movw	r16, r24
  n += println();
    37d2:	ce 01       	movw	r24, r28
    37d4:	42 df       	rcall	.-380    	; 0x365a <_ZN5Print7printlnEv>
  return n;
}
    37d6:	80 0f       	add	r24, r16
    37d8:	91 1f       	adc	r25, r17
    37da:	df 91       	pop	r29
    37dc:	cf 91       	pop	r28
    37de:	1f 91       	pop	r17
    37e0:	0f 91       	pop	r16
    37e2:	08 95       	ret

000037e4 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    37e4:	1f 92       	push	r1
    37e6:	0f 92       	push	r0
    37e8:	0f b6       	in	r0, 0x3f	; 63
    37ea:	0f 92       	push	r0
    37ec:	11 24       	eor	r1, r1
    37ee:	2f 93       	push	r18
    37f0:	3f 93       	push	r19
    37f2:	8f 93       	push	r24
    37f4:	9f 93       	push	r25
    37f6:	af 93       	push	r26
    37f8:	bf 93       	push	r27
    37fa:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <timer0_millis>
    37fe:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <timer0_millis+0x1>
    3802:	a0 91 4d 04 	lds	r26, 0x044D	; 0x80044d <timer0_millis+0x2>
    3806:	b0 91 4e 04 	lds	r27, 0x044E	; 0x80044e <timer0_millis+0x3>
    380a:	30 91 4a 04 	lds	r19, 0x044A	; 0x80044a <timer0_fract>
    380e:	23 e0       	ldi	r18, 0x03	; 3
    3810:	23 0f       	add	r18, r19
    3812:	2d 37       	cpi	r18, 0x7D	; 125
    3814:	20 f4       	brcc	.+8      	; 0x381e <__vector_23+0x3a>
    3816:	01 96       	adiw	r24, 0x01	; 1
    3818:	a1 1d       	adc	r26, r1
    381a:	b1 1d       	adc	r27, r1
    381c:	05 c0       	rjmp	.+10     	; 0x3828 <__vector_23+0x44>
    381e:	26 e8       	ldi	r18, 0x86	; 134
    3820:	23 0f       	add	r18, r19
    3822:	02 96       	adiw	r24, 0x02	; 2
    3824:	a1 1d       	adc	r26, r1
    3826:	b1 1d       	adc	r27, r1
    3828:	20 93 4a 04 	sts	0x044A, r18	; 0x80044a <timer0_fract>
    382c:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <timer0_millis>
    3830:	90 93 4c 04 	sts	0x044C, r25	; 0x80044c <timer0_millis+0x1>
    3834:	a0 93 4d 04 	sts	0x044D, r26	; 0x80044d <timer0_millis+0x2>
    3838:	b0 93 4e 04 	sts	0x044E, r27	; 0x80044e <timer0_millis+0x3>
    383c:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <timer0_overflow_count>
    3840:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <timer0_overflow_count+0x1>
    3844:	a0 91 51 04 	lds	r26, 0x0451	; 0x800451 <timer0_overflow_count+0x2>
    3848:	b0 91 52 04 	lds	r27, 0x0452	; 0x800452 <timer0_overflow_count+0x3>
    384c:	01 96       	adiw	r24, 0x01	; 1
    384e:	a1 1d       	adc	r26, r1
    3850:	b1 1d       	adc	r27, r1
    3852:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <timer0_overflow_count>
    3856:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <timer0_overflow_count+0x1>
    385a:	a0 93 51 04 	sts	0x0451, r26	; 0x800451 <timer0_overflow_count+0x2>
    385e:	b0 93 52 04 	sts	0x0452, r27	; 0x800452 <timer0_overflow_count+0x3>
    3862:	bf 91       	pop	r27
    3864:	af 91       	pop	r26
    3866:	9f 91       	pop	r25
    3868:	8f 91       	pop	r24
    386a:	3f 91       	pop	r19
    386c:	2f 91       	pop	r18
    386e:	0f 90       	pop	r0
    3870:	0f be       	out	0x3f, r0	; 63
    3872:	0f 90       	pop	r0
    3874:	1f 90       	pop	r1
    3876:	18 95       	reti

00003878 <millis>:
    3878:	2f b7       	in	r18, 0x3f	; 63
    387a:	f8 94       	cli
    387c:	60 91 4b 04 	lds	r22, 0x044B	; 0x80044b <timer0_millis>
    3880:	70 91 4c 04 	lds	r23, 0x044C	; 0x80044c <timer0_millis+0x1>
    3884:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <timer0_millis+0x2>
    3888:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <timer0_millis+0x3>
    388c:	2f bf       	out	0x3f, r18	; 63
    388e:	08 95       	ret

00003890 <micros>:
    3890:	3f b7       	in	r19, 0x3f	; 63
    3892:	f8 94       	cli
    3894:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <timer0_overflow_count>
    3898:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <timer0_overflow_count+0x1>
    389c:	a0 91 51 04 	lds	r26, 0x0451	; 0x800451 <timer0_overflow_count+0x2>
    38a0:	b0 91 52 04 	lds	r27, 0x0452	; 0x800452 <timer0_overflow_count+0x3>
    38a4:	26 b5       	in	r18, 0x26	; 38
    38a6:	a8 9b       	sbis	0x15, 0	; 21
    38a8:	05 c0       	rjmp	.+10     	; 0x38b4 <micros+0x24>
    38aa:	2f 3f       	cpi	r18, 0xFF	; 255
    38ac:	19 f0       	breq	.+6      	; 0x38b4 <micros+0x24>
    38ae:	01 96       	adiw	r24, 0x01	; 1
    38b0:	a1 1d       	adc	r26, r1
    38b2:	b1 1d       	adc	r27, r1
    38b4:	3f bf       	out	0x3f, r19	; 63
    38b6:	ba 2f       	mov	r27, r26
    38b8:	a9 2f       	mov	r26, r25
    38ba:	98 2f       	mov	r25, r24
    38bc:	88 27       	eor	r24, r24
    38be:	82 0f       	add	r24, r18
    38c0:	91 1d       	adc	r25, r1
    38c2:	a1 1d       	adc	r26, r1
    38c4:	b1 1d       	adc	r27, r1
    38c6:	bc 01       	movw	r22, r24
    38c8:	cd 01       	movw	r24, r26
    38ca:	42 e0       	ldi	r20, 0x02	; 2
    38cc:	66 0f       	add	r22, r22
    38ce:	77 1f       	adc	r23, r23
    38d0:	88 1f       	adc	r24, r24
    38d2:	99 1f       	adc	r25, r25
    38d4:	4a 95       	dec	r20
    38d6:	d1 f7       	brne	.-12     	; 0x38cc <micros+0x3c>
    38d8:	08 95       	ret

000038da <delay>:
    38da:	8f 92       	push	r8
    38dc:	9f 92       	push	r9
    38de:	af 92       	push	r10
    38e0:	bf 92       	push	r11
    38e2:	cf 92       	push	r12
    38e4:	df 92       	push	r13
    38e6:	ef 92       	push	r14
    38e8:	ff 92       	push	r15
    38ea:	6b 01       	movw	r12, r22
    38ec:	7c 01       	movw	r14, r24
    38ee:	d0 df       	rcall	.-96     	; 0x3890 <micros>
    38f0:	4b 01       	movw	r8, r22
    38f2:	5c 01       	movw	r10, r24
    38f4:	c1 14       	cp	r12, r1
    38f6:	d1 04       	cpc	r13, r1
    38f8:	e1 04       	cpc	r14, r1
    38fa:	f1 04       	cpc	r15, r1
    38fc:	f1 f0       	breq	.+60     	; 0x393a <delay+0x60>
    38fe:	32 d2       	rcall	.+1124   	; 0x3d64 <yield>
    3900:	c7 df       	rcall	.-114    	; 0x3890 <micros>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	88 19       	sub	r24, r8
    3908:	99 09       	sbc	r25, r9
    390a:	aa 09       	sbc	r26, r10
    390c:	bb 09       	sbc	r27, r11
    390e:	88 3e       	cpi	r24, 0xE8	; 232
    3910:	93 40       	sbci	r25, 0x03	; 3
    3912:	a1 05       	cpc	r26, r1
    3914:	b1 05       	cpc	r27, r1
    3916:	70 f3       	brcs	.-36     	; 0x38f4 <delay+0x1a>
    3918:	21 e0       	ldi	r18, 0x01	; 1
    391a:	c2 1a       	sub	r12, r18
    391c:	d1 08       	sbc	r13, r1
    391e:	e1 08       	sbc	r14, r1
    3920:	f1 08       	sbc	r15, r1
    3922:	88 ee       	ldi	r24, 0xE8	; 232
    3924:	88 0e       	add	r8, r24
    3926:	83 e0       	ldi	r24, 0x03	; 3
    3928:	98 1e       	adc	r9, r24
    392a:	a1 1c       	adc	r10, r1
    392c:	b1 1c       	adc	r11, r1
    392e:	c1 14       	cp	r12, r1
    3930:	d1 04       	cpc	r13, r1
    3932:	e1 04       	cpc	r14, r1
    3934:	f1 04       	cpc	r15, r1
    3936:	21 f7       	brne	.-56     	; 0x3900 <delay+0x26>
    3938:	dd cf       	rjmp	.-70     	; 0x38f4 <delay+0x1a>
    393a:	ff 90       	pop	r15
    393c:	ef 90       	pop	r14
    393e:	df 90       	pop	r13
    3940:	cf 90       	pop	r12
    3942:	bf 90       	pop	r11
    3944:	af 90       	pop	r10
    3946:	9f 90       	pop	r9
    3948:	8f 90       	pop	r8
    394a:	08 95       	ret

0000394c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    394c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    394e:	84 b5       	in	r24, 0x24	; 36
    3950:	82 60       	ori	r24, 0x02	; 2
    3952:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3954:	84 b5       	in	r24, 0x24	; 36
    3956:	81 60       	ori	r24, 0x01	; 1
    3958:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    395a:	85 b5       	in	r24, 0x25	; 37
    395c:	82 60       	ori	r24, 0x02	; 2
    395e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3960:	85 b5       	in	r24, 0x25	; 37
    3962:	81 60       	ori	r24, 0x01	; 1
    3964:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3966:	ee e6       	ldi	r30, 0x6E	; 110
    3968:	f0 e0       	ldi	r31, 0x00	; 0
    396a:	80 81       	ld	r24, Z
    396c:	81 60       	ori	r24, 0x01	; 1
    396e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3970:	e1 e8       	ldi	r30, 0x81	; 129
    3972:	f0 e0       	ldi	r31, 0x00	; 0
    3974:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3976:	80 81       	ld	r24, Z
    3978:	82 60       	ori	r24, 0x02	; 2
    397a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    397c:	80 81       	ld	r24, Z
    397e:	81 60       	ori	r24, 0x01	; 1
    3980:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3982:	e0 e8       	ldi	r30, 0x80	; 128
    3984:	f0 e0       	ldi	r31, 0x00	; 0
    3986:	80 81       	ld	r24, Z
    3988:	81 60       	ori	r24, 0x01	; 1
    398a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    398c:	e1 eb       	ldi	r30, 0xB1	; 177
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	80 81       	ld	r24, Z
    3992:	84 60       	ori	r24, 0x04	; 4
    3994:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3996:	e0 eb       	ldi	r30, 0xB0	; 176
    3998:	f0 e0       	ldi	r31, 0x00	; 0
    399a:	80 81       	ld	r24, Z
    399c:	81 60       	ori	r24, 0x01	; 1
    399e:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    39a0:	e1 e9       	ldi	r30, 0x91	; 145
    39a2:	f0 e0       	ldi	r31, 0x00	; 0
    39a4:	80 81       	ld	r24, Z
    39a6:	82 60       	ori	r24, 0x02	; 2
    39a8:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    39aa:	80 81       	ld	r24, Z
    39ac:	81 60       	ori	r24, 0x01	; 1
    39ae:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    39b0:	e0 e9       	ldi	r30, 0x90	; 144
    39b2:	f0 e0       	ldi	r31, 0x00	; 0
    39b4:	80 81       	ld	r24, Z
    39b6:	81 60       	ori	r24, 0x01	; 1
    39b8:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    39ba:	e1 ea       	ldi	r30, 0xA1	; 161
    39bc:	f0 e0       	ldi	r31, 0x00	; 0
    39be:	80 81       	ld	r24, Z
    39c0:	82 60       	ori	r24, 0x02	; 2
    39c2:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    39c4:	80 81       	ld	r24, Z
    39c6:	81 60       	ori	r24, 0x01	; 1
    39c8:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    39ca:	e0 ea       	ldi	r30, 0xA0	; 160
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	80 81       	ld	r24, Z
    39d0:	81 60       	ori	r24, 0x01	; 1
    39d2:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    39d4:	e1 e2       	ldi	r30, 0x21	; 33
    39d6:	f1 e0       	ldi	r31, 0x01	; 1
    39d8:	80 81       	ld	r24, Z
    39da:	82 60       	ori	r24, 0x02	; 2
    39dc:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    39de:	80 81       	ld	r24, Z
    39e0:	81 60       	ori	r24, 0x01	; 1
    39e2:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    39e4:	e0 e2       	ldi	r30, 0x20	; 32
    39e6:	f1 e0       	ldi	r31, 0x01	; 1
    39e8:	80 81       	ld	r24, Z
    39ea:	81 60       	ori	r24, 0x01	; 1
    39ec:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    39ee:	ea e7       	ldi	r30, 0x7A	; 122
    39f0:	f0 e0       	ldi	r31, 0x00	; 0
    39f2:	80 81       	ld	r24, Z
    39f4:	84 60       	ori	r24, 0x04	; 4
    39f6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    39f8:	80 81       	ld	r24, Z
    39fa:	82 60       	ori	r24, 0x02	; 2
    39fc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    39fe:	80 81       	ld	r24, Z
    3a00:	81 60       	ori	r24, 0x01	; 1
    3a02:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3a04:	80 81       	ld	r24, Z
    3a06:	80 68       	ori	r24, 0x80	; 128
    3a08:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3a0a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    3a0e:	08 95       	ret

00003a10 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	fc 01       	movw	r30, r24
    3a14:	31 97       	sbiw	r30, 0x01	; 1
    3a16:	e2 31       	cpi	r30, 0x12	; 18
    3a18:	f1 05       	cpc	r31, r1
    3a1a:	08 f0       	brcs	.+2      	; 0x3a1e <turnOffPWM+0xe>
    3a1c:	4d c0       	rjmp	.+154    	; 0x3ab8 <turnOffPWM+0xa8>
    3a1e:	88 27       	eor	r24, r24
    3a20:	ee 58       	subi	r30, 0x8E	; 142
    3a22:	ff 4f       	sbci	r31, 0xFF	; 255
    3a24:	8f 4f       	sbci	r24, 0xFF	; 255
    3a26:	c1 c1       	rjmp	.+898    	; 0x3daa <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3a28:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    3a2c:	8f 77       	andi	r24, 0x7F	; 127
    3a2e:	03 c0       	rjmp	.+6      	; 0x3a36 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3a30:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    3a34:	8f 7d       	andi	r24, 0xDF	; 223
    3a36:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    3a3a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    3a3c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    3a40:	87 7f       	andi	r24, 0xF7	; 247
    3a42:	f9 cf       	rjmp	.-14     	; 0x3a36 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3a44:	84 b5       	in	r24, 0x24	; 36
    3a46:	8f 77       	andi	r24, 0x7F	; 127
    3a48:	02 c0       	rjmp	.+4      	; 0x3a4e <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3a4a:	84 b5       	in	r24, 0x24	; 36
    3a4c:	8f 7d       	andi	r24, 0xDF	; 223
    3a4e:	84 bd       	out	0x24, r24	; 36
    3a50:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3a52:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    3a56:	8f 77       	andi	r24, 0x7F	; 127
    3a58:	03 c0       	rjmp	.+6      	; 0x3a60 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3a5a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    3a5e:	8f 7d       	andi	r24, 0xDF	; 223
    3a60:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    3a64:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    3a66:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    3a6a:	8f 77       	andi	r24, 0x7F	; 127
    3a6c:	07 c0       	rjmp	.+14     	; 0x3a7c <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    3a6e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    3a72:	8f 7d       	andi	r24, 0xDF	; 223
    3a74:	03 c0       	rjmp	.+6      	; 0x3a7c <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    3a76:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    3a7a:	87 7f       	andi	r24, 0xF7	; 247
    3a7c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    3a80:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    3a82:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    3a86:	8f 77       	andi	r24, 0x7F	; 127
    3a88:	07 c0       	rjmp	.+14     	; 0x3a98 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    3a8a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    3a8e:	8f 7d       	andi	r24, 0xDF	; 223
    3a90:	03 c0       	rjmp	.+6      	; 0x3a98 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    3a92:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    3a96:	87 7f       	andi	r24, 0xF7	; 247
    3a98:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    3a9c:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    3a9e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    3aa2:	8f 77       	andi	r24, 0x7F	; 127
    3aa4:	07 c0       	rjmp	.+14     	; 0x3ab4 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    3aa6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    3aaa:	8f 7d       	andi	r24, 0xDF	; 223
    3aac:	03 c0       	rjmp	.+6      	; 0x3ab4 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    3aae:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    3ab2:	87 7f       	andi	r24, 0xF7	; 247
    3ab4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    3ab8:	08 95       	ret

00003aba <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3aba:	cf 93       	push	r28
    3abc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	fc 01       	movw	r30, r24
    3ac2:	e1 5d       	subi	r30, 0xD1	; 209
    3ac4:	f4 4f       	sbci	r31, 0xF4	; 244
    3ac6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3ac8:	fc 01       	movw	r30, r24
    3aca:	eb 58       	subi	r30, 0x8B	; 139
    3acc:	f4 4f       	sbci	r31, 0xF4	; 244
    3ace:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3ad0:	88 23       	and	r24, r24
    3ad2:	61 f1       	breq	.+88     	; 0x3b2c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	88 0f       	add	r24, r24
    3ad8:	99 1f       	adc	r25, r25
    3ada:	fc 01       	movw	r30, r24
    3adc:	eb 52       	subi	r30, 0x2B	; 43
    3ade:	f4 4f       	sbci	r31, 0xF4	; 244
    3ae0:	c5 91       	lpm	r28, Z+
    3ae2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	e5 54       	subi	r30, 0x45	; 69
    3ae8:	f4 4f       	sbci	r31, 0xF4	; 244
    3aea:	a5 91       	lpm	r26, Z+
    3aec:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3aee:	61 11       	cpse	r22, r1
    3af0:	09 c0       	rjmp	.+18     	; 0x3b04 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3af2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3af4:	f8 94       	cli
		*reg &= ~bit;
    3af6:	88 81       	ld	r24, Y
    3af8:	20 95       	com	r18
    3afa:	82 23       	and	r24, r18
    3afc:	88 83       	st	Y, r24
		*out &= ~bit;
    3afe:	ec 91       	ld	r30, X
    3b00:	2e 23       	and	r18, r30
    3b02:	0b c0       	rjmp	.+22     	; 0x3b1a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3b04:	62 30       	cpi	r22, 0x02	; 2
    3b06:	61 f4       	brne	.+24     	; 0x3b20 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3b08:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3b0a:	f8 94       	cli
		*reg &= ~bit;
    3b0c:	88 81       	ld	r24, Y
    3b0e:	32 2f       	mov	r19, r18
    3b10:	30 95       	com	r19
    3b12:	83 23       	and	r24, r19
    3b14:	88 83       	st	Y, r24
		*out |= bit;
    3b16:	ec 91       	ld	r30, X
    3b18:	2e 2b       	or	r18, r30
    3b1a:	2c 93       	st	X, r18
		SREG = oldSREG;
    3b1c:	9f bf       	out	0x3f, r25	; 63
    3b1e:	06 c0       	rjmp	.+12     	; 0x3b2c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3b20:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3b22:	f8 94       	cli
		*reg |= bit;
    3b24:	e8 81       	ld	r30, Y
    3b26:	2e 2b       	or	r18, r30
    3b28:	28 83       	st	Y, r18
		SREG = oldSREG;
    3b2a:	8f bf       	out	0x3f, r24	; 63
	}
}
    3b2c:	df 91       	pop	r29
    3b2e:	cf 91       	pop	r28
    3b30:	08 95       	ret

00003b32 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3b32:	1f 93       	push	r17
    3b34:	cf 93       	push	r28
    3b36:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3b38:	28 2f       	mov	r18, r24
    3b3a:	30 e0       	ldi	r19, 0x00	; 0
    3b3c:	f9 01       	movw	r30, r18
    3b3e:	e7 51       	subi	r30, 0x17	; 23
    3b40:	f5 4f       	sbci	r31, 0xF5	; 245
    3b42:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3b44:	f9 01       	movw	r30, r18
    3b46:	e1 5d       	subi	r30, 0xD1	; 209
    3b48:	f4 4f       	sbci	r31, 0xF4	; 244
    3b4a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3b4c:	f9 01       	movw	r30, r18
    3b4e:	eb 58       	subi	r30, 0x8B	; 139
    3b50:	f4 4f       	sbci	r31, 0xF4	; 244
    3b52:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3b54:	cc 23       	and	r28, r28
    3b56:	b9 f0       	breq	.+46     	; 0x3b86 <digitalWrite+0x54>
    3b58:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3b5a:	81 11       	cpse	r24, r1
    3b5c:	59 df       	rcall	.-334    	; 0x3a10 <turnOffPWM>

	out = portOutputRegister(port);
    3b5e:	ec 2f       	mov	r30, r28
    3b60:	f0 e0       	ldi	r31, 0x00	; 0
    3b62:	ee 0f       	add	r30, r30
    3b64:	ff 1f       	adc	r31, r31
    3b66:	e5 54       	subi	r30, 0x45	; 69
    3b68:	f4 4f       	sbci	r31, 0xF4	; 244
    3b6a:	a5 91       	lpm	r26, Z+
    3b6c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3b6e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3b70:	f8 94       	cli

	if (val == LOW) {
    3b72:	11 11       	cpse	r17, r1
    3b74:	04 c0       	rjmp	.+8      	; 0x3b7e <digitalWrite+0x4c>
		*out &= ~bit;
    3b76:	8c 91       	ld	r24, X
    3b78:	d0 95       	com	r29
    3b7a:	d8 23       	and	r29, r24
    3b7c:	02 c0       	rjmp	.+4      	; 0x3b82 <digitalWrite+0x50>
	} else {
		*out |= bit;
    3b7e:	ec 91       	ld	r30, X
    3b80:	de 2b       	or	r29, r30
    3b82:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3b84:	9f bf       	out	0x3f, r25	; 63
}
    3b86:	df 91       	pop	r29
    3b88:	cf 91       	pop	r28
    3b8a:	1f 91       	pop	r17
    3b8c:	08 95       	ret

00003b8e <_ZN6StringD1Ev>:
unsigned char String::concat(unsigned char num)
{
	char buf[1 + 3 * sizeof(unsigned char)];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}
    3b8e:	fc 01       	movw	r30, r24
    3b90:	80 81       	ld	r24, Z
    3b92:	91 81       	ldd	r25, Z+1	; 0x01
    3b94:	00 97       	sbiw	r24, 0x00	; 0
    3b96:	09 f0       	breq	.+2      	; 0x3b9a <_ZN6StringD1Ev+0xc>
    3b98:	a8 c1       	rjmp	.+848    	; 0x3eea <free>
    3b9a:	08 95       	ret

00003b9c <_ZN6String10invalidateEv>:
    3b9c:	cf 93       	push	r28
    3b9e:	df 93       	push	r29
    3ba0:	ec 01       	movw	r28, r24
    3ba2:	88 81       	ld	r24, Y
    3ba4:	99 81       	ldd	r25, Y+1	; 0x01
    3ba6:	00 97       	sbiw	r24, 0x00	; 0
    3ba8:	09 f0       	breq	.+2      	; 0x3bac <_ZN6String10invalidateEv+0x10>
    3baa:	9f d1       	rcall	.+830    	; 0x3eea <free>
    3bac:	19 82       	std	Y+1, r1	; 0x01
    3bae:	18 82       	st	Y, r1
    3bb0:	1d 82       	std	Y+5, r1	; 0x05
    3bb2:	1c 82       	std	Y+4, r1	; 0x04
    3bb4:	1b 82       	std	Y+3, r1	; 0x03
    3bb6:	1a 82       	std	Y+2, r1	; 0x02
    3bb8:	df 91       	pop	r29
    3bba:	cf 91       	pop	r28
    3bbc:	08 95       	ret

00003bbe <_ZN6String12changeBufferEj>:
    3bbe:	0f 93       	push	r16
    3bc0:	1f 93       	push	r17
    3bc2:	cf 93       	push	r28
    3bc4:	df 93       	push	r29
    3bc6:	ec 01       	movw	r28, r24
    3bc8:	8b 01       	movw	r16, r22
    3bca:	6f 5f       	subi	r22, 0xFF	; 255
    3bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    3bce:	88 81       	ld	r24, Y
    3bd0:	99 81       	ldd	r25, Y+1	; 0x01
    3bd2:	14 d2       	rcall	.+1064   	; 0x3ffc <realloc>
    3bd4:	00 97       	sbiw	r24, 0x00	; 0
    3bd6:	31 f0       	breq	.+12     	; 0x3be4 <_ZN6String12changeBufferEj+0x26>
    3bd8:	99 83       	std	Y+1, r25	; 0x01
    3bda:	88 83       	st	Y, r24
    3bdc:	1b 83       	std	Y+3, r17	; 0x03
    3bde:	0a 83       	std	Y+2, r16	; 0x02
    3be0:	81 e0       	ldi	r24, 0x01	; 1
    3be2:	01 c0       	rjmp	.+2      	; 0x3be6 <_ZN6String12changeBufferEj+0x28>
    3be4:	80 e0       	ldi	r24, 0x00	; 0
    3be6:	df 91       	pop	r29
    3be8:	cf 91       	pop	r28
    3bea:	1f 91       	pop	r17
    3bec:	0f 91       	pop	r16
    3bee:	08 95       	ret

00003bf0 <_ZN6String7reserveEj>:
    3bf0:	cf 93       	push	r28
    3bf2:	df 93       	push	r29
    3bf4:	ec 01       	movw	r28, r24
    3bf6:	88 81       	ld	r24, Y
    3bf8:	99 81       	ldd	r25, Y+1	; 0x01
    3bfa:	89 2b       	or	r24, r25
    3bfc:	29 f0       	breq	.+10     	; 0x3c08 <_ZN6String7reserveEj+0x18>
    3bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3c00:	9b 81       	ldd	r25, Y+3	; 0x03
    3c02:	86 17       	cp	r24, r22
    3c04:	97 07       	cpc	r25, r23
    3c06:	58 f4       	brcc	.+22     	; 0x3c1e <_ZN6String7reserveEj+0x2e>
    3c08:	ce 01       	movw	r24, r28
    3c0a:	d9 df       	rcall	.-78     	; 0x3bbe <_ZN6String12changeBufferEj>
    3c0c:	88 23       	and	r24, r24
    3c0e:	41 f0       	breq	.+16     	; 0x3c20 <_ZN6String7reserveEj+0x30>
    3c10:	8c 81       	ldd	r24, Y+4	; 0x04
    3c12:	9d 81       	ldd	r25, Y+5	; 0x05
    3c14:	89 2b       	or	r24, r25
    3c16:	19 f4       	brne	.+6      	; 0x3c1e <_ZN6String7reserveEj+0x2e>
    3c18:	e8 81       	ld	r30, Y
    3c1a:	f9 81       	ldd	r31, Y+1	; 0x01
    3c1c:	10 82       	st	Z, r1
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	df 91       	pop	r29
    3c22:	cf 91       	pop	r28
    3c24:	08 95       	ret

00003c26 <_ZN6String4copyEPKcj>:
    3c26:	ef 92       	push	r14
    3c28:	ff 92       	push	r15
    3c2a:	0f 93       	push	r16
    3c2c:	1f 93       	push	r17
    3c2e:	cf 93       	push	r28
    3c30:	df 93       	push	r29
    3c32:	ec 01       	movw	r28, r24
    3c34:	7b 01       	movw	r14, r22
    3c36:	8a 01       	movw	r16, r20
    3c38:	ba 01       	movw	r22, r20
    3c3a:	da df       	rcall	.-76     	; 0x3bf0 <_ZN6String7reserveEj>
    3c3c:	81 11       	cpse	r24, r1
    3c3e:	03 c0       	rjmp	.+6      	; 0x3c46 <_ZN6String4copyEPKcj+0x20>
    3c40:	ce 01       	movw	r24, r28
    3c42:	ac df       	rcall	.-168    	; 0x3b9c <_ZN6String10invalidateEv>
    3c44:	06 c0       	rjmp	.+12     	; 0x3c52 <_ZN6String4copyEPKcj+0x2c>
    3c46:	1d 83       	std	Y+5, r17	; 0x05
    3c48:	0c 83       	std	Y+4, r16	; 0x04
    3c4a:	b7 01       	movw	r22, r14
    3c4c:	88 81       	ld	r24, Y
    3c4e:	99 81       	ldd	r25, Y+1	; 0x01
    3c50:	c9 d2       	rcall	.+1426   	; 0x41e4 <strcpy>
    3c52:	ce 01       	movw	r24, r28
    3c54:	df 91       	pop	r29
    3c56:	cf 91       	pop	r28
    3c58:	1f 91       	pop	r17
    3c5a:	0f 91       	pop	r16
    3c5c:	ff 90       	pop	r15
    3c5e:	ef 90       	pop	r14
    3c60:	08 95       	ret

00003c62 <_ZN6StringC1EPKc>:
    3c62:	fc 01       	movw	r30, r24
    3c64:	11 82       	std	Z+1, r1	; 0x01
    3c66:	10 82       	st	Z, r1
    3c68:	13 82       	std	Z+3, r1	; 0x03
    3c6a:	12 82       	std	Z+2, r1	; 0x02
    3c6c:	15 82       	std	Z+5, r1	; 0x05
    3c6e:	14 82       	std	Z+4, r1	; 0x04
    3c70:	61 15       	cp	r22, r1
    3c72:	71 05       	cpc	r23, r1
    3c74:	49 f0       	breq	.+18     	; 0x3c88 <_ZN6StringC1EPKc+0x26>
    3c76:	fb 01       	movw	r30, r22
    3c78:	01 90       	ld	r0, Z+
    3c7a:	00 20       	and	r0, r0
    3c7c:	e9 f7       	brne	.-6      	; 0x3c78 <_ZN6StringC1EPKc+0x16>
    3c7e:	31 97       	sbiw	r30, 0x01	; 1
    3c80:	af 01       	movw	r20, r30
    3c82:	46 1b       	sub	r20, r22
    3c84:	57 0b       	sbc	r21, r23
    3c86:	cf cf       	rjmp	.-98     	; 0x3c26 <_ZN6String4copyEPKcj>
    3c88:	08 95       	ret

00003c8a <_ZN6String6concatEPKcj>:
    3c8a:	ef 92       	push	r14
    3c8c:	ff 92       	push	r15
    3c8e:	0f 93       	push	r16
    3c90:	1f 93       	push	r17
    3c92:	cf 93       	push	r28
    3c94:	df 93       	push	r29
    3c96:	61 15       	cp	r22, r1
    3c98:	71 05       	cpc	r23, r1
    3c9a:	11 f4       	brne	.+4      	; 0x3ca0 <_ZN6String6concatEPKcj+0x16>
    3c9c:	80 e0       	ldi	r24, 0x00	; 0
    3c9e:	1a c0       	rjmp	.+52     	; 0x3cd4 <_ZN6String6concatEPKcj+0x4a>
    3ca0:	41 15       	cp	r20, r1
    3ca2:	51 05       	cpc	r21, r1
    3ca4:	b1 f0       	breq	.+44     	; 0x3cd2 <_ZN6String6concatEPKcj+0x48>
    3ca6:	7b 01       	movw	r14, r22
    3ca8:	ec 01       	movw	r28, r24
    3caa:	8c 81       	ldd	r24, Y+4	; 0x04
    3cac:	9d 81       	ldd	r25, Y+5	; 0x05
    3cae:	8a 01       	movw	r16, r20
    3cb0:	08 0f       	add	r16, r24
    3cb2:	19 1f       	adc	r17, r25
    3cb4:	b8 01       	movw	r22, r16
    3cb6:	ce 01       	movw	r24, r28
    3cb8:	9b df       	rcall	.-202    	; 0x3bf0 <_ZN6String7reserveEj>
    3cba:	88 23       	and	r24, r24
    3cbc:	79 f3       	breq	.-34     	; 0x3c9c <_ZN6String6concatEPKcj+0x12>
    3cbe:	28 81       	ld	r18, Y
    3cc0:	39 81       	ldd	r19, Y+1	; 0x01
    3cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    3cc4:	9d 81       	ldd	r25, Y+5	; 0x05
    3cc6:	b7 01       	movw	r22, r14
    3cc8:	82 0f       	add	r24, r18
    3cca:	93 1f       	adc	r25, r19
    3ccc:	8b d2       	rcall	.+1302   	; 0x41e4 <strcpy>
    3cce:	1d 83       	std	Y+5, r17	; 0x05
    3cd0:	0c 83       	std	Y+4, r16	; 0x04
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	df 91       	pop	r29
    3cd6:	cf 91       	pop	r28
    3cd8:	1f 91       	pop	r17
    3cda:	0f 91       	pop	r16
    3cdc:	ff 90       	pop	r15
    3cde:	ef 90       	pop	r14
    3ce0:	08 95       	ret

00003ce2 <_ZN6String6concatEc>:
    3ce2:	cf 93       	push	r28
    3ce4:	df 93       	push	r29
    3ce6:	1f 92       	push	r1
    3ce8:	1f 92       	push	r1
    3cea:	cd b7       	in	r28, 0x3d	; 61
    3cec:	de b7       	in	r29, 0x3e	; 62
    3cee:	69 83       	std	Y+1, r22	; 0x01
    3cf0:	1a 82       	std	Y+2, r1	; 0x02
    3cf2:	41 e0       	ldi	r20, 0x01	; 1
    3cf4:	50 e0       	ldi	r21, 0x00	; 0
    3cf6:	be 01       	movw	r22, r28
    3cf8:	6f 5f       	subi	r22, 0xFF	; 255
    3cfa:	7f 4f       	sbci	r23, 0xFF	; 255
    3cfc:	c6 df       	rcall	.-116    	; 0x3c8a <_ZN6String6concatEPKcj>
    3cfe:	0f 90       	pop	r0
    3d00:	0f 90       	pop	r0
    3d02:	df 91       	pop	r29
    3d04:	cf 91       	pop	r28
    3d06:	08 95       	ret

00003d08 <_ZN6String6concatEi>:

unsigned char String::concat(int num)
{
    3d08:	ef 92       	push	r14
    3d0a:	ff 92       	push	r15
    3d0c:	0f 93       	push	r16
    3d0e:	1f 93       	push	r17
    3d10:	cf 93       	push	r28
    3d12:	df 93       	push	r29
    3d14:	cd b7       	in	r28, 0x3d	; 61
    3d16:	de b7       	in	r29, 0x3e	; 62
    3d18:	28 97       	sbiw	r28, 0x08	; 8
    3d1a:	0f b6       	in	r0, 0x3f	; 63
    3d1c:	f8 94       	cli
    3d1e:	de bf       	out	0x3e, r29	; 62
    3d20:	0f be       	out	0x3f, r0	; 63
    3d22:	cd bf       	out	0x3d, r28	; 61
    3d24:	7c 01       	movw	r14, r24
    3d26:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3d28:	4a e0       	ldi	r20, 0x0A	; 10
    3d2a:	8e 01       	movw	r16, r28
    3d2c:	0f 5f       	subi	r16, 0xFF	; 255
    3d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d30:	b8 01       	movw	r22, r16
    3d32:	5f d2       	rcall	.+1214   	; 0x41f2 <__itoa_ncheck>
	char buf[2 + 3 * sizeof(int)];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
    3d34:	f8 01       	movw	r30, r16
    3d36:	01 90       	ld	r0, Z+
    3d38:	00 20       	and	r0, r0
    3d3a:	e9 f7       	brne	.-6      	; 0x3d36 <_ZN6String6concatEi+0x2e>
    3d3c:	31 97       	sbiw	r30, 0x01	; 1
    3d3e:	af 01       	movw	r20, r30
    3d40:	40 1b       	sub	r20, r16
    3d42:	51 0b       	sbc	r21, r17
    3d44:	b8 01       	movw	r22, r16
    3d46:	c7 01       	movw	r24, r14
    3d48:	a0 df       	rcall	.-192    	; 0x3c8a <_ZN6String6concatEPKcj>
}
    3d4a:	28 96       	adiw	r28, 0x08	; 8
    3d4c:	0f b6       	in	r0, 0x3f	; 63
    3d4e:	f8 94       	cli
    3d50:	de bf       	out	0x3e, r29	; 62
    3d52:	0f be       	out	0x3f, r0	; 63
    3d54:	cd bf       	out	0x3d, r28	; 61
    3d56:	df 91       	pop	r29
    3d58:	cf 91       	pop	r28
    3d5a:	1f 91       	pop	r17
    3d5c:	0f 91       	pop	r16
    3d5e:	ff 90       	pop	r15
    3d60:	ef 90       	pop	r14
    3d62:	08 95       	ret

00003d64 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3d64:	08 95       	ret

00003d66 <__udivmodsi4>:
    3d66:	a1 e2       	ldi	r26, 0x21	; 33
    3d68:	1a 2e       	mov	r1, r26
    3d6a:	aa 1b       	sub	r26, r26
    3d6c:	bb 1b       	sub	r27, r27
    3d6e:	fd 01       	movw	r30, r26
    3d70:	0d c0       	rjmp	.+26     	; 0x3d8c <__udivmodsi4_ep>

00003d72 <__udivmodsi4_loop>:
    3d72:	aa 1f       	adc	r26, r26
    3d74:	bb 1f       	adc	r27, r27
    3d76:	ee 1f       	adc	r30, r30
    3d78:	ff 1f       	adc	r31, r31
    3d7a:	a2 17       	cp	r26, r18
    3d7c:	b3 07       	cpc	r27, r19
    3d7e:	e4 07       	cpc	r30, r20
    3d80:	f5 07       	cpc	r31, r21
    3d82:	20 f0       	brcs	.+8      	; 0x3d8c <__udivmodsi4_ep>
    3d84:	a2 1b       	sub	r26, r18
    3d86:	b3 0b       	sbc	r27, r19
    3d88:	e4 0b       	sbc	r30, r20
    3d8a:	f5 0b       	sbc	r31, r21

00003d8c <__udivmodsi4_ep>:
    3d8c:	66 1f       	adc	r22, r22
    3d8e:	77 1f       	adc	r23, r23
    3d90:	88 1f       	adc	r24, r24
    3d92:	99 1f       	adc	r25, r25
    3d94:	1a 94       	dec	r1
    3d96:	69 f7       	brne	.-38     	; 0x3d72 <__udivmodsi4_loop>
    3d98:	60 95       	com	r22
    3d9a:	70 95       	com	r23
    3d9c:	80 95       	com	r24
    3d9e:	90 95       	com	r25
    3da0:	9b 01       	movw	r18, r22
    3da2:	ac 01       	movw	r20, r24
    3da4:	bd 01       	movw	r22, r26
    3da6:	cf 01       	movw	r24, r30
    3da8:	08 95       	ret

00003daa <__tablejump2__>:
    3daa:	ee 0f       	add	r30, r30
    3dac:	ff 1f       	adc	r31, r31
    3dae:	88 1f       	adc	r24, r24
    3db0:	8b bf       	out	0x3b, r24	; 59
    3db2:	07 90       	elpm	r0, Z+
    3db4:	f6 91       	elpm	r31, Z
    3db6:	e0 2d       	mov	r30, r0
    3db8:	19 94       	eijmp

00003dba <malloc>:
    3dba:	0f 93       	push	r16
    3dbc:	1f 93       	push	r17
    3dbe:	cf 93       	push	r28
    3dc0:	df 93       	push	r29
    3dc2:	82 30       	cpi	r24, 0x02	; 2
    3dc4:	91 05       	cpc	r25, r1
    3dc6:	10 f4       	brcc	.+4      	; 0x3dcc <malloc+0x12>
    3dc8:	82 e0       	ldi	r24, 0x02	; 2
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	e0 91 55 04 	lds	r30, 0x0455	; 0x800455 <__flp>
    3dd0:	f0 91 56 04 	lds	r31, 0x0456	; 0x800456 <__flp+0x1>
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	a0 e0       	ldi	r26, 0x00	; 0
    3dda:	b0 e0       	ldi	r27, 0x00	; 0
    3ddc:	30 97       	sbiw	r30, 0x00	; 0
    3dde:	19 f1       	breq	.+70     	; 0x3e26 <malloc+0x6c>
    3de0:	40 81       	ld	r20, Z
    3de2:	51 81       	ldd	r21, Z+1	; 0x01
    3de4:	02 81       	ldd	r16, Z+2	; 0x02
    3de6:	13 81       	ldd	r17, Z+3	; 0x03
    3de8:	48 17       	cp	r20, r24
    3dea:	59 07       	cpc	r21, r25
    3dec:	c8 f0       	brcs	.+50     	; 0x3e20 <malloc+0x66>
    3dee:	84 17       	cp	r24, r20
    3df0:	95 07       	cpc	r25, r21
    3df2:	69 f4       	brne	.+26     	; 0x3e0e <malloc+0x54>
    3df4:	10 97       	sbiw	r26, 0x00	; 0
    3df6:	31 f0       	breq	.+12     	; 0x3e04 <malloc+0x4a>
    3df8:	12 96       	adiw	r26, 0x02	; 2
    3dfa:	0c 93       	st	X, r16
    3dfc:	12 97       	sbiw	r26, 0x02	; 2
    3dfe:	13 96       	adiw	r26, 0x03	; 3
    3e00:	1c 93       	st	X, r17
    3e02:	27 c0       	rjmp	.+78     	; 0x3e52 <malloc+0x98>
    3e04:	00 93 55 04 	sts	0x0455, r16	; 0x800455 <__flp>
    3e08:	10 93 56 04 	sts	0x0456, r17	; 0x800456 <__flp+0x1>
    3e0c:	22 c0       	rjmp	.+68     	; 0x3e52 <malloc+0x98>
    3e0e:	21 15       	cp	r18, r1
    3e10:	31 05       	cpc	r19, r1
    3e12:	19 f0       	breq	.+6      	; 0x3e1a <malloc+0x60>
    3e14:	42 17       	cp	r20, r18
    3e16:	53 07       	cpc	r21, r19
    3e18:	18 f4       	brcc	.+6      	; 0x3e20 <malloc+0x66>
    3e1a:	9a 01       	movw	r18, r20
    3e1c:	bd 01       	movw	r22, r26
    3e1e:	ef 01       	movw	r28, r30
    3e20:	df 01       	movw	r26, r30
    3e22:	f8 01       	movw	r30, r16
    3e24:	db cf       	rjmp	.-74     	; 0x3ddc <malloc+0x22>
    3e26:	21 15       	cp	r18, r1
    3e28:	31 05       	cpc	r19, r1
    3e2a:	f9 f0       	breq	.+62     	; 0x3e6a <malloc+0xb0>
    3e2c:	28 1b       	sub	r18, r24
    3e2e:	39 0b       	sbc	r19, r25
    3e30:	24 30       	cpi	r18, 0x04	; 4
    3e32:	31 05       	cpc	r19, r1
    3e34:	80 f4       	brcc	.+32     	; 0x3e56 <malloc+0x9c>
    3e36:	8a 81       	ldd	r24, Y+2	; 0x02
    3e38:	9b 81       	ldd	r25, Y+3	; 0x03
    3e3a:	61 15       	cp	r22, r1
    3e3c:	71 05       	cpc	r23, r1
    3e3e:	21 f0       	breq	.+8      	; 0x3e48 <malloc+0x8e>
    3e40:	fb 01       	movw	r30, r22
    3e42:	93 83       	std	Z+3, r25	; 0x03
    3e44:	82 83       	std	Z+2, r24	; 0x02
    3e46:	04 c0       	rjmp	.+8      	; 0x3e50 <malloc+0x96>
    3e48:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <__flp+0x1>
    3e4c:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__flp>
    3e50:	fe 01       	movw	r30, r28
    3e52:	32 96       	adiw	r30, 0x02	; 2
    3e54:	44 c0       	rjmp	.+136    	; 0x3ede <malloc+0x124>
    3e56:	fe 01       	movw	r30, r28
    3e58:	e2 0f       	add	r30, r18
    3e5a:	f3 1f       	adc	r31, r19
    3e5c:	81 93       	st	Z+, r24
    3e5e:	91 93       	st	Z+, r25
    3e60:	22 50       	subi	r18, 0x02	; 2
    3e62:	31 09       	sbc	r19, r1
    3e64:	39 83       	std	Y+1, r19	; 0x01
    3e66:	28 83       	st	Y, r18
    3e68:	3a c0       	rjmp	.+116    	; 0x3ede <malloc+0x124>
    3e6a:	20 91 53 04 	lds	r18, 0x0453	; 0x800453 <__brkval>
    3e6e:	30 91 54 04 	lds	r19, 0x0454	; 0x800454 <__brkval+0x1>
    3e72:	23 2b       	or	r18, r19
    3e74:	41 f4       	brne	.+16     	; 0x3e86 <malloc+0xcc>
    3e76:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3e7a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3e7e:	30 93 54 04 	sts	0x0454, r19	; 0x800454 <__brkval+0x1>
    3e82:	20 93 53 04 	sts	0x0453, r18	; 0x800453 <__brkval>
    3e86:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    3e8a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    3e8e:	21 15       	cp	r18, r1
    3e90:	31 05       	cpc	r19, r1
    3e92:	41 f4       	brne	.+16     	; 0x3ea4 <malloc+0xea>
    3e94:	2d b7       	in	r18, 0x3d	; 61
    3e96:	3e b7       	in	r19, 0x3e	; 62
    3e98:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3e9c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3ea0:	24 1b       	sub	r18, r20
    3ea2:	35 0b       	sbc	r19, r21
    3ea4:	e0 91 53 04 	lds	r30, 0x0453	; 0x800453 <__brkval>
    3ea8:	f0 91 54 04 	lds	r31, 0x0454	; 0x800454 <__brkval+0x1>
    3eac:	e2 17       	cp	r30, r18
    3eae:	f3 07       	cpc	r31, r19
    3eb0:	a0 f4       	brcc	.+40     	; 0x3eda <malloc+0x120>
    3eb2:	2e 1b       	sub	r18, r30
    3eb4:	3f 0b       	sbc	r19, r31
    3eb6:	28 17       	cp	r18, r24
    3eb8:	39 07       	cpc	r19, r25
    3eba:	78 f0       	brcs	.+30     	; 0x3eda <malloc+0x120>
    3ebc:	ac 01       	movw	r20, r24
    3ebe:	4e 5f       	subi	r20, 0xFE	; 254
    3ec0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ec2:	24 17       	cp	r18, r20
    3ec4:	35 07       	cpc	r19, r21
    3ec6:	48 f0       	brcs	.+18     	; 0x3eda <malloc+0x120>
    3ec8:	4e 0f       	add	r20, r30
    3eca:	5f 1f       	adc	r21, r31
    3ecc:	50 93 54 04 	sts	0x0454, r21	; 0x800454 <__brkval+0x1>
    3ed0:	40 93 53 04 	sts	0x0453, r20	; 0x800453 <__brkval>
    3ed4:	81 93       	st	Z+, r24
    3ed6:	91 93       	st	Z+, r25
    3ed8:	02 c0       	rjmp	.+4      	; 0x3ede <malloc+0x124>
    3eda:	e0 e0       	ldi	r30, 0x00	; 0
    3edc:	f0 e0       	ldi	r31, 0x00	; 0
    3ede:	cf 01       	movw	r24, r30
    3ee0:	df 91       	pop	r29
    3ee2:	cf 91       	pop	r28
    3ee4:	1f 91       	pop	r17
    3ee6:	0f 91       	pop	r16
    3ee8:	08 95       	ret

00003eea <free>:
    3eea:	cf 93       	push	r28
    3eec:	df 93       	push	r29
    3eee:	00 97       	sbiw	r24, 0x00	; 0
    3ef0:	09 f4       	brne	.+2      	; 0x3ef4 <free+0xa>
    3ef2:	81 c0       	rjmp	.+258    	; 0x3ff6 <free+0x10c>
    3ef4:	fc 01       	movw	r30, r24
    3ef6:	32 97       	sbiw	r30, 0x02	; 2
    3ef8:	13 82       	std	Z+3, r1	; 0x03
    3efa:	12 82       	std	Z+2, r1	; 0x02
    3efc:	a0 91 55 04 	lds	r26, 0x0455	; 0x800455 <__flp>
    3f00:	b0 91 56 04 	lds	r27, 0x0456	; 0x800456 <__flp+0x1>
    3f04:	10 97       	sbiw	r26, 0x00	; 0
    3f06:	81 f4       	brne	.+32     	; 0x3f28 <free+0x3e>
    3f08:	20 81       	ld	r18, Z
    3f0a:	31 81       	ldd	r19, Z+1	; 0x01
    3f0c:	82 0f       	add	r24, r18
    3f0e:	93 1f       	adc	r25, r19
    3f10:	20 91 53 04 	lds	r18, 0x0453	; 0x800453 <__brkval>
    3f14:	30 91 54 04 	lds	r19, 0x0454	; 0x800454 <__brkval+0x1>
    3f18:	28 17       	cp	r18, r24
    3f1a:	39 07       	cpc	r19, r25
    3f1c:	51 f5       	brne	.+84     	; 0x3f72 <free+0x88>
    3f1e:	f0 93 54 04 	sts	0x0454, r31	; 0x800454 <__brkval+0x1>
    3f22:	e0 93 53 04 	sts	0x0453, r30	; 0x800453 <__brkval>
    3f26:	67 c0       	rjmp	.+206    	; 0x3ff6 <free+0x10c>
    3f28:	ed 01       	movw	r28, r26
    3f2a:	20 e0       	ldi	r18, 0x00	; 0
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	ce 17       	cp	r28, r30
    3f30:	df 07       	cpc	r29, r31
    3f32:	40 f4       	brcc	.+16     	; 0x3f44 <free+0x5a>
    3f34:	4a 81       	ldd	r20, Y+2	; 0x02
    3f36:	5b 81       	ldd	r21, Y+3	; 0x03
    3f38:	9e 01       	movw	r18, r28
    3f3a:	41 15       	cp	r20, r1
    3f3c:	51 05       	cpc	r21, r1
    3f3e:	f1 f0       	breq	.+60     	; 0x3f7c <free+0x92>
    3f40:	ea 01       	movw	r28, r20
    3f42:	f5 cf       	rjmp	.-22     	; 0x3f2e <free+0x44>
    3f44:	d3 83       	std	Z+3, r29	; 0x03
    3f46:	c2 83       	std	Z+2, r28	; 0x02
    3f48:	40 81       	ld	r20, Z
    3f4a:	51 81       	ldd	r21, Z+1	; 0x01
    3f4c:	84 0f       	add	r24, r20
    3f4e:	95 1f       	adc	r25, r21
    3f50:	c8 17       	cp	r28, r24
    3f52:	d9 07       	cpc	r29, r25
    3f54:	59 f4       	brne	.+22     	; 0x3f6c <free+0x82>
    3f56:	88 81       	ld	r24, Y
    3f58:	99 81       	ldd	r25, Y+1	; 0x01
    3f5a:	84 0f       	add	r24, r20
    3f5c:	95 1f       	adc	r25, r21
    3f5e:	02 96       	adiw	r24, 0x02	; 2
    3f60:	91 83       	std	Z+1, r25	; 0x01
    3f62:	80 83       	st	Z, r24
    3f64:	8a 81       	ldd	r24, Y+2	; 0x02
    3f66:	9b 81       	ldd	r25, Y+3	; 0x03
    3f68:	93 83       	std	Z+3, r25	; 0x03
    3f6a:	82 83       	std	Z+2, r24	; 0x02
    3f6c:	21 15       	cp	r18, r1
    3f6e:	31 05       	cpc	r19, r1
    3f70:	29 f4       	brne	.+10     	; 0x3f7c <free+0x92>
    3f72:	f0 93 56 04 	sts	0x0456, r31	; 0x800456 <__flp+0x1>
    3f76:	e0 93 55 04 	sts	0x0455, r30	; 0x800455 <__flp>
    3f7a:	3d c0       	rjmp	.+122    	; 0x3ff6 <free+0x10c>
    3f7c:	e9 01       	movw	r28, r18
    3f7e:	fb 83       	std	Y+3, r31	; 0x03
    3f80:	ea 83       	std	Y+2, r30	; 0x02
    3f82:	49 91       	ld	r20, Y+
    3f84:	59 91       	ld	r21, Y+
    3f86:	c4 0f       	add	r28, r20
    3f88:	d5 1f       	adc	r29, r21
    3f8a:	ec 17       	cp	r30, r28
    3f8c:	fd 07       	cpc	r31, r29
    3f8e:	61 f4       	brne	.+24     	; 0x3fa8 <free+0xbe>
    3f90:	80 81       	ld	r24, Z
    3f92:	91 81       	ldd	r25, Z+1	; 0x01
    3f94:	84 0f       	add	r24, r20
    3f96:	95 1f       	adc	r25, r21
    3f98:	02 96       	adiw	r24, 0x02	; 2
    3f9a:	e9 01       	movw	r28, r18
    3f9c:	99 83       	std	Y+1, r25	; 0x01
    3f9e:	88 83       	st	Y, r24
    3fa0:	82 81       	ldd	r24, Z+2	; 0x02
    3fa2:	93 81       	ldd	r25, Z+3	; 0x03
    3fa4:	9b 83       	std	Y+3, r25	; 0x03
    3fa6:	8a 83       	std	Y+2, r24	; 0x02
    3fa8:	e0 e0       	ldi	r30, 0x00	; 0
    3faa:	f0 e0       	ldi	r31, 0x00	; 0
    3fac:	12 96       	adiw	r26, 0x02	; 2
    3fae:	8d 91       	ld	r24, X+
    3fb0:	9c 91       	ld	r25, X
    3fb2:	13 97       	sbiw	r26, 0x03	; 3
    3fb4:	00 97       	sbiw	r24, 0x00	; 0
    3fb6:	19 f0       	breq	.+6      	; 0x3fbe <free+0xd4>
    3fb8:	fd 01       	movw	r30, r26
    3fba:	dc 01       	movw	r26, r24
    3fbc:	f7 cf       	rjmp	.-18     	; 0x3fac <free+0xc2>
    3fbe:	8d 91       	ld	r24, X+
    3fc0:	9c 91       	ld	r25, X
    3fc2:	11 97       	sbiw	r26, 0x01	; 1
    3fc4:	9d 01       	movw	r18, r26
    3fc6:	2e 5f       	subi	r18, 0xFE	; 254
    3fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    3fca:	82 0f       	add	r24, r18
    3fcc:	93 1f       	adc	r25, r19
    3fce:	20 91 53 04 	lds	r18, 0x0453	; 0x800453 <__brkval>
    3fd2:	30 91 54 04 	lds	r19, 0x0454	; 0x800454 <__brkval+0x1>
    3fd6:	28 17       	cp	r18, r24
    3fd8:	39 07       	cpc	r19, r25
    3fda:	69 f4       	brne	.+26     	; 0x3ff6 <free+0x10c>
    3fdc:	30 97       	sbiw	r30, 0x00	; 0
    3fde:	29 f4       	brne	.+10     	; 0x3fea <free+0x100>
    3fe0:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <__flp+0x1>
    3fe4:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <__flp>
    3fe8:	02 c0       	rjmp	.+4      	; 0x3fee <free+0x104>
    3fea:	13 82       	std	Z+3, r1	; 0x03
    3fec:	12 82       	std	Z+2, r1	; 0x02
    3fee:	b0 93 54 04 	sts	0x0454, r27	; 0x800454 <__brkval+0x1>
    3ff2:	a0 93 53 04 	sts	0x0453, r26	; 0x800453 <__brkval>
    3ff6:	df 91       	pop	r29
    3ff8:	cf 91       	pop	r28
    3ffa:	08 95       	ret

00003ffc <realloc>:
    3ffc:	6f 92       	push	r6
    3ffe:	7f 92       	push	r7
    4000:	8f 92       	push	r8
    4002:	9f 92       	push	r9
    4004:	af 92       	push	r10
    4006:	bf 92       	push	r11
    4008:	cf 92       	push	r12
    400a:	df 92       	push	r13
    400c:	ef 92       	push	r14
    400e:	ff 92       	push	r15
    4010:	0f 93       	push	r16
    4012:	1f 93       	push	r17
    4014:	cf 93       	push	r28
    4016:	df 93       	push	r29
    4018:	00 97       	sbiw	r24, 0x00	; 0
    401a:	81 f4       	brne	.+32     	; 0x403c <realloc+0x40>
    401c:	cb 01       	movw	r24, r22
    401e:	df 91       	pop	r29
    4020:	cf 91       	pop	r28
    4022:	1f 91       	pop	r17
    4024:	0f 91       	pop	r16
    4026:	ff 90       	pop	r15
    4028:	ef 90       	pop	r14
    402a:	df 90       	pop	r13
    402c:	cf 90       	pop	r12
    402e:	bf 90       	pop	r11
    4030:	af 90       	pop	r10
    4032:	9f 90       	pop	r9
    4034:	8f 90       	pop	r8
    4036:	7f 90       	pop	r7
    4038:	6f 90       	pop	r6
    403a:	bf ce       	rjmp	.-642    	; 0x3dba <malloc>
    403c:	fc 01       	movw	r30, r24
    403e:	e6 0f       	add	r30, r22
    4040:	f7 1f       	adc	r31, r23
    4042:	9c 01       	movw	r18, r24
    4044:	22 50       	subi	r18, 0x02	; 2
    4046:	31 09       	sbc	r19, r1
    4048:	e2 17       	cp	r30, r18
    404a:	f3 07       	cpc	r31, r19
    404c:	08 f4       	brcc	.+2      	; 0x4050 <realloc+0x54>
    404e:	a5 c0       	rjmp	.+330    	; 0x419a <realloc+0x19e>
    4050:	ec 01       	movw	r28, r24
    4052:	d9 01       	movw	r26, r18
    4054:	0d 91       	ld	r16, X+
    4056:	1c 91       	ld	r17, X
    4058:	11 97       	sbiw	r26, 0x01	; 1
    405a:	06 17       	cp	r16, r22
    405c:	17 07       	cpc	r17, r23
    405e:	a8 f0       	brcs	.+42     	; 0x408a <realloc+0x8e>
    4060:	05 30       	cpi	r16, 0x05	; 5
    4062:	11 05       	cpc	r17, r1
    4064:	08 f4       	brcc	.+2      	; 0x4068 <realloc+0x6c>
    4066:	97 c0       	rjmp	.+302    	; 0x4196 <realloc+0x19a>
    4068:	c8 01       	movw	r24, r16
    406a:	04 97       	sbiw	r24, 0x04	; 4
    406c:	86 17       	cp	r24, r22
    406e:	97 07       	cpc	r25, r23
    4070:	08 f4       	brcc	.+2      	; 0x4074 <realloc+0x78>
    4072:	91 c0       	rjmp	.+290    	; 0x4196 <realloc+0x19a>
    4074:	02 50       	subi	r16, 0x02	; 2
    4076:	11 09       	sbc	r17, r1
    4078:	06 1b       	sub	r16, r22
    407a:	17 0b       	sbc	r17, r23
    407c:	01 93       	st	Z+, r16
    407e:	11 93       	st	Z+, r17
    4080:	6d 93       	st	X+, r22
    4082:	7c 93       	st	X, r23
    4084:	cf 01       	movw	r24, r30
    4086:	31 df       	rcall	.-414    	; 0x3eea <free>
    4088:	86 c0       	rjmp	.+268    	; 0x4196 <realloc+0x19a>
    408a:	5b 01       	movw	r10, r22
    408c:	a0 1a       	sub	r10, r16
    408e:	b1 0a       	sbc	r11, r17
    4090:	4c 01       	movw	r8, r24
    4092:	80 0e       	add	r8, r16
    4094:	91 1e       	adc	r9, r17
    4096:	a0 91 55 04 	lds	r26, 0x0455	; 0x800455 <__flp>
    409a:	b0 91 56 04 	lds	r27, 0x0456	; 0x800456 <__flp+0x1>
    409e:	61 2c       	mov	r6, r1
    40a0:	71 2c       	mov	r7, r1
    40a2:	e1 2c       	mov	r14, r1
    40a4:	f1 2c       	mov	r15, r1
    40a6:	10 97       	sbiw	r26, 0x00	; 0
    40a8:	09 f4       	brne	.+2      	; 0x40ac <realloc+0xb0>
    40aa:	46 c0       	rjmp	.+140    	; 0x4138 <realloc+0x13c>
    40ac:	8d 91       	ld	r24, X+
    40ae:	9c 91       	ld	r25, X
    40b0:	11 97       	sbiw	r26, 0x01	; 1
    40b2:	a8 15       	cp	r26, r8
    40b4:	b9 05       	cpc	r27, r9
    40b6:	b1 f5       	brne	.+108    	; 0x4124 <realloc+0x128>
    40b8:	6c 01       	movw	r12, r24
    40ba:	42 e0       	ldi	r20, 0x02	; 2
    40bc:	c4 0e       	add	r12, r20
    40be:	d1 1c       	adc	r13, r1
    40c0:	ca 14       	cp	r12, r10
    40c2:	db 04       	cpc	r13, r11
    40c4:	78 f1       	brcs	.+94     	; 0x4124 <realloc+0x128>
    40c6:	4c 01       	movw	r8, r24
    40c8:	8a 18       	sub	r8, r10
    40ca:	9b 08       	sbc	r9, r11
    40cc:	64 01       	movw	r12, r8
    40ce:	42 e0       	ldi	r20, 0x02	; 2
    40d0:	c4 0e       	add	r12, r20
    40d2:	d1 1c       	adc	r13, r1
    40d4:	12 96       	adiw	r26, 0x02	; 2
    40d6:	bc 90       	ld	r11, X
    40d8:	12 97       	sbiw	r26, 0x02	; 2
    40da:	13 96       	adiw	r26, 0x03	; 3
    40dc:	ac 91       	ld	r26, X
    40de:	b5 e0       	ldi	r27, 0x05	; 5
    40e0:	cb 16       	cp	r12, r27
    40e2:	d1 04       	cpc	r13, r1
    40e4:	40 f0       	brcs	.+16     	; 0x40f6 <realloc+0xfa>
    40e6:	b2 82       	std	Z+2, r11	; 0x02
    40e8:	a3 83       	std	Z+3, r26	; 0x03
    40ea:	91 82       	std	Z+1, r9	; 0x01
    40ec:	80 82       	st	Z, r8
    40ee:	d9 01       	movw	r26, r18
    40f0:	6d 93       	st	X+, r22
    40f2:	7c 93       	st	X, r23
    40f4:	09 c0       	rjmp	.+18     	; 0x4108 <realloc+0x10c>
    40f6:	0e 5f       	subi	r16, 0xFE	; 254
    40f8:	1f 4f       	sbci	r17, 0xFF	; 255
    40fa:	80 0f       	add	r24, r16
    40fc:	91 1f       	adc	r25, r17
    40fe:	f9 01       	movw	r30, r18
    4100:	91 83       	std	Z+1, r25	; 0x01
    4102:	80 83       	st	Z, r24
    4104:	eb 2d       	mov	r30, r11
    4106:	fa 2f       	mov	r31, r26
    4108:	e1 14       	cp	r14, r1
    410a:	f1 04       	cpc	r15, r1
    410c:	31 f0       	breq	.+12     	; 0x411a <realloc+0x11e>
    410e:	d7 01       	movw	r26, r14
    4110:	13 96       	adiw	r26, 0x03	; 3
    4112:	fc 93       	st	X, r31
    4114:	ee 93       	st	-X, r30
    4116:	12 97       	sbiw	r26, 0x02	; 2
    4118:	3e c0       	rjmp	.+124    	; 0x4196 <realloc+0x19a>
    411a:	f0 93 56 04 	sts	0x0456, r31	; 0x800456 <__flp+0x1>
    411e:	e0 93 55 04 	sts	0x0455, r30	; 0x800455 <__flp>
    4122:	39 c0       	rjmp	.+114    	; 0x4196 <realloc+0x19a>
    4124:	68 16       	cp	r6, r24
    4126:	79 06       	cpc	r7, r25
    4128:	08 f4       	brcc	.+2      	; 0x412c <realloc+0x130>
    412a:	3c 01       	movw	r6, r24
    412c:	7d 01       	movw	r14, r26
    412e:	12 96       	adiw	r26, 0x02	; 2
    4130:	0d 90       	ld	r0, X+
    4132:	bc 91       	ld	r27, X
    4134:	a0 2d       	mov	r26, r0
    4136:	b7 cf       	rjmp	.-146    	; 0x40a6 <realloc+0xaa>
    4138:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__brkval>
    413c:	90 91 54 04 	lds	r25, 0x0454	; 0x800454 <__brkval+0x1>
    4140:	88 16       	cp	r8, r24
    4142:	99 06       	cpc	r9, r25
    4144:	e1 f4       	brne	.+56     	; 0x417e <realloc+0x182>
    4146:	66 16       	cp	r6, r22
    4148:	77 06       	cpc	r7, r23
    414a:	c8 f4       	brcc	.+50     	; 0x417e <realloc+0x182>
    414c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4150:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4154:	00 97       	sbiw	r24, 0x00	; 0
    4156:	41 f4       	brne	.+16     	; 0x4168 <realloc+0x16c>
    4158:	8d b7       	in	r24, 0x3d	; 61
    415a:	9e b7       	in	r25, 0x3e	; 62
    415c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4160:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4164:	84 1b       	sub	r24, r20
    4166:	95 0b       	sbc	r25, r21
    4168:	e8 17       	cp	r30, r24
    416a:	f9 07       	cpc	r31, r25
    416c:	b0 f4       	brcc	.+44     	; 0x419a <realloc+0x19e>
    416e:	f0 93 54 04 	sts	0x0454, r31	; 0x800454 <__brkval+0x1>
    4172:	e0 93 53 04 	sts	0x0453, r30	; 0x800453 <__brkval>
    4176:	f9 01       	movw	r30, r18
    4178:	71 83       	std	Z+1, r23	; 0x01
    417a:	60 83       	st	Z, r22
    417c:	0c c0       	rjmp	.+24     	; 0x4196 <realloc+0x19a>
    417e:	cb 01       	movw	r24, r22
    4180:	1c de       	rcall	.-968    	; 0x3dba <malloc>
    4182:	7c 01       	movw	r14, r24
    4184:	00 97       	sbiw	r24, 0x00	; 0
    4186:	49 f0       	breq	.+18     	; 0x419a <realloc+0x19e>
    4188:	a8 01       	movw	r20, r16
    418a:	be 01       	movw	r22, r28
    418c:	1b d0       	rcall	.+54     	; 0x41c4 <memcpy>
    418e:	ce 01       	movw	r24, r28
    4190:	ac de       	rcall	.-680    	; 0x3eea <free>
    4192:	c7 01       	movw	r24, r14
    4194:	04 c0       	rjmp	.+8      	; 0x419e <realloc+0x1a2>
    4196:	ce 01       	movw	r24, r28
    4198:	02 c0       	rjmp	.+4      	; 0x419e <realloc+0x1a2>
    419a:	80 e0       	ldi	r24, 0x00	; 0
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	df 91       	pop	r29
    41a0:	cf 91       	pop	r28
    41a2:	1f 91       	pop	r17
    41a4:	0f 91       	pop	r16
    41a6:	ff 90       	pop	r15
    41a8:	ef 90       	pop	r14
    41aa:	df 90       	pop	r13
    41ac:	cf 90       	pop	r12
    41ae:	bf 90       	pop	r11
    41b0:	af 90       	pop	r10
    41b2:	9f 90       	pop	r9
    41b4:	8f 90       	pop	r8
    41b6:	7f 90       	pop	r7
    41b8:	6f 90       	pop	r6
    41ba:	08 95       	ret

000041bc <abort>:
    41bc:	81 e0       	ldi	r24, 0x01	; 1
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	f8 94       	cli
    41c2:	4a c0       	rjmp	.+148    	; 0x4258 <__do_global_dtors>

000041c4 <memcpy>:
    41c4:	fb 01       	movw	r30, r22
    41c6:	dc 01       	movw	r26, r24
    41c8:	02 c0       	rjmp	.+4      	; 0x41ce <memcpy+0xa>
    41ca:	01 90       	ld	r0, Z+
    41cc:	0d 92       	st	X+, r0
    41ce:	41 50       	subi	r20, 0x01	; 1
    41d0:	50 40       	sbci	r21, 0x00	; 0
    41d2:	d8 f7       	brcc	.-10     	; 0x41ca <memcpy+0x6>
    41d4:	08 95       	ret

000041d6 <memset>:
    41d6:	dc 01       	movw	r26, r24
    41d8:	01 c0       	rjmp	.+2      	; 0x41dc <memset+0x6>
    41da:	6d 93       	st	X+, r22
    41dc:	41 50       	subi	r20, 0x01	; 1
    41de:	50 40       	sbci	r21, 0x00	; 0
    41e0:	e0 f7       	brcc	.-8      	; 0x41da <memset+0x4>
    41e2:	08 95       	ret

000041e4 <strcpy>:
    41e4:	fb 01       	movw	r30, r22
    41e6:	dc 01       	movw	r26, r24
    41e8:	01 90       	ld	r0, Z+
    41ea:	0d 92       	st	X+, r0
    41ec:	00 20       	and	r0, r0
    41ee:	e1 f7       	brne	.-8      	; 0x41e8 <strcpy+0x4>
    41f0:	08 95       	ret

000041f2 <__itoa_ncheck>:
    41f2:	bb 27       	eor	r27, r27
    41f4:	4a 30       	cpi	r20, 0x0A	; 10
    41f6:	31 f4       	brne	.+12     	; 0x4204 <__itoa_ncheck+0x12>
    41f8:	99 23       	and	r25, r25
    41fa:	22 f4       	brpl	.+8      	; 0x4204 <__itoa_ncheck+0x12>
    41fc:	bd e2       	ldi	r27, 0x2D	; 45
    41fe:	90 95       	com	r25
    4200:	81 95       	neg	r24
    4202:	9f 4f       	sbci	r25, 0xFF	; 255
    4204:	01 c0       	rjmp	.+2      	; 0x4208 <__utoa_common>

00004206 <__utoa_ncheck>:
    4206:	bb 27       	eor	r27, r27

00004208 <__utoa_common>:
    4208:	fb 01       	movw	r30, r22
    420a:	55 27       	eor	r21, r21
    420c:	aa 27       	eor	r26, r26
    420e:	88 0f       	add	r24, r24
    4210:	99 1f       	adc	r25, r25
    4212:	aa 1f       	adc	r26, r26
    4214:	a4 17       	cp	r26, r20
    4216:	10 f0       	brcs	.+4      	; 0x421c <__utoa_common+0x14>
    4218:	a4 1b       	sub	r26, r20
    421a:	83 95       	inc	r24
    421c:	50 51       	subi	r21, 0x10	; 16
    421e:	b9 f7       	brne	.-18     	; 0x420e <__utoa_common+0x6>
    4220:	a0 5d       	subi	r26, 0xD0	; 208
    4222:	aa 33       	cpi	r26, 0x3A	; 58
    4224:	08 f0       	brcs	.+2      	; 0x4228 <__utoa_common+0x20>
    4226:	a9 5d       	subi	r26, 0xD9	; 217
    4228:	a1 93       	st	Z+, r26
    422a:	00 97       	sbiw	r24, 0x00	; 0
    422c:	79 f7       	brne	.-34     	; 0x420c <__utoa_common+0x4>
    422e:	b1 11       	cpse	r27, r1
    4230:	b1 93       	st	Z+, r27
    4232:	11 92       	st	Z+, r1
    4234:	cb 01       	movw	r24, r22
    4236:	00 c0       	rjmp	.+0      	; 0x4238 <strrev>

00004238 <strrev>:
    4238:	dc 01       	movw	r26, r24
    423a:	fc 01       	movw	r30, r24
    423c:	67 2f       	mov	r22, r23
    423e:	71 91       	ld	r23, Z+
    4240:	77 23       	and	r23, r23
    4242:	e1 f7       	brne	.-8      	; 0x423c <strrev+0x4>
    4244:	32 97       	sbiw	r30, 0x02	; 2
    4246:	04 c0       	rjmp	.+8      	; 0x4250 <strrev+0x18>
    4248:	7c 91       	ld	r23, X
    424a:	6d 93       	st	X+, r22
    424c:	70 83       	st	Z, r23
    424e:	62 91       	ld	r22, -Z
    4250:	ae 17       	cp	r26, r30
    4252:	bf 07       	cpc	r27, r31
    4254:	c8 f3       	brcs	.-14     	; 0x4248 <strrev+0x10>
    4256:	08 95       	ret

00004258 <__do_global_dtors>:
    4258:	15 e0       	ldi	r17, 0x05	; 5
    425a:	cb ef       	ldi	r28, 0xFB	; 251
    425c:	d5 e0       	ldi	r29, 0x05	; 5
    425e:	00 e0       	ldi	r16, 0x00	; 0
    4260:	05 c0       	rjmp	.+10     	; 0x426c <__do_global_dtors+0x14>
    4262:	80 2f       	mov	r24, r16
    4264:	fe 01       	movw	r30, r28
    4266:	a1 dd       	rcall	.-1214   	; 0x3daa <__tablejump2__>
    4268:	21 96       	adiw	r28, 0x01	; 1
    426a:	01 1d       	adc	r16, r1
    426c:	cc 3f       	cpi	r28, 0xFC	; 252
    426e:	d1 07       	cpc	r29, r17
    4270:	80 e0       	ldi	r24, 0x00	; 0
    4272:	08 07       	cpc	r16, r24
    4274:	b1 f7       	brne	.-20     	; 0x4262 <__do_global_dtors+0xa>
    4276:	f8 94       	cli

00004278 <__stop_program>:
    4278:	ff cf       	rjmp	.-2      	; 0x4278 <__stop_program>
