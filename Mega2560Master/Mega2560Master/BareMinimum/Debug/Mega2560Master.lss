
Mega2560Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800200  00005554  000055e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005554  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f4  008002bc  008002bc  000056a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000056a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000056d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000e88  00000000  00000000  00005714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00022f9e  00000000  00000000  0000659c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004b83  00000000  00000000  0002953a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009876  00000000  00000000  0002e0bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003f88  00000000  00000000  00037934  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000061c5  00000000  00000000  0003b8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001d305  00000000  00000000  00041a81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001100  00000000  00000000  0005ed86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	15 c6       	rjmp	.+3114   	; 0xc2c <__dtors_end>
       2:	00 00       	nop
       4:	0c 94 ac 23 	jmp	0x4758	; 0x4758 <__vector_1>
       8:	0c 94 d7 23 	jmp	0x47ae	; 0x47ae <__vector_2>
       c:	0c 94 02 24 	jmp	0x4804	; 0x4804 <__vector_3>
      10:	0c 94 2d 24 	jmp	0x485a	; 0x485a <__vector_4>
      14:	0c 94 58 24 	jmp	0x48b0	; 0x48b0 <__vector_5>
      18:	0c 94 83 24 	jmp	0x4906	; 0x4906 <__vector_6>
      1c:	0c 94 ae 24 	jmp	0x495c	; 0x495c <__vector_7>
      20:	0c 94 d9 24 	jmp	0x49b2	; 0x49b2 <__vector_8>
      24:	34 c6       	rjmp	.+3176   	; 0xc8e <__bad_interrupt>
      26:	00 00       	nop
      28:	32 c6       	rjmp	.+3172   	; 0xc8e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	30 c6       	rjmp	.+3168   	; 0xc8e <__bad_interrupt>
      2e:	00 00       	nop
      30:	2e c6       	rjmp	.+3164   	; 0xc8e <__bad_interrupt>
      32:	00 00       	nop
      34:	2c c6       	rjmp	.+3160   	; 0xc8e <__bad_interrupt>
      36:	00 00       	nop
      38:	2a c6       	rjmp	.+3156   	; 0xc8e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	28 c6       	rjmp	.+3152   	; 0xc8e <__bad_interrupt>
      3e:	00 00       	nop
      40:	26 c6       	rjmp	.+3148   	; 0xc8e <__bad_interrupt>
      42:	00 00       	nop
      44:	24 c6       	rjmp	.+3144   	; 0xc8e <__bad_interrupt>
      46:	00 00       	nop
      48:	22 c6       	rjmp	.+3140   	; 0xc8e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	20 c6       	rjmp	.+3136   	; 0xc8e <__bad_interrupt>
      4e:	00 00       	nop
      50:	1e c6       	rjmp	.+3132   	; 0xc8e <__bad_interrupt>
      52:	00 00       	nop
      54:	1c c6       	rjmp	.+3128   	; 0xc8e <__bad_interrupt>
      56:	00 00       	nop
      58:	1a c6       	rjmp	.+3124   	; 0xc8e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 04 25 	jmp	0x4a08	; 0x4a08 <__vector_23>
      60:	16 c6       	rjmp	.+3116   	; 0xc8e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 f2 21 	jmp	0x43e4	; 0x43e4 <__vector_25>
      68:	0c 94 28 22 	jmp	0x4450	; 0x4450 <__vector_26>
      6c:	10 c6       	rjmp	.+3104   	; 0xc8e <__bad_interrupt>
      6e:	00 00       	nop
      70:	0e c6       	rjmp	.+3100   	; 0xc8e <__bad_interrupt>
      72:	00 00       	nop
      74:	0c c6       	rjmp	.+3096   	; 0xc8e <__bad_interrupt>
      76:	00 00       	nop
      78:	0a c6       	rjmp	.+3092   	; 0xc8e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	08 c6       	rjmp	.+3088   	; 0xc8e <__bad_interrupt>
      7e:	00 00       	nop
      80:	06 c6       	rjmp	.+3084   	; 0xc8e <__bad_interrupt>
      82:	00 00       	nop
      84:	04 c6       	rjmp	.+3080   	; 0xc8e <__bad_interrupt>
      86:	00 00       	nop
      88:	02 c6       	rjmp	.+3076   	; 0xc8e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	00 c6       	rjmp	.+3072   	; 0xc8e <__bad_interrupt>
      8e:	00 00       	nop
      90:	fe c5       	rjmp	.+3068   	; 0xc8e <__bad_interrupt>
      92:	00 00       	nop
      94:	fc c5       	rjmp	.+3064   	; 0xc8e <__bad_interrupt>
      96:	00 00       	nop
      98:	fa c5       	rjmp	.+3060   	; 0xc8e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 46 1c 	jmp	0x388c	; 0x388c <__vector_39>
      a0:	f6 c5       	rjmp	.+3052   	; 0xc8e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f4 c5       	rjmp	.+3048   	; 0xc8e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f2 c5       	rjmp	.+3044   	; 0xc8e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f0 c5       	rjmp	.+3040   	; 0xc8e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ee c5       	rjmp	.+3036   	; 0xc8e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ec c5       	rjmp	.+3032   	; 0xc8e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ea c5       	rjmp	.+3028   	; 0xc8e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e8 c5       	rjmp	.+3024   	; 0xc8e <__bad_interrupt>
      be:	00 00       	nop
      c0:	e6 c5       	rjmp	.+3020   	; 0xc8e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e4 c5       	rjmp	.+3016   	; 0xc8e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e2 c5       	rjmp	.+3012   	; 0xc8e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e0 c5       	rjmp	.+3008   	; 0xc8e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	de c5       	rjmp	.+3004   	; 0xc8e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	dc c5       	rjmp	.+3000   	; 0xc8e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	da c5       	rjmp	.+2996   	; 0xc8e <__bad_interrupt>
      da:	00 00       	nop
      dc:	d8 c5       	rjmp	.+2992   	; 0xc8e <__bad_interrupt>
      de:	00 00       	nop
      e0:	d6 c5       	rjmp	.+2988   	; 0xc8e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	86 23       	and	r24, r22
      e6:	50 23       	and	r21, r16
      e8:	58 23       	and	r21, r24
      ea:	64 23       	and	r22, r20
      ec:	71 23       	and	r23, r17
      ee:	92 23       	and	r25, r18
      f0:	9f 23       	and	r25, r31
      f2:	3f 26       	eor	r3, r31
      f4:	42 26       	eor	r4, r18
      f6:	31 26       	eor	r3, r17
      f8:	35 26       	eor	r3, r21
      fa:	3b 26       	eor	r3, r27
      fc:	79 26       	eor	r7, r25
      fe:	46 26       	eor	r4, r22
     100:	4a 26       	eor	r4, r26
     102:	50 26       	eor	r5, r16
     104:	54 26       	eor	r5, r20
     106:	58 26       	eor	r5, r24
     108:	5e 26       	eor	r5, r30
     10a:	62 26       	eor	r6, r18
     10c:	66 26       	eor	r6, r22
     10e:	79 26       	eor	r7, r25
     110:	6c 26       	eor	r6, r28
     112:	70 26       	eor	r7, r16
     114:	74 26       	eor	r7, r20

00000116 <__trampolines_end>:
     116:	1f 1c       	adc	r1, r15
     118:	1f 1e       	adc	r1, r31
     11a:	1f 1e       	adc	r1, r31
     11c:	1f 1f       	adc	r17, r31
     11e:	1e 1f       	adc	r17, r30
     120:	1e 1f       	adc	r17, r30

00000122 <_ZZ5setupE3__c>:
     122:	53 53 44 31 33 30 36 20 61 6c 6c 6f 63 61 74 69     SSD1306 allocati
     132:	6f 6e 20 66 61 69 6c 65 64 00                       on failed.

0000013c <_ZL4font>:
     13c:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     14c:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     15c:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     16c:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     17c:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     18c:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     19c:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     1ac:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     1bc:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     1cc:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     1dc:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1ec:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     1fc:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     20c:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     21c:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     22c:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     23c:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     24c:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     25c:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     26c:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     27c:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     28c:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     29c:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     2ac:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2bc:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2cc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     2dc:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     2ec:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     2fc:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     30c:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     31c:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     32c:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     33c:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     34c:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     35c:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     36c:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     37c:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     38c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     39c:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     3ac:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     3bc:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     3cc:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     3dc:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     3ec:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     3fc:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     40c:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     41c:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     42c:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     43c:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     44c:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     45c:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     46c:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     47c:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     48c:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     49c:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     4ac:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     4bc:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     4cc:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     4dc:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     4ec:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     4fc:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     50c:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     51c:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     52c:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     53c:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     54c:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     55c:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     56c:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     57c:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     58c:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     59c:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     5ac:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     5bc:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     5cc:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     5dc:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     5ec:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     5fc:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     60c:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     61c:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     62c:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

0000063c <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
     63c:	22 00 ff 21 00                                      "..!.

00000641 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE8postmask>:
     641:	00 01 03 07 0f 1f 3f 7f                             ......?.

00000649 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE7premask>:
     649:	00 80 c0 e0 f0 f8 fc fe                             ........

00000651 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
     651:	db 40 a4 a6 2e af                                   .@....

00000657 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
     657:	20 00 a1 c8                                          ...

0000065b <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
     65b:	d3 00 40 8d                                         ..@.

0000065f <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
     65f:	ae d5 80 a8                                         ....

00000663 <_ZL12splash2_data>:
     663:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     673:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     683:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     69f:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     6af:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     6bf:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     6cf:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     6df:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     6ef:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     6ff:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     70f:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     71f:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     72f:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     73f:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     74f:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     75f:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     76f:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     77f:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     78f:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     79f:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     7af:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     7bf:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     7cf:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     7df:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     7f7:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     807:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     817:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     827:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     837:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

00000843 <_ZL12splash1_data>:
     843:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     853:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     863:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     873:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     883:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     893:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     8ab:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     8bb:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     8cb:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     8db:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     8eb:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     8fb:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     90b:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     91b:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
     92b:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
     93b:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
     94b:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
     95b:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
     96b:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
     97b:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
     98b:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
     99b:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
     9ab:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
     9bb:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
     9d3:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
     9eb:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
     9fb:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
     a0b:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
     a1b:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
     a2b:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
     a3b:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
     a4b:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
     a5b:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
     a6b:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
     a7b:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
     a8b:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
     a9b:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
     aab:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
     abb:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
     acb:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
     adb:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
     aeb:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
     afb:	ff fd 6b 5b db 6a fd c0                             ..k[.j..

00000b03 <digital_pin_to_timer_PGM>:
     b03:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     b2f:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000b49 <digital_pin_to_bit_mask_PGM>:
     b49:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     b59:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     b69:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     b79:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     b89:	04 08 10 20 40 80                                   ... @.

00000b8f <digital_pin_to_port_PGM>:
     b8f:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     b9f:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     baf:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     bbf:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     bcf:	0b 0b 0b 0b 0b 0b                                   ......

00000bd5 <port_to_input_PGM>:
     bd5:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     be5:	00 01 00 00 03 01 06 01 09 01                       ..........

00000bef <port_to_output_PGM>:
     bef:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     bff:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000c09 <port_to_mode_PGM>:
     c09:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     c19:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000c24 <__ctors_start>:
     c24:	9b 09       	sbc	r25, r11
     c26:	d3 1e       	adc	r13, r19
     c28:	5a 22       	and	r5, r26

00000c2a <__ctors_end>:
     c2a:	ca 09       	sbc	r28, r10

00000c2c <__dtors_end>:
     c2c:	11 24       	eor	r1, r1
     c2e:	1f be       	out	0x3f, r1	; 63
     c30:	cf ef       	ldi	r28, 0xFF	; 255
     c32:	d1 e2       	ldi	r29, 0x21	; 33
     c34:	de bf       	out	0x3e, r29	; 62
     c36:	cd bf       	out	0x3d, r28	; 61
     c38:	00 e0       	ldi	r16, 0x00	; 0
     c3a:	0c bf       	out	0x3c, r16	; 60

00000c3c <__do_copy_data>:
     c3c:	12 e0       	ldi	r17, 0x02	; 2
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	b2 e0       	ldi	r27, 0x02	; 2
     c42:	e4 e5       	ldi	r30, 0x54	; 84
     c44:	f5 e5       	ldi	r31, 0x55	; 85
     c46:	00 e0       	ldi	r16, 0x00	; 0
     c48:	0b bf       	out	0x3b, r16	; 59
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <__do_copy_data+0x14>
     c4c:	07 90       	elpm	r0, Z+
     c4e:	0d 92       	st	X+, r0
     c50:	ac 3b       	cpi	r26, 0xBC	; 188
     c52:	b1 07       	cpc	r27, r17
     c54:	d9 f7       	brne	.-10     	; 0xc4c <__do_copy_data+0x10>

00000c56 <__do_clear_bss>:
     c56:	24 e0       	ldi	r18, 0x04	; 4
     c58:	ac eb       	ldi	r26, 0xBC	; 188
     c5a:	b2 e0       	ldi	r27, 0x02	; 2
     c5c:	01 c0       	rjmp	.+2      	; 0xc60 <.do_clear_bss_start>

00000c5e <.do_clear_bss_loop>:
     c5e:	1d 92       	st	X+, r1

00000c60 <.do_clear_bss_start>:
     c60:	a0 3b       	cpi	r26, 0xB0	; 176
     c62:	b2 07       	cpc	r27, r18
     c64:	e1 f7       	brne	.-8      	; 0xc5e <.do_clear_bss_loop>

00000c66 <__do_global_ctors>:
     c66:	16 e0       	ldi	r17, 0x06	; 6
     c68:	c5 e1       	ldi	r28, 0x15	; 21
     c6a:	d6 e0       	ldi	r29, 0x06	; 6
     c6c:	00 e0       	ldi	r16, 0x00	; 0
     c6e:	06 c0       	rjmp	.+12     	; 0xc7c <__do_global_ctors+0x16>
     c70:	21 97       	sbiw	r28, 0x01	; 1
     c72:	01 09       	sbc	r16, r1
     c74:	80 2f       	mov	r24, r16
     c76:	fe 01       	movw	r30, r28
     c78:	0e 94 29 28 	call	0x5052	; 0x5052 <__tablejump2__>
     c7c:	c2 31       	cpi	r28, 0x12	; 18
     c7e:	d1 07       	cpc	r29, r17
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	08 07       	cpc	r16, r24
     c84:	a9 f7       	brne	.-22     	; 0xc70 <__do_global_ctors+0xa>
     c86:	0e 94 88 22 	call	0x4510	; 0x4510 <main>
     c8a:	0c 94 99 2a 	jmp	0x5532	; 0x5532 <__do_global_dtors>

00000c8e <__bad_interrupt>:
     c8e:	b8 c9       	rjmp	.-3216   	; 0x0 <__vectors>

00000c90 <_ZN7TwoWire5writeEi>:
    value = readRegister8(DS3231_REG_CONTROL);

    value &= 0b11111011;
    value |= (!enabled << 2);

    writeRegister8(DS3231_REG_CONTROL, value);
     c90:	dc 01       	movw	r26, r24
     c92:	ed 91       	ld	r30, X+
     c94:	fc 91       	ld	r31, X
     c96:	01 90       	ld	r0, Z+
     c98:	f0 81       	ld	r31, Z
     c9a:	e0 2d       	mov	r30, r0
     c9c:	19 94       	eijmp

00000c9e <_ZN6DS32319date2daysEjhh>:
     c9e:	db 01       	movw	r26, r22
     ca0:	a0 5d       	subi	r26, 0xD0	; 208
     ca2:	b7 40       	sbci	r27, 0x07	; 7
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	e6 e1       	ldi	r30, 0x16	; 22
     ca8:	f1 e0       	ldi	r31, 0x01	; 1
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	84 17       	cp	r24, r20
     cae:	30 f4       	brcc	.+12     	; 0xcbc <_ZN6DS32319date2daysEjhh+0x1e>
     cb0:	94 91       	lpm	r25, Z
     cb2:	29 0f       	add	r18, r25
     cb4:	31 1d       	adc	r19, r1
     cb6:	8f 5f       	subi	r24, 0xFF	; 255
     cb8:	31 96       	adiw	r30, 0x01	; 1
     cba:	f8 cf       	rjmp	.-16     	; 0xcac <_ZN6DS32319date2daysEjhh+0xe>
     cbc:	42 30       	cpi	r20, 0x02	; 2
     cbe:	29 f4       	brne	.+10     	; 0xcca <_ZN6DS32319date2daysEjhh+0x2c>
     cc0:	cd 01       	movw	r24, r26
     cc2:	83 70       	andi	r24, 0x03	; 3
     cc4:	99 27       	eor	r25, r25
     cc6:	89 2b       	or	r24, r25
     cc8:	a9 f0       	breq	.+42     	; 0xcf4 <_ZN6DS32319date2daysEjhh+0x56>
     cca:	6d 5c       	subi	r22, 0xCD	; 205
     ccc:	77 40       	sbci	r23, 0x07	; 7
     cce:	76 95       	lsr	r23
     cd0:	67 95       	ror	r22
     cd2:	76 95       	lsr	r23
     cd4:	67 95       	ror	r22
     cd6:	4d e6       	ldi	r20, 0x6D	; 109
     cd8:	51 e0       	ldi	r21, 0x01	; 1
     cda:	a4 9f       	mul	r26, r20
     cdc:	c0 01       	movw	r24, r0
     cde:	a5 9f       	mul	r26, r21
     ce0:	90 0d       	add	r25, r0
     ce2:	b4 9f       	mul	r27, r20
     ce4:	90 0d       	add	r25, r0
     ce6:	11 24       	eor	r1, r1
     ce8:	86 0f       	add	r24, r22
     cea:	97 1f       	adc	r25, r23
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	82 0f       	add	r24, r18
     cf0:	93 1f       	adc	r25, r19
     cf2:	08 95       	ret
     cf4:	2f 5f       	subi	r18, 0xFF	; 255
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	e8 cf       	rjmp	.-48     	; 0xcca <_ZN6DS32319date2daysEjhh+0x2c>

00000cfa <_ZN6DS32318unixtimeEv>:
     cfa:	1f 93       	push	r17
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	fc 01       	movw	r30, r24
     d02:	c6 81       	ldd	r28, Z+6	; 0x06
     d04:	d5 81       	ldd	r29, Z+5	; 0x05
     d06:	14 81       	ldd	r17, Z+4	; 0x04
     d08:	60 81       	ld	r22, Z
     d0a:	71 81       	ldd	r23, Z+1	; 0x01
     d0c:	23 81       	ldd	r18, Z+3	; 0x03
     d0e:	42 81       	ldd	r20, Z+2	; 0x02
     d10:	c6 df       	rcall	.-116    	; 0xc9e <_ZN6DS32319date2daysEjhh>
     d12:	9c 01       	movw	r18, r24
     d14:	a8 e1       	ldi	r26, 0x18	; 24
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	0e 94 31 28 	call	0x5062	; 0x5062 <__umulhisi3>
     d1c:	9b 01       	movw	r18, r22
     d1e:	ac 01       	movw	r20, r24
     d20:	21 0f       	add	r18, r17
     d22:	31 1d       	adc	r19, r1
     d24:	41 1d       	adc	r20, r1
     d26:	51 1d       	adc	r21, r1
     d28:	ac e3       	ldi	r26, 0x3C	; 60
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	0e 94 40 28 	call	0x5080	; 0x5080 <__muluhisi3>
     d30:	9b 01       	movw	r18, r22
     d32:	ac 01       	movw	r20, r24
     d34:	2d 0f       	add	r18, r29
     d36:	31 1d       	adc	r19, r1
     d38:	41 1d       	adc	r20, r1
     d3a:	51 1d       	adc	r21, r1
     d3c:	0e 94 40 28 	call	0x5080	; 0x5080 <__muluhisi3>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	8c 0f       	add	r24, r28
     d46:	91 1d       	adc	r25, r1
     d48:	a1 1d       	adc	r26, r1
     d4a:	b1 1d       	adc	r27, r1
     d4c:	bc 01       	movw	r22, r24
     d4e:	cd 01       	movw	r24, r26
     d50:	60 59       	subi	r22, 0x90	; 144
     d52:	7a 4c       	sbci	r23, 0xCA	; 202
     d54:	82 49       	sbci	r24, 0x92	; 146
     d56:	97 4c       	sbci	r25, 0xC7	; 199
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
     d5c:	1f 91       	pop	r17
     d5e:	08 95       	ret

00000d60 <_ZN6DS323114writeRegister8Ehh>:
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	d6 2f       	mov	r29, r22
     d66:	c4 2f       	mov	r28, r20
     d68:	68 e6       	ldi	r22, 0x68	; 104
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	80 eb       	ldi	r24, 0xB0	; 176
     d6e:	93 e0       	ldi	r25, 0x03	; 3
     d70:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <_ZN7TwoWire17beginTransmissionEi>
     d74:	6d 2f       	mov	r22, r29
     d76:	80 eb       	ldi	r24, 0xB0	; 176
     d78:	93 e0       	ldi	r25, 0x03	; 3
     d7a:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <_ZN7TwoWire5writeEh>
     d7e:	6c 2f       	mov	r22, r28
     d80:	80 eb       	ldi	r24, 0xB0	; 176
     d82:	93 e0       	ldi	r25, 0x03	; 3
     d84:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <_ZN7TwoWire5writeEh>
     d88:	80 eb       	ldi	r24, 0xB0	; 176
     d8a:	93 e0       	ldi	r25, 0x03	; 3
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	0c 94 d1 1e 	jmp	0x3da2	; 0x3da2 <_ZN7TwoWire15endTransmissionEv>

00000d94 <_ZN6DS323111getDateTimeEv>:
     d94:	af 92       	push	r10
     d96:	bf 92       	push	r11
     d98:	cf 92       	push	r12
     d9a:	df 92       	push	r13
     d9c:	ef 92       	push	r14
     d9e:	ff 92       	push	r15
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	2e 97       	sbiw	r28, 0x0e	; 14
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	7c 01       	movw	r14, r24
     dba:	8b 01       	movw	r16, r22
     dbc:	68 e6       	ldi	r22, 0x68	; 104
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	80 eb       	ldi	r24, 0xB0	; 176
     dc2:	93 e0       	ldi	r25, 0x03	; 3
     dc4:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <_ZN7TwoWire17beginTransmissionEi>
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	80 eb       	ldi	r24, 0xB0	; 176
     dce:	93 e0       	ldi	r25, 0x03	; 3
     dd0:	5f df       	rcall	.-322    	; 0xc90 <_ZN7TwoWire5writeEi>
     dd2:	80 eb       	ldi	r24, 0xB0	; 176
     dd4:	93 e0       	ldi	r25, 0x03	; 3
     dd6:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <_ZN7TwoWire15endTransmissionEv>
     dda:	47 e0       	ldi	r20, 0x07	; 7
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	68 e6       	ldi	r22, 0x68	; 104
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	80 eb       	ldi	r24, 0xB0	; 176
     de4:	93 e0       	ldi	r25, 0x03	; 3
     de6:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <_ZN7TwoWire11requestFromEii>
     dea:	80 eb       	ldi	r24, 0xB0	; 176
     dec:	93 e0       	ldi	r25, 0x03	; 3
     dee:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <_ZN7TwoWire9availableEv>
     df2:	89 2b       	or	r24, r25
     df4:	d1 f3       	breq	.-12     	; 0xdea <_ZN6DS323111getDateTimeEv+0x56>
     df6:	5e 01       	movw	r10, r28
     df8:	2f e0       	ldi	r18, 0x0F	; 15
     dfa:	a2 0e       	add	r10, r18
     dfc:	b1 1c       	adc	r11, r1
     dfe:	ce 01       	movw	r24, r28
     e00:	01 96       	adiw	r24, 0x01	; 1
     e02:	6c 01       	movw	r12, r24
     e04:	80 eb       	ldi	r24, 0xB0	; 176
     e06:	93 e0       	ldi	r25, 0x03	; 3
     e08:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <_ZN7TwoWire4readEv>
     e0c:	98 2f       	mov	r25, r24
     e0e:	92 95       	swap	r25
     e10:	9f 70       	andi	r25, 0x0F	; 15
     e12:	8f 70       	andi	r24, 0x0F	; 15
     e14:	ea e0       	ldi	r30, 0x0A	; 10
     e16:	9e 9f       	mul	r25, r30
     e18:	80 0d       	add	r24, r0
     e1a:	11 24       	eor	r1, r1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	f5 01       	movw	r30, r10
     e20:	92 93       	st	-Z, r25
     e22:	82 93       	st	-Z, r24
     e24:	5f 01       	movw	r10, r30
     e26:	ec 15       	cp	r30, r12
     e28:	fd 05       	cpc	r31, r13
     e2a:	61 f7       	brne	.-40     	; 0xe04 <_ZN6DS323111getDateTimeEv+0x70>
     e2c:	80 eb       	ldi	r24, 0xB0	; 176
     e2e:	93 e0       	ldi	r25, 0x03	; 3
     e30:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <_ZN7TwoWire15endTransmissionEv>
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	80 53       	subi	r24, 0x30	; 48
     e3a:	98 4f       	sbci	r25, 0xF8	; 248
     e3c:	f8 01       	movw	r30, r16
     e3e:	91 83       	std	Z+1, r25	; 0x01
     e40:	80 83       	st	Z, r24
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	82 83       	std	Z+2, r24	; 0x02
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	83 83       	std	Z+3, r24	; 0x03
     e4a:	8f 81       	ldd	r24, Y+7	; 0x07
     e4c:	87 83       	std	Z+7, r24	; 0x07
     e4e:	89 85       	ldd	r24, Y+9	; 0x09
     e50:	84 83       	std	Z+4, r24	; 0x04
     e52:	8b 85       	ldd	r24, Y+11	; 0x0b
     e54:	85 83       	std	Z+5, r24	; 0x05
     e56:	8d 85       	ldd	r24, Y+13	; 0x0d
     e58:	86 83       	std	Z+6, r24	; 0x06
     e5a:	c8 01       	movw	r24, r16
     e5c:	4e df       	rcall	.-356    	; 0xcfa <_ZN6DS32318unixtimeEv>
     e5e:	f8 01       	movw	r30, r16
     e60:	60 87       	std	Z+8, r22	; 0x08
     e62:	71 87       	std	Z+9, r23	; 0x09
     e64:	82 87       	std	Z+10, r24	; 0x0a
     e66:	93 87       	std	Z+11, r25	; 0x0b
     e68:	8c e0       	ldi	r24, 0x0C	; 12
     e6a:	d7 01       	movw	r26, r14
     e6c:	01 90       	ld	r0, Z+
     e6e:	0d 92       	st	X+, r0
     e70:	8a 95       	dec	r24
     e72:	e1 f7       	brne	.-8      	; 0xe6c <_ZN6DS323111getDateTimeEv+0xd8>
     e74:	c7 01       	movw	r24, r14
     e76:	2e 96       	adiw	r28, 0x0e	; 14
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	df 90       	pop	r13
     e90:	cf 90       	pop	r12
     e92:	bf 90       	pop	r11
     e94:	af 90       	pop	r10
     e96:	08 95       	ret

00000e98 <_ZN6DS323113readRegister8Eh>:
     e98:	cf 93       	push	r28
     e9a:	c6 2f       	mov	r28, r22
     e9c:	68 e6       	ldi	r22, 0x68	; 104
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	80 eb       	ldi	r24, 0xB0	; 176
     ea2:	93 e0       	ldi	r25, 0x03	; 3
     ea4:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <_ZN7TwoWire17beginTransmissionEi>
     ea8:	6c 2f       	mov	r22, r28
     eaa:	80 eb       	ldi	r24, 0xB0	; 176
     eac:	93 e0       	ldi	r25, 0x03	; 3
     eae:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <_ZN7TwoWire5writeEh>
     eb2:	80 eb       	ldi	r24, 0xB0	; 176
     eb4:	93 e0       	ldi	r25, 0x03	; 3
     eb6:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <_ZN7TwoWire15endTransmissionEv>
     eba:	41 e0       	ldi	r20, 0x01	; 1
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	68 e6       	ldi	r22, 0x68	; 104
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	80 eb       	ldi	r24, 0xB0	; 176
     ec4:	93 e0       	ldi	r25, 0x03	; 3
     ec6:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <_ZN7TwoWire11requestFromEii>
     eca:	80 eb       	ldi	r24, 0xB0	; 176
     ecc:	93 e0       	ldi	r25, 0x03	; 3
     ece:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <_ZN7TwoWire9availableEv>
     ed2:	89 2b       	or	r24, r25
     ed4:	d1 f3       	breq	.-12     	; 0xeca <_ZN6DS323113readRegister8Eh+0x32>
     ed6:	80 eb       	ldi	r24, 0xB0	; 176
     ed8:	93 e0       	ldi	r25, 0x03	; 3
     eda:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <_ZN7TwoWire4readEv>
     ede:	c8 2f       	mov	r28, r24
     ee0:	80 eb       	ldi	r24, 0xB0	; 176
     ee2:	93 e0       	ldi	r25, 0x03	; 3
     ee4:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <_ZN7TwoWire15endTransmissionEv>
     ee8:	8c 2f       	mov	r24, r28
     eea:	cf 91       	pop	r28
     eec:	08 95       	ret

00000eee <_ZN6DS323110setBatteryEbb>:
}

void DS3231::setBattery(bool timeBattery, bool squareBattery)
{
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	ec 01       	movw	r28, r24
     ef8:	16 2f       	mov	r17, r22
     efa:	04 2f       	mov	r16, r20
    uint8_t value;

    value = readRegister8(DS3231_REG_CONTROL);
     efc:	6e e0       	ldi	r22, 0x0E	; 14
     efe:	cc df       	rcall	.-104    	; 0xe98 <_ZN6DS323113readRegister8Eh>

    if (squareBattery)
     f00:	00 23       	and	r16, r16
     f02:	11 f0       	breq	.+4      	; 0xf08 <_ZN6DS323110setBatteryEbb+0x1a>
    {
        value |= 0b01000000;
     f04:	80 64       	ori	r24, 0x40	; 64
     f06:	01 c0       	rjmp	.+2      	; 0xf0a <_ZN6DS323110setBatteryEbb+0x1c>
    } else
    {
        value &= 0b10111111;
     f08:	8f 7b       	andi	r24, 0xBF	; 191
    }

    if (timeBattery)
    {
        value &= 0b01111011;
     f0a:	48 2f       	mov	r20, r24
    } else
    {
        value &= 0b10111111;
    }

    if (timeBattery)
     f0c:	11 23       	and	r17, r17
     f0e:	11 f0       	breq	.+4      	; 0xf14 <_ZN6DS323110setBatteryEbb+0x26>
    {
        value &= 0b01111011;
     f10:	4b 77       	andi	r20, 0x7B	; 123
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <_ZN6DS323110setBatteryEbb+0x28>
    } else
    {
        value |= 0b10000000;
     f14:	40 68       	ori	r20, 0x80	; 128
    }

    writeRegister8(DS3231_REG_CONTROL, value);
     f16:	6e e0       	ldi	r22, 0x0E	; 14
     f18:	ce 01       	movw	r24, r28
}
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
    } else
    {
        value |= 0b10000000;
    }

    writeRegister8(DS3231_REG_CONTROL, value);
     f20:	0f 91       	pop	r16
     f22:	1e cf       	rjmp	.-452    	; 0xd60 <_ZN6DS323114writeRegister8Ehh>

00000f24 <_ZN6DS32315beginEv>:

const uint8_t daysArray [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };
const uint8_t dowArray[] PROGMEM = { 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 };

bool DS3231::begin(void)
{
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	ec 01       	movw	r28, r24
    Wire.begin();
     f2a:	80 eb       	ldi	r24, 0xB0	; 176
     f2c:	93 e0       	ldi	r25, 0x03	; 3
     f2e:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <_ZN7TwoWire5beginEv>

    setBattery(true, false);
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	ce 01       	movw	r24, r28
     f38:	da df       	rcall	.-76     	; 0xeee <_ZN6DS323110setBatteryEbb>

    t.year = 2000;
     f3a:	80 ed       	ldi	r24, 0xD0	; 208
     f3c:	97 e0       	ldi	r25, 0x07	; 7
     f3e:	99 83       	std	Y+1, r25	; 0x01
     f40:	88 83       	st	Y, r24
    t.month = 1;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	8a 83       	std	Y+2, r24	; 0x02
    t.day = 1;
     f46:	8b 83       	std	Y+3, r24	; 0x03
    t.hour = 0;
     f48:	1c 82       	std	Y+4, r1	; 0x04
    t.minute = 0;
     f4a:	1d 82       	std	Y+5, r1	; 0x05
    t.second = 0;
     f4c:	1e 82       	std	Y+6, r1	; 0x06
    t.dayOfWeek = 6;
     f4e:	86 e0       	ldi	r24, 0x06	; 6
     f50:	8f 83       	std	Y+7, r24	; 0x07
    t.unixtime = 946681200;
     f52:	80 e7       	ldi	r24, 0x70	; 112
     f54:	95 e3       	ldi	r25, 0x35	; 53
     f56:	ad e6       	ldi	r26, 0x6D	; 109
     f58:	b8 e3       	ldi	r27, 0x38	; 56
     f5a:	88 87       	std	Y+8, r24	; 0x08
     f5c:	99 87       	std	Y+9, r25	; 0x09
     f5e:	aa 87       	std	Y+10, r26	; 0x0a
     f60:	bb 87       	std	Y+11, r27	; 0x0b

    return true;
}
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	08 95       	ret

00000f6a <_Z11buttonSwichv>:
	return dsTime;
}

void buttonSwich()
{
	previousMillis10 = millis();
     f6a:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <millis>
     f6e:	60 93 bc 02 	sts	0x02BC, r22	; 0x8002bc <__data_end>
     f72:	70 93 bd 02 	sts	0x02BD, r23	; 0x8002bd <__data_end+0x1>
     f76:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <__data_end+0x2>
     f7a:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <__data_end+0x3>
	showTime = true;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <showTime>
	Serial.println("Button pressed");
     f84:	68 e1       	ldi	r22, 0x18	; 24
     f86:	72 e0       	ldi	r23, 0x02	; 2
     f88:	86 e0       	ldi	r24, 0x06	; 6
     f8a:	94 e0       	ldi	r25, 0x04	; 4
     f8c:	0c 94 28 23 	jmp	0x4650	; 0x4650 <_ZN5Print7printlnEPKc>

00000f90 <_ZN8SPIClass8transferEh>:
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     f90:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     f92:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
     f94:	0d b4       	in	r0, 0x2d	; 45
     f96:	07 fe       	sbrs	r0, 7
     f98:	fd cf       	rjmp	.-6      	; 0xf94 <_ZN8SPIClass8transferEh+0x4>
    return SPDR;
     f9a:	8e b5       	in	r24, 0x2e	; 46
  }
     f9c:	08 95       	ret

00000f9e <setup>:
// funktion prodotyping
String printTime(void);
void buttonSwich(void);

void setup (void)
{
     f9e:	0f 93       	push	r16
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     fa0:	26 e0       	ldi	r18, 0x06	; 6
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	52 ec       	ldi	r21, 0xC2	; 194
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	86 e0       	ldi	r24, 0x06	; 6
     fac:	94 e0       	ldi	r25, 0x04	; 4
     fae:	0e 94 8f 21 	call	0x431e	; 0x431e <_ZN14HardwareSerial5beginEmh>

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
     fb2:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <_ZN8SPIClass13interruptModeE>
     fb6:	88 23       	and	r24, r24
     fb8:	99 f0       	breq	.+38     	; 0xfe0 <setup+0x42>
      uint8_t sreg = SREG;
     fba:	2f b7       	in	r18, 0x3f	; 63
      noInterrupts();
     fbc:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
     fbe:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <_ZN8SPIClass13interruptModeE>
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	59 f4       	brne	.+22     	; 0xfdc <setup+0x3e>
        interruptSave = SPI_AVR_EIMSK;
     fc6:	8d b3       	in	r24, 0x1d	; 29
     fc8:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
     fcc:	9d b3       	in	r25, 0x1d	; 29
     fce:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <_ZN8SPIClass13interruptMaskE>
     fd2:	80 95       	com	r24
     fd4:	89 23       	and	r24, r25
     fd6:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
     fd8:	2f bf       	out	0x3f, r18	; 63
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <setup+0x42>
      } else
      #endif
      {
        interruptSave = sreg;
     fdc:	20 93 38 03 	sts	0x0338, r18	; 0x800338 <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
     fe0:	80 e5       	ldi	r24, 0x50	; 80
     fe2:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
     fe4:	1d bc       	out	0x2d, r1	; 45
	Serial.begin(115200);												//set baud rate to 115200 for usart
	SPI.beginTransaction(SPISettings(4000000, MSBFIRST, SPI_MODE0));	// Set configuration for SPI
	SPI.begin();
     fe6:	0e 94 78 19 	call	0x32f0	; 0x32f0 <_ZN8SPIClass5beginEv>
	
	clock.begin();														// Initializes the SPI bus by setting SCK, MOSI, and SS to outputs, pulling SCK and MOSI low, and SS high.
     fea:	8c ee       	ldi	r24, 0xEC	; 236
     fec:	92 e0       	ldi	r25, 0x02	; 2
     fee:	9a df       	rcall	.-204    	; 0xf24 <_ZN6DS32315beginEv>
	
	if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C))
     ff0:	01 e0       	ldi	r16, 0x01	; 1
     ff2:	21 e0       	ldi	r18, 0x01	; 1
     ff4:	4c e3       	ldi	r20, 0x3C	; 60
     ff6:	62 e0       	ldi	r22, 0x02	; 2
     ff8:	88 ef       	ldi	r24, 0xF8	; 248
     ffa:	92 e0       	ldi	r25, 0x02	; 2
     ffc:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <_ZN16Adafruit_SSD13065beginEhhbb>
    1000:	81 11       	cpse	r24, r1
    1002:	07 c0       	rjmp	.+14     	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
	{ // Address for 128x64
		Serial.println(F("SSD1306 allocation failed"));
    1004:	62 e2       	ldi	r22, 0x22	; 34
    1006:	71 e0       	ldi	r23, 0x01	; 1
    1008:	86 e0       	ldi	r24, 0x06	; 6
    100a:	94 e0       	ldi	r25, 0x04	; 4
    100c:	0e 94 08 23 	call	0x4610	; 0x4610 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1010:	ff cf       	rjmp	.-2      	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
		for(;;); // Don't proceed, loop forever
	}
	
	// DHT11
	dht.begin();
    1012:	67 e3       	ldi	r22, 0x37	; 55
    1014:	8c ec       	ldi	r24, 0xCC	; 204
    1016:	92 e0       	ldi	r25, 0x02	; 2
    1018:	0e 94 5d 17 	call	0x2eba	; 0x2eba <_ZN3DHT5beginEh>
	
	// interrupt for button
	pinMode(3, INPUT_PULLUP);
    101c:	62 e0       	ldi	r22, 0x02	; 2
    101e:	83 e0       	ldi	r24, 0x03	; 3
    1020:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <pinMode>
	attachInterrupt(digitalPinToInterrupt(3), buttonSwich, CHANGE);
    1024:	41 e0       	ldi	r20, 0x01	; 1
    1026:	50 e0       	ldi	r21, 0x00	; 0
    1028:	65 eb       	ldi	r22, 0xB5	; 181
    102a:	77 e0       	ldi	r23, 0x07	; 7
    102c:	81 e0       	ldi	r24, 0x01	; 1
}
    102e:	0f 91       	pop	r16
	// DHT11
	dht.begin();
	
	// interrupt for button
	pinMode(3, INPUT_PULLUP);
	attachInterrupt(digitalPinToInterrupt(3), buttonSwich, CHANGE);
    1030:	0c 94 39 23 	jmp	0x4672	; 0x4672 <attachInterrupt>

00001034 <_Z9printTimev>:
	
	display.display();
}

String printTime()
{
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	2c 97       	sbiw	r28, 0x0c	; 12
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	8c 01       	movw	r16, r24
	if (millis() - previousMillis1 >= (delay2Sec/2))
    1056:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <millis>
    105a:	c0 90 c4 02 	lds	r12, 0x02C4	; 0x8002c4 <previousMillis1>
    105e:	d0 90 c5 02 	lds	r13, 0x02C5	; 0x8002c5 <previousMillis1+0x1>
    1062:	e0 90 c6 02 	lds	r14, 0x02C6	; 0x8002c6 <previousMillis1+0x2>
    1066:	f0 90 c7 02 	lds	r15, 0x02C7	; 0x8002c7 <previousMillis1+0x3>
    106a:	ab 01       	movw	r20, r22
    106c:	bc 01       	movw	r22, r24
    106e:	4c 19       	sub	r20, r12
    1070:	5d 09       	sbc	r21, r13
    1072:	6e 09       	sbc	r22, r14
    1074:	7f 09       	sbc	r23, r15
    1076:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <delay2Sec>
    107a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <delay2Sec+0x1>
    107e:	97 fd       	sbrc	r25, 7
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	95 95       	asr	r25
    1084:	87 95       	ror	r24
    1086:	09 2e       	mov	r0, r25
    1088:	00 0c       	add	r0, r0
    108a:	aa 0b       	sbc	r26, r26
    108c:	bb 0b       	sbc	r27, r27
    108e:	48 17       	cp	r20, r24
    1090:	59 07       	cpc	r21, r25
    1092:	6a 07       	cpc	r22, r26
    1094:	7b 07       	cpc	r23, r27
    1096:	c0 f0       	brcs	.+48     	; 0x10c8 <_Z9printTimev+0x94>
	{
		previousMillis1 = millis();
    1098:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <millis>
    109c:	60 93 c4 02 	sts	0x02C4, r22	; 0x8002c4 <previousMillis1>
    10a0:	70 93 c5 02 	sts	0x02C5, r23	; 0x8002c5 <previousMillis1+0x1>
    10a4:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <previousMillis1+0x2>
    10a8:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <previousMillis1+0x3>
		dt = clock.getDateTime();
    10ac:	6c ee       	ldi	r22, 0xEC	; 236
    10ae:	72 e0       	ldi	r23, 0x02	; 2
    10b0:	ce 01       	movw	r24, r28
    10b2:	01 96       	adiw	r24, 0x01	; 1
    10b4:	6f de       	rcall	.-802    	; 0xd94 <_ZN6DS323111getDateTimeEv>
    10b6:	8c e0       	ldi	r24, 0x0C	; 12
    10b8:	fe 01       	movw	r30, r28
    10ba:	31 96       	adiw	r30, 0x01	; 1
    10bc:	a0 ee       	ldi	r26, 0xE0	; 224
    10be:	b2 e0       	ldi	r27, 0x02	; 2
    10c0:	01 90       	ld	r0, Z+
    10c2:	0d 92       	st	X+, r0
    10c4:	8a 95       	dec	r24
    10c6:	e1 f7       	brne	.-8      	; 0x10c0 <_Z9printTimev+0x8c>
	}
	if (millis() - previousMillis10 >= (delay2Sec*5))
    10c8:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <millis>
    10cc:	c0 90 bc 02 	lds	r12, 0x02BC	; 0x8002bc <__data_end>
    10d0:	d0 90 bd 02 	lds	r13, 0x02BD	; 0x8002bd <__data_end+0x1>
    10d4:	e0 90 be 02 	lds	r14, 0x02BE	; 0x8002be <__data_end+0x2>
    10d8:	f0 90 bf 02 	lds	r15, 0x02BF	; 0x8002bf <__data_end+0x3>
    10dc:	ab 01       	movw	r20, r22
    10de:	bc 01       	movw	r22, r24
    10e0:	4c 19       	sub	r20, r12
    10e2:	5d 09       	sbc	r21, r13
    10e4:	6e 09       	sbc	r22, r14
    10e6:	7f 09       	sbc	r23, r15
    10e8:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <delay2Sec>
    10ec:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <delay2Sec+0x1>
    10f0:	e5 e0       	ldi	r30, 0x05	; 5
    10f2:	e2 9f       	mul	r30, r18
    10f4:	c0 01       	movw	r24, r0
    10f6:	e3 9f       	mul	r30, r19
    10f8:	90 0d       	add	r25, r0
    10fa:	11 24       	eor	r1, r1
    10fc:	09 2e       	mov	r0, r25
    10fe:	00 0c       	add	r0, r0
    1100:	aa 0b       	sbc	r26, r26
    1102:	bb 0b       	sbc	r27, r27
    1104:	48 17       	cp	r20, r24
    1106:	59 07       	cpc	r21, r25
    1108:	6a 07       	cpc	r22, r26
    110a:	7b 07       	cpc	r23, r27
    110c:	10 f0       	brcs	.+4      	; 0x1112 <_Z9printTimev+0xde>
	{
		showTime = false;
    110e:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <showTime>
	}
	
	String dsTime = "";			// dsTime = Display Show Time
    1112:	6e ea       	ldi	r22, 0xAE	; 174
    1114:	72 e0       	ldi	r23, 0x02	; 2
    1116:	c8 01       	movw	r24, r16
    1118:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <_ZN6StringC1EPKc>
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
    111c:	60 91 e4 02 	lds	r22, 0x02E4	; 0x8002e4 <dt+0x4>
    1120:	c8 01       	movw	r24, r16
    1122:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <_ZN6String6concatEh>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    1126:	67 e2       	ldi	r22, 0x27	; 39
    1128:	72 e0       	ldi	r23, 0x02	; 2
    112a:	c8 01       	movw	r24, r16
    112c:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <_ZN6String6concatEPKc>
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
    1130:	60 91 e5 02 	lds	r22, 0x02E5	; 0x8002e5 <dt+0x5>
    1134:	c8 01       	movw	r24, r16
    1136:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <_ZN6String6concatEh>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    113a:	67 e2       	ldi	r22, 0x27	; 39
    113c:	72 e0       	ldi	r23, 0x02	; 2
    113e:	c8 01       	movw	r24, r16
    1140:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <_ZN6String6concatEPKc>
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
    1144:	60 91 e6 02 	lds	r22, 0x02E6	; 0x8002e6 <dt+0x6>
    1148:	c8 01       	movw	r24, r16
    114a:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <_ZN6String6concatEh>
	dsTime += dt.minute;
	dsTime += ":";
	dsTime += dt.second;
	
	return dsTime;
}
    114e:	c8 01       	movw	r24, r16
    1150:	2c 96       	adiw	r28, 0x0c	; 12
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	cd bf       	out	0x3d, r28	; 61
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	df 90       	pop	r13
    116a:	cf 90       	pop	r12
    116c:	08 95       	ret

0000116e <loop>:
	pinMode(3, INPUT_PULLUP);
	attachInterrupt(digitalPinToInterrupt(3), buttonSwich, CHANGE);
}

void loop (void)
{
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	00 d0       	rcall	.+0      	; 0x1178 <loop+0xa>
    1178:	00 d0       	rcall	.+0      	; 0x117a <loop+0xc>
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
	display.clearDisplay();
    117e:	88 ef       	ldi	r24, 0xF8	; 248
    1180:	92 e0       	ldi	r25, 0x02	; 2
    1182:	0e 94 cd 12 	call	0x259a	; 0x259a <_ZN16Adafruit_SSD130612clearDisplayEv>
	
	display.setTextSize(2);			// Normal 1:1 pixel scale
    1186:	62 e0       	ldi	r22, 0x02	; 2
    1188:	88 ef       	ldi	r24, 0xF8	; 248
    118a:	92 e0       	ldi	r25, 0x02	; 2
    118c:	a2 d7       	rcall	.+3908   	; 0x20d2 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <display+0x13>
    1196:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <display+0x12>
    119a:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <display+0x11>
    119e:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <display+0x10>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    11a2:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <display+0xd>
    11a6:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <display+0xc>
    cursor_y = y;
    11aa:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <display+0xf>
    11ae:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <display+0xe>
	display.setTextColor(WHITE);	// Draw white text
	display.setCursor(0,0);			// Start at top-left corner
	if (showTime)
    11b2:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <showTime>
    11b6:	88 23       	and	r24, r24
    11b8:	21 f0       	breq	.+8      	; 0x11c2 <loop+0x54>
	{
		display.println(printTime());
    11ba:	ce 01       	movw	r24, r28
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	3a df       	rcall	.-396    	; 0x1034 <_Z9printTimev>
    11c0:	a0 c0       	rjmp	.+320    	; 0x1302 <loop+0x194>
	}
	else
	{
		if (millis() - previousMillis2 >= delay2Sec)
    11c2:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <millis>
    11c6:	00 91 c0 02 	lds	r16, 0x02C0	; 0x8002c0 <previousMillis2>
    11ca:	10 91 c1 02 	lds	r17, 0x02C1	; 0x8002c1 <previousMillis2+0x1>
    11ce:	20 91 c2 02 	lds	r18, 0x02C2	; 0x8002c2 <previousMillis2+0x2>
    11d2:	30 91 c3 02 	lds	r19, 0x02C3	; 0x8002c3 <previousMillis2+0x3>
    11d6:	ab 01       	movw	r20, r22
    11d8:	bc 01       	movw	r22, r24
    11da:	40 1b       	sub	r20, r16
    11dc:	51 0b       	sbc	r21, r17
    11de:	62 0b       	sbc	r22, r18
    11e0:	73 0b       	sbc	r23, r19
    11e2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <delay2Sec>
    11e6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <delay2Sec+0x1>
    11ea:	09 2e       	mov	r0, r25
    11ec:	00 0c       	add	r0, r0
    11ee:	aa 0b       	sbc	r26, r26
    11f0:	bb 0b       	sbc	r27, r27
    11f2:	48 17       	cp	r20, r24
    11f4:	59 07       	cpc	r21, r25
    11f6:	6a 07       	cpc	r22, r26
    11f8:	7b 07       	cpc	r23, r27
    11fa:	08 f4       	brcc	.+2      	; 0x11fe <loop+0x90>
    11fc:	6f c0       	rjmp	.+222    	; 0x12dc <loop+0x16e>
		{
			previousMillis2 = millis();
    11fe:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <millis>
    1202:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <previousMillis2>
    1206:	70 93 c1 02 	sts	0x02C1, r23	; 0x8002c1 <previousMillis2+0x1>
    120a:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <previousMillis2+0x2>
    120e:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <previousMillis2+0x3>
			
			h = round(dht.readHumidity());
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	8c ec       	ldi	r24, 0xCC	; 204
    1216:	92 e0       	ldi	r25, 0x02	; 2
    1218:	0e 94 36 19 	call	0x326c	; 0x326c <_ZN3DHT12readHumidityEb>
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	a9 01       	movw	r20, r18
    1222:	0e 94 1e 20 	call	0x403c	; 0x403c <__gesf2>
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	87 fd       	sbrc	r24, 7
    122a:	0b c0       	rjmp	.+22     	; 0x1242 <loop+0xd4>
    122c:	8c ec       	ldi	r24, 0xCC	; 204
    122e:	92 e0       	ldi	r25, 0x02	; 2
    1230:	0e 94 36 19 	call	0x326c	; 0x326c <_ZN3DHT12readHumidityEb>
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e0       	ldi	r20, 0x00	; 0
    123a:	5f e3       	ldi	r21, 0x3F	; 63
    123c:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <__addsf3>
    1240:	0a c0       	rjmp	.+20     	; 0x1256 <loop+0xe8>
    1242:	8c ec       	ldi	r24, 0xCC	; 204
    1244:	92 e0       	ldi	r25, 0x02	; 2
    1246:	0e 94 36 19 	call	0x326c	; 0x326c <_ZN3DHT12readHumidityEb>
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	5f e3       	ldi	r21, 0x3F	; 63
    1252:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__subsf3>
    1256:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <__fixsfsi>
    125a:	70 93 cb 02 	sts	0x02CB, r23	; 0x8002cb <h+0x1>
    125e:	60 93 ca 02 	sts	0x02CA, r22	; 0x8002ca <h>
			t = round(dht.readTemperature());
    1262:	40 e0       	ldi	r20, 0x00	; 0
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	8c ec       	ldi	r24, 0xCC	; 204
    1268:	92 e0       	ldi	r25, 0x02	; 2
    126a:	0e 94 af 18 	call	0x315e	; 0x315e <_ZN3DHT15readTemperatureEbb>
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	a9 01       	movw	r20, r18
    1274:	0e 94 1e 20 	call	0x403c	; 0x403c <__gesf2>
    1278:	40 e0       	ldi	r20, 0x00	; 0
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	87 fd       	sbrc	r24, 7
    127e:	0b c0       	rjmp	.+22     	; 0x1296 <loop+0x128>
    1280:	8c ec       	ldi	r24, 0xCC	; 204
    1282:	92 e0       	ldi	r25, 0x02	; 2
    1284:	0e 94 af 18 	call	0x315e	; 0x315e <_ZN3DHT15readTemperatureEbb>
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e0       	ldi	r20, 0x00	; 0
    128e:	5f e3       	ldi	r21, 0x3F	; 63
    1290:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <__addsf3>
    1294:	0a c0       	rjmp	.+20     	; 0x12aa <loop+0x13c>
    1296:	8c ec       	ldi	r24, 0xCC	; 204
    1298:	92 e0       	ldi	r25, 0x02	; 2
    129a:	0e 94 af 18 	call	0x315e	; 0x315e <_ZN3DHT15readTemperatureEbb>
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	40 e0       	ldi	r20, 0x00	; 0
    12a4:	5f e3       	ldi	r21, 0x3F	; 63
    12a6:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__subsf3>
    12aa:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <__fixsfsi>
    12ae:	16 2f       	mov	r17, r22
    12b0:	60 93 c8 02 	sts	0x02C8, r22	; 0x8002c8 <t>
    12b4:	70 93 c9 02 	sts	0x02C9, r23	; 0x8002c9 <t+0x1>
			
			
			byte data[] = {h+50, t+50, 255};
    12b8:	00 91 ca 02 	lds	r16, 0x02CA	; 0x8002ca <h>
    12bc:	0e 5c       	subi	r16, 0xCE	; 206
			
			digitalWrite(SS, LOW);				// enable Slave Select
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	85 e3       	ldi	r24, 0x35	; 53
    12c2:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <digitalWrite>
			
			SPI.transfer(data[0]);
    12c6:	80 2f       	mov	r24, r16
			SPI.transfer(data[1]);
    12c8:	63 de       	rcall	.-826    	; 0xf90 <_ZN8SPIClass8transferEh>
    12ca:	82 e3       	ldi	r24, 0x32	; 50
    12cc:	81 0f       	add	r24, r17
			SPI.transfer(data[2]);
    12ce:	60 de       	rcall	.-832    	; 0xf90 <_ZN8SPIClass8transferEh>
    12d0:	8f ef       	ldi	r24, 0xFF	; 255
    12d2:	5e de       	rcall	.-836    	; 0xf90 <_ZN8SPIClass8transferEh>
			
			digitalWrite(SS, HIGH);				// disable Slave Select
    12d4:	61 e0       	ldi	r22, 0x01	; 1
    12d6:	85 e3       	ldi	r24, 0x35	; 53
    12d8:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <digitalWrite>
		}
		
		String dstr = "Temp: ";					//dstr = Display show temperature rounded
    12dc:	69 e2       	ldi	r22, 0x29	; 41
    12de:	72 e0       	ldi	r23, 0x02	; 2
    12e0:	ce 01       	movw	r24, r28
    12e2:	01 96       	adiw	r24, 0x01	; 1
    12e4:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <_ZN6StringC1EPKc>
	String & operator += (int num)			{concat(num); return (*this);}
    12e8:	60 91 c8 02 	lds	r22, 0x02C8	; 0x8002c8 <t>
    12ec:	70 91 c9 02 	lds	r23, 0x02C9	; 0x8002c9 <t+0x1>
    12f0:	ce 01       	movw	r24, r28
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <_ZN6String6concatEi>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    12f8:	67 ef       	ldi	r22, 0xF7	; 247
    12fa:	ce 01       	movw	r24, r28
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <_ZN6String6concatEc>
		dstr += t;
		dstr += (char)247;
		
		display.println(dstr);
    1302:	be 01       	movw	r22, r28
    1304:	6f 5f       	subi	r22, 0xFF	; 255
    1306:	7f 4f       	sbci	r23, 0xFF	; 255
    1308:	88 ef       	ldi	r24, 0xF8	; 248
    130a:	92 e0       	ldi	r25, 0x02	; 2
    130c:	0e 94 18 23 	call	0x4630	; 0x4630 <_ZN5Print7printlnERK6String>
			SPI.transfer(data[2]);
			
			digitalWrite(SS, HIGH);				// disable Slave Select
		}
		
		String dstr = "Temp: ";					//dstr = Display show temperature rounded
    1310:	ce 01       	movw	r24, r28
    1312:	01 96       	adiw	r24, 0x01	; 1
    1314:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <_ZN6StringD1Ev>
		dstr += (char)247;
		
		display.println(dstr);
	}
	
	display.display();
    1318:	88 ef       	ldi	r24, 0xF8	; 248
    131a:	92 e0       	ldi	r25, 0x02	; 2
    131c:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <_ZN16Adafruit_SSD13067displayEv>
}
    1320:	26 96       	adiw	r28, 0x06	; 6
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	08 95       	ret

00001336 <_GLOBAL__sub_I_display>:
void buttonSwich()
{
	previousMillis10 = millis();
	showTime = true;
	Serial.println("Button pressed");
    1336:	8f 92       	push	r8
    1338:	9f 92       	push	r9
    133a:	af 92       	push	r10
    133c:	bf 92       	push	r11
    133e:	cf 92       	push	r12
    1340:	df 92       	push	r13
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET 4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    1348:	80 ea       	ldi	r24, 0xA0	; 160
    134a:	88 2e       	mov	r8, r24
    134c:	86 e8       	ldi	r24, 0x86	; 134
    134e:	98 2e       	mov	r9, r24
    1350:	aa 24       	eor	r10, r10
    1352:	a3 94       	inc	r10
    1354:	b1 2c       	mov	r11, r1
    1356:	90 e8       	ldi	r25, 0x80	; 128
    1358:	c9 2e       	mov	r12, r25
    135a:	9a e1       	ldi	r25, 0x1A	; 26
    135c:	d9 2e       	mov	r13, r25
    135e:	96 e0       	ldi	r25, 0x06	; 6
    1360:	e9 2e       	mov	r14, r25
    1362:	f1 2c       	mov	r15, r1
    1364:	04 e0       	ldi	r16, 0x04	; 4
    1366:	20 eb       	ldi	r18, 0xB0	; 176
    1368:	33 e0       	ldi	r19, 0x03	; 3
    136a:	40 e4       	ldi	r20, 0x40	; 64
    136c:	60 e8       	ldi	r22, 0x80	; 128
    136e:	88 ef       	ldi	r24, 0xF8	; 248
    1370:	92 e0       	ldi	r25, 0x02	; 2
    1372:	6e d7       	rcall	.+3804   	; 0x2250 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>

// DHT11
#define DHTPIN 2
#define DHTTYPE DHT11

DHT dht(DHTPIN, DHTTYPE);
    1374:	26 e0       	ldi	r18, 0x06	; 6
    1376:	4b e0       	ldi	r20, 0x0B	; 11
    1378:	62 e0       	ldi	r22, 0x02	; 2
    137a:	8c ec       	ldi	r24, 0xCC	; 204
    137c:	92 e0       	ldi	r25, 0x02	; 2
void buttonSwich()
{
	previousMillis10 = millis();
	showTime = true;
	Serial.println("Button pressed");
    137e:	0f 91       	pop	r16
    1380:	ff 90       	pop	r15
    1382:	ef 90       	pop	r14
    1384:	df 90       	pop	r13
    1386:	cf 90       	pop	r12
    1388:	bf 90       	pop	r11
    138a:	af 90       	pop	r10
    138c:	9f 90       	pop	r9
    138e:	8f 90       	pop	r8

// DHT11
#define DHTPIN 2
#define DHTTYPE DHT11

DHT dht(DHTPIN, DHTTYPE);
    1390:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <_ZN3DHTC1Ehhh>

00001394 <_GLOBAL__sub_D_display>:
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET 4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    1394:	88 ef       	ldi	r24, 0xF8	; 248
    1396:	92 e0       	ldi	r25, 0x02	; 2
    1398:	a5 c7       	rjmp	.+3914   	; 0x22e4 <_ZN16Adafruit_SSD1306D1Ev>

0000139a <_ZN8SPIClass16beginTransactionE11SPISettings>:

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    139a:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <_ZN8SPIClass13interruptModeE>
    139e:	22 23       	and	r18, r18
    13a0:	99 f0       	breq	.+38     	; 0x13c8 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      uint8_t sreg = SREG;
    13a2:	4f b7       	in	r20, 0x3f	; 63
      noInterrupts();
    13a4:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    13a6:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <_ZN8SPIClass13interruptModeE>
    13aa:	21 30       	cpi	r18, 0x01	; 1
    13ac:	59 f4       	brne	.+22     	; 0x13c4 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
        interruptSave = SPI_AVR_EIMSK;
    13ae:	2d b3       	in	r18, 0x1d	; 29
    13b0:	20 93 38 03 	sts	0x0338, r18	; 0x800338 <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    13b4:	3d b3       	in	r19, 0x1d	; 29
    13b6:	20 91 39 03 	lds	r18, 0x0339	; 0x800339 <_ZN8SPIClass13interruptMaskE>
    13ba:	20 95       	com	r18
    13bc:	23 23       	and	r18, r19
    13be:	2d bb       	out	0x1d, r18	; 29
        SREG = sreg;
    13c0:	4f bf       	out	0x3f, r20	; 63
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      } else
      #endif
      {
        interruptSave = sreg;
    13c4:	40 93 38 03 	sts	0x0338, r20	; 0x800338 <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    13c8:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
    13ca:	9d bd       	out	0x2d, r25	; 45
    13cc:	08 95       	ret

000013ce <_ZN8SPIClass14endTransactionEv>:
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    13ce:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <_ZN8SPIClass13interruptModeE>
    13d2:	88 23       	and	r24, r24
    13d4:	61 f0       	breq	.+24     	; 0x13ee <_ZN8SPIClass14endTransactionEv+0x20>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    13d6:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    13d8:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    13da:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <_ZN8SPIClass13interruptModeE>
    13de:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <_ZN8SPIClass13interruptSaveE>
    13e2:	21 30       	cpi	r18, 0x01	; 1
    13e4:	19 f4       	brne	.+6      	; 0x13ec <_ZN8SPIClass14endTransactionEv+0x1e>
        SPI_AVR_EIMSK = interruptSave;
    13e6:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    13e8:	9f bf       	out	0x3f, r25	; 63
    13ea:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
    13ec:	8f bf       	out	0x3f, r24	; 63
    13ee:	08 95       	ret

000013f0 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	08 95       	ret

000013f6 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    13f6:	08 95       	ret

000013f8 <_ZN12Adafruit_GFX9writeLineEiiiij>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
  drawChar(x, y, c, color, bg, size, size);
}
    13f8:	2f 92       	push	r2
    13fa:	3f 92       	push	r3
    13fc:	4f 92       	push	r4
    13fe:	5f 92       	push	r5
    1400:	6f 92       	push	r6
    1402:	7f 92       	push	r7
    1404:	8f 92       	push	r8
    1406:	9f 92       	push	r9
    1408:	af 92       	push	r10
    140a:	bf 92       	push	r11
    140c:	cf 92       	push	r12
    140e:	df 92       	push	r13
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	00 d0       	rcall	.+0      	; 0x141e <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    141e:	00 d0       	rcall	.+0      	; 0x1420 <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	2c 01       	movw	r4, r24
    1426:	7e 83       	std	Y+6, r23	; 0x06
    1428:	6d 83       	std	Y+5, r22	; 0x05
    142a:	6a 01       	movw	r12, r20
    142c:	59 01       	movw	r10, r18
    142e:	c8 01       	movw	r24, r16
    1430:	fc 82       	std	Y+4, r15	; 0x04
    1432:	eb 82       	std	Y+3, r14	; 0x03
    1434:	48 01       	movw	r8, r16
    1436:	84 1a       	sub	r8, r20
    1438:	95 0a       	sbc	r9, r21
    143a:	97 fe       	sbrs	r9, 7
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <_ZN12Adafruit_GFX9writeLineEiiiij+0x4c>
    143e:	91 94       	neg	r9
    1440:	81 94       	neg	r8
    1442:	91 08       	sbc	r9, r1
    1444:	35 01       	movw	r6, r10
    1446:	2d 81       	ldd	r18, Y+5	; 0x05
    1448:	3e 81       	ldd	r19, Y+6	; 0x06
    144a:	62 1a       	sub	r6, r18
    144c:	73 0a       	sbc	r7, r19
    144e:	77 fe       	sbrs	r7, 7
    1450:	03 c0       	rjmp	.+6      	; 0x1458 <_ZN12Adafruit_GFX9writeLineEiiiij+0x60>
    1452:	71 94       	neg	r7
    1454:	61 94       	neg	r6
    1456:	71 08       	sbc	r7, r1
    1458:	68 14       	cp	r6, r8
    145a:	79 04       	cpc	r7, r9
    145c:	5c f4       	brge	.+22     	; 0x1474 <_ZN12Adafruit_GFX9writeLineEiiiij+0x7c>
    145e:	3a 2d       	mov	r19, r10
    1460:	2b 2d       	mov	r18, r11
    1462:	5c 01       	movw	r10, r24
    1464:	83 2f       	mov	r24, r19
    1466:	92 2f       	mov	r25, r18
    1468:	3d 81       	ldd	r19, Y+5	; 0x05
    146a:	2e 81       	ldd	r18, Y+6	; 0x06
    146c:	de 82       	std	Y+6, r13	; 0x06
    146e:	cd 82       	std	Y+5, r12	; 0x05
    1470:	c3 2e       	mov	r12, r19
    1472:	d2 2e       	mov	r13, r18
    1474:	ad 81       	ldd	r26, Y+5	; 0x05
    1476:	be 81       	ldd	r27, Y+6	; 0x06
    1478:	aa 16       	cp	r10, r26
    147a:	bb 06       	cpc	r11, r27
    147c:	5c f4       	brge	.+22     	; 0x1494 <_ZN12Adafruit_GFX9writeLineEiiiij+0x9c>
    147e:	3c 2d       	mov	r19, r12
    1480:	2d 2d       	mov	r18, r13
    1482:	6c 01       	movw	r12, r24
    1484:	83 2f       	mov	r24, r19
    1486:	92 2f       	mov	r25, r18
    1488:	3d 81       	ldd	r19, Y+5	; 0x05
    148a:	2e 81       	ldd	r18, Y+6	; 0x06
    148c:	be 82       	std	Y+6, r11	; 0x06
    148e:	ad 82       	std	Y+5, r10	; 0x05
    1490:	a3 2e       	mov	r10, r19
    1492:	b2 2e       	mov	r11, r18
    1494:	85 01       	movw	r16, r10
    1496:	2d 81       	ldd	r18, Y+5	; 0x05
    1498:	3e 81       	ldd	r19, Y+6	; 0x06
    149a:	02 1b       	sub	r16, r18
    149c:	13 0b       	sbc	r17, r19
    149e:	1c 01       	movw	r2, r24
    14a0:	2c 18       	sub	r2, r12
    14a2:	3d 08       	sbc	r3, r13
    14a4:	37 fe       	sbrs	r3, 7
    14a6:	03 c0       	rjmp	.+6      	; 0x14ae <_ZN12Adafruit_GFX9writeLineEiiiij+0xb6>
    14a8:	31 94       	neg	r3
    14aa:	21 94       	neg	r2
    14ac:	31 08       	sbc	r3, r1
    14ae:	78 01       	movw	r14, r16
    14b0:	17 ff       	sbrs	r17, 7
    14b2:	03 c0       	rjmp	.+6      	; 0x14ba <_ZN12Adafruit_GFX9writeLineEiiiij+0xc2>
    14b4:	3f ef       	ldi	r19, 0xFF	; 255
    14b6:	e3 1a       	sub	r14, r19
    14b8:	f3 0a       	sbc	r15, r19
    14ba:	f5 94       	asr	r15
    14bc:	e7 94       	ror	r14
    14be:	c8 16       	cp	r12, r24
    14c0:	d9 06       	cpc	r13, r25
    14c2:	2c f0       	brlt	.+10     	; 0x14ce <_ZN12Adafruit_GFX9writeLineEiiiij+0xd6>
    14c4:	8f ef       	ldi	r24, 0xFF	; 255
    14c6:	9f ef       	ldi	r25, 0xFF	; 255
    14c8:	9a 83       	std	Y+2, r25	; 0x02
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	04 c0       	rjmp	.+8      	; 0x14d6 <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    14ce:	a1 e0       	ldi	r26, 0x01	; 1
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	ba 83       	std	Y+2, r27	; 0x02
    14d4:	a9 83       	std	Y+1, r26	; 0x01
    14d6:	2d 81       	ldd	r18, Y+5	; 0x05
    14d8:	3e 81       	ldd	r19, Y+6	; 0x06
    14da:	a2 16       	cp	r10, r18
    14dc:	b3 06       	cpc	r11, r19
    14de:	24 f1       	brlt	.+72     	; 0x1528 <_ZN12Adafruit_GFX9writeLineEiiiij+0x130>
    14e0:	d2 01       	movw	r26, r4
    14e2:	ed 91       	ld	r30, X+
    14e4:	fc 91       	ld	r31, X
    14e6:	04 84       	ldd	r0, Z+12	; 0x0c
    14e8:	f5 85       	ldd	r31, Z+13	; 0x0d
    14ea:	e0 2d       	mov	r30, r0
    14ec:	2b 81       	ldd	r18, Y+3	; 0x03
    14ee:	3c 81       	ldd	r19, Y+4	; 0x04
    14f0:	68 14       	cp	r6, r8
    14f2:	79 04       	cpc	r7, r9
    14f4:	24 f4       	brge	.+8      	; 0x14fe <_ZN12Adafruit_GFX9writeLineEiiiij+0x106>
    14f6:	4d 81       	ldd	r20, Y+5	; 0x05
    14f8:	5e 81       	ldd	r21, Y+6	; 0x06
    14fa:	b6 01       	movw	r22, r12
    14fc:	03 c0       	rjmp	.+6      	; 0x1504 <_ZN12Adafruit_GFX9writeLineEiiiij+0x10c>
    14fe:	a6 01       	movw	r20, r12
    1500:	6d 81       	ldd	r22, Y+5	; 0x05
    1502:	7e 81       	ldd	r23, Y+6	; 0x06
    1504:	c2 01       	movw	r24, r4
    1506:	19 95       	eicall
    1508:	e2 18       	sub	r14, r2
    150a:	f3 08       	sbc	r15, r3
    150c:	f7 fe       	sbrs	r15, 7
    150e:	06 c0       	rjmp	.+12     	; 0x151c <_ZN12Adafruit_GFX9writeLineEiiiij+0x124>
    1510:	29 81       	ldd	r18, Y+1	; 0x01
    1512:	3a 81       	ldd	r19, Y+2	; 0x02
    1514:	c2 0e       	add	r12, r18
    1516:	d3 1e       	adc	r13, r19
    1518:	e0 0e       	add	r14, r16
    151a:	f1 1e       	adc	r15, r17
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	9e 81       	ldd	r25, Y+6	; 0x06
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	9e 83       	std	Y+6, r25	; 0x06
    1524:	8d 83       	std	Y+5, r24	; 0x05
    1526:	d7 cf       	rjmp	.-82     	; 0x14d6 <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    1528:	26 96       	adiw	r28, 0x06	; 6
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	ff 90       	pop	r15
    153e:	ef 90       	pop	r14
    1540:	df 90       	pop	r13
    1542:	cf 90       	pop	r12
    1544:	bf 90       	pop	r11
    1546:	af 90       	pop	r10
    1548:	9f 90       	pop	r9
    154a:	8f 90       	pop	r8
    154c:	7f 90       	pop	r7
    154e:	6f 90       	pop	r6
    1550:	5f 90       	pop	r5
    1552:	4f 90       	pop	r4
    1554:	3f 90       	pop	r3
    1556:	2f 90       	pop	r2
    1558:	08 95       	ret

0000155a <_ZN12Adafruit_GFX10writePixelEiij>:
    155a:	dc 01       	movw	r26, r24
    155c:	ed 91       	ld	r30, X+
    155e:	fc 91       	ld	r31, X
    1560:	00 84       	ldd	r0, Z+8	; 0x08
    1562:	f1 85       	ldd	r31, Z+9	; 0x09
    1564:	e0 2d       	mov	r30, r0
    1566:	19 94       	eijmp

00001568 <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	dc 01       	movw	r26, r24
    156e:	ed 91       	ld	r30, X+
    1570:	fc 91       	ld	r31, X
    1572:	04 8c       	ldd	r0, Z+28	; 0x1c
    1574:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1576:	e0 2d       	mov	r30, r0
    1578:	19 95       	eicall
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	08 95       	ret

00001580 <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	dc 01       	movw	r26, r24
    1586:	ed 91       	ld	r30, X+
    1588:	fc 91       	ld	r31, X
    158a:	06 8c       	ldd	r0, Z+30	; 0x1e
    158c:	f7 8d       	ldd	r31, Z+31	; 0x1f
    158e:	e0 2d       	mov	r30, r0
    1590:	19 95       	eicall
    1592:	1f 91       	pop	r17
    1594:	0f 91       	pop	r16
    1596:	08 95       	ret

00001598 <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	dc 01       	movw	r26, r24
    15a2:	ed 91       	ld	r30, X+
    15a4:	fc 91       	ld	r31, X
    15a6:	00 a0       	ldd	r0, Z+32	; 0x20
    15a8:	f1 a1       	ldd	r31, Z+33	; 0x21
    15aa:	e0 2d       	mov	r30, r0
    15ac:	19 95       	eicall
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	ff 90       	pop	r15
    15b4:	ef 90       	pop	r14
    15b6:	08 95       	ret

000015b8 <_ZN12Adafruit_GFX10startWriteEv>:
    15b8:	08 95       	ret

000015ba <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    15ba:	8f 92       	push	r8
    15bc:	9f 92       	push	r9
    15be:	af 92       	push	r10
    15c0:	bf 92       	push	r11
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	ec 01       	movw	r28, r24
    15d4:	5b 01       	movw	r10, r22
    15d6:	4a 01       	movw	r8, r20
    15d8:	69 01       	movw	r12, r18
    15da:	78 01       	movw	r14, r16
    15dc:	e8 81       	ld	r30, Y
    15de:	f9 81       	ldd	r31, Y+1	; 0x01
    15e0:	02 84       	ldd	r0, Z+10	; 0x0a
    15e2:	f3 85       	ldd	r31, Z+11	; 0x0b
    15e4:	e0 2d       	mov	r30, r0
    15e6:	19 95       	eicall
    15e8:	c8 0c       	add	r12, r8
    15ea:	d9 1c       	adc	r13, r9
    15ec:	86 01       	movw	r16, r12
    15ee:	01 50       	subi	r16, 0x01	; 1
    15f0:	11 09       	sbc	r17, r1
    15f2:	e8 81       	ld	r30, Y
    15f4:	f9 81       	ldd	r31, Y+1	; 0x01
    15f6:	04 88       	ldd	r0, Z+20	; 0x14
    15f8:	f5 89       	ldd	r31, Z+21	; 0x15
    15fa:	e0 2d       	mov	r30, r0
    15fc:	95 01       	movw	r18, r10
    15fe:	a4 01       	movw	r20, r8
    1600:	b5 01       	movw	r22, r10
    1602:	ce 01       	movw	r24, r28
    1604:	19 95       	eicall
    1606:	e8 81       	ld	r30, Y
    1608:	f9 81       	ldd	r31, Y+1	; 0x01
    160a:	06 88       	ldd	r0, Z+22	; 0x16
    160c:	f7 89       	ldd	r31, Z+23	; 0x17
    160e:	e0 2d       	mov	r30, r0
    1610:	ce 01       	movw	r24, r28
    1612:	df 91       	pop	r29
    1614:	cf 91       	pop	r28
    1616:	1f 91       	pop	r17
    1618:	0f 91       	pop	r16
    161a:	ff 90       	pop	r15
    161c:	ef 90       	pop	r14
    161e:	df 90       	pop	r13
    1620:	cf 90       	pop	r12
    1622:	bf 90       	pop	r11
    1624:	af 90       	pop	r10
    1626:	9f 90       	pop	r9
    1628:	8f 90       	pop	r8
    162a:	19 94       	eijmp

0000162c <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    162c:	8f 92       	push	r8
    162e:	9f 92       	push	r9
    1630:	af 92       	push	r10
    1632:	bf 92       	push	r11
    1634:	cf 92       	push	r12
    1636:	df 92       	push	r13
    1638:	ef 92       	push	r14
    163a:	ff 92       	push	r15
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	ec 01       	movw	r28, r24
    1646:	5b 01       	movw	r10, r22
    1648:	4a 01       	movw	r8, r20
    164a:	69 01       	movw	r12, r18
    164c:	e8 81       	ld	r30, Y
    164e:	f9 81       	ldd	r31, Y+1	; 0x01
    1650:	02 84       	ldd	r0, Z+10	; 0x0a
    1652:	f3 85       	ldd	r31, Z+11	; 0x0b
    1654:	e0 2d       	mov	r30, r0
    1656:	19 95       	eicall
    1658:	95 01       	movw	r18, r10
    165a:	2c 0d       	add	r18, r12
    165c:	3d 1d       	adc	r19, r13
    165e:	21 50       	subi	r18, 0x01	; 1
    1660:	31 09       	sbc	r19, r1
    1662:	e8 81       	ld	r30, Y
    1664:	f9 81       	ldd	r31, Y+1	; 0x01
    1666:	04 88       	ldd	r0, Z+20	; 0x14
    1668:	f5 89       	ldd	r31, Z+21	; 0x15
    166a:	e0 2d       	mov	r30, r0
    166c:	78 01       	movw	r14, r16
    166e:	84 01       	movw	r16, r8
    1670:	a4 01       	movw	r20, r8
    1672:	b5 01       	movw	r22, r10
    1674:	ce 01       	movw	r24, r28
    1676:	19 95       	eicall
    1678:	e8 81       	ld	r30, Y
    167a:	f9 81       	ldd	r31, Y+1	; 0x01
    167c:	06 88       	ldd	r0, Z+22	; 0x16
    167e:	f7 89       	ldd	r31, Z+23	; 0x17
    1680:	e0 2d       	mov	r30, r0
    1682:	ce 01       	movw	r24, r28
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	ff 90       	pop	r15
    168e:	ef 90       	pop	r14
    1690:	df 90       	pop	r13
    1692:	cf 90       	pop	r12
    1694:	bf 90       	pop	r11
    1696:	af 90       	pop	r10
    1698:	9f 90       	pop	r9
    169a:	8f 90       	pop	r8
    169c:	19 94       	eijmp

0000169e <_ZN12Adafruit_GFX8fillRectEiiiij>:
    169e:	4f 92       	push	r4
    16a0:	5f 92       	push	r5
    16a2:	6f 92       	push	r6
    16a4:	7f 92       	push	r7
    16a6:	8f 92       	push	r8
    16a8:	9f 92       	push	r9
    16aa:	af 92       	push	r10
    16ac:	bf 92       	push	r11
    16ae:	cf 92       	push	r12
    16b0:	df 92       	push	r13
    16b2:	ef 92       	push	r14
    16b4:	ff 92       	push	r15
    16b6:	0f 93       	push	r16
    16b8:	1f 93       	push	r17
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	6c 01       	movw	r12, r24
    16c0:	2b 01       	movw	r4, r22
    16c2:	5a 01       	movw	r10, r20
    16c4:	39 01       	movw	r6, r18
    16c6:	48 01       	movw	r8, r16
    16c8:	dc 01       	movw	r26, r24
    16ca:	ed 91       	ld	r30, X+
    16cc:	fc 91       	ld	r31, X
    16ce:	02 84       	ldd	r0, Z+10	; 0x0a
    16d0:	f3 85       	ldd	r31, Z+11	; 0x0b
    16d2:	e0 2d       	mov	r30, r0
    16d4:	19 95       	eicall
    16d6:	e2 01       	movw	r28, r4
    16d8:	64 0c       	add	r6, r4
    16da:	75 1c       	adc	r7, r5
    16dc:	d6 01       	movw	r26, r12
    16de:	ed 91       	ld	r30, X+
    16e0:	fc 91       	ld	r31, X
    16e2:	c6 15       	cp	r28, r6
    16e4:	d7 05       	cpc	r29, r7
    16e6:	5c f4       	brge	.+22     	; 0x16fe <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    16e8:	00 88       	ldd	r0, Z+16	; 0x10
    16ea:	f1 89       	ldd	r31, Z+17	; 0x11
    16ec:	e0 2d       	mov	r30, r0
    16ee:	87 01       	movw	r16, r14
    16f0:	94 01       	movw	r18, r8
    16f2:	a5 01       	movw	r20, r10
    16f4:	be 01       	movw	r22, r28
    16f6:	c6 01       	movw	r24, r12
    16f8:	19 95       	eicall
    16fa:	21 96       	adiw	r28, 0x01	; 1
    16fc:	ef cf       	rjmp	.-34     	; 0x16dc <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    16fe:	06 88       	ldd	r0, Z+22	; 0x16
    1700:	f7 89       	ldd	r31, Z+23	; 0x17
    1702:	e0 2d       	mov	r30, r0
    1704:	c6 01       	movw	r24, r12
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	bf 90       	pop	r11
    1718:	af 90       	pop	r10
    171a:	9f 90       	pop	r9
    171c:	8f 90       	pop	r8
    171e:	7f 90       	pop	r7
    1720:	6f 90       	pop	r6
    1722:	5f 90       	pop	r5
    1724:	4f 90       	pop	r4
    1726:	19 94       	eijmp

00001728 <_ZN12Adafruit_GFX10fillScreenEj>:
    1728:	ef 92       	push	r14
    172a:	ff 92       	push	r15
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	dc 01       	movw	r26, r24
    1732:	1a 96       	adiw	r26, 0x0a	; 10
    1734:	0d 91       	ld	r16, X+
    1736:	1c 91       	ld	r17, X
    1738:	1b 97       	sbiw	r26, 0x0b	; 11
    173a:	18 96       	adiw	r26, 0x08	; 8
    173c:	2d 91       	ld	r18, X+
    173e:	3c 91       	ld	r19, X
    1740:	19 97       	sbiw	r26, 0x09	; 9
    1742:	ed 91       	ld	r30, X+
    1744:	fc 91       	ld	r31, X
    1746:	00 a0       	ldd	r0, Z+32	; 0x20
    1748:	f1 a1       	ldd	r31, Z+33	; 0x21
    174a:	e0 2d       	mov	r30, r0
    174c:	7b 01       	movw	r14, r22
    174e:	40 e0       	ldi	r20, 0x00	; 0
    1750:	50 e0       	ldi	r21, 0x00	; 0
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	19 95       	eicall
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	ff 90       	pop	r15
    175e:	ef 90       	pop	r14
    1760:	08 95       	ret

00001762 <_ZN12Adafruit_GFX8drawLineEiiiij>:
    1762:	8f 92       	push	r8
    1764:	9f 92       	push	r9
    1766:	af 92       	push	r10
    1768:	bf 92       	push	r11
    176a:	cf 92       	push	r12
    176c:	df 92       	push	r13
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	4c 01       	movw	r8, r24
    177c:	6b 01       	movw	r12, r22
    177e:	5a 01       	movw	r10, r20
    1780:	e9 01       	movw	r28, r18
    1782:	dc 01       	movw	r26, r24
    1784:	ed 91       	ld	r30, X+
    1786:	fc 91       	ld	r31, X
    1788:	62 17       	cp	r22, r18
    178a:	73 07       	cpc	r23, r19
    178c:	81 f4       	brne	.+32     	; 0x17ae <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    178e:	04 17       	cp	r16, r20
    1790:	15 07       	cpc	r17, r21
    1792:	24 f4       	brge	.+8      	; 0x179c <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    1794:	8b 2d       	mov	r24, r11
    1796:	58 01       	movw	r10, r16
    1798:	04 2f       	mov	r16, r20
    179a:	18 2f       	mov	r17, r24
    179c:	0a 19       	sub	r16, r10
    179e:	1b 09       	sbc	r17, r11
    17a0:	98 01       	movw	r18, r16
    17a2:	2f 5f       	subi	r18, 0xFF	; 255
    17a4:	3f 4f       	sbci	r19, 0xFF	; 255
    17a6:	04 8c       	ldd	r0, Z+28	; 0x1c
    17a8:	f5 8d       	ldd	r31, Z+29	; 0x1d
    17aa:	e0 2d       	mov	r30, r0
    17ac:	12 c0       	rjmp	.+36     	; 0x17d2 <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    17ae:	40 17       	cp	r20, r16
    17b0:	51 07       	cpc	r21, r17
    17b2:	09 f5       	brne	.+66     	; 0x17f6 <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    17b4:	26 17       	cp	r18, r22
    17b6:	37 07       	cpc	r19, r23
    17b8:	24 f4       	brge	.+8      	; 0x17c2 <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    17ba:	8d 2d       	mov	r24, r13
    17bc:	69 01       	movw	r12, r18
    17be:	c6 2f       	mov	r28, r22
    17c0:	d8 2f       	mov	r29, r24
    17c2:	9e 01       	movw	r18, r28
    17c4:	2c 19       	sub	r18, r12
    17c6:	3d 09       	sbc	r19, r13
    17c8:	2f 5f       	subi	r18, 0xFF	; 255
    17ca:	3f 4f       	sbci	r19, 0xFF	; 255
    17cc:	06 8c       	ldd	r0, Z+30	; 0x1e
    17ce:	f7 8d       	ldd	r31, Z+31	; 0x1f
    17d0:	e0 2d       	mov	r30, r0
    17d2:	87 01       	movw	r16, r14
    17d4:	a5 01       	movw	r20, r10
    17d6:	b6 01       	movw	r22, r12
    17d8:	c4 01       	movw	r24, r8
    17da:	19 95       	eicall
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
    17e4:	ff 90       	pop	r15
    17e6:	ef 90       	pop	r14
    17e8:	df 90       	pop	r13
    17ea:	cf 90       	pop	r12
    17ec:	bf 90       	pop	r11
    17ee:	af 90       	pop	r10
    17f0:	9f 90       	pop	r9
    17f2:	8f 90       	pop	r8
    17f4:	08 95       	ret
    17f6:	02 84       	ldd	r0, Z+10	; 0x0a
    17f8:	f3 85       	ldd	r31, Z+11	; 0x0b
    17fa:	e0 2d       	mov	r30, r0
    17fc:	19 95       	eicall
    17fe:	d4 01       	movw	r26, r8
    1800:	ed 91       	ld	r30, X+
    1802:	fc 91       	ld	r31, X
    1804:	04 88       	ldd	r0, Z+20	; 0x14
    1806:	f5 89       	ldd	r31, Z+21	; 0x15
    1808:	e0 2d       	mov	r30, r0
    180a:	9e 01       	movw	r18, r28
    180c:	a5 01       	movw	r20, r10
    180e:	b6 01       	movw	r22, r12
    1810:	c4 01       	movw	r24, r8
    1812:	19 95       	eicall
    1814:	d4 01       	movw	r26, r8
    1816:	ed 91       	ld	r30, X+
    1818:	fc 91       	ld	r31, X
    181a:	06 88       	ldd	r0, Z+22	; 0x16
    181c:	f7 89       	ldd	r31, Z+23	; 0x17
    181e:	e0 2d       	mov	r30, r0
    1820:	c4 01       	movw	r24, r8
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	ff 90       	pop	r15
    182c:	ef 90       	pop	r14
    182e:	df 90       	pop	r13
    1830:	cf 90       	pop	r12
    1832:	bf 90       	pop	r11
    1834:	af 90       	pop	r10
    1836:	9f 90       	pop	r9
    1838:	8f 90       	pop	r8
    183a:	19 94       	eijmp

0000183c <_ZN12Adafruit_GFX8drawRectEiiiij>:
    183c:	6f 92       	push	r6
    183e:	7f 92       	push	r7
    1840:	8f 92       	push	r8
    1842:	9f 92       	push	r9
    1844:	af 92       	push	r10
    1846:	bf 92       	push	r11
    1848:	cf 92       	push	r12
    184a:	df 92       	push	r13
    184c:	ef 92       	push	r14
    184e:	ff 92       	push	r15
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	ec 01       	movw	r28, r24
    185a:	4b 01       	movw	r8, r22
    185c:	5a 01       	movw	r10, r20
    185e:	69 01       	movw	r12, r18
    1860:	38 01       	movw	r6, r16
    1862:	e8 81       	ld	r30, Y
    1864:	f9 81       	ldd	r31, Y+1	; 0x01
    1866:	02 84       	ldd	r0, Z+10	; 0x0a
    1868:	f3 85       	ldd	r31, Z+11	; 0x0b
    186a:	e0 2d       	mov	r30, r0
    186c:	19 95       	eicall
    186e:	e8 81       	ld	r30, Y
    1870:	f9 81       	ldd	r31, Y+1	; 0x01
    1872:	02 88       	ldd	r0, Z+18	; 0x12
    1874:	f3 89       	ldd	r31, Z+19	; 0x13
    1876:	e0 2d       	mov	r30, r0
    1878:	87 01       	movw	r16, r14
    187a:	96 01       	movw	r18, r12
    187c:	a5 01       	movw	r20, r10
    187e:	b4 01       	movw	r22, r8
    1880:	ce 01       	movw	r24, r28
    1882:	19 95       	eicall
    1884:	a5 01       	movw	r20, r10
    1886:	46 0d       	add	r20, r6
    1888:	57 1d       	adc	r21, r7
    188a:	41 50       	subi	r20, 0x01	; 1
    188c:	51 09       	sbc	r21, r1
    188e:	e8 81       	ld	r30, Y
    1890:	f9 81       	ldd	r31, Y+1	; 0x01
    1892:	02 88       	ldd	r0, Z+18	; 0x12
    1894:	f3 89       	ldd	r31, Z+19	; 0x13
    1896:	e0 2d       	mov	r30, r0
    1898:	96 01       	movw	r18, r12
    189a:	b4 01       	movw	r22, r8
    189c:	ce 01       	movw	r24, r28
    189e:	19 95       	eicall
    18a0:	e8 81       	ld	r30, Y
    18a2:	f9 81       	ldd	r31, Y+1	; 0x01
    18a4:	00 88       	ldd	r0, Z+16	; 0x10
    18a6:	f1 89       	ldd	r31, Z+17	; 0x11
    18a8:	e0 2d       	mov	r30, r0
    18aa:	93 01       	movw	r18, r6
    18ac:	a5 01       	movw	r20, r10
    18ae:	b4 01       	movw	r22, r8
    18b0:	ce 01       	movw	r24, r28
    18b2:	19 95       	eicall
    18b4:	c8 0c       	add	r12, r8
    18b6:	d9 1c       	adc	r13, r9
    18b8:	b6 01       	movw	r22, r12
    18ba:	61 50       	subi	r22, 0x01	; 1
    18bc:	71 09       	sbc	r23, r1
    18be:	e8 81       	ld	r30, Y
    18c0:	f9 81       	ldd	r31, Y+1	; 0x01
    18c2:	00 88       	ldd	r0, Z+16	; 0x10
    18c4:	f1 89       	ldd	r31, Z+17	; 0x11
    18c6:	e0 2d       	mov	r30, r0
    18c8:	93 01       	movw	r18, r6
    18ca:	a5 01       	movw	r20, r10
    18cc:	ce 01       	movw	r24, r28
    18ce:	19 95       	eicall
    18d0:	e8 81       	ld	r30, Y
    18d2:	f9 81       	ldd	r31, Y+1	; 0x01
    18d4:	06 88       	ldd	r0, Z+22	; 0x16
    18d6:	f7 89       	ldd	r31, Z+23	; 0x17
    18d8:	e0 2d       	mov	r30, r0
    18da:	ce 01       	movw	r24, r28
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	0f 91       	pop	r16
    18e4:	ff 90       	pop	r15
    18e6:	ef 90       	pop	r14
    18e8:	df 90       	pop	r13
    18ea:	cf 90       	pop	r12
    18ec:	bf 90       	pop	r11
    18ee:	af 90       	pop	r10
    18f0:	9f 90       	pop	r9
    18f2:	8f 90       	pop	r8
    18f4:	7f 90       	pop	r7
    18f6:	6f 90       	pop	r6
    18f8:	19 94       	eijmp

000018fa <_ZN12Adafruit_GFX13invertDisplayEb>:
    18fa:	08 95       	ret

000018fc <_ZN12Adafruit_GFX11setRotationEh>:
    18fc:	fc 01       	movw	r30, r24
    18fe:	63 70       	andi	r22, 0x03	; 3
    1900:	66 8b       	std	Z+22, r22	; 0x16
    1902:	84 81       	ldd	r24, Z+4	; 0x04
    1904:	95 81       	ldd	r25, Z+5	; 0x05
    1906:	26 81       	ldd	r18, Z+6	; 0x06
    1908:	37 81       	ldd	r19, Z+7	; 0x07
    190a:	61 30       	cpi	r22, 0x01	; 1
    190c:	39 f0       	breq	.+14     	; 0x191c <_ZN12Adafruit_GFX11setRotationEh+0x20>
    190e:	63 30       	cpi	r22, 0x03	; 3
    1910:	29 f0       	breq	.+10     	; 0x191c <_ZN12Adafruit_GFX11setRotationEh+0x20>
    1912:	91 87       	std	Z+9, r25	; 0x09
    1914:	80 87       	std	Z+8, r24	; 0x08
    1916:	33 87       	std	Z+11, r19	; 0x0b
    1918:	22 87       	std	Z+10, r18	; 0x0a
    191a:	08 95       	ret
    191c:	31 87       	std	Z+9, r19	; 0x09
    191e:	20 87       	std	Z+8, r18	; 0x08
    1920:	93 87       	std	Z+11, r25	; 0x0b
    1922:	82 87       	std	Z+10, r24	; 0x0a
    1924:	08 95       	ret

00001926 <_ZN12Adafruit_GFXC1Eii>:
    1926:	fc 01       	movw	r30, r24
    1928:	13 82       	std	Z+3, r1	; 0x03
    192a:	12 82       	std	Z+2, r1	; 0x02
    192c:	84 e3       	ldi	r24, 0x34	; 52
    192e:	92 e0       	ldi	r25, 0x02	; 2
    1930:	91 83       	std	Z+1, r25	; 0x01
    1932:	80 83       	st	Z, r24
    1934:	75 83       	std	Z+5, r23	; 0x05
    1936:	64 83       	std	Z+4, r22	; 0x04
    1938:	57 83       	std	Z+7, r21	; 0x07
    193a:	46 83       	std	Z+6, r20	; 0x06
    193c:	71 87       	std	Z+9, r23	; 0x09
    193e:	60 87       	std	Z+8, r22	; 0x08
    1940:	53 87       	std	Z+11, r21	; 0x0b
    1942:	42 87       	std	Z+10, r20	; 0x0a
    1944:	16 8a       	std	Z+22, r1	; 0x16
    1946:	15 86       	std	Z+13, r1	; 0x0d
    1948:	14 86       	std	Z+12, r1	; 0x0c
    194a:	17 86       	std	Z+15, r1	; 0x0f
    194c:	16 86       	std	Z+14, r1	; 0x0e
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	85 8b       	std	Z+21, r24	; 0x15
    1952:	84 8b       	std	Z+20, r24	; 0x14
    1954:	2f ef       	ldi	r18, 0xFF	; 255
    1956:	3f ef       	ldi	r19, 0xFF	; 255
    1958:	33 8b       	std	Z+19, r19	; 0x13
    195a:	22 8b       	std	Z+18, r18	; 0x12
    195c:	31 8b       	std	Z+17, r19	; 0x11
    195e:	20 8b       	std	Z+16, r18	; 0x10
    1960:	87 8b       	std	Z+23, r24	; 0x17
    1962:	10 8e       	std	Z+24, r1	; 0x18
    1964:	12 8e       	std	Z+26, r1	; 0x1a
    1966:	11 8e       	std	Z+25, r1	; 0x19
    1968:	08 95       	ret

0000196a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>:
    196a:	3f 92       	push	r3
    196c:	4f 92       	push	r4
    196e:	5f 92       	push	r5
    1970:	6f 92       	push	r6
    1972:	7f 92       	push	r7
    1974:	8f 92       	push	r8
    1976:	9f 92       	push	r9
    1978:	af 92       	push	r10
    197a:	bf 92       	push	r11
    197c:	cf 92       	push	r12
    197e:	df 92       	push	r13
    1980:	ef 92       	push	r14
    1982:	ff 92       	push	r15
    1984:	0f 93       	push	r16
    1986:	1f 93       	push	r17
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	2a 97       	sbiw	r28, 0x0a	; 10
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	5c 01       	movw	r10, r24
    199e:	7e 83       	std	Y+6, r23	; 0x06
    19a0:	6d 83       	std	Y+5, r22	; 0x05
    19a2:	58 87       	std	Y+8, r21	; 0x08
    19a4:	4f 83       	std	Y+7, r20	; 0x07
    19a6:	29 01       	movw	r4, r18
    19a8:	37 01       	movw	r6, r14
    19aa:	dc 01       	movw	r26, r24
    19ac:	ed 91       	ld	r30, X+
    19ae:	fc 91       	ld	r31, X
    19b0:	02 84       	ldd	r0, Z+10	; 0x0a
    19b2:	f3 85       	ldd	r31, Z+11	; 0x0b
    19b4:	e0 2d       	mov	r30, r0
    19b6:	19 95       	eicall
    19b8:	c8 01       	movw	r24, r16
    19ba:	07 96       	adiw	r24, 0x07	; 7
    19bc:	97 fd       	sbrc	r25, 7
    19be:	07 96       	adiw	r24, 0x07	; 7
    19c0:	9c 01       	movw	r18, r24
    19c2:	93 e0       	ldi	r25, 0x03	; 3
    19c4:	35 95       	asr	r19
    19c6:	27 95       	ror	r18
    19c8:	9a 95       	dec	r25
    19ca:	e1 f7       	brne	.-8      	; 0x19c4 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x5a>
    19cc:	3a 83       	std	Y+2, r19	; 0x02
    19ce:	29 83       	std	Y+1, r18	; 0x01
    19d0:	81 2c       	mov	r8, r1
    19d2:	91 2c       	mov	r9, r1
    19d4:	e1 2c       	mov	r14, r1
    19d6:	f1 2c       	mov	r15, r1
    19d8:	31 2c       	mov	r3, r1
    19da:	8f 81       	ldd	r24, Y+7	; 0x07
    19dc:	98 85       	ldd	r25, Y+8	; 0x08
    19de:	8e 0d       	add	r24, r14
    19e0:	9f 1d       	adc	r25, r15
    19e2:	9c 83       	std	Y+4, r25	; 0x04
    19e4:	8b 83       	std	Y+3, r24	; 0x03
    19e6:	e6 14       	cp	r14, r6
    19e8:	f7 04       	cpc	r15, r7
    19ea:	0c f0       	brlt	.+2      	; 0x19ee <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x84>
    19ec:	3d c0       	rjmp	.+122    	; 0x1a68 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xfe>
    19ee:	1a 86       	std	Y+10, r1	; 0x0a
    19f0:	19 86       	std	Y+9, r1	; 0x09
    19f2:	a9 85       	ldd	r26, Y+9	; 0x09
    19f4:	ba 85       	ldd	r27, Y+10	; 0x0a
    19f6:	a0 17       	cp	r26, r16
    19f8:	b1 07       	cpc	r27, r17
    19fa:	74 f5       	brge	.+92     	; 0x1a58 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xee>
    19fc:	cd 01       	movw	r24, r26
    19fe:	87 70       	andi	r24, 0x07	; 7
    1a00:	99 27       	eor	r25, r25
    1a02:	89 2b       	or	r24, r25
    1a04:	11 f0       	breq	.+4      	; 0x1a0a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xa0>
    1a06:	33 0c       	add	r3, r3
    1a08:	0e c0       	rjmp	.+28     	; 0x1a26 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xbc>
    1a0a:	e9 85       	ldd	r30, Y+9	; 0x09
    1a0c:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a0e:	f7 fd       	sbrc	r31, 7
    1a10:	37 96       	adiw	r30, 0x07	; 7
    1a12:	83 e0       	ldi	r24, 0x03	; 3
    1a14:	f5 95       	asr	r31
    1a16:	e7 95       	ror	r30
    1a18:	8a 95       	dec	r24
    1a1a:	e1 f7       	brne	.-8      	; 0x1a14 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xaa>
    1a1c:	e8 0d       	add	r30, r8
    1a1e:	f9 1d       	adc	r31, r9
    1a20:	e4 0d       	add	r30, r4
    1a22:	f5 1d       	adc	r31, r5
    1a24:	34 90       	lpm	r3, Z
    1a26:	37 fe       	sbrs	r3, 7
    1a28:	11 c0       	rjmp	.+34     	; 0x1a4c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xe2>
    1a2a:	d5 01       	movw	r26, r10
    1a2c:	ed 91       	ld	r30, X+
    1a2e:	fc 91       	ld	r31, X
    1a30:	04 84       	ldd	r0, Z+12	; 0x0c
    1a32:	f5 85       	ldd	r31, Z+13	; 0x0d
    1a34:	e0 2d       	mov	r30, r0
    1a36:	96 01       	movw	r18, r12
    1a38:	4b 81       	ldd	r20, Y+3	; 0x03
    1a3a:	5c 81       	ldd	r21, Y+4	; 0x04
    1a3c:	6d 81       	ldd	r22, Y+5	; 0x05
    1a3e:	7e 81       	ldd	r23, Y+6	; 0x06
    1a40:	89 85       	ldd	r24, Y+9	; 0x09
    1a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a44:	68 0f       	add	r22, r24
    1a46:	79 1f       	adc	r23, r25
    1a48:	c5 01       	movw	r24, r10
    1a4a:	19 95       	eicall
    1a4c:	a9 85       	ldd	r26, Y+9	; 0x09
    1a4e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1a50:	11 96       	adiw	r26, 0x01	; 1
    1a52:	ba 87       	std	Y+10, r27	; 0x0a
    1a54:	a9 87       	std	Y+9, r26	; 0x09
    1a56:	cd cf       	rjmp	.-102    	; 0x19f2 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x88>
    1a58:	bf ef       	ldi	r27, 0xFF	; 255
    1a5a:	eb 1a       	sub	r14, r27
    1a5c:	fb 0a       	sbc	r15, r27
    1a5e:	29 81       	ldd	r18, Y+1	; 0x01
    1a60:	3a 81       	ldd	r19, Y+2	; 0x02
    1a62:	82 0e       	add	r8, r18
    1a64:	93 1e       	adc	r9, r19
    1a66:	b9 cf       	rjmp	.-142    	; 0x19da <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x70>
    1a68:	d5 01       	movw	r26, r10
    1a6a:	ed 91       	ld	r30, X+
    1a6c:	fc 91       	ld	r31, X
    1a6e:	06 88       	ldd	r0, Z+22	; 0x16
    1a70:	f7 89       	ldd	r31, Z+23	; 0x17
    1a72:	e0 2d       	mov	r30, r0
    1a74:	c5 01       	movw	r24, r10
    1a76:	2a 96       	adiw	r28, 0x0a	; 10
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	cd bf       	out	0x3d, r28	; 61
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	1f 91       	pop	r17
    1a88:	0f 91       	pop	r16
    1a8a:	ff 90       	pop	r15
    1a8c:	ef 90       	pop	r14
    1a8e:	df 90       	pop	r13
    1a90:	cf 90       	pop	r12
    1a92:	bf 90       	pop	r11
    1a94:	af 90       	pop	r10
    1a96:	9f 90       	pop	r9
    1a98:	8f 90       	pop	r8
    1a9a:	7f 90       	pop	r7
    1a9c:	6f 90       	pop	r6
    1a9e:	5f 90       	pop	r5
    1aa0:	4f 90       	pop	r4
    1aa2:	3f 90       	pop	r3
    1aa4:	19 94       	eijmp

00001aa6 <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    1aa6:	2f 92       	push	r2
    1aa8:	3f 92       	push	r3
    1aaa:	4f 92       	push	r4
    1aac:	5f 92       	push	r5
    1aae:	6f 92       	push	r6
    1ab0:	7f 92       	push	r7
    1ab2:	8f 92       	push	r8
    1ab4:	9f 92       	push	r9
    1ab6:	af 92       	push	r10
    1ab8:	bf 92       	push	r11
    1aba:	cf 92       	push	r12
    1abc:	df 92       	push	r13
    1abe:	ef 92       	push	r14
    1ac0:	ff 92       	push	r15
    1ac2:	0f 93       	push	r16
    1ac4:	1f 93       	push	r17
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	6b 97       	sbiw	r28, 0x1b	; 27
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	9b 8f       	std	Y+27, r25	; 0x1b
    1adc:	8a 8f       	std	Y+26, r24	; 0x1a
    1ade:	2b 01       	movw	r4, r22
    1ae0:	5a 83       	std	Y+2, r21	; 0x02
    1ae2:	49 83       	std	Y+1, r20	; 0x01
    1ae4:	d2 2e       	mov	r13, r18
    1ae6:	19 87       	std	Y+9, r17	; 0x09
    1ae8:	08 87       	std	Y+8, r16	; 0x08
    1aea:	47 01       	movw	r8, r14
    1aec:	ab 82       	std	Y+3, r10	; 0x03
    1aee:	dc 01       	movw	r26, r24
    1af0:	59 96       	adiw	r26, 0x19	; 25
    1af2:	2d 91       	ld	r18, X+
    1af4:	3c 91       	ld	r19, X
    1af6:	5a 97       	sbiw	r26, 0x1a	; 26
    1af8:	21 15       	cp	r18, r1
    1afa:	31 05       	cpc	r19, r1
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5a>
    1afe:	00 c1       	rjmp	.+512    	; 0x1d00 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x25a>
    1b00:	18 96       	adiw	r26, 0x08	; 8
    1b02:	8d 91       	ld	r24, X+
    1b04:	9c 91       	ld	r25, X
    1b06:	19 97       	sbiw	r26, 0x09	; 9
    1b08:	68 17       	cp	r22, r24
    1b0a:	79 07       	cpc	r23, r25
    1b0c:	0c f0       	brlt	.+2      	; 0x1b10 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x6a>
    1b0e:	e7 c1       	rjmp	.+974    	; 0x1ede <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    1b10:	1a 96       	adiw	r26, 0x0a	; 10
    1b12:	8d 91       	ld	r24, X+
    1b14:	9c 91       	ld	r25, X
    1b16:	1b 97       	sbiw	r26, 0x0b	; 11
    1b18:	48 17       	cp	r20, r24
    1b1a:	59 07       	cpc	r21, r25
    1b1c:	0c f0       	brlt	.+2      	; 0x1b20 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x7a>
    1b1e:	df c1       	rjmp	.+958    	; 0x1ede <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    1b20:	2c 2c       	mov	r2, r12
    1b22:	31 2c       	mov	r3, r1
    1b24:	fb 01       	movw	r30, r22
    1b26:	26 e0       	ldi	r18, 0x06	; 6
    1b28:	c2 9e       	mul	r12, r18
    1b2a:	e0 0d       	add	r30, r0
    1b2c:	f1 1d       	adc	r31, r1
    1b2e:	11 24       	eor	r1, r1
    1b30:	fd 87       	std	Y+13, r31	; 0x0d
    1b32:	ec 87       	std	Y+12, r30	; 0x0c
    1b34:	1e 16       	cp	r1, r30
    1b36:	1f 06       	cpc	r1, r31
    1b38:	0c f0       	brlt	.+2      	; 0x1b3c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x96>
    1b3a:	d1 c1       	rjmp	.+930    	; 0x1ede <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    1b3c:	4a 2d       	mov	r20, r10
    1b3e:	50 e0       	ldi	r21, 0x00	; 0
    1b40:	5b 87       	std	Y+11, r21	; 0x0b
    1b42:	4a 87       	std	Y+10, r20	; 0x0a
    1b44:	83 e0       	ldi	r24, 0x03	; 3
    1b46:	44 0f       	add	r20, r20
    1b48:	55 1f       	adc	r21, r21
    1b4a:	8a 95       	dec	r24
    1b4c:	e1 f7       	brne	.-8      	; 0x1b46 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa0>
    1b4e:	5f 87       	std	Y+15, r21	; 0x0f
    1b50:	4e 87       	std	Y+14, r20	; 0x0e
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	9a 81       	ldd	r25, Y+2	; 0x02
    1b56:	84 0f       	add	r24, r20
    1b58:	95 1f       	adc	r25, r21
    1b5a:	18 16       	cp	r1, r24
    1b5c:	19 06       	cpc	r1, r25
    1b5e:	0c f0       	brlt	.+2      	; 0x1b62 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xbc>
    1b60:	be c1       	rjmp	.+892    	; 0x1ede <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    1b62:	58 96       	adiw	r26, 0x18	; 24
    1b64:	8c 91       	ld	r24, X
    1b66:	81 11       	cpse	r24, r1
    1b68:	04 c0       	rjmp	.+8      	; 0x1b72 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    1b6a:	6f ea       	ldi	r22, 0xAF	; 175
    1b6c:	6d 15       	cp	r22, r13
    1b6e:	08 f4       	brcc	.+2      	; 0x1b72 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    1b70:	d3 94       	inc	r13
    1b72:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1b74:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1b76:	ed 91       	ld	r30, X+
    1b78:	fc 91       	ld	r31, X
    1b7a:	11 97       	sbiw	r26, 0x01	; 1
    1b7c:	02 84       	ldd	r0, Z+10	; 0x0a
    1b7e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1b80:	e0 2d       	mov	r30, r0
    1b82:	cd 01       	movw	r24, r26
    1b84:	19 95       	eicall
    1b86:	b5 e0       	ldi	r27, 0x05	; 5
    1b88:	db 9e       	mul	r13, r27
    1b8a:	c0 01       	movw	r24, r0
    1b8c:	11 24       	eor	r1, r1
    1b8e:	ec 2d       	mov	r30, r12
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	f9 8b       	std	Y+17, r31	; 0x11
    1b94:	e8 8b       	std	Y+16, r30	; 0x10
    1b96:	92 01       	movw	r18, r4
    1b98:	2b 5f       	subi	r18, 0xFB	; 251
    1b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9c:	3b 8b       	std	Y+19, r19	; 0x13
    1b9e:	2a 8b       	std	Y+18, r18	; 0x12
    1ba0:	32 01       	movw	r6, r4
    1ba2:	5d 82       	std	Y+5, r5	; 0x05
    1ba4:	4c 82       	std	Y+4, r4	; 0x04
    1ba6:	ac 01       	movw	r20, r24
    1ba8:	44 19       	sub	r20, r4
    1baa:	55 09       	sbc	r21, r5
    1bac:	5d 8b       	std	Y+21, r21	; 0x15
    1bae:	4c 8b       	std	Y+20, r20	; 0x14
    1bb0:	7b 81       	ldd	r23, Y+3	; 0x03
    1bb2:	67 2f       	mov	r22, r23
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	7f 8b       	std	Y+23, r23	; 0x17
    1bb8:	6e 8b       	std	Y+22, r22	; 0x16
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbe:	08 96       	adiw	r24, 0x08	; 8
    1bc0:	99 8f       	std	Y+25, r25	; 0x19
    1bc2:	88 8f       	std	Y+24, r24	; 0x18
    1bc4:	ec 89       	ldd	r30, Y+20	; 0x14
    1bc6:	fd 89       	ldd	r31, Y+21	; 0x15
    1bc8:	e6 0d       	add	r30, r6
    1bca:	f7 1d       	adc	r31, r7
    1bcc:	e4 5c       	subi	r30, 0xC4	; 196
    1bce:	fe 4f       	sbci	r31, 0xFE	; 254
    1bd0:	d4 90       	lpm	r13, Z
    1bd2:	a9 81       	ldd	r26, Y+1	; 0x01
    1bd4:	ba 81       	ldd	r27, Y+2	; 0x02
    1bd6:	bf 83       	std	Y+7, r27	; 0x07
    1bd8:	ae 83       	std	Y+6, r26	; 0x06
    1bda:	5d 01       	movw	r10, r26
    1bdc:	d0 fe       	sbrs	r13, 0
    1bde:	16 c0       	rjmp	.+44     	; 0x1c0c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x166>
    1be0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1be2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1be4:	ed 91       	ld	r30, X+
    1be6:	fc 91       	ld	r31, X
    1be8:	b1 e0       	ldi	r27, 0x01	; 1
    1bea:	cb 12       	cpse	r12, r27
    1bec:	09 c0       	rjmp	.+18     	; 0x1c00 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    1bee:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf0:	21 30       	cpi	r18, 0x01	; 1
    1bf2:	31 f4       	brne	.+12     	; 0x1c00 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    1bf4:	04 84       	ldd	r0, Z+12	; 0x0c
    1bf6:	f5 85       	ldd	r31, Z+13	; 0x0d
    1bf8:	e0 2d       	mov	r30, r0
    1bfa:	28 85       	ldd	r18, Y+8	; 0x08
    1bfc:	39 85       	ldd	r19, Y+9	; 0x09
    1bfe:	19 c0       	rjmp	.+50     	; 0x1c32 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x18c>
    1c00:	06 84       	ldd	r0, Z+14	; 0x0e
    1c02:	f7 85       	ldd	r31, Z+15	; 0x0f
    1c04:	e0 2d       	mov	r30, r0
    1c06:	e8 84       	ldd	r14, Y+8	; 0x08
    1c08:	f9 84       	ldd	r15, Y+9	; 0x09
    1c0a:	1d c0       	rjmp	.+58     	; 0x1c46 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a0>
    1c0c:	48 85       	ldd	r20, Y+8	; 0x08
    1c0e:	59 85       	ldd	r21, Y+9	; 0x09
    1c10:	48 15       	cp	r20, r8
    1c12:	59 05       	cpc	r21, r9
    1c14:	11 f1       	breq	.+68     	; 0x1c5a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    1c16:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1c18:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1c1a:	ed 91       	ld	r30, X+
    1c1c:	fc 91       	ld	r31, X
    1c1e:	b1 e0       	ldi	r27, 0x01	; 1
    1c20:	cb 12       	cpse	r12, r27
    1c22:	0d c0       	rjmp	.+26     	; 0x1c3e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    1c24:	2b 81       	ldd	r18, Y+3	; 0x03
    1c26:	21 30       	cpi	r18, 0x01	; 1
    1c28:	51 f4       	brne	.+20     	; 0x1c3e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    1c2a:	04 84       	ldd	r0, Z+12	; 0x0c
    1c2c:	f5 85       	ldd	r31, Z+13	; 0x0d
    1c2e:	e0 2d       	mov	r30, r0
    1c30:	94 01       	movw	r18, r8
    1c32:	a5 01       	movw	r20, r10
    1c34:	b3 01       	movw	r22, r6
    1c36:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c38:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c3a:	19 95       	eicall
    1c3c:	0e c0       	rjmp	.+28     	; 0x1c5a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    1c3e:	06 84       	ldd	r0, Z+14	; 0x0e
    1c40:	f7 85       	ldd	r31, Z+15	; 0x0f
    1c42:	e0 2d       	mov	r30, r0
    1c44:	74 01       	movw	r14, r8
    1c46:	0a 85       	ldd	r16, Y+10	; 0x0a
    1c48:	1b 85       	ldd	r17, Y+11	; 0x0b
    1c4a:	91 01       	movw	r18, r2
    1c4c:	4e 81       	ldd	r20, Y+6	; 0x06
    1c4e:	5f 81       	ldd	r21, Y+7	; 0x07
    1c50:	6c 81       	ldd	r22, Y+4	; 0x04
    1c52:	7d 81       	ldd	r23, Y+5	; 0x05
    1c54:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c56:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c58:	19 95       	eicall
    1c5a:	d6 94       	lsr	r13
    1c5c:	4e 81       	ldd	r20, Y+6	; 0x06
    1c5e:	5f 81       	ldd	r21, Y+7	; 0x07
    1c60:	6e 89       	ldd	r22, Y+22	; 0x16
    1c62:	7f 89       	ldd	r23, Y+23	; 0x17
    1c64:	46 0f       	add	r20, r22
    1c66:	57 1f       	adc	r21, r23
    1c68:	5f 83       	std	Y+7, r21	; 0x07
    1c6a:	4e 83       	std	Y+6, r20	; 0x06
    1c6c:	7f ef       	ldi	r23, 0xFF	; 255
    1c6e:	a7 1a       	sub	r10, r23
    1c70:	b7 0a       	sbc	r11, r23
    1c72:	88 8d       	ldd	r24, Y+24	; 0x18
    1c74:	99 8d       	ldd	r25, Y+25	; 0x19
    1c76:	a8 16       	cp	r10, r24
    1c78:	b9 06       	cpc	r11, r25
    1c7a:	09 f0       	breq	.+2      	; 0x1c7e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1d8>
    1c7c:	af cf       	rjmp	.-162    	; 0x1bdc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x136>
    1c7e:	ac 81       	ldd	r26, Y+4	; 0x04
    1c80:	bd 81       	ldd	r27, Y+5	; 0x05
    1c82:	e8 89       	ldd	r30, Y+16	; 0x10
    1c84:	f9 89       	ldd	r31, Y+17	; 0x11
    1c86:	ae 0f       	add	r26, r30
    1c88:	bf 1f       	adc	r27, r31
    1c8a:	bd 83       	std	Y+5, r27	; 0x05
    1c8c:	ac 83       	std	Y+4, r26	; 0x04
    1c8e:	ff ef       	ldi	r31, 0xFF	; 255
    1c90:	6f 1a       	sub	r6, r31
    1c92:	7f 0a       	sbc	r7, r31
    1c94:	2a 89       	ldd	r18, Y+18	; 0x12
    1c96:	3b 89       	ldd	r19, Y+19	; 0x13
    1c98:	62 16       	cp	r6, r18
    1c9a:	73 06       	cpc	r7, r19
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1fa>
    1c9e:	92 cf       	rjmp	.-220    	; 0x1bc4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x11e>
    1ca0:	48 85       	ldd	r20, Y+8	; 0x08
    1ca2:	59 85       	ldd	r21, Y+9	; 0x09
    1ca4:	48 15       	cp	r20, r8
    1ca6:	59 05       	cpc	r21, r9
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x206>
    1caa:	f7 c0       	rjmp	.+494    	; 0x1e9a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    1cac:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1cae:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1cb0:	ed 91       	ld	r30, X+
    1cb2:	fc 91       	ld	r31, X
    1cb4:	b1 e0       	ldi	r27, 0x01	; 1
    1cb6:	cb 12       	cpse	r12, r27
    1cb8:	12 c0       	rjmp	.+36     	; 0x1cde <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    1cba:	2b 81       	ldd	r18, Y+3	; 0x03
    1cbc:	21 30       	cpi	r18, 0x01	; 1
    1cbe:	79 f4       	brne	.+30     	; 0x1cde <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    1cc0:	b2 01       	movw	r22, r4
    1cc2:	6b 5f       	subi	r22, 0xFB	; 251
    1cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc6:	00 88       	ldd	r0, Z+16	; 0x10
    1cc8:	f1 89       	ldd	r31, Z+17	; 0x11
    1cca:	e0 2d       	mov	r30, r0
    1ccc:	84 01       	movw	r16, r8
    1cce:	28 e0       	ldi	r18, 0x08	; 8
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	49 81       	ldd	r20, Y+1	; 0x01
    1cd4:	5a 81       	ldd	r21, Y+2	; 0x02
    1cd6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cd8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1cda:	19 95       	eicall
    1cdc:	de c0       	rjmp	.+444    	; 0x1e9a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    1cde:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ce0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ce2:	62 19       	sub	r22, r2
    1ce4:	73 09       	sbc	r23, r3
    1ce6:	06 84       	ldd	r0, Z+14	; 0x0e
    1ce8:	f7 85       	ldd	r31, Z+15	; 0x0f
    1cea:	e0 2d       	mov	r30, r0
    1cec:	74 01       	movw	r14, r8
    1cee:	0e 85       	ldd	r16, Y+14	; 0x0e
    1cf0:	1f 85       	ldd	r17, Y+15	; 0x0f
    1cf2:	91 01       	movw	r18, r2
    1cf4:	49 81       	ldd	r20, Y+1	; 0x01
    1cf6:	5a 81       	ldd	r21, Y+2	; 0x02
    1cf8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cfa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1cfc:	19 95       	eicall
    1cfe:	cd c0       	rjmp	.+410    	; 0x1e9a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    1d00:	f9 01       	movw	r30, r18
    1d02:	34 96       	adiw	r30, 0x04	; 4
    1d04:	e4 91       	lpm	r30, Z
    1d06:	de 1a       	sub	r13, r30
    1d08:	f9 01       	movw	r30, r18
    1d0a:	32 96       	adiw	r30, 0x02	; 2
    1d0c:	85 91       	lpm	r24, Z+
    1d0e:	94 91       	lpm	r25, Z
    1d10:	b7 e0       	ldi	r27, 0x07	; 7
    1d12:	db 9e       	mul	r13, r27
    1d14:	80 0d       	add	r24, r0
    1d16:	91 1d       	adc	r25, r1
    1d18:	11 24       	eor	r1, r1
    1d1a:	f9 01       	movw	r30, r18
    1d1c:	25 91       	lpm	r18, Z+
    1d1e:	34 91       	lpm	r19, Z
    1d20:	39 8b       	std	Y+17, r19	; 0x11
    1d22:	28 8b       	std	Y+16, r18	; 0x10
    1d24:	fc 01       	movw	r30, r24
    1d26:	25 90       	lpm	r2, Z+
    1d28:	34 90       	lpm	r3, Z
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	32 96       	adiw	r30, 0x02	; 2
    1d2e:	74 90       	lpm	r7, Z
    1d30:	31 96       	adiw	r30, 0x01	; 1
    1d32:	a4 90       	lpm	r10, Z
    1d34:	32 96       	adiw	r30, 0x02	; 2
    1d36:	94 90       	lpm	r9, Z
    1d38:	31 96       	adiw	r30, 0x01	; 1
    1d3a:	b4 90       	lpm	r11, Z
    1d3c:	31 e0       	ldi	r19, 0x01	; 1
    1d3e:	3c 15       	cp	r19, r12
    1d40:	18 f0       	brcs	.+6      	; 0x1d48 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2a2>
    1d42:	4b 81       	ldd	r20, Y+3	; 0x03
    1d44:	42 30       	cpi	r20, 0x02	; 2
    1d46:	68 f0       	brcs	.+26     	; 0x1d62 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2bc>
    1d48:	69 2d       	mov	r22, r9
    1d4a:	09 2c       	mov	r0, r9
    1d4c:	00 0c       	add	r0, r0
    1d4e:	77 0b       	sbc	r23, r23
    1d50:	7d 83       	std	Y+5, r23	; 0x05
    1d52:	6c 83       	std	Y+4, r22	; 0x04
    1d54:	8b 2d       	mov	r24, r11
    1d56:	0b 2c       	mov	r0, r11
    1d58:	00 0c       	add	r0, r0
    1d5a:	99 0b       	sbc	r25, r25
    1d5c:	9f 83       	std	Y+7, r25	; 0x07
    1d5e:	8e 83       	std	Y+6, r24	; 0x06
    1d60:	04 c0       	rjmp	.+8      	; 0x1d6a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2c4>
    1d62:	1f 82       	std	Y+7, r1	; 0x07
    1d64:	1e 82       	std	Y+6, r1	; 0x06
    1d66:	1d 82       	std	Y+5, r1	; 0x05
    1d68:	1c 82       	std	Y+4, r1	; 0x04
    1d6a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1d6c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1d6e:	ed 91       	ld	r30, X+
    1d70:	fc 91       	ld	r31, X
    1d72:	11 97       	sbiw	r26, 0x01	; 1
    1d74:	02 84       	ldd	r0, Z+10	; 0x0a
    1d76:	f3 85       	ldd	r31, Z+11	; 0x0b
    1d78:	e0 2d       	mov	r30, r0
    1d7a:	cd 01       	movw	r24, r26
    1d7c:	19 95       	eicall
    1d7e:	61 2c       	mov	r6, r1
    1d80:	d1 2c       	mov	r13, r1
    1d82:	81 2c       	mov	r8, r1
    1d84:	fb 81       	ldd	r31, Y+3	; 0x03
    1d86:	ef 2f       	mov	r30, r31
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	fb 87       	std	Y+11, r31	; 0x0b
    1d8c:	ea 87       	std	Y+10, r30	; 0x0a
    1d8e:	2c 2d       	mov	r18, r12
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	3d 87       	std	Y+13, r19	; 0x0d
    1d94:	2c 87       	std	Y+12, r18	; 0x0c
    1d96:	49 81       	ldd	r20, Y+1	; 0x01
    1d98:	5a 81       	ldd	r21, Y+2	; 0x02
    1d9a:	4b 0d       	add	r20, r11
    1d9c:	51 1d       	adc	r21, r1
    1d9e:	b7 fc       	sbrc	r11, 7
    1da0:	5a 95       	dec	r21
    1da2:	5d 8b       	std	Y+21, r21	; 0x15
    1da4:	4c 8b       	std	Y+20, r20	; 0x14
    1da6:	b2 01       	movw	r22, r4
    1da8:	69 0d       	add	r22, r9
    1daa:	71 1d       	adc	r23, r1
    1dac:	97 fc       	sbrc	r9, 7
    1dae:	7a 95       	dec	r23
    1db0:	7f 8b       	std	Y+23, r23	; 0x17
    1db2:	6e 8b       	std	Y+22, r22	; 0x16
    1db4:	8a 14       	cp	r8, r10
    1db6:	08 f0       	brcs	.+2      	; 0x1dba <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x314>
    1db8:	70 c0       	rjmp	.+224    	; 0x1e9a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    1dba:	28 2d       	mov	r18, r8
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	4e 81       	ldd	r20, Y+6	; 0x06
    1dc0:	5f 81       	ldd	r21, Y+7	; 0x07
    1dc2:	42 0f       	add	r20, r18
    1dc4:	53 1f       	adc	r21, r19
    1dc6:	aa 85       	ldd	r26, Y+10	; 0x0a
    1dc8:	bb 85       	ldd	r27, Y+11	; 0x0b
    1dca:	a4 9f       	mul	r26, r20
    1dcc:	c0 01       	movw	r24, r0
    1dce:	a5 9f       	mul	r26, r21
    1dd0:	90 0d       	add	r25, r0
    1dd2:	b4 9f       	mul	r27, r20
    1dd4:	90 0d       	add	r25, r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dda:	fa 81       	ldd	r31, Y+2	; 0x02
    1ddc:	e8 0f       	add	r30, r24
    1dde:	f9 1f       	adc	r31, r25
    1de0:	ff 87       	std	Y+15, r31	; 0x0f
    1de2:	ee 87       	std	Y+14, r30	; 0x0e
    1de4:	86 2d       	mov	r24, r6
    1de6:	91 2c       	mov	r9, r1
    1de8:	4c 89       	ldd	r20, Y+20	; 0x14
    1dea:	5d 89       	ldd	r21, Y+21	; 0x15
    1dec:	42 0f       	add	r20, r18
    1dee:	53 1f       	adc	r21, r19
    1df0:	5b 8b       	std	Y+19, r21	; 0x13
    1df2:	4a 8b       	std	Y+18, r20	; 0x12
    1df4:	97 14       	cp	r9, r7
    1df6:	08 f0       	brcs	.+2      	; 0x1dfa <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x354>
    1df8:	4d c0       	rjmp	.+154    	; 0x1e94 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3ee>
    1dfa:	bb 24       	eor	r11, r11
    1dfc:	b3 94       	inc	r11
    1dfe:	b8 0e       	add	r11, r24
    1e00:	87 70       	andi	r24, 0x07	; 7
    1e02:	41 f4       	brne	.+16     	; 0x1e14 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x36e>
    1e04:	c1 01       	movw	r24, r2
    1e06:	01 96       	adiw	r24, 0x01	; 1
    1e08:	e8 89       	ldd	r30, Y+16	; 0x10
    1e0a:	f9 89       	ldd	r31, Y+17	; 0x11
    1e0c:	e2 0d       	add	r30, r2
    1e0e:	f3 1d       	adc	r31, r3
    1e10:	d4 90       	lpm	r13, Z
    1e12:	1c 01       	movw	r2, r24
    1e14:	d7 fe       	sbrs	r13, 7
    1e16:	3a c0       	rjmp	.+116    	; 0x1e8c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    1e18:	51 e0       	ldi	r21, 0x01	; 1
    1e1a:	c5 12       	cpse	r12, r21
    1e1c:	16 c0       	rjmp	.+44     	; 0x1e4a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    1e1e:	6b 81       	ldd	r22, Y+3	; 0x03
    1e20:	61 30       	cpi	r22, 0x01	; 1
    1e22:	99 f4       	brne	.+38     	; 0x1e4a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    1e24:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1e26:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1e28:	ed 91       	ld	r30, X+
    1e2a:	fc 91       	ld	r31, X
    1e2c:	11 97       	sbiw	r26, 0x01	; 1
    1e2e:	04 84       	ldd	r0, Z+12	; 0x0c
    1e30:	f5 85       	ldd	r31, Z+13	; 0x0d
    1e32:	e0 2d       	mov	r30, r0
    1e34:	28 85       	ldd	r18, Y+8	; 0x08
    1e36:	39 85       	ldd	r19, Y+9	; 0x09
    1e38:	4a 89       	ldd	r20, Y+18	; 0x12
    1e3a:	5b 89       	ldd	r21, Y+19	; 0x13
    1e3c:	6e 89       	ldd	r22, Y+22	; 0x16
    1e3e:	7f 89       	ldd	r23, Y+23	; 0x17
    1e40:	69 0d       	add	r22, r9
    1e42:	71 1d       	adc	r23, r1
    1e44:	cd 01       	movw	r24, r26
    1e46:	19 95       	eicall
    1e48:	21 c0       	rjmp	.+66     	; 0x1e8c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    1e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4e:	89 0d       	add	r24, r9
    1e50:	91 1d       	adc	r25, r1
    1e52:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e54:	fd 85       	ldd	r31, Y+13	; 0x0d
    1e56:	8e 9f       	mul	r24, r30
    1e58:	b0 01       	movw	r22, r0
    1e5a:	8f 9f       	mul	r24, r31
    1e5c:	70 0d       	add	r23, r0
    1e5e:	9e 9f       	mul	r25, r30
    1e60:	70 0d       	add	r23, r0
    1e62:	11 24       	eor	r1, r1
    1e64:	64 0d       	add	r22, r4
    1e66:	75 1d       	adc	r23, r5
    1e68:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1e6a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1e6c:	ed 91       	ld	r30, X+
    1e6e:	fc 91       	ld	r31, X
    1e70:	11 97       	sbiw	r26, 0x01	; 1
    1e72:	06 84       	ldd	r0, Z+14	; 0x0e
    1e74:	f7 85       	ldd	r31, Z+15	; 0x0f
    1e76:	e0 2d       	mov	r30, r0
    1e78:	e8 84       	ldd	r14, Y+8	; 0x08
    1e7a:	f9 84       	ldd	r15, Y+9	; 0x09
    1e7c:	0a 85       	ldd	r16, Y+10	; 0x0a
    1e7e:	1b 85       	ldd	r17, Y+11	; 0x0b
    1e80:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e82:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e84:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e86:	5f 85       	ldd	r21, Y+15	; 0x0f
    1e88:	cd 01       	movw	r24, r26
    1e8a:	19 95       	eicall
    1e8c:	dd 0c       	add	r13, r13
    1e8e:	93 94       	inc	r9
    1e90:	8b 2d       	mov	r24, r11
    1e92:	b0 cf       	rjmp	.-160    	; 0x1df4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x34e>
    1e94:	67 0c       	add	r6, r7
    1e96:	83 94       	inc	r8
    1e98:	8d cf       	rjmp	.-230    	; 0x1db4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x30e>
    1e9a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1e9c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1e9e:	ed 91       	ld	r30, X+
    1ea0:	fc 91       	ld	r31, X
    1ea2:	11 97       	sbiw	r26, 0x01	; 1
    1ea4:	06 88       	ldd	r0, Z+22	; 0x16
    1ea6:	f7 89       	ldd	r31, Z+23	; 0x17
    1ea8:	e0 2d       	mov	r30, r0
    1eaa:	cd 01       	movw	r24, r26
    1eac:	6b 96       	adiw	r28, 0x1b	; 27
    1eae:	0f b6       	in	r0, 0x3f	; 63
    1eb0:	f8 94       	cli
    1eb2:	de bf       	out	0x3e, r29	; 62
    1eb4:	0f be       	out	0x3f, r0	; 63
    1eb6:	cd bf       	out	0x3d, r28	; 61
    1eb8:	df 91       	pop	r29
    1eba:	cf 91       	pop	r28
    1ebc:	1f 91       	pop	r17
    1ebe:	0f 91       	pop	r16
    1ec0:	ff 90       	pop	r15
    1ec2:	ef 90       	pop	r14
    1ec4:	df 90       	pop	r13
    1ec6:	cf 90       	pop	r12
    1ec8:	bf 90       	pop	r11
    1eca:	af 90       	pop	r10
    1ecc:	9f 90       	pop	r9
    1ece:	8f 90       	pop	r8
    1ed0:	7f 90       	pop	r7
    1ed2:	6f 90       	pop	r6
    1ed4:	5f 90       	pop	r5
    1ed6:	4f 90       	pop	r4
    1ed8:	3f 90       	pop	r3
    1eda:	2f 90       	pop	r2
    1edc:	19 94       	eijmp
    1ede:	6b 96       	adiw	r28, 0x1b	; 27
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	1f 91       	pop	r17
    1ef0:	0f 91       	pop	r16
    1ef2:	ff 90       	pop	r15
    1ef4:	ef 90       	pop	r14
    1ef6:	df 90       	pop	r13
    1ef8:	cf 90       	pop	r12
    1efa:	bf 90       	pop	r11
    1efc:	af 90       	pop	r10
    1efe:	9f 90       	pop	r9
    1f00:	8f 90       	pop	r8
    1f02:	7f 90       	pop	r7
    1f04:	6f 90       	pop	r6
    1f06:	5f 90       	pop	r5
    1f08:	4f 90       	pop	r4
    1f0a:	3f 90       	pop	r3
    1f0c:	2f 90       	pop	r2
    1f0e:	08 95       	ret

00001f10 <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    1f10:	8f 92       	push	r8
    1f12:	9f 92       	push	r9
    1f14:	af 92       	push	r10
    1f16:	cf 92       	push	r12
    1f18:	ef 92       	push	r14
    1f1a:	ff 92       	push	r15
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	ec 01       	movw	r28, r24
    1f26:	26 2f       	mov	r18, r22
  if (!gfxFont) { // 'Classic' built-in font
    1f28:	89 8d       	ldd	r24, Y+25	; 0x19
    1f2a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	09 f0       	breq	.+2      	; 0x1f32 <_ZN12Adafruit_GFX5writeEh+0x22>
    1f30:	41 c0       	rjmp	.+130    	; 0x1fb4 <_ZN12Adafruit_GFX5writeEh+0xa4>

    if (c == '\n') {              // Newline?
    1f32:	6a 30       	cpi	r22, 0x0A	; 10
    1f34:	59 f4       	brne	.+22     	; 0x1f4c <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
    1f36:	1d 86       	std	Y+13, r1	; 0x0d
    1f38:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += textsize_y * 8; // advance y one line
    1f3a:	2d 89       	ldd	r18, Y+21	; 0x15
    1f3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f3e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f40:	38 e0       	ldi	r19, 0x08	; 8
    1f42:	23 9f       	mul	r18, r19
    1f44:	80 0d       	add	r24, r0
    1f46:	91 1d       	adc	r25, r1
    1f48:	11 24       	eor	r1, r1
    1f4a:	42 c0       	rjmp	.+132    	; 0x1fd0 <_ZN12Adafruit_GFX5writeEh+0xc0>
    } else if (c != '\r') {       // Ignore carriage returns
    1f4c:	6d 30       	cpi	r22, 0x0D	; 13
    1f4e:	09 f4       	brne	.+2      	; 0x1f52 <_ZN12Adafruit_GFX5writeEh+0x42>
    1f50:	a8 c0       	rjmp	.+336    	; 0x20a2 <__DATA_REGION_LENGTH__+0xa2>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    1f52:	8f 89       	ldd	r24, Y+23	; 0x17
    1f54:	88 23       	and	r24, r24
    1f56:	c9 f0       	breq	.+50     	; 0x1f8a <_ZN12Adafruit_GFX5writeEh+0x7a>
    1f58:	3c 89       	ldd	r19, Y+20	; 0x14
    1f5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f5c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f5e:	46 e0       	ldi	r20, 0x06	; 6
    1f60:	34 9f       	mul	r19, r20
    1f62:	80 0d       	add	r24, r0
    1f64:	91 1d       	adc	r25, r1
    1f66:	11 24       	eor	r1, r1
    1f68:	48 85       	ldd	r20, Y+8	; 0x08
    1f6a:	59 85       	ldd	r21, Y+9	; 0x09
    1f6c:	48 17       	cp	r20, r24
    1f6e:	59 07       	cpc	r21, r25
    1f70:	64 f4       	brge	.+24     	; 0x1f8a <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x = 0;                                       // Reset x to zero,
    1f72:	1d 86       	std	Y+13, r1	; 0x0d
    1f74:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize_y * 8; // advance y one line
    1f76:	3d 89       	ldd	r19, Y+21	; 0x15
    1f78:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f7a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f7c:	48 e0       	ldi	r20, 0x08	; 8
    1f7e:	34 9f       	mul	r19, r20
    1f80:	80 0d       	add	r24, r0
    1f82:	91 1d       	adc	r25, r1
    1f84:	11 24       	eor	r1, r1
    1f86:	9f 87       	std	Y+15, r25	; 0x0f
    1f88:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
               textsize_y);
    1f8a:	ea 88       	ldd	r14, Y+18	; 0x12
    1f8c:	fb 88       	ldd	r15, Y+19	; 0x13
    1f8e:	08 89       	ldd	r16, Y+16	; 0x10
    1f90:	19 89       	ldd	r17, Y+17	; 0x11
    1f92:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f94:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f96:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f98:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f9a:	ad 88       	ldd	r10, Y+21	; 0x15
    1f9c:	cc 88       	ldd	r12, Y+20	; 0x14
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	82 dd       	rcall	.-1276   	; 0x1aa6 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
      cursor_x += textsize_x * 6; // Advance x one char
    1fa2:	2c 89       	ldd	r18, Y+20	; 0x14
    1fa4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fa6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fa8:	36 e0       	ldi	r19, 0x06	; 6
    1faa:	23 9f       	mul	r18, r19
    1fac:	80 0d       	add	r24, r0
    1fae:	91 1d       	adc	r25, r1
    1fb0:	11 24       	eor	r1, r1
    1fb2:	3e c0       	rjmp	.+124    	; 0x2030 <__DATA_REGION_LENGTH__+0x30>
    }

  } else { // Custom font

    if (c == '\n') {
    1fb4:	6a 30       	cpi	r22, 0x0A	; 10
    1fb6:	79 f4       	brne	.+30     	; 0x1fd6 <_ZN12Adafruit_GFX5writeEh+0xc6>
      cursor_x = 0;
    1fb8:	1d 86       	std	Y+13, r1	; 0x0d
    1fba:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    1fbc:	2d 89       	ldd	r18, Y+21	; 0x15
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	38 96       	adiw	r30, 0x08	; 8
    1fc2:	e4 91       	lpm	r30, Z
    1fc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fc8:	2e 9f       	mul	r18, r30
    1fca:	80 0d       	add	r24, r0
    1fcc:	91 1d       	adc	r25, r1
    1fce:	11 24       	eor	r1, r1
    1fd0:	9f 87       	std	Y+15, r25	; 0x0f
    1fd2:	8e 87       	std	Y+14, r24	; 0x0e
    1fd4:	66 c0       	rjmp	.+204    	; 0x20a2 <__DATA_REGION_LENGTH__+0xa2>
    } else if (c != '\r') {
    1fd6:	6d 30       	cpi	r22, 0x0D	; 13
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <_ZN12Adafruit_GFX5writeEh+0xcc>
    1fda:	63 c0       	rjmp	.+198    	; 0x20a2 <__DATA_REGION_LENGTH__+0xa2>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    1fdc:	fc 01       	movw	r30, r24
    1fde:	34 96       	adiw	r30, 0x04	; 4
    1fe0:	34 91       	lpm	r19, Z
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    1fe2:	63 17       	cp	r22, r19
    1fe4:	08 f4       	brcc	.+2      	; 0x1fe8 <_ZN12Adafruit_GFX5writeEh+0xd8>
    1fe6:	5d c0       	rjmp	.+186    	; 0x20a2 <__DATA_REGION_LENGTH__+0xa2>
    1fe8:	32 96       	adiw	r30, 0x02	; 2
    1fea:	e4 91       	lpm	r30, Z
    1fec:	e6 17       	cp	r30, r22
    1fee:	08 f4       	brcc	.+2      	; 0x1ff2 <_ZN12Adafruit_GFX5writeEh+0xe2>
    1ff0:	58 c0       	rjmp	.+176    	; 0x20a2 <__DATA_REGION_LENGTH__+0xa2>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    1ff2:	46 2f       	mov	r20, r22
    1ff4:	43 1b       	sub	r20, r19
    1ff6:	34 2f       	mov	r19, r20
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	32 96       	adiw	r30, 0x02	; 2
    1ffc:	85 90       	lpm	r8, Z+
    1ffe:	94 90       	lpm	r9, Z
    2000:	47 e0       	ldi	r20, 0x07	; 7
    2002:	34 9f       	mul	r19, r20
    2004:	80 0c       	add	r8, r0
    2006:	91 1c       	adc	r9, r1
    2008:	11 24       	eor	r1, r1
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    200a:	f4 01       	movw	r30, r8
    200c:	32 96       	adiw	r30, 0x02	; 2
    200e:	34 91       	lpm	r19, Z
                h = pgm_read_byte(&glyph->height);
    2010:	31 96       	adiw	r30, 0x01	; 1
    2012:	e4 91       	lpm	r30, Z
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    2014:	33 23       	and	r19, r19
    2016:	11 f0       	breq	.+4      	; 0x201c <__DATA_REGION_LENGTH__+0x1c>
    2018:	e1 11       	cpse	r30, r1
    201a:	0d c0       	rjmp	.+26     	; 0x2036 <__DATA_REGION_LENGTH__+0x36>
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    201c:	f4 01       	movw	r30, r8
    201e:	34 96       	adiw	r30, 0x04	; 4
    2020:	e4 91       	lpm	r30, Z
    2022:	2c 89       	ldd	r18, Y+20	; 0x14
    2024:	8c 85       	ldd	r24, Y+12	; 0x0c
    2026:	9d 85       	ldd	r25, Y+13	; 0x0d
    2028:	e2 9f       	mul	r30, r18
    202a:	80 0d       	add	r24, r0
    202c:	91 1d       	adc	r25, r1
    202e:	11 24       	eor	r1, r1
    2030:	9d 87       	std	Y+13, r25	; 0x0d
    2032:	8c 87       	std	Y+12, r24	; 0x0c
      }
    }
  }
  return 1;
    2034:	36 c0       	rjmp	.+108    	; 0x20a2 <__DATA_REGION_LENGTH__+0xa2>
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    2036:	f4 01       	movw	r30, r8
    2038:	35 96       	adiw	r30, 0x05	; 5
    203a:	44 91       	lpm	r20, Z
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    203c:	5f 89       	ldd	r21, Y+23	; 0x17
    203e:	55 23       	and	r21, r21
    2040:	19 f1       	breq	.+70     	; 0x2088 <__DATA_REGION_LENGTH__+0x88>
    2042:	5c 89       	ldd	r21, Y+20	; 0x14
    2044:	e3 2f       	mov	r30, r19
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	e4 0f       	add	r30, r20
    204a:	f1 1d       	adc	r31, r1
    204c:	47 fd       	sbrc	r20, 7
    204e:	fa 95       	dec	r31
    2050:	5e 9f       	mul	r21, r30
    2052:	b0 01       	movw	r22, r0
    2054:	5f 9f       	mul	r21, r31
    2056:	70 0d       	add	r23, r0
    2058:	11 24       	eor	r1, r1
    205a:	4c 85       	ldd	r20, Y+12	; 0x0c
    205c:	5d 85       	ldd	r21, Y+13	; 0x0d
    205e:	46 0f       	add	r20, r22
    2060:	57 1f       	adc	r21, r23
    2062:	68 85       	ldd	r22, Y+8	; 0x08
    2064:	79 85       	ldd	r23, Y+9	; 0x09
    2066:	64 17       	cp	r22, r20
    2068:	75 07       	cpc	r23, r21
    206a:	74 f4       	brge	.+28     	; 0x2088 <__DATA_REGION_LENGTH__+0x88>
            cursor_x = 0;
    206c:	1d 86       	std	Y+13, r1	; 0x0d
    206e:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize_y *
    2070:	3d 89       	ldd	r19, Y+21	; 0x15
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    2072:	fc 01       	movw	r30, r24
    2074:	38 96       	adiw	r30, 0x08	; 8
    2076:	e4 91       	lpm	r30, Z
    2078:	8e 85       	ldd	r24, Y+14	; 0x0e
    207a:	9f 85       	ldd	r25, Y+15	; 0x0f
    207c:	3e 9f       	mul	r19, r30
    207e:	80 0d       	add	r24, r0
    2080:	91 1d       	adc	r25, r1
    2082:	11 24       	eor	r1, r1
    2084:	9f 87       	std	Y+15, r25	; 0x0f
    2086:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
    2088:	ea 88       	ldd	r14, Y+18	; 0x12
    208a:	fb 88       	ldd	r15, Y+19	; 0x13
    208c:	08 89       	ldd	r16, Y+16	; 0x10
    208e:	19 89       	ldd	r17, Y+17	; 0x11
    2090:	4e 85       	ldd	r20, Y+14	; 0x0e
    2092:	5f 85       	ldd	r21, Y+15	; 0x0f
    2094:	6c 85       	ldd	r22, Y+12	; 0x0c
    2096:	7d 85       	ldd	r23, Y+13	; 0x0d
    2098:	ad 88       	ldd	r10, Y+21	; 0x15
    209a:	cc 88       	ldd	r12, Y+20	; 0x14
    209c:	ce 01       	movw	r24, r28
    209e:	03 dd       	rcall	.-1530   	; 0x1aa6 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    20a0:	bd cf       	rjmp	.-134    	; 0x201c <__DATA_REGION_LENGTH__+0x1c>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	df 91       	pop	r29
    20a8:	cf 91       	pop	r28
    20aa:	1f 91       	pop	r17
    20ac:	0f 91       	pop	r16
    20ae:	ff 90       	pop	r15
    20b0:	ef 90       	pop	r14
    20b2:	cf 90       	pop	r12
    20b4:	af 90       	pop	r10
    20b6:	9f 90       	pop	r9
    20b8:	8f 90       	pop	r8
    20ba:	08 95       	ret

000020bc <_ZN12Adafruit_GFX11setTextSizeEhh>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    20bc:	61 11       	cpse	r22, r1
    20be:	01 c0       	rjmp	.+2      	; 0x20c2 <_ZN12Adafruit_GFX11setTextSizeEhh+0x6>
    20c0:	61 e0       	ldi	r22, 0x01	; 1
    20c2:	fc 01       	movw	r30, r24
    20c4:	64 8b       	std	Z+20, r22	; 0x14
  textsize_y = (s_y > 0) ? s_y : 1;
    20c6:	41 11       	cpse	r20, r1
    20c8:	01 c0       	rjmp	.+2      	; 0x20cc <_ZN12Adafruit_GFX11setTextSizeEhh+0x10>
    20ca:	41 e0       	ldi	r20, 0x01	; 1
    20cc:	fc 01       	movw	r30, r24
    20ce:	45 8b       	std	Z+21, r20	; 0x15
    20d0:	08 95       	ret

000020d2 <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
    20d2:	46 2f       	mov	r20, r22
    20d4:	f3 cf       	rjmp	.-26     	; 0x20bc <_ZN12Adafruit_GFX11setTextSizeEhh>

000020d6 <_ZN16Adafruit_SSD13069drawPixelEiij>:
/*!
    @brief  Get base address of display buffer for direct reading or writing.
    @return Pointer to an unsigned 8-bit array, column-major, columns padded
            to full byte boundary if needed.
*/
uint8_t *Adafruit_SSD1306::getBuffer(void) { return buffer; }
    20d6:	fc 01       	movw	r30, r24
    20d8:	77 fd       	sbrc	r23, 7
    20da:	b9 c0       	rjmp	.+370    	; 0x224e <__stack+0x4f>
    20dc:	80 85       	ldd	r24, Z+8	; 0x08
    20de:	91 85       	ldd	r25, Z+9	; 0x09
    20e0:	68 17       	cp	r22, r24
    20e2:	79 07       	cpc	r23, r25
    20e4:	0c f0       	brlt	.+2      	; 0x20e8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x12>
    20e6:	b3 c0       	rjmp	.+358    	; 0x224e <__stack+0x4f>
    20e8:	57 fd       	sbrc	r21, 7
    20ea:	b1 c0       	rjmp	.+354    	; 0x224e <__stack+0x4f>
    20ec:	82 85       	ldd	r24, Z+10	; 0x0a
    20ee:	93 85       	ldd	r25, Z+11	; 0x0b
    20f0:	48 17       	cp	r20, r24
    20f2:	59 07       	cpc	r21, r25
    20f4:	0c f0       	brlt	.+2      	; 0x20f8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x22>
    20f6:	08 95       	ret
    20f8:	86 89       	ldd	r24, Z+22	; 0x16
    20fa:	82 30       	cpi	r24, 0x02	; 2
    20fc:	79 f4       	brne	.+30     	; 0x211c <_ZN16Adafruit_SSD13069drawPixelEiij+0x46>
    20fe:	84 81       	ldd	r24, Z+4	; 0x04
    2100:	95 81       	ldd	r25, Z+5	; 0x05
    2102:	dc 01       	movw	r26, r24
    2104:	a6 1b       	sub	r26, r22
    2106:	b7 0b       	sbc	r27, r23
    2108:	bd 01       	movw	r22, r26
    210a:	61 50       	subi	r22, 0x01	; 1
    210c:	71 09       	sbc	r23, r1
    210e:	86 81       	ldd	r24, Z+6	; 0x06
    2110:	97 81       	ldd	r25, Z+7	; 0x07
    2112:	dc 01       	movw	r26, r24
    2114:	a4 1b       	sub	r26, r20
    2116:	b5 0b       	sbc	r27, r21
    2118:	ad 01       	movw	r20, r26
    211a:	0e c0       	rjmp	.+28     	; 0x2138 <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    211c:	83 30       	cpi	r24, 0x03	; 3
    211e:	09 f0       	breq	.+2      	; 0x2122 <_ZN16Adafruit_SSD13069drawPixelEiij+0x4c>
    2120:	84 c0       	rjmp	.+264    	; 0x222a <__stack+0x2b>
    2122:	64 27       	eor	r22, r20
    2124:	75 27       	eor	r23, r21
    2126:	ca 01       	movw	r24, r20
    2128:	86 27       	eor	r24, r22
    212a:	97 27       	eor	r25, r23
    212c:	68 27       	eor	r22, r24
    212e:	79 27       	eor	r23, r25
    2130:	46 81       	ldd	r20, Z+6	; 0x06
    2132:	57 81       	ldd	r21, Z+7	; 0x07
    2134:	48 1b       	sub	r20, r24
    2136:	59 0b       	sbc	r21, r25
    2138:	41 50       	subi	r20, 0x01	; 1
    213a:	51 09       	sbc	r21, r1
    213c:	21 30       	cpi	r18, 0x01	; 1
    213e:	31 05       	cpc	r19, r1
    2140:	31 f0       	breq	.+12     	; 0x214e <_ZN16Adafruit_SSD13069drawPixelEiij+0x78>
    2142:	48 f1       	brcs	.+82     	; 0x2196 <_ZN16Adafruit_SSD13069drawPixelEiij+0xc0>
    2144:	22 30       	cpi	r18, 0x02	; 2
    2146:	31 05       	cpc	r19, r1
    2148:	09 f4       	brne	.+2      	; 0x214c <_ZN16Adafruit_SSD13069drawPixelEiij+0x76>
    214a:	4a c0       	rjmp	.+148    	; 0x21e0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x10a>
    214c:	08 95       	ret
    214e:	ca 01       	movw	r24, r20
    2150:	57 fd       	sbrc	r21, 7
    2152:	07 96       	adiw	r24, 0x07	; 7
    2154:	9c 01       	movw	r18, r24
    2156:	a3 e0       	ldi	r26, 0x03	; 3
    2158:	35 95       	asr	r19
    215a:	27 95       	ror	r18
    215c:	aa 95       	dec	r26
    215e:	e1 f7       	brne	.-8      	; 0x2158 <_ZN16Adafruit_SSD13069drawPixelEiij+0x82>
    2160:	a4 81       	ldd	r26, Z+4	; 0x04
    2162:	b5 81       	ldd	r27, Z+5	; 0x05
    2164:	2a 9f       	mul	r18, r26
    2166:	c0 01       	movw	r24, r0
    2168:	2b 9f       	mul	r18, r27
    216a:	90 0d       	add	r25, r0
    216c:	3a 9f       	mul	r19, r26
    216e:	90 0d       	add	r25, r0
    2170:	11 24       	eor	r1, r1
    2172:	68 0f       	add	r22, r24
    2174:	79 1f       	adc	r23, r25
    2176:	07 8c       	ldd	r0, Z+31	; 0x1f
    2178:	f0 a1       	ldd	r31, Z+32	; 0x20
    217a:	e0 2d       	mov	r30, r0
    217c:	e6 0f       	add	r30, r22
    217e:	f7 1f       	adc	r31, r23
    2180:	47 70       	andi	r20, 0x07	; 7
    2182:	55 27       	eor	r21, r21
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	01 c0       	rjmp	.+2      	; 0x218c <_ZN16Adafruit_SSD13069drawPixelEiij+0xb6>
    218a:	88 0f       	add	r24, r24
    218c:	4a 95       	dec	r20
    218e:	ea f7       	brpl	.-6      	; 0x218a <_ZN16Adafruit_SSD13069drawPixelEiij+0xb4>
    2190:	90 81       	ld	r25, Z
    2192:	89 2b       	or	r24, r25
    2194:	48 c0       	rjmp	.+144    	; 0x2226 <__stack+0x27>
    2196:	ca 01       	movw	r24, r20
    2198:	57 fd       	sbrc	r21, 7
    219a:	07 96       	adiw	r24, 0x07	; 7
    219c:	9c 01       	movw	r18, r24
    219e:	93 e0       	ldi	r25, 0x03	; 3
    21a0:	35 95       	asr	r19
    21a2:	27 95       	ror	r18
    21a4:	9a 95       	dec	r25
    21a6:	e1 f7       	brne	.-8      	; 0x21a0 <_ZN16Adafruit_SSD13069drawPixelEiij+0xca>
    21a8:	a4 81       	ldd	r26, Z+4	; 0x04
    21aa:	b5 81       	ldd	r27, Z+5	; 0x05
    21ac:	2a 9f       	mul	r18, r26
    21ae:	c0 01       	movw	r24, r0
    21b0:	2b 9f       	mul	r18, r27
    21b2:	90 0d       	add	r25, r0
    21b4:	3a 9f       	mul	r19, r26
    21b6:	90 0d       	add	r25, r0
    21b8:	11 24       	eor	r1, r1
    21ba:	68 0f       	add	r22, r24
    21bc:	79 1f       	adc	r23, r25
    21be:	07 8c       	ldd	r0, Z+31	; 0x1f
    21c0:	f0 a1       	ldd	r31, Z+32	; 0x20
    21c2:	e0 2d       	mov	r30, r0
    21c4:	e6 0f       	add	r30, r22
    21c6:	f7 1f       	adc	r31, r23
    21c8:	47 70       	andi	r20, 0x07	; 7
    21ca:	55 27       	eor	r21, r21
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	01 c0       	rjmp	.+2      	; 0x21d4 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfe>
    21d2:	88 0f       	add	r24, r24
    21d4:	4a 95       	dec	r20
    21d6:	ea f7       	brpl	.-6      	; 0x21d2 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfc>
    21d8:	80 95       	com	r24
    21da:	90 81       	ld	r25, Z
    21dc:	89 23       	and	r24, r25
    21de:	23 c0       	rjmp	.+70     	; 0x2226 <__stack+0x27>
    21e0:	ca 01       	movw	r24, r20
    21e2:	57 fd       	sbrc	r21, 7
    21e4:	07 96       	adiw	r24, 0x07	; 7
    21e6:	9c 01       	movw	r18, r24
    21e8:	83 e0       	ldi	r24, 0x03	; 3
    21ea:	35 95       	asr	r19
    21ec:	27 95       	ror	r18
    21ee:	8a 95       	dec	r24
    21f0:	e1 f7       	brne	.-8      	; 0x21ea <_ZN16Adafruit_SSD13069drawPixelEiij+0x114>
    21f2:	a4 81       	ldd	r26, Z+4	; 0x04
    21f4:	b5 81       	ldd	r27, Z+5	; 0x05
    21f6:	2a 9f       	mul	r18, r26
    21f8:	c0 01       	movw	r24, r0
    21fa:	2b 9f       	mul	r18, r27
    21fc:	90 0d       	add	r25, r0
    21fe:	3a 9f       	mul	r19, r26
    2200:	90 0d       	add	r25, r0
    2202:	11 24       	eor	r1, r1
    2204:	68 0f       	add	r22, r24
    2206:	79 1f       	adc	r23, r25
    2208:	07 8c       	ldd	r0, Z+31	; 0x1f
    220a:	f0 a1       	ldd	r31, Z+32	; 0x20
    220c:	e0 2d       	mov	r30, r0
    220e:	e6 0f       	add	r30, r22
    2210:	f7 1f       	adc	r31, r23
    2212:	47 70       	andi	r20, 0x07	; 7
    2214:	55 27       	eor	r21, r21
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	01 c0       	rjmp	.+2      	; 0x221e <__stack+0x1f>
    221c:	88 0f       	add	r24, r24
    221e:	4a 95       	dec	r20
    2220:	ea f7       	brpl	.-6      	; 0x221c <__stack+0x1d>
    2222:	90 81       	ld	r25, Z
    2224:	89 27       	eor	r24, r25
    2226:	80 83       	st	Z, r24
    2228:	08 95       	ret
    222a:	81 30       	cpi	r24, 0x01	; 1
    222c:	09 f0       	breq	.+2      	; 0x2230 <__stack+0x31>
    222e:	86 cf       	rjmp	.-244    	; 0x213c <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    2230:	64 27       	eor	r22, r20
    2232:	75 27       	eor	r23, r21
    2234:	46 27       	eor	r20, r22
    2236:	57 27       	eor	r21, r23
    2238:	64 27       	eor	r22, r20
    223a:	75 27       	eor	r23, r21
    223c:	84 81       	ldd	r24, Z+4	; 0x04
    223e:	95 81       	ldd	r25, Z+5	; 0x05
    2240:	dc 01       	movw	r26, r24
    2242:	a6 1b       	sub	r26, r22
    2244:	b7 0b       	sbc	r27, r23
    2246:	bd 01       	movw	r22, r26
    2248:	61 50       	subi	r22, 0x01	; 1
    224a:	71 09       	sbc	r23, r1
    224c:	77 cf       	rjmp	.-274    	; 0x213c <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    224e:	08 95       	ret

00002250 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
    2250:	4f 92       	push	r4
    2252:	5f 92       	push	r5
    2254:	6f 92       	push	r6
    2256:	7f 92       	push	r7
    2258:	8f 92       	push	r8
    225a:	9f 92       	push	r9
    225c:	af 92       	push	r10
    225e:	bf 92       	push	r11
    2260:	cf 92       	push	r12
    2262:	df 92       	push	r13
    2264:	ef 92       	push	r14
    2266:	ff 92       	push	r15
    2268:	0f 93       	push	r16
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	3c 01       	movw	r6, r24
    2274:	29 01       	movw	r4, r18
    2276:	50 e0       	ldi	r21, 0x00	; 0
    2278:	70 e0       	ldi	r23, 0x00	; 0
    227a:	55 db       	rcall	.-2390   	; 0x1926 <_ZN12Adafruit_GFXC1Eii>
    227c:	80 e6       	ldi	r24, 0x60	; 96
    227e:	92 e0       	ldi	r25, 0x02	; 2
    2280:	f3 01       	movw	r30, r6
    2282:	91 83       	std	Z+1, r25	; 0x01
    2284:	80 83       	st	Z, r24
    2286:	14 8e       	std	Z+28, r1	; 0x1c
    2288:	13 8e       	std	Z+27, r1	; 0x1b
    228a:	41 14       	cp	r4, r1
    228c:	51 04       	cpc	r5, r1
    228e:	11 f0       	breq	.+4      	; 0x2294 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x44>
    2290:	c2 01       	movw	r24, r4
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x48>
    2294:	80 eb       	ldi	r24, 0xB0	; 176
    2296:	93 e0       	ldi	r25, 0x03	; 3
    2298:	f3 01       	movw	r30, r6
    229a:	96 8f       	std	Z+30, r25	; 0x1e
    229c:	85 8f       	std	Z+29, r24	; 0x1d
    229e:	10 a2       	std	Z+32, r1	; 0x20
    22a0:	17 8e       	std	Z+31, r1	; 0x1f
    22a2:	8f ef       	ldi	r24, 0xFF	; 255
    22a4:	84 a3       	std	Z+36, r24	; 0x24
    22a6:	85 a3       	std	Z+37, r24	; 0x25
    22a8:	86 a3       	std	Z+38, r24	; 0x26
    22aa:	87 a3       	std	Z+39, r24	; 0x27
    22ac:	00 a7       	std	Z+40, r16	; 0x28
    22ae:	c5 aa       	std	Z+53, r12	; 0x35
    22b0:	d6 aa       	std	Z+54, r13	; 0x36
    22b2:	e7 aa       	std	Z+55, r14	; 0x37
    22b4:	f0 ae       	std	Z+56, r15	; 0x38
    22b6:	81 ae       	std	Z+57, r8	; 0x39
    22b8:	92 ae       	std	Z+58, r9	; 0x3a
    22ba:	a3 ae       	std	Z+59, r10	; 0x3b
    22bc:	b4 ae       	std	Z+60, r11	; 0x3c
    22be:	80 e5       	ldi	r24, 0x50	; 80
    22c0:	86 af       	std	Z+62, r24	; 0x3e
    22c2:	17 ae       	std	Z+63, r1	; 0x3f
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	0f 91       	pop	r16
    22ca:	ff 90       	pop	r15
    22cc:	ef 90       	pop	r14
    22ce:	df 90       	pop	r13
    22d0:	cf 90       	pop	r12
    22d2:	bf 90       	pop	r11
    22d4:	af 90       	pop	r10
    22d6:	9f 90       	pop	r9
    22d8:	8f 90       	pop	r8
    22da:	7f 90       	pop	r7
    22dc:	6f 90       	pop	r6
    22de:	5f 90       	pop	r5
    22e0:	4f 90       	pop	r4
    22e2:	08 95       	ret

000022e4 <_ZN16Adafruit_SSD1306D1Ev>:
    22e4:	20 e6       	ldi	r18, 0x60	; 96
    22e6:	32 e0       	ldi	r19, 0x02	; 2
    22e8:	fc 01       	movw	r30, r24
    22ea:	31 83       	std	Z+1, r19	; 0x01
    22ec:	20 83       	st	Z, r18
    22ee:	87 8d       	ldd	r24, Z+31	; 0x1f
    22f0:	90 a1       	ldd	r25, Z+32	; 0x20
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	11 f0       	breq	.+4      	; 0x22fa <_ZN16Adafruit_SSD1306D1Ev+0x16>
    22f6:	0c 94 e2 28 	jmp	0x51c4	; 0x51c4 <free>
    22fa:	08 95       	ret

000022fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
    22fc:	1f 93       	push	r17
    22fe:	cf 93       	push	r28
    2300:	df 93       	push	r29
    2302:	fc 01       	movw	r30, r24
    2304:	85 8d       	ldd	r24, Z+29	; 0x1d
    2306:	96 8d       	ldd	r25, Z+30	; 0x1e
    2308:	00 97       	sbiw	r24, 0x00	; 0
    230a:	19 f1       	breq	.+70     	; 0x2352 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x56>
    230c:	16 2f       	mov	r17, r22
    230e:	ef 01       	movw	r28, r30
    2310:	61 a1       	ldd	r22, Z+33	; 0x21
    2312:	06 2e       	mov	r0, r22
    2314:	00 0c       	add	r0, r0
    2316:	77 0b       	sbc	r23, r23
    2318:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <_ZN7TwoWire17beginTransmissionEi>
    231c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    231e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2320:	dc 01       	movw	r26, r24
    2322:	ed 91       	ld	r30, X+
    2324:	fc 91       	ld	r31, X
    2326:	01 90       	ld	r0, Z+
    2328:	f0 81       	ld	r31, Z
    232a:	e0 2d       	mov	r30, r0
    232c:	60 e0       	ldi	r22, 0x00	; 0
    232e:	19 95       	eicall
    2330:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2332:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2334:	dc 01       	movw	r26, r24
    2336:	ed 91       	ld	r30, X+
    2338:	fc 91       	ld	r31, X
    233a:	01 90       	ld	r0, Z+
    233c:	f0 81       	ld	r31, Z
    233e:	e0 2d       	mov	r30, r0
    2340:	61 2f       	mov	r22, r17
    2342:	19 95       	eicall
    2344:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2346:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	1f 91       	pop	r17
    234e:	0c 94 d1 1e 	jmp	0x3da2	; 0x3da2 <_ZN7TwoWire15endTransmissionEv>
    2352:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2354:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2356:	9c 91       	ld	r25, X
    2358:	83 a9       	ldd	r24, Z+51	; 0x33
    235a:	80 95       	com	r24
    235c:	89 23       	and	r24, r25
    235e:	8c 93       	st	X, r24
    2360:	83 8d       	ldd	r24, Z+27	; 0x1b
    2362:	94 8d       	ldd	r25, Z+28	; 0x1c
    2364:	89 2b       	or	r24, r25
    2366:	31 f0       	breq	.+12     	; 0x2374 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x78>
    2368:	86 2f       	mov	r24, r22
    236a:	df 91       	pop	r29
    236c:	cf 91       	pop	r28
    236e:	1f 91       	pop	r17
    2370:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <_ZN8SPIClass8transferEh>
    2374:	28 e0       	ldi	r18, 0x08	; 8
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	80 e8       	ldi	r24, 0x80	; 128
    237a:	a1 a5       	ldd	r26, Z+41	; 0x29
    237c:	b2 a5       	ldd	r27, Z+42	; 0x2a
    237e:	91 a9       	ldd	r25, Z+49	; 0x31
    2380:	46 2f       	mov	r20, r22
    2382:	48 23       	and	r20, r24
    2384:	19 f0       	breq	.+6      	; 0x238c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x90>
    2386:	4c 91       	ld	r20, X
    2388:	94 2b       	or	r25, r20
    238a:	03 c0       	rjmp	.+6      	; 0x2392 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x96>
    238c:	4c 91       	ld	r20, X
    238e:	90 95       	com	r25
    2390:	94 23       	and	r25, r20
    2392:	9c 93       	st	X, r25
    2394:	a3 a5       	ldd	r26, Z+43	; 0x2b
    2396:	b4 a5       	ldd	r27, Z+44	; 0x2c
    2398:	4c 91       	ld	r20, X
    239a:	92 a9       	ldd	r25, Z+50	; 0x32
    239c:	94 2b       	or	r25, r20
    239e:	9c 93       	st	X, r25
    23a0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    23a2:	b4 a5       	ldd	r27, Z+44	; 0x2c
    23a4:	4c 91       	ld	r20, X
    23a6:	92 a9       	ldd	r25, Z+50	; 0x32
    23a8:	90 95       	com	r25
    23aa:	94 23       	and	r25, r20
    23ac:	9c 93       	st	X, r25
    23ae:	86 95       	lsr	r24
    23b0:	21 50       	subi	r18, 0x01	; 1
    23b2:	31 09       	sbc	r19, r1
    23b4:	11 f7       	brne	.-60     	; 0x237a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x7e>
    23b6:	df 91       	pop	r29
    23b8:	cf 91       	pop	r28
    23ba:	1f 91       	pop	r17
    23bc:	08 95       	ret

000023be <_ZN16Adafruit_SSD130613invertDisplayEb>:
    23be:	1f 93       	push	r17
    23c0:	cf 93       	push	r28
    23c2:	df 93       	push	r29
    23c4:	ec 01       	movw	r28, r24
    23c6:	16 2f       	mov	r17, r22
    23c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	39 f0       	breq	.+14     	; 0x23de <_ZN16Adafruit_SSD130613invertDisplayEb+0x20>
    23d0:	4d a9       	ldd	r20, Y+53	; 0x35
    23d2:	5e a9       	ldd	r21, Y+54	; 0x36
    23d4:	6f a9       	ldd	r22, Y+55	; 0x37
    23d6:	78 ad       	ldd	r23, Y+56	; 0x38
    23d8:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <_ZN7TwoWire8setClockEm>
    23dc:	0f c0       	rjmp	.+30     	; 0x23fc <_ZN16Adafruit_SSD130613invertDisplayEb+0x3e>
    23de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23e2:	89 2b       	or	r24, r25
    23e4:	21 f0       	breq	.+8      	; 0x23ee <_ZN16Adafruit_SSD130613invertDisplayEb+0x30>
    23e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    23e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    23ea:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN8SPIClass16beginTransactionE11SPISettings>
    23ee:	ef a5       	ldd	r30, Y+47	; 0x2f
    23f0:	f8 a9       	ldd	r31, Y+48	; 0x30
    23f2:	90 81       	ld	r25, Z
    23f4:	8c a9       	ldd	r24, Y+52	; 0x34
    23f6:	80 95       	com	r24
    23f8:	89 23       	and	r24, r25
    23fa:	80 83       	st	Z, r24
    23fc:	11 11       	cpse	r17, r1
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
    2400:	66 ea       	ldi	r22, 0xA6	; 166
    2402:	01 c0       	rjmp	.+2      	; 0x2406 <_ZN16Adafruit_SSD130613invertDisplayEb+0x48>
    2404:	67 ea       	ldi	r22, 0xA7	; 167
    2406:	ce 01       	movw	r24, r28
    2408:	79 df       	rcall	.-270    	; 0x22fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    240a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    240c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	49 f0       	breq	.+18     	; 0x2424 <_ZN16Adafruit_SSD130613invertDisplayEb+0x66>
    2412:	49 ad       	ldd	r20, Y+57	; 0x39
    2414:	5a ad       	ldd	r21, Y+58	; 0x3a
    2416:	6b ad       	ldd	r22, Y+59	; 0x3b
    2418:	7c ad       	ldd	r23, Y+60	; 0x3c
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	1f 91       	pop	r17
    2420:	0c 94 4f 1e 	jmp	0x3c9e	; 0x3c9e <_ZN7TwoWire8setClockEm>
    2424:	ef a5       	ldd	r30, Y+47	; 0x2f
    2426:	f8 a9       	ldd	r31, Y+48	; 0x30
    2428:	90 81       	ld	r25, Z
    242a:	8c a9       	ldd	r24, Y+52	; 0x34
    242c:	89 2b       	or	r24, r25
    242e:	80 83       	st	Z, r24
    2430:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2432:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2434:	89 2b       	or	r24, r25
    2436:	29 f0       	breq	.+10     	; 0x2442 <_ZN16Adafruit_SSD130613invertDisplayEb+0x84>
    2438:	df 91       	pop	r29
    243a:	cf 91       	pop	r28
    243c:	1f 91       	pop	r17
    243e:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <_ZN8SPIClass14endTransactionEv>
    2442:	df 91       	pop	r29
    2444:	cf 91       	pop	r28
    2446:	1f 91       	pop	r17
    2448:	08 95       	ret

0000244a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
    244a:	bf 92       	push	r11
    244c:	cf 92       	push	r12
    244e:	df 92       	push	r13
    2450:	ef 92       	push	r14
    2452:	ff 92       	push	r15
    2454:	0f 93       	push	r16
    2456:	1f 93       	push	r17
    2458:	cf 93       	push	r28
    245a:	df 93       	push	r29
    245c:	ec 01       	movw	r28, r24
    245e:	b6 2e       	mov	r11, r22
    2460:	07 2f       	mov	r16, r23
    2462:	14 2f       	mov	r17, r20
    2464:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2466:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	09 f4       	brne	.+2      	; 0x246e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x24>
    246c:	52 c0       	rjmp	.+164    	; 0x2512 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xc8>
    246e:	69 a1       	ldd	r22, Y+33	; 0x21
    2470:	06 2e       	mov	r0, r22
    2472:	00 0c       	add	r0, r0
    2474:	77 0b       	sbc	r23, r23
    2476:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <_ZN7TwoWire17beginTransmissionEi>
    247a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    247c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    247e:	dc 01       	movw	r26, r24
    2480:	ed 91       	ld	r30, X+
    2482:	fc 91       	ld	r31, X
    2484:	01 90       	ld	r0, Z+
    2486:	f0 81       	ld	r31, Z
    2488:	e0 2d       	mov	r30, r0
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	19 95       	eicall
    248e:	cb 2c       	mov	r12, r11
    2490:	d0 2e       	mov	r13, r16
    2492:	ee 24       	eor	r14, r14
    2494:	e3 94       	inc	r14
    2496:	f1 2c       	mov	r15, r1
    2498:	8d 8d       	ldd	r24, Y+29	; 0x1d
    249a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    249c:	11 23       	and	r17, r17
    249e:	71 f1       	breq	.+92     	; 0x24fc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb2>
    24a0:	b0 e2       	ldi	r27, 0x20	; 32
    24a2:	eb 16       	cp	r14, r27
    24a4:	f1 04       	cpc	r15, r1
    24a6:	b8 f0       	brcs	.+46     	; 0x24d6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x8c>
    24a8:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <_ZN7TwoWire15endTransmissionEv>
    24ac:	69 a1       	ldd	r22, Y+33	; 0x21
    24ae:	06 2e       	mov	r0, r22
    24b0:	00 0c       	add	r0, r0
    24b2:	77 0b       	sbc	r23, r23
    24b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24b8:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <_ZN7TwoWire17beginTransmissionEi>
    24bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24c0:	dc 01       	movw	r26, r24
    24c2:	ed 91       	ld	r30, X+
    24c4:	fc 91       	ld	r31, X
    24c6:	01 90       	ld	r0, Z+
    24c8:	f0 81       	ld	r31, Z
    24ca:	e0 2d       	mov	r30, r0
    24cc:	60 e0       	ldi	r22, 0x00	; 0
    24ce:	19 95       	eicall
    24d0:	ee 24       	eor	r14, r14
    24d2:	e3 94       	inc	r14
    24d4:	f1 2c       	mov	r15, r1
    24d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24da:	f6 01       	movw	r30, r12
    24dc:	64 91       	lpm	r22, Z
    24de:	dc 01       	movw	r26, r24
    24e0:	ed 91       	ld	r30, X+
    24e2:	fc 91       	ld	r31, X
    24e4:	01 90       	ld	r0, Z+
    24e6:	f0 81       	ld	r31, Z
    24e8:	e0 2d       	mov	r30, r0
    24ea:	19 95       	eicall
    24ec:	bf ef       	ldi	r27, 0xFF	; 255
    24ee:	eb 1a       	sub	r14, r27
    24f0:	fb 0a       	sbc	r15, r27
    24f2:	11 50       	subi	r17, 0x01	; 1
    24f4:	f6 01       	movw	r30, r12
    24f6:	31 96       	adiw	r30, 0x01	; 1
    24f8:	6f 01       	movw	r12, r30
    24fa:	ce cf       	rjmp	.-100    	; 0x2498 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x4e>
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	1f 91       	pop	r17
    2502:	0f 91       	pop	r16
    2504:	ff 90       	pop	r15
    2506:	ef 90       	pop	r14
    2508:	df 90       	pop	r13
    250a:	cf 90       	pop	r12
    250c:	bf 90       	pop	r11
    250e:	0c 94 d1 1e 	jmp	0x3da2	; 0x3da2 <_ZN7TwoWire15endTransmissionEv>
    2512:	ed a5       	ldd	r30, Y+45	; 0x2d
    2514:	fe a5       	ldd	r31, Y+46	; 0x2e
    2516:	90 81       	ld	r25, Z
    2518:	8b a9       	ldd	r24, Y+51	; 0x33
    251a:	80 95       	com	r24
    251c:	89 23       	and	r24, r25
    251e:	80 83       	st	Z, r24
    2520:	e6 2e       	mov	r14, r22
    2522:	f7 2e       	mov	r15, r23
    2524:	11 23       	and	r17, r17
    2526:	79 f1       	breq	.+94     	; 0x2586 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x13c>
    2528:	f7 01       	movw	r30, r14
    252a:	84 91       	lpm	r24, Z
    252c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    252e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2530:	23 2b       	or	r18, r19
    2532:	39 f0       	breq	.+14     	; 0x2542 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xf8>
    2534:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN8SPIClass8transferEh>
    2538:	11 50       	subi	r17, 0x01	; 1
    253a:	c7 01       	movw	r24, r14
    253c:	01 96       	adiw	r24, 0x01	; 1
    253e:	7c 01       	movw	r14, r24
    2540:	f1 cf       	rjmp	.-30     	; 0x2524 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xda>
    2542:	28 e0       	ldi	r18, 0x08	; 8
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e8       	ldi	r20, 0x80	; 128
    2548:	e9 a5       	ldd	r30, Y+41	; 0x29
    254a:	fa a5       	ldd	r31, Y+42	; 0x2a
    254c:	99 a9       	ldd	r25, Y+49	; 0x31
    254e:	58 2f       	mov	r21, r24
    2550:	54 23       	and	r21, r20
    2552:	19 f0       	breq	.+6      	; 0x255a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x110>
    2554:	50 81       	ld	r21, Z
    2556:	95 2b       	or	r25, r21
    2558:	03 c0       	rjmp	.+6      	; 0x2560 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x116>
    255a:	50 81       	ld	r21, Z
    255c:	90 95       	com	r25
    255e:	95 23       	and	r25, r21
    2560:	90 83       	st	Z, r25
    2562:	eb a5       	ldd	r30, Y+43	; 0x2b
    2564:	fc a5       	ldd	r31, Y+44	; 0x2c
    2566:	50 81       	ld	r21, Z
    2568:	9a a9       	ldd	r25, Y+50	; 0x32
    256a:	95 2b       	or	r25, r21
    256c:	90 83       	st	Z, r25
    256e:	eb a5       	ldd	r30, Y+43	; 0x2b
    2570:	fc a5       	ldd	r31, Y+44	; 0x2c
    2572:	50 81       	ld	r21, Z
    2574:	9a a9       	ldd	r25, Y+50	; 0x32
    2576:	90 95       	com	r25
    2578:	95 23       	and	r25, r21
    257a:	90 83       	st	Z, r25
    257c:	46 95       	lsr	r20
    257e:	21 50       	subi	r18, 0x01	; 1
    2580:	31 09       	sbc	r19, r1
    2582:	11 f7       	brne	.-60     	; 0x2548 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xfe>
    2584:	d9 cf       	rjmp	.-78     	; 0x2538 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xee>
    2586:	df 91       	pop	r29
    2588:	cf 91       	pop	r28
    258a:	1f 91       	pop	r17
    258c:	0f 91       	pop	r16
    258e:	ff 90       	pop	r15
    2590:	ef 90       	pop	r14
    2592:	df 90       	pop	r13
    2594:	cf 90       	pop	r12
    2596:	bf 90       	pop	r11
    2598:	08 95       	ret

0000259a <_ZN16Adafruit_SSD130612clearDisplayEv>:
    259a:	fc 01       	movw	r30, r24
    259c:	86 81       	ldd	r24, Z+6	; 0x06
    259e:	97 81       	ldd	r25, Z+7	; 0x07
    25a0:	9c 01       	movw	r18, r24
    25a2:	29 5f       	subi	r18, 0xF9	; 249
    25a4:	3f 4f       	sbci	r19, 0xFF	; 255
    25a6:	37 ff       	sbrs	r19, 7
    25a8:	02 c0       	rjmp	.+4      	; 0x25ae <_ZN16Adafruit_SSD130612clearDisplayEv+0x14>
    25aa:	29 5f       	subi	r18, 0xF9	; 249
    25ac:	3f 4f       	sbci	r19, 0xFF	; 255
    25ae:	83 e0       	ldi	r24, 0x03	; 3
    25b0:	35 95       	asr	r19
    25b2:	27 95       	ror	r18
    25b4:	8a 95       	dec	r24
    25b6:	e1 f7       	brne	.-8      	; 0x25b0 <_ZN16Adafruit_SSD130612clearDisplayEv+0x16>
    25b8:	84 81       	ldd	r24, Z+4	; 0x04
    25ba:	95 81       	ldd	r25, Z+5	; 0x05
    25bc:	28 9f       	mul	r18, r24
    25be:	a0 01       	movw	r20, r0
    25c0:	29 9f       	mul	r18, r25
    25c2:	50 0d       	add	r21, r0
    25c4:	38 9f       	mul	r19, r24
    25c6:	50 0d       	add	r21, r0
    25c8:	11 24       	eor	r1, r1
    25ca:	60 e0       	ldi	r22, 0x00	; 0
    25cc:	70 e0       	ldi	r23, 0x00	; 0
    25ce:	87 8d       	ldd	r24, Z+31	; 0x1f
    25d0:	90 a1       	ldd	r25, Z+32	; 0x20
    25d2:	0c 94 58 2a 	jmp	0x54b0	; 0x54b0 <memset>

000025d6 <_ZN16Adafruit_SSD13065beginEhhbb>:
    25d6:	8f 92       	push	r8
    25d8:	9f 92       	push	r9
    25da:	af 92       	push	r10
    25dc:	bf 92       	push	r11
    25de:	cf 92       	push	r12
    25e0:	df 92       	push	r13
    25e2:	ef 92       	push	r14
    25e4:	ff 92       	push	r15
    25e6:	0f 93       	push	r16
    25e8:	1f 93       	push	r17
    25ea:	cf 93       	push	r28
    25ec:	df 93       	push	r29
    25ee:	ec 01       	movw	r28, r24
    25f0:	86 2e       	mov	r8, r22
    25f2:	b4 2e       	mov	r11, r20
    25f4:	a2 2e       	mov	r10, r18
    25f6:	90 2e       	mov	r9, r16
    25f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25fa:	98 a1       	ldd	r25, Y+32	; 0x20
    25fc:	89 2b       	or	r24, r25
    25fe:	e9 f4       	brne	.+58     	; 0x263a <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    2600:	2e 81       	ldd	r18, Y+6	; 0x06
    2602:	3f 81       	ldd	r19, Y+7	; 0x07
    2604:	c9 01       	movw	r24, r18
    2606:	07 96       	adiw	r24, 0x07	; 7
    2608:	97 fd       	sbrc	r25, 7
    260a:	07 96       	adiw	r24, 0x07	; 7
    260c:	23 e0       	ldi	r18, 0x03	; 3
    260e:	95 95       	asr	r25
    2610:	87 95       	ror	r24
    2612:	2a 95       	dec	r18
    2614:	e1 f7       	brne	.-8      	; 0x260e <_ZN16Adafruit_SSD13065beginEhhbb+0x38>
    2616:	2c 81       	ldd	r18, Y+4	; 0x04
    2618:	3d 81       	ldd	r19, Y+5	; 0x05
    261a:	ac 01       	movw	r20, r24
    261c:	42 9f       	mul	r20, r18
    261e:	c0 01       	movw	r24, r0
    2620:	43 9f       	mul	r20, r19
    2622:	90 0d       	add	r25, r0
    2624:	52 9f       	mul	r21, r18
    2626:	90 0d       	add	r25, r0
    2628:	11 24       	eor	r1, r1
    262a:	0e 94 4a 28 	call	0x5094	; 0x5094 <malloc>
    262e:	98 a3       	std	Y+32, r25	; 0x20
    2630:	8f 8f       	std	Y+31, r24	; 0x1f
    2632:	89 2b       	or	r24, r25
    2634:	11 f4       	brne	.+4      	; 0x263a <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	83 c1       	rjmp	.+774    	; 0x2940 <_ZN16Adafruit_SSD13065beginEhhbb+0x36a>
    263a:	ce 01       	movw	r24, r28
    263c:	ae df       	rcall	.-164    	; 0x259a <_ZN16Adafruit_SSD130612clearDisplayEv>
    263e:	8e 81       	ldd	r24, Y+6	; 0x06
    2640:	9f 81       	ldd	r25, Y+7	; 0x07
    2642:	6c 81       	ldd	r22, Y+4	; 0x04
    2644:	7d 81       	ldd	r23, Y+5	; 0x05
    2646:	81 32       	cpi	r24, 0x21	; 33
    2648:	91 05       	cpc	r25, r1
    264a:	e4 f0       	brlt	.+56     	; 0x2684 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    264c:	ac 01       	movw	r20, r24
    264e:	40 54       	subi	r20, 0x40	; 64
    2650:	51 09       	sbc	r21, r1
    2652:	57 ff       	sbrs	r21, 7
    2654:	02 c0       	rjmp	.+4      	; 0x265a <_ZN16Adafruit_SSD13065beginEhhbb+0x84>
    2656:	4f 5f       	subi	r20, 0xFF	; 255
    2658:	5f 4f       	sbci	r21, 0xFF	; 255
    265a:	55 95       	asr	r21
    265c:	47 95       	ror	r20
    265e:	62 55       	subi	r22, 0x52	; 82
    2660:	71 09       	sbc	r23, r1
    2662:	77 ff       	sbrs	r23, 7
    2664:	02 c0       	rjmp	.+4      	; 0x266a <_ZN16Adafruit_SSD13065beginEhhbb+0x94>
    2666:	6f 5f       	subi	r22, 0xFF	; 255
    2668:	7f 4f       	sbci	r23, 0xFF	; 255
    266a:	75 95       	asr	r23
    266c:	67 95       	ror	r22
    266e:	cc 24       	eor	r12, r12
    2670:	c3 94       	inc	r12
    2672:	d1 2c       	mov	r13, r1
    2674:	80 e4       	ldi	r24, 0x40	; 64
    2676:	e8 2e       	mov	r14, r24
    2678:	f1 2c       	mov	r15, r1
    267a:	02 e5       	ldi	r16, 0x52	; 82
    267c:	10 e0       	ldi	r17, 0x00	; 0
    267e:	23 e4       	ldi	r18, 0x43	; 67
    2680:	38 e0       	ldi	r19, 0x08	; 8
    2682:	1b c0       	rjmp	.+54     	; 0x26ba <_ZN16Adafruit_SSD13065beginEhhbb+0xe4>
    2684:	ac 01       	movw	r20, r24
    2686:	40 52       	subi	r20, 0x20	; 32
    2688:	51 09       	sbc	r21, r1
    268a:	57 ff       	sbrs	r21, 7
    268c:	02 c0       	rjmp	.+4      	; 0x2692 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
    268e:	4f 5f       	subi	r20, 0xFF	; 255
    2690:	5f 4f       	sbci	r21, 0xFF	; 255
    2692:	55 95       	asr	r21
    2694:	47 95       	ror	r20
    2696:	63 57       	subi	r22, 0x73	; 115
    2698:	71 09       	sbc	r23, r1
    269a:	77 ff       	sbrs	r23, 7
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <_ZN16Adafruit_SSD13065beginEhhbb+0xcc>
    269e:	6f 5f       	subi	r22, 0xFF	; 255
    26a0:	7f 4f       	sbci	r23, 0xFF	; 255
    26a2:	75 95       	asr	r23
    26a4:	67 95       	ror	r22
    26a6:	cc 24       	eor	r12, r12
    26a8:	c3 94       	inc	r12
    26aa:	d1 2c       	mov	r13, r1
    26ac:	a0 e2       	ldi	r26, 0x20	; 32
    26ae:	ea 2e       	mov	r14, r26
    26b0:	f1 2c       	mov	r15, r1
    26b2:	03 e7       	ldi	r16, 0x73	; 115
    26b4:	10 e0       	ldi	r17, 0x00	; 0
    26b6:	23 e6       	ldi	r18, 0x63	; 99
    26b8:	36 e0       	ldi	r19, 0x06	; 6
    26ba:	ce 01       	movw	r24, r28
    26bc:	56 d9       	rcall	.-3412   	; 0x196a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    26be:	8a a2       	std	Y+34, r8	; 0x22
    26c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26c4:	00 97       	sbiw	r24, 0x00	; 0
    26c6:	99 f0       	breq	.+38     	; 0x26ee <_ZN16Adafruit_SSD13065beginEhhbb+0x118>
    26c8:	b1 10       	cpse	r11, r1
    26ca:	07 c0       	rjmp	.+14     	; 0x26da <_ZN16Adafruit_SSD13065beginEhhbb+0x104>
    26cc:	2e 81       	ldd	r18, Y+6	; 0x06
    26ce:	3f 81       	ldd	r19, Y+7	; 0x07
    26d0:	20 32       	cpi	r18, 0x20	; 32
    26d2:	31 05       	cpc	r19, r1
    26d4:	21 f4       	brne	.+8      	; 0x26de <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
    26d6:	2c e3       	ldi	r18, 0x3C	; 60
    26d8:	03 c0       	rjmp	.+6      	; 0x26e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
    26da:	2b 2d       	mov	r18, r11
    26dc:	01 c0       	rjmp	.+2      	; 0x26e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
    26de:	2d e3       	ldi	r18, 0x3D	; 61
    26e0:	29 a3       	std	Y+33, r18	; 0x21
    26e2:	99 20       	and	r9, r9
    26e4:	09 f4       	brne	.+2      	; 0x26e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x112>
    26e6:	29 c1       	rjmp	.+594    	; 0x293a <_ZN16Adafruit_SSD13065beginEhhbb+0x364>
    26e8:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <_ZN7TwoWire5beginEv>
    26ec:	78 c0       	rjmp	.+240    	; 0x27de <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    26ee:	61 e0       	ldi	r22, 0x01	; 1
    26f0:	8e a1       	ldd	r24, Y+38	; 0x26
    26f2:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <pinMode>
    26f6:	61 e0       	ldi	r22, 0x01	; 1
    26f8:	8f a1       	ldd	r24, Y+39	; 0x27
    26fa:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <pinMode>
    26fe:	8e a1       	ldd	r24, Y+38	; 0x26
    2700:	08 2e       	mov	r0, r24
    2702:	00 0c       	add	r0, r0
    2704:	99 0b       	sbc	r25, r25
    2706:	fc 01       	movw	r30, r24
    2708:	e1 57       	subi	r30, 0x71	; 113
    270a:	f4 4f       	sbci	r31, 0xF4	; 244
    270c:	e4 91       	lpm	r30, Z
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	ee 0f       	add	r30, r30
    2712:	ff 1f       	adc	r31, r31
    2714:	e1 51       	subi	r30, 0x11	; 17
    2716:	f4 4f       	sbci	r31, 0xF4	; 244
    2718:	25 91       	lpm	r18, Z+
    271a:	34 91       	lpm	r19, Z
    271c:	3e a7       	std	Y+46, r19	; 0x2e
    271e:	2d a7       	std	Y+45, r18	; 0x2d
    2720:	fc 01       	movw	r30, r24
    2722:	e7 5b       	subi	r30, 0xB7	; 183
    2724:	f4 4f       	sbci	r31, 0xF4	; 244
    2726:	e4 91       	lpm	r30, Z
    2728:	eb ab       	std	Y+51, r30	; 0x33
    272a:	8f a1       	ldd	r24, Y+39	; 0x27
    272c:	08 2e       	mov	r0, r24
    272e:	00 0c       	add	r0, r0
    2730:	99 0b       	sbc	r25, r25
    2732:	fc 01       	movw	r30, r24
    2734:	e1 57       	subi	r30, 0x71	; 113
    2736:	f4 4f       	sbci	r31, 0xF4	; 244
    2738:	e4 91       	lpm	r30, Z
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	ee 0f       	add	r30, r30
    273e:	ff 1f       	adc	r31, r31
    2740:	e1 51       	subi	r30, 0x11	; 17
    2742:	f4 4f       	sbci	r31, 0xF4	; 244
    2744:	a5 91       	lpm	r26, Z+
    2746:	b4 91       	lpm	r27, Z
    2748:	b8 ab       	std	Y+48, r27	; 0x30
    274a:	af a7       	std	Y+47, r26	; 0x2f
    274c:	fc 01       	movw	r30, r24
    274e:	e7 5b       	subi	r30, 0xB7	; 183
    2750:	f4 4f       	sbci	r31, 0xF4	; 244
    2752:	e4 91       	lpm	r30, Z
    2754:	ec ab       	std	Y+52, r30	; 0x34
    2756:	8c 91       	ld	r24, X
    2758:	e8 2b       	or	r30, r24
    275a:	ec 93       	st	X, r30
    275c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    275e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2760:	89 2b       	or	r24, r25
    2762:	29 f0       	breq	.+10     	; 0x276e <_ZN16Adafruit_SSD13065beginEhhbb+0x198>
    2764:	99 20       	and	r9, r9
    2766:	09 f4       	brne	.+2      	; 0x276a <_ZN16Adafruit_SSD13065beginEhhbb+0x194>
    2768:	3a c0       	rjmp	.+116    	; 0x27de <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    276a:	c2 d5       	rcall	.+2948   	; 0x32f0 <_ZN8SPIClass5beginEv>
    276c:	38 c0       	rjmp	.+112    	; 0x27de <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    276e:	61 e0       	ldi	r22, 0x01	; 1
    2770:	8c a1       	ldd	r24, Y+36	; 0x24
    2772:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <pinMode>
    2776:	61 e0       	ldi	r22, 0x01	; 1
    2778:	8d a1       	ldd	r24, Y+37	; 0x25
    277a:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <pinMode>
    277e:	8c a1       	ldd	r24, Y+36	; 0x24
    2780:	08 2e       	mov	r0, r24
    2782:	00 0c       	add	r0, r0
    2784:	99 0b       	sbc	r25, r25
    2786:	fc 01       	movw	r30, r24
    2788:	e1 57       	subi	r30, 0x71	; 113
    278a:	f4 4f       	sbci	r31, 0xF4	; 244
    278c:	e4 91       	lpm	r30, Z
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	ee 0f       	add	r30, r30
    2792:	ff 1f       	adc	r31, r31
    2794:	e1 51       	subi	r30, 0x11	; 17
    2796:	f4 4f       	sbci	r31, 0xF4	; 244
    2798:	25 91       	lpm	r18, Z+
    279a:	34 91       	lpm	r19, Z
    279c:	3a a7       	std	Y+42, r19	; 0x2a
    279e:	29 a7       	std	Y+41, r18	; 0x29
    27a0:	fc 01       	movw	r30, r24
    27a2:	e7 5b       	subi	r30, 0xB7	; 183
    27a4:	f4 4f       	sbci	r31, 0xF4	; 244
    27a6:	e4 91       	lpm	r30, Z
    27a8:	e9 ab       	std	Y+49, r30	; 0x31
    27aa:	8d a1       	ldd	r24, Y+37	; 0x25
    27ac:	08 2e       	mov	r0, r24
    27ae:	00 0c       	add	r0, r0
    27b0:	99 0b       	sbc	r25, r25
    27b2:	fc 01       	movw	r30, r24
    27b4:	e1 57       	subi	r30, 0x71	; 113
    27b6:	f4 4f       	sbci	r31, 0xF4	; 244
    27b8:	e4 91       	lpm	r30, Z
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	ee 0f       	add	r30, r30
    27be:	ff 1f       	adc	r31, r31
    27c0:	e1 51       	subi	r30, 0x11	; 17
    27c2:	f4 4f       	sbci	r31, 0xF4	; 244
    27c4:	a5 91       	lpm	r26, Z+
    27c6:	b4 91       	lpm	r27, Z
    27c8:	bc a7       	std	Y+44, r27	; 0x2c
    27ca:	ab a7       	std	Y+43, r26	; 0x2b
    27cc:	fc 01       	movw	r30, r24
    27ce:	e7 5b       	subi	r30, 0xB7	; 183
    27d0:	f4 4f       	sbci	r31, 0xF4	; 244
    27d2:	e4 91       	lpm	r30, Z
    27d4:	ea ab       	std	Y+50, r30	; 0x32
    27d6:	8c 91       	ld	r24, X
    27d8:	e0 95       	com	r30
    27da:	e8 23       	and	r30, r24
    27dc:	ec 93       	st	X, r30
    27de:	aa 20       	and	r10, r10
    27e0:	f1 f0       	breq	.+60     	; 0x281e <_ZN16Adafruit_SSD13065beginEhhbb+0x248>
    27e2:	88 a5       	ldd	r24, Y+40	; 0x28
    27e4:	87 fd       	sbrc	r24, 7
    27e6:	1b c0       	rjmp	.+54     	; 0x281e <_ZN16Adafruit_SSD13065beginEhhbb+0x248>
    27e8:	61 e0       	ldi	r22, 0x01	; 1
    27ea:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <pinMode>
    27ee:	61 e0       	ldi	r22, 0x01	; 1
    27f0:	88 a5       	ldd	r24, Y+40	; 0x28
    27f2:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <digitalWrite>
    27f6:	61 e0       	ldi	r22, 0x01	; 1
    27f8:	70 e0       	ldi	r23, 0x00	; 0
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	0e 94 7f 25 	call	0x4afe	; 0x4afe <delay>
    2802:	60 e0       	ldi	r22, 0x00	; 0
    2804:	88 a5       	ldd	r24, Y+40	; 0x28
    2806:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <digitalWrite>
    280a:	6a e0       	ldi	r22, 0x0A	; 10
    280c:	70 e0       	ldi	r23, 0x00	; 0
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 94 7f 25 	call	0x4afe	; 0x4afe <delay>
    2816:	61 e0       	ldi	r22, 0x01	; 1
    2818:	88 a5       	ldd	r24, Y+40	; 0x28
    281a:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <digitalWrite>
    281e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2820:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	39 f0       	breq	.+14     	; 0x2834 <_ZN16Adafruit_SSD13065beginEhhbb+0x25e>
    2826:	4d a9       	ldd	r20, Y+53	; 0x35
    2828:	5e a9       	ldd	r21, Y+54	; 0x36
    282a:	6f a9       	ldd	r22, Y+55	; 0x37
    282c:	78 ad       	ldd	r23, Y+56	; 0x38
    282e:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <_ZN7TwoWire8setClockEm>
    2832:	0f c0       	rjmp	.+30     	; 0x2852 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>
    2834:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2836:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2838:	89 2b       	or	r24, r25
    283a:	21 f0       	breq	.+8      	; 0x2844 <_ZN16Adafruit_SSD13065beginEhhbb+0x26e>
    283c:	8e ad       	ldd	r24, Y+62	; 0x3e
    283e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2840:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN8SPIClass16beginTransactionE11SPISettings>
    2844:	ef a5       	ldd	r30, Y+47	; 0x2f
    2846:	f8 a9       	ldd	r31, Y+48	; 0x30
    2848:	90 81       	ld	r25, Z
    284a:	8c a9       	ldd	r24, Y+52	; 0x34
    284c:	80 95       	com	r24
    284e:	89 23       	and	r24, r25
    2850:	80 83       	st	Z, r24
    2852:	44 e0       	ldi	r20, 0x04	; 4
    2854:	6f e5       	ldi	r22, 0x5F	; 95
    2856:	76 e0       	ldi	r23, 0x06	; 6
    2858:	ce 01       	movw	r24, r28
    285a:	f7 dd       	rcall	.-1042   	; 0x244a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    285c:	6e 81       	ldd	r22, Y+6	; 0x06
    285e:	61 50       	subi	r22, 0x01	; 1
    2860:	ce 01       	movw	r24, r28
    2862:	4c dd       	rcall	.-1384   	; 0x22fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2864:	44 e0       	ldi	r20, 0x04	; 4
    2866:	6b e5       	ldi	r22, 0x5B	; 91
    2868:	76 e0       	ldi	r23, 0x06	; 6
    286a:	ce 01       	movw	r24, r28
    286c:	ee dd       	rcall	.-1060   	; 0x244a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    286e:	8a a1       	ldd	r24, Y+34	; 0x22
    2870:	81 30       	cpi	r24, 0x01	; 1
    2872:	11 f4       	brne	.+4      	; 0x2878 <_ZN16Adafruit_SSD13065beginEhhbb+0x2a2>
    2874:	60 e1       	ldi	r22, 0x10	; 16
    2876:	01 c0       	rjmp	.+2      	; 0x287a <_ZN16Adafruit_SSD13065beginEhhbb+0x2a4>
    2878:	64 e1       	ldi	r22, 0x14	; 20
    287a:	ce 01       	movw	r24, r28
    287c:	3f dd       	rcall	.-1410   	; 0x22fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    287e:	44 e0       	ldi	r20, 0x04	; 4
    2880:	67 e5       	ldi	r22, 0x57	; 87
    2882:	76 e0       	ldi	r23, 0x06	; 6
    2884:	ce 01       	movw	r24, r28
    2886:	e1 dd       	rcall	.-1086   	; 0x244a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    2888:	8f e8       	ldi	r24, 0x8F	; 143
    288a:	8d af       	std	Y+61, r24	; 0x3d
    288c:	8c 81       	ldd	r24, Y+4	; 0x04
    288e:	9d 81       	ldd	r25, Y+5	; 0x05
    2890:	80 38       	cpi	r24, 0x80	; 128
    2892:	91 05       	cpc	r25, r1
    2894:	71 f4       	brne	.+28     	; 0x28b2 <_ZN16Adafruit_SSD13065beginEhhbb+0x2dc>
    2896:	8e 81       	ldd	r24, Y+6	; 0x06
    2898:	9f 81       	ldd	r25, Y+7	; 0x07
    289a:	80 34       	cpi	r24, 0x40	; 64
    289c:	91 05       	cpc	r25, r1
    289e:	b9 f4       	brne	.+46     	; 0x28ce <_ZN16Adafruit_SSD13065beginEhhbb+0x2f8>
    28a0:	8a a1       	ldd	r24, Y+34	; 0x22
    28a2:	81 30       	cpi	r24, 0x01	; 1
    28a4:	11 f4       	brne	.+4      	; 0x28aa <_ZN16Adafruit_SSD13065beginEhhbb+0x2d4>
    28a6:	8f e9       	ldi	r24, 0x9F	; 159
    28a8:	01 c0       	rjmp	.+2      	; 0x28ac <_ZN16Adafruit_SSD13065beginEhhbb+0x2d6>
    28aa:	8f ec       	ldi	r24, 0xCF	; 207
    28ac:	8d af       	std	Y+61, r24	; 0x3d
    28ae:	12 e1       	ldi	r17, 0x12	; 18
    28b0:	0f c0       	rjmp	.+30     	; 0x28d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x2fa>
    28b2:	80 36       	cpi	r24, 0x60	; 96
    28b4:	91 05       	cpc	r25, r1
    28b6:	59 f4       	brne	.+22     	; 0x28ce <_ZN16Adafruit_SSD13065beginEhhbb+0x2f8>
    28b8:	8e 81       	ldd	r24, Y+6	; 0x06
    28ba:	9f 81       	ldd	r25, Y+7	; 0x07
    28bc:	40 97       	sbiw	r24, 0x10	; 16
    28be:	39 f4       	brne	.+14     	; 0x28ce <_ZN16Adafruit_SSD13065beginEhhbb+0x2f8>
    28c0:	8a a1       	ldd	r24, Y+34	; 0x22
    28c2:	81 30       	cpi	r24, 0x01	; 1
    28c4:	11 f4       	brne	.+4      	; 0x28ca <_ZN16Adafruit_SSD13065beginEhhbb+0x2f4>
    28c6:	80 e1       	ldi	r24, 0x10	; 16
    28c8:	01 c0       	rjmp	.+2      	; 0x28cc <_ZN16Adafruit_SSD13065beginEhhbb+0x2f6>
    28ca:	8f ea       	ldi	r24, 0xAF	; 175
    28cc:	8d af       	std	Y+61, r24	; 0x3d
    28ce:	12 e0       	ldi	r17, 0x02	; 2
    28d0:	6a ed       	ldi	r22, 0xDA	; 218
    28d2:	ce 01       	movw	r24, r28
    28d4:	13 dd       	rcall	.-1498   	; 0x22fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    28d6:	61 2f       	mov	r22, r17
    28d8:	ce 01       	movw	r24, r28
    28da:	10 dd       	rcall	.-1504   	; 0x22fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    28dc:	61 e8       	ldi	r22, 0x81	; 129
    28de:	ce 01       	movw	r24, r28
    28e0:	0d dd       	rcall	.-1510   	; 0x22fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    28e2:	6d ad       	ldd	r22, Y+61	; 0x3d
    28e4:	ce 01       	movw	r24, r28
    28e6:	0a dd       	rcall	.-1516   	; 0x22fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    28e8:	69 ed       	ldi	r22, 0xD9	; 217
    28ea:	ce 01       	movw	r24, r28
    28ec:	07 dd       	rcall	.-1522   	; 0x22fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    28ee:	8a a1       	ldd	r24, Y+34	; 0x22
    28f0:	81 30       	cpi	r24, 0x01	; 1
    28f2:	11 f4       	brne	.+4      	; 0x28f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x322>
    28f4:	62 e2       	ldi	r22, 0x22	; 34
    28f6:	01 c0       	rjmp	.+2      	; 0x28fa <_ZN16Adafruit_SSD13065beginEhhbb+0x324>
    28f8:	61 ef       	ldi	r22, 0xF1	; 241
    28fa:	ce 01       	movw	r24, r28
    28fc:	ff dc       	rcall	.-1538   	; 0x22fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    28fe:	46 e0       	ldi	r20, 0x06	; 6
    2900:	61 e5       	ldi	r22, 0x51	; 81
    2902:	76 e0       	ldi	r23, 0x06	; 6
    2904:	ce 01       	movw	r24, r28
    2906:	a1 dd       	rcall	.-1214   	; 0x244a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    2908:	8d 8d       	ldd	r24, Y+29	; 0x1d
    290a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	39 f0       	breq	.+14     	; 0x291e <_ZN16Adafruit_SSD13065beginEhhbb+0x348>
    2910:	49 ad       	ldd	r20, Y+57	; 0x39
    2912:	5a ad       	ldd	r21, Y+58	; 0x3a
    2914:	6b ad       	ldd	r22, Y+59	; 0x3b
    2916:	7c ad       	ldd	r23, Y+60	; 0x3c
    2918:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <_ZN7TwoWire8setClockEm>
    291c:	0c c0       	rjmp	.+24     	; 0x2936 <_ZN16Adafruit_SSD13065beginEhhbb+0x360>
    291e:	ef a5       	ldd	r30, Y+47	; 0x2f
    2920:	f8 a9       	ldd	r31, Y+48	; 0x30
    2922:	90 81       	ld	r25, Z
    2924:	8c a9       	ldd	r24, Y+52	; 0x34
    2926:	89 2b       	or	r24, r25
    2928:	80 83       	st	Z, r24
    292a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    292c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    292e:	89 2b       	or	r24, r25
    2930:	11 f0       	breq	.+4      	; 0x2936 <_ZN16Adafruit_SSD13065beginEhhbb+0x360>
    2932:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN8SPIClass14endTransactionEv>
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	03 c0       	rjmp	.+6      	; 0x2940 <_ZN16Adafruit_SSD13065beginEhhbb+0x36a>
    293a:	a1 10       	cpse	r10, r1
    293c:	52 cf       	rjmp	.-348    	; 0x27e2 <_ZN16Adafruit_SSD13065beginEhhbb+0x20c>
    293e:	73 cf       	rjmp	.-282    	; 0x2826 <_ZN16Adafruit_SSD13065beginEhhbb+0x250>
    2940:	df 91       	pop	r29
    2942:	cf 91       	pop	r28
    2944:	1f 91       	pop	r17
    2946:	0f 91       	pop	r16
    2948:	ff 90       	pop	r15
    294a:	ef 90       	pop	r14
    294c:	df 90       	pop	r13
    294e:	cf 90       	pop	r12
    2950:	bf 90       	pop	r11
    2952:	af 90       	pop	r10
    2954:	9f 90       	pop	r9
    2956:	8f 90       	pop	r8
    2958:	08 95       	ret

0000295a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>:
    295a:	0f 93       	push	r16
    295c:	1f 93       	push	r17
    295e:	cf 93       	push	r28
    2960:	df 93       	push	r29
    2962:	dc 01       	movw	r26, r24
    2964:	57 fd       	sbrc	r21, 7
    2966:	64 c0       	rjmp	.+200    	; 0x2a30 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2968:	16 96       	adiw	r26, 0x06	; 6
    296a:	8d 91       	ld	r24, X+
    296c:	9c 91       	ld	r25, X
    296e:	17 97       	sbiw	r26, 0x07	; 7
    2970:	48 17       	cp	r20, r24
    2972:	59 07       	cpc	r21, r25
    2974:	0c f0       	brlt	.+2      	; 0x2978 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1e>
    2976:	5c c0       	rjmp	.+184    	; 0x2a30 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2978:	77 ff       	sbrs	r23, 7
    297a:	04 c0       	rjmp	.+8      	; 0x2984 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x2a>
    297c:	26 0f       	add	r18, r22
    297e:	37 1f       	adc	r19, r23
    2980:	60 e0       	ldi	r22, 0x00	; 0
    2982:	70 e0       	ldi	r23, 0x00	; 0
    2984:	14 96       	adiw	r26, 0x04	; 4
    2986:	cd 91       	ld	r28, X+
    2988:	dc 91       	ld	r29, X
    298a:	15 97       	sbiw	r26, 0x05	; 5
    298c:	cb 01       	movw	r24, r22
    298e:	82 0f       	add	r24, r18
    2990:	93 1f       	adc	r25, r19
    2992:	c8 17       	cp	r28, r24
    2994:	d9 07       	cpc	r29, r25
    2996:	1c f4       	brge	.+6      	; 0x299e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x44>
    2998:	9e 01       	movw	r18, r28
    299a:	26 1b       	sub	r18, r22
    299c:	37 0b       	sbc	r19, r23
    299e:	12 16       	cp	r1, r18
    29a0:	13 06       	cpc	r1, r19
    29a2:	0c f0       	brlt	.+2      	; 0x29a6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x4c>
    29a4:	45 c0       	rjmp	.+138    	; 0x2a30 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    29a6:	fa 01       	movw	r30, r20
    29a8:	57 fd       	sbrc	r21, 7
    29aa:	37 96       	adiw	r30, 0x07	; 7
    29ac:	cf 01       	movw	r24, r30
    29ae:	e3 e0       	ldi	r30, 0x03	; 3
    29b0:	95 95       	asr	r25
    29b2:	87 95       	ror	r24
    29b4:	ea 95       	dec	r30
    29b6:	e1 f7       	brne	.-8      	; 0x29b0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x56>
    29b8:	8c 9f       	mul	r24, r28
    29ba:	f0 01       	movw	r30, r0
    29bc:	8d 9f       	mul	r24, r29
    29be:	f0 0d       	add	r31, r0
    29c0:	9c 9f       	mul	r25, r28
    29c2:	f0 0d       	add	r31, r0
    29c4:	11 24       	eor	r1, r1
    29c6:	6e 0f       	add	r22, r30
    29c8:	7f 1f       	adc	r23, r31
    29ca:	5f 96       	adiw	r26, 0x1f	; 31
    29cc:	ed 91       	ld	r30, X+
    29ce:	fc 91       	ld	r31, X
    29d0:	90 97       	sbiw	r26, 0x20	; 32
    29d2:	e6 0f       	add	r30, r22
    29d4:	f7 1f       	adc	r31, r23
    29d6:	47 70       	andi	r20, 0x07	; 7
    29d8:	55 27       	eor	r21, r21
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	01 c0       	rjmp	.+2      	; 0x29e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x88>
    29e0:	88 0f       	add	r24, r24
    29e2:	4a 95       	dec	r20
    29e4:	ea f7       	brpl	.-6      	; 0x29e0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x86>
    29e6:	48 2f       	mov	r20, r24
    29e8:	01 30       	cpi	r16, 0x01	; 1
    29ea:	11 05       	cpc	r17, r1
    29ec:	39 f0       	breq	.+14     	; 0x29fc <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa2>
    29ee:	78 f0       	brcs	.+30     	; 0x2a0e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xb4>
    29f0:	02 30       	cpi	r16, 0x02	; 2
    29f2:	11 05       	cpc	r17, r1
    29f4:	e9 f4       	brne	.+58     	; 0x2a30 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    29f6:	2e 0f       	add	r18, r30
    29f8:	3f 1f       	adc	r19, r31
    29fa:	13 c0       	rjmp	.+38     	; 0x2a22 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    29fc:	2e 0f       	add	r18, r30
    29fe:	3f 1f       	adc	r19, r31
    2a00:	e2 17       	cp	r30, r18
    2a02:	f3 07       	cpc	r31, r19
    2a04:	a9 f0       	breq	.+42     	; 0x2a30 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2a06:	80 81       	ld	r24, Z
    2a08:	84 2b       	or	r24, r20
    2a0a:	81 93       	st	Z+, r24
    2a0c:	f9 cf       	rjmp	.-14     	; 0x2a00 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa6>
    2a0e:	80 95       	com	r24
    2a10:	2e 0f       	add	r18, r30
    2a12:	3f 1f       	adc	r19, r31
    2a14:	e2 17       	cp	r30, r18
    2a16:	f3 07       	cpc	r31, r19
    2a18:	59 f0       	breq	.+22     	; 0x2a30 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2a1a:	90 81       	ld	r25, Z
    2a1c:	98 23       	and	r25, r24
    2a1e:	91 93       	st	Z+, r25
    2a20:	f9 cf       	rjmp	.-14     	; 0x2a14 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xba>
    2a22:	e2 17       	cp	r30, r18
    2a24:	f3 07       	cpc	r31, r19
    2a26:	21 f0       	breq	.+8      	; 0x2a30 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2a28:	80 81       	ld	r24, Z
    2a2a:	84 27       	eor	r24, r20
    2a2c:	81 93       	st	Z+, r24
    2a2e:	f9 cf       	rjmp	.-14     	; 0x2a22 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    2a30:	df 91       	pop	r29
    2a32:	cf 91       	pop	r28
    2a34:	1f 91       	pop	r17
    2a36:	0f 91       	pop	r16
    2a38:	08 95       	ret

00002a3a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>:
    2a3a:	ef 92       	push	r14
    2a3c:	ff 92       	push	r15
    2a3e:	0f 93       	push	r16
    2a40:	1f 93       	push	r17
    2a42:	cf 93       	push	r28
    2a44:	df 93       	push	r29
    2a46:	ec 01       	movw	r28, r24
    2a48:	77 fd       	sbrc	r23, 7
    2a4a:	a5 c0       	rjmp	.+330    	; 0x2b96 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2a4c:	ec 80       	ldd	r14, Y+4	; 0x04
    2a4e:	fd 80       	ldd	r15, Y+5	; 0x05
    2a50:	6e 15       	cp	r22, r14
    2a52:	7f 05       	cpc	r23, r15
    2a54:	0c f0       	brlt	.+2      	; 0x2a58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1e>
    2a56:	9f c0       	rjmp	.+318    	; 0x2b96 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2a58:	57 ff       	sbrs	r21, 7
    2a5a:	04 c0       	rjmp	.+8      	; 0x2a64 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2a>
    2a5c:	24 0f       	add	r18, r20
    2a5e:	35 1f       	adc	r19, r21
    2a60:	40 e0       	ldi	r20, 0x00	; 0
    2a62:	50 e0       	ldi	r21, 0x00	; 0
    2a64:	8e 81       	ldd	r24, Y+6	; 0x06
    2a66:	9f 81       	ldd	r25, Y+7	; 0x07
    2a68:	fa 01       	movw	r30, r20
    2a6a:	e2 0f       	add	r30, r18
    2a6c:	f3 1f       	adc	r31, r19
    2a6e:	8e 17       	cp	r24, r30
    2a70:	9f 07       	cpc	r25, r31
    2a72:	1c f4       	brge	.+6      	; 0x2a7a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x40>
    2a74:	9c 01       	movw	r18, r24
    2a76:	24 1b       	sub	r18, r20
    2a78:	35 0b       	sbc	r19, r21
    2a7a:	12 16       	cp	r1, r18
    2a7c:	13 06       	cpc	r1, r19
    2a7e:	0c f0       	brlt	.+2      	; 0x2a82 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x48>
    2a80:	8a c0       	rjmp	.+276    	; 0x2b96 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2a82:	92 2f       	mov	r25, r18
    2a84:	84 2f       	mov	r24, r20
    2a86:	86 95       	lsr	r24
    2a88:	86 95       	lsr	r24
    2a8a:	86 95       	lsr	r24
    2a8c:	8e 9d       	mul	r24, r14
    2a8e:	d0 01       	movw	r26, r0
    2a90:	8f 9d       	mul	r24, r15
    2a92:	b0 0d       	add	r27, r0
    2a94:	11 24       	eor	r1, r1
    2a96:	6a 0f       	add	r22, r26
    2a98:	7b 1f       	adc	r23, r27
    2a9a:	af 8d       	ldd	r26, Y+31	; 0x1f
    2a9c:	b8 a1       	ldd	r27, Y+32	; 0x20
    2a9e:	a6 0f       	add	r26, r22
    2aa0:	b7 1f       	adc	r27, r23
    2aa2:	47 70       	andi	r20, 0x07	; 7
    2aa4:	b1 f1       	breq	.+108    	; 0x2b12 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    2aa6:	88 e0       	ldi	r24, 0x08	; 8
    2aa8:	84 1b       	sub	r24, r20
    2aaa:	48 2f       	mov	r20, r24
    2aac:	68 2f       	mov	r22, r24
    2aae:	70 e0       	ldi	r23, 0x00	; 0
    2ab0:	fb 01       	movw	r30, r22
    2ab2:	e7 5b       	subi	r30, 0xB7	; 183
    2ab4:	f9 4f       	sbci	r31, 0xF9	; 249
    2ab6:	e4 91       	lpm	r30, Z
    2ab8:	28 17       	cp	r18, r24
    2aba:	98 f4       	brcc	.+38     	; 0x2ae2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa8>
    2abc:	62 1b       	sub	r22, r18
    2abe:	71 09       	sbc	r23, r1
    2ac0:	2f ef       	ldi	r18, 0xFF	; 255
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	02 c0       	rjmp	.+4      	; 0x2aca <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x90>
    2ac6:	35 95       	asr	r19
    2ac8:	27 95       	ror	r18
    2aca:	6a 95       	dec	r22
    2acc:	e2 f7       	brpl	.-8      	; 0x2ac6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x8c>
    2ace:	e2 23       	and	r30, r18
    2ad0:	01 30       	cpi	r16, 0x01	; 1
    2ad2:	11 05       	cpc	r17, r1
    2ad4:	49 f0       	breq	.+18     	; 0x2ae8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xae>
    2ad6:	78 f0       	brcs	.+30     	; 0x2af6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    2ad8:	02 30       	cpi	r16, 0x02	; 2
    2ada:	11 05       	cpc	r17, r1
    2adc:	09 f0       	breq	.+2      	; 0x2ae0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa6>
    2ade:	5b c0       	rjmp	.+182    	; 0x2b96 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2ae0:	0e c0       	rjmp	.+28     	; 0x2afe <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    2ae2:	01 30       	cpi	r16, 0x01	; 1
    2ae4:	11 05       	cpc	r17, r1
    2ae6:	19 f4       	brne	.+6      	; 0x2aee <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xb4>
    2ae8:	8c 91       	ld	r24, X
    2aea:	e8 2b       	or	r30, r24
    2aec:	0a c0       	rjmp	.+20     	; 0x2b02 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    2aee:	01 30       	cpi	r16, 0x01	; 1
    2af0:	11 05       	cpc	r17, r1
    2af2:	08 f0       	brcs	.+2      	; 0x2af6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    2af4:	49 c0       	rjmp	.+146    	; 0x2b88 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14e>
    2af6:	e0 95       	com	r30
    2af8:	8c 91       	ld	r24, X
    2afa:	e8 23       	and	r30, r24
    2afc:	02 c0       	rjmp	.+4      	; 0x2b02 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    2afe:	8c 91       	ld	r24, X
    2b00:	e8 27       	eor	r30, r24
    2b02:	ec 93       	st	X, r30
    2b04:	94 17       	cp	r25, r20
    2b06:	08 f4       	brcc	.+2      	; 0x2b0a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd0>
    2b08:	46 c0       	rjmp	.+140    	; 0x2b96 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2b0a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b0c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b0e:	a2 0f       	add	r26, r18
    2b10:	b3 1f       	adc	r27, r19
    2b12:	e9 2f       	mov	r30, r25
    2b14:	e4 1b       	sub	r30, r20
    2b16:	e8 30       	cpi	r30, 0x08	; 8
    2b18:	f8 f0       	brcs	.+62     	; 0x2b58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11e>
    2b1a:	02 30       	cpi	r16, 0x02	; 2
    2b1c:	11 05       	cpc	r17, r1
    2b1e:	61 f4       	brne	.+24     	; 0x2b38 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xfe>
    2b20:	8e 2f       	mov	r24, r30
    2b22:	9c 91       	ld	r25, X
    2b24:	90 95       	com	r25
    2b26:	9c 93       	st	X, r25
    2b28:	2c 81       	ldd	r18, Y+4	; 0x04
    2b2a:	3d 81       	ldd	r19, Y+5	; 0x05
    2b2c:	a2 0f       	add	r26, r18
    2b2e:	b3 1f       	adc	r27, r19
    2b30:	88 50       	subi	r24, 0x08	; 8
    2b32:	88 30       	cpi	r24, 0x08	; 8
    2b34:	b0 f7       	brcc	.-20     	; 0x2b22 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xe8>
    2b36:	0f c0       	rjmp	.+30     	; 0x2b56 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11c>
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	01 15       	cp	r16, r1
    2b3c:	11 05       	cpc	r17, r1
    2b3e:	09 f4       	brne	.+2      	; 0x2b42 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x108>
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	81 95       	neg	r24
    2b44:	9e 2f       	mov	r25, r30
    2b46:	8c 93       	st	X, r24
    2b48:	2c 81       	ldd	r18, Y+4	; 0x04
    2b4a:	3d 81       	ldd	r19, Y+5	; 0x05
    2b4c:	a2 0f       	add	r26, r18
    2b4e:	b3 1f       	adc	r27, r19
    2b50:	98 50       	subi	r25, 0x08	; 8
    2b52:	98 30       	cpi	r25, 0x08	; 8
    2b54:	c0 f7       	brcc	.-16     	; 0x2b46 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x10c>
    2b56:	e7 70       	andi	r30, 0x07	; 7
    2b58:	ee 23       	and	r30, r30
    2b5a:	e9 f0       	breq	.+58     	; 0x2b96 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	ef 5b       	subi	r30, 0xBF	; 191
    2b60:	f9 4f       	sbci	r31, 0xF9	; 249
    2b62:	e4 91       	lpm	r30, Z
    2b64:	01 30       	cpi	r16, 0x01	; 1
    2b66:	11 05       	cpc	r17, r1
    2b68:	39 f0       	breq	.+14     	; 0x2b78 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x13e>
    2b6a:	48 f0       	brcs	.+18     	; 0x2b7e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x144>
    2b6c:	02 30       	cpi	r16, 0x02	; 2
    2b6e:	11 05       	cpc	r17, r1
    2b70:	91 f4       	brne	.+36     	; 0x2b96 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2b72:	8c 91       	ld	r24, X
    2b74:	e8 27       	eor	r30, r24
    2b76:	06 c0       	rjmp	.+12     	; 0x2b84 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    2b78:	8c 91       	ld	r24, X
    2b7a:	e8 2b       	or	r30, r24
    2b7c:	03 c0       	rjmp	.+6      	; 0x2b84 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    2b7e:	e0 95       	com	r30
    2b80:	8c 91       	ld	r24, X
    2b82:	e8 23       	and	r30, r24
    2b84:	ec 93       	st	X, r30
    2b86:	07 c0       	rjmp	.+14     	; 0x2b96 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2b88:	02 30       	cpi	r16, 0x02	; 2
    2b8a:	11 05       	cpc	r17, r1
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x156>
    2b8e:	b7 cf       	rjmp	.-146    	; 0x2afe <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    2b90:	ae 0d       	add	r26, r14
    2b92:	bf 1d       	adc	r27, r15
    2b94:	be cf       	rjmp	.-132    	; 0x2b12 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    2b96:	df 91       	pop	r29
    2b98:	cf 91       	pop	r28
    2b9a:	1f 91       	pop	r17
    2b9c:	0f 91       	pop	r16
    2b9e:	ff 90       	pop	r15
    2ba0:	ef 90       	pop	r14
    2ba2:	08 95       	ret

00002ba4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    2ba4:	0f 93       	push	r16
    2ba6:	1f 93       	push	r17
    2ba8:	dc 01       	movw	r26, r24
    2baa:	56 96       	adiw	r26, 0x16	; 22
    2bac:	ec 91       	ld	r30, X
    2bae:	56 97       	sbiw	r26, 0x16	; 22
    2bb0:	e2 30       	cpi	r30, 0x02	; 2
    2bb2:	61 f0       	breq	.+24     	; 0x2bcc <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28>
    2bb4:	e3 30       	cpi	r30, 0x03	; 3
    2bb6:	09 f1       	breq	.+66     	; 0x2bfa <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x56>
    2bb8:	e1 30       	cpi	r30, 0x01	; 1
    2bba:	79 f5       	brne	.+94     	; 0x2c1a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x76>
    2bbc:	14 96       	adiw	r26, 0x04	; 4
    2bbe:	ed 91       	ld	r30, X+
    2bc0:	fc 91       	ld	r31, X
    2bc2:	15 97       	sbiw	r26, 0x05	; 5
    2bc4:	e4 1b       	sub	r30, r20
    2bc6:	f5 0b       	sbc	r31, r21
    2bc8:	31 97       	sbiw	r30, 0x01	; 1
    2bca:	23 c0       	rjmp	.+70     	; 0x2c12 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x6e>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	14 96       	adiw	r26, 0x04	; 4
    2bd0:	ed 91       	ld	r30, X+
    2bd2:	fc 91       	ld	r31, X
    2bd4:	15 97       	sbiw	r26, 0x05	; 5
    2bd6:	df 01       	movw	r26, r30
    2bd8:	a6 1b       	sub	r26, r22
    2bda:	b7 0b       	sbc	r27, r23
    2bdc:	bd 01       	movw	r22, r26
    2bde:	dc 01       	movw	r26, r24
    2be0:	16 96       	adiw	r26, 0x06	; 6
    2be2:	ed 91       	ld	r30, X+
    2be4:	fc 91       	ld	r31, X
    2be6:	17 97       	sbiw	r26, 0x07	; 7
    2be8:	df 01       	movw	r26, r30
    2bea:	a4 1b       	sub	r26, r20
    2bec:	b5 0b       	sbc	r27, r21
    2bee:	ad 01       	movw	r20, r26
    2bf0:	41 50       	subi	r20, 0x01	; 1
    2bf2:	51 09       	sbc	r21, r1
    2bf4:	62 1b       	sub	r22, r18
    2bf6:	73 0b       	sbc	r23, r19
    2bf8:	10 c0       	rjmp	.+32     	; 0x2c1a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x76>
    2bfa:	fa 01       	movw	r30, r20
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	16 96       	adiw	r26, 0x06	; 6
    2c00:	4d 91       	ld	r20, X+
    2c02:	5c 91       	ld	r21, X
    2c04:	17 97       	sbiw	r26, 0x07	; 7
    2c06:	da 01       	movw	r26, r20
    2c08:	a6 1b       	sub	r26, r22
    2c0a:	b7 0b       	sbc	r27, r23
    2c0c:	bd 01       	movw	r22, r26
    2c0e:	62 1b       	sub	r22, r18
    2c10:	73 0b       	sbc	r23, r19
    2c12:	ab 01       	movw	r20, r22
    2c14:	bf 01       	movw	r22, r30
    2c16:	11 df       	rcall	.-478    	; 0x2a3a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    2c18:	01 c0       	rjmp	.+2      	; 0x2c1c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    2c1a:	9f de       	rcall	.-706    	; 0x295a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    2c1c:	1f 91       	pop	r17
    2c1e:	0f 91       	pop	r16
    2c20:	08 95       	ret

00002c22 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    2c22:	0f 93       	push	r16
    2c24:	1f 93       	push	r17
    2c26:	dc 01       	movw	r26, r24
    2c28:	56 96       	adiw	r26, 0x16	; 22
    2c2a:	ec 91       	ld	r30, X
    2c2c:	56 97       	sbiw	r26, 0x16	; 22
    2c2e:	e2 30       	cpi	r30, 0x02	; 2
    2c30:	69 f0       	breq	.+26     	; 0x2c4c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a>
    2c32:	e3 30       	cpi	r30, 0x03	; 3
    2c34:	11 f1       	breq	.+68     	; 0x2c7a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x58>
    2c36:	e1 30       	cpi	r30, 0x01	; 1
    2c38:	81 f5       	brne	.+96     	; 0x2c9a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x78>
    2c3a:	14 96       	adiw	r26, 0x04	; 4
    2c3c:	ed 91       	ld	r30, X+
    2c3e:	fc 91       	ld	r31, X
    2c40:	15 97       	sbiw	r26, 0x05	; 5
    2c42:	e4 1b       	sub	r30, r20
    2c44:	f5 0b       	sbc	r31, r21
    2c46:	e2 1b       	sub	r30, r18
    2c48:	f3 0b       	sbc	r31, r19
    2c4a:	23 c0       	rjmp	.+70     	; 0x2c92 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x70>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	14 96       	adiw	r26, 0x04	; 4
    2c50:	ed 91       	ld	r30, X+
    2c52:	fc 91       	ld	r31, X
    2c54:	15 97       	sbiw	r26, 0x05	; 5
    2c56:	df 01       	movw	r26, r30
    2c58:	a6 1b       	sub	r26, r22
    2c5a:	b7 0b       	sbc	r27, r23
    2c5c:	bd 01       	movw	r22, r26
    2c5e:	61 50       	subi	r22, 0x01	; 1
    2c60:	71 09       	sbc	r23, r1
    2c62:	dc 01       	movw	r26, r24
    2c64:	16 96       	adiw	r26, 0x06	; 6
    2c66:	ed 91       	ld	r30, X+
    2c68:	fc 91       	ld	r31, X
    2c6a:	17 97       	sbiw	r26, 0x07	; 7
    2c6c:	df 01       	movw	r26, r30
    2c6e:	a4 1b       	sub	r26, r20
    2c70:	b5 0b       	sbc	r27, r21
    2c72:	ad 01       	movw	r20, r26
    2c74:	42 1b       	sub	r20, r18
    2c76:	53 0b       	sbc	r21, r19
    2c78:	10 c0       	rjmp	.+32     	; 0x2c9a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x78>
    2c7a:	fa 01       	movw	r30, r20
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	16 96       	adiw	r26, 0x06	; 6
    2c80:	4d 91       	ld	r20, X+
    2c82:	5c 91       	ld	r21, X
    2c84:	17 97       	sbiw	r26, 0x07	; 7
    2c86:	da 01       	movw	r26, r20
    2c88:	a6 1b       	sub	r26, r22
    2c8a:	b7 0b       	sbc	r27, r23
    2c8c:	bd 01       	movw	r22, r26
    2c8e:	61 50       	subi	r22, 0x01	; 1
    2c90:	71 09       	sbc	r23, r1
    2c92:	ab 01       	movw	r20, r22
    2c94:	bf 01       	movw	r22, r30
    2c96:	61 de       	rcall	.-830    	; 0x295a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    2c98:	01 c0       	rjmp	.+2      	; 0x2c9c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    2c9a:	cf de       	rcall	.-610    	; 0x2a3a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    2c9c:	1f 91       	pop	r17
    2c9e:	0f 91       	pop	r16
    2ca0:	08 95       	ret

00002ca2 <_ZN16Adafruit_SSD13067displayEv>:
    @return None (void).
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
    2ca2:	cf 92       	push	r12
    2ca4:	df 92       	push	r13
    2ca6:	ef 92       	push	r14
    2ca8:	ff 92       	push	r15
    2caa:	0f 93       	push	r16
    2cac:	1f 93       	push	r17
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	ec 01       	movw	r28, r24
  TRANSACTION_START
    2cb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cb6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	31 f0       	breq	.+12     	; 0x2cc8 <_ZN16Adafruit_SSD13067displayEv+0x26>
    2cbc:	4d a9       	ldd	r20, Y+53	; 0x35
    2cbe:	5e a9       	ldd	r21, Y+54	; 0x36
    2cc0:	6f a9       	ldd	r22, Y+55	; 0x37
    2cc2:	78 ad       	ldd	r23, Y+56	; 0x38
    2cc4:	ec d7       	rcall	.+4056   	; 0x3c9e <_ZN7TwoWire8setClockEm>
    2cc6:	0f c0       	rjmp	.+30     	; 0x2ce6 <_ZN16Adafruit_SSD13067displayEv+0x44>
    2cc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ccc:	89 2b       	or	r24, r25
    2cce:	21 f0       	breq	.+8      	; 0x2cd8 <_ZN16Adafruit_SSD13067displayEv+0x36>
    2cd0:	8e ad       	ldd	r24, Y+62	; 0x3e
    2cd2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cd4:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN8SPIClass16beginTransactionE11SPISettings>
    2cd8:	ef a5       	ldd	r30, Y+47	; 0x2f
    2cda:	f8 a9       	ldd	r31, Y+48	; 0x30
    2cdc:	90 81       	ld	r25, Z
    2cde:	8c a9       	ldd	r24, Y+52	; 0x34
    2ce0:	80 95       	com	r24
    2ce2:	89 23       	and	r24, r25
    2ce4:	80 83       	st	Z, r24
  static const uint8_t PROGMEM dlist1[] = {
      SSD1306_PAGEADDR,
      0,                      // Page start address
      0xFF,                   // Page end (not really, but works here)
      SSD1306_COLUMNADDR, 0}; // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
    2ce6:	45 e0       	ldi	r20, 0x05	; 5
    2ce8:	6c e3       	ldi	r22, 0x3C	; 60
    2cea:	76 e0       	ldi	r23, 0x06	; 6
    2cec:	ce 01       	movw	r24, r28
    2cee:	ad db       	rcall	.-2214   	; 0x244a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
    2cf0:	6c 81       	ldd	r22, Y+4	; 0x04
    2cf2:	61 50       	subi	r22, 0x01	; 1
    2cf4:	ce 01       	movw	r24, r28
    2cf6:	02 db       	rcall	.-2556   	; 0x22fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    2cf8:	2e 81       	ldd	r18, Y+6	; 0x06
    2cfa:	3f 81       	ldd	r19, Y+7	; 0x07
    2cfc:	c9 01       	movw	r24, r18
    2cfe:	07 96       	adiw	r24, 0x07	; 7
    2d00:	97 fd       	sbrc	r25, 7
    2d02:	07 96       	adiw	r24, 0x07	; 7
    2d04:	23 e0       	ldi	r18, 0x03	; 3
    2d06:	95 95       	asr	r25
    2d08:	87 95       	ror	r24
    2d0a:	2a 95       	dec	r18
    2d0c:	e1 f7       	brne	.-8      	; 0x2d06 <_ZN16Adafruit_SSD13067displayEv+0x64>
    2d0e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d10:	3d 81       	ldd	r19, Y+5	; 0x05
    2d12:	82 9f       	mul	r24, r18
    2d14:	70 01       	movw	r14, r0
    2d16:	83 9f       	mul	r24, r19
    2d18:	f0 0c       	add	r15, r0
    2d1a:	92 9f       	mul	r25, r18
    2d1c:	f0 0c       	add	r15, r0
    2d1e:	11 24       	eor	r1, r1
  uint8_t *ptr = buffer;
    2d20:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2d22:	18 a1       	ldd	r17, Y+32	; 0x20
  if (wire) { // I2C
    2d24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d28:	e0 0e       	add	r14, r16
    2d2a:	f1 1e       	adc	r15, r17
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	09 f4       	brne	.+2      	; 0x2d32 <_ZN16Adafruit_SSD13067displayEv+0x90>
    2d30:	40 c0       	rjmp	.+128    	; 0x2db2 <_ZN16Adafruit_SSD13067displayEv+0x110>
    wire->beginTransmission(i2caddr);
    2d32:	69 a1       	ldd	r22, Y+33	; 0x21
    2d34:	06 2e       	mov	r0, r22
    2d36:	00 0c       	add	r0, r0
    2d38:	77 0b       	sbc	r23, r23
    2d3a:	be d7       	rcall	.+3964   	; 0x3cb8 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
    2d3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d3e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d40:	dc 01       	movw	r26, r24
    2d42:	ed 91       	ld	r30, X+
    2d44:	fc 91       	ld	r31, X
    2d46:	01 90       	ld	r0, Z+
    2d48:	f0 81       	ld	r31, Z
    2d4a:	e0 2d       	mov	r30, r0
    2d4c:	60 e4       	ldi	r22, 0x40	; 64
    2d4e:	19 95       	eicall
    2d50:	68 01       	movw	r12, r16
    uint16_t bytesOut = 1;
    2d52:	01 e0       	ldi	r16, 0x01	; 1
    2d54:	10 e0       	ldi	r17, 0x00	; 0
    2d56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d58:	9e 8d       	ldd	r25, Y+30	; 0x1e
    while (count--) {
    2d5a:	ec 14       	cp	r14, r12
    2d5c:	fd 04       	cpc	r15, r13
    2d5e:	39 f1       	breq	.+78     	; 0x2dae <_ZN16Adafruit_SSD13067displayEv+0x10c>
      if (bytesOut >= WIRE_MAX) {
    2d60:	00 32       	cpi	r16, 0x20	; 32
    2d62:	11 05       	cpc	r17, r1
    2d64:	a8 f0       	brcs	.+42     	; 0x2d90 <_ZN16Adafruit_SSD13067displayEv+0xee>
        wire->endTransmission();
    2d66:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
    2d6a:	69 a1       	ldd	r22, Y+33	; 0x21
    2d6c:	06 2e       	mov	r0, r22
    2d6e:	00 0c       	add	r0, r0
    2d70:	77 0b       	sbc	r23, r23
    2d72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d76:	a0 d7       	rcall	.+3904   	; 0x3cb8 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
    2d78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	ed 91       	ld	r30, X+
    2d80:	fc 91       	ld	r31, X
    2d82:	01 90       	ld	r0, Z+
    2d84:	f0 81       	ld	r31, Z
    2d86:	e0 2d       	mov	r30, r0
    2d88:	60 e4       	ldi	r22, 0x40	; 64
    2d8a:	19 95       	eicall
        bytesOut = 1;
    2d8c:	01 e0       	ldi	r16, 0x01	; 1
    2d8e:	10 e0       	ldi	r17, 0x00	; 0
      }
      WIRE_WRITE(*ptr++);
    2d90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d94:	f6 01       	movw	r30, r12
    2d96:	61 91       	ld	r22, Z+
    2d98:	6f 01       	movw	r12, r30
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	ed 91       	ld	r30, X+
    2d9e:	fc 91       	ld	r31, X
    2da0:	01 90       	ld	r0, Z+
    2da2:	f0 81       	ld	r31, Z
    2da4:	e0 2d       	mov	r30, r0
      bytesOut++;
    2da6:	19 95       	eicall
    2da8:	0f 5f       	subi	r16, 0xFF	; 255
  uint8_t *ptr = buffer;
  if (wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    uint16_t bytesOut = 1;
    while (count--) {
    2daa:	1f 4f       	sbci	r17, 0xFF	; 255
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
    2dac:	d4 cf       	rjmp	.-88     	; 0x2d56 <_ZN16Adafruit_SSD13067displayEv+0xb4>
    2dae:	f9 d7       	rcall	.+4082   	; 0x3da2 <_ZN7TwoWire15endTransmissionEv>
    2db0:	35 c0       	rjmp	.+106    	; 0x2e1c <_ZN16Adafruit_SSD13067displayEv+0x17a>
  } else { // SPI
    SSD1306_MODE_DATA
    2db2:	ed a5       	ldd	r30, Y+45	; 0x2d
    2db4:	fe a5       	ldd	r31, Y+46	; 0x2e
    2db6:	90 81       	ld	r25, Z
    2db8:	8b a9       	ldd	r24, Y+51	; 0x33
    2dba:	89 2b       	or	r24, r25
    2dbc:	80 83       	st	Z, r24
    while (count--)
    2dbe:	0e 15       	cp	r16, r14
    2dc0:	1f 05       	cpc	r17, r15
    2dc2:	61 f1       	breq	.+88     	; 0x2e1c <_ZN16Adafruit_SSD13067displayEv+0x17a>
      SPIwrite(*ptr++);
    2dc4:	f8 01       	movw	r30, r16
    2dc6:	81 91       	ld	r24, Z+
    2dc8:	8f 01       	movw	r16, r30
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    2dca:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2dcc:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2dce:	23 2b       	or	r18, r19
    2dd0:	19 f0       	breq	.+6      	; 0x2dd8 <_ZN16Adafruit_SSD13067displayEv+0x136>
    (void)spi->transfer(d);
    2dd2:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN8SPIClass8transferEh>
    2dd6:	f3 cf       	rjmp	.-26     	; 0x2dbe <_ZN16Adafruit_SSD13067displayEv+0x11c>
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    2dd8:	28 e0       	ldi	r18, 0x08	; 8
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	40 e8       	ldi	r20, 0x80	; 128
    2dde:	e9 a5       	ldd	r30, Y+41	; 0x29
    2de0:	fa a5       	ldd	r31, Y+42	; 0x2a
    2de2:	99 a9       	ldd	r25, Y+49	; 0x31
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
#ifdef HAVE_PORTREG
      if (d & bit)
    2de4:	58 2f       	mov	r21, r24
    2de6:	54 23       	and	r21, r20
    2de8:	19 f0       	breq	.+6      	; 0x2df0 <_ZN16Adafruit_SSD13067displayEv+0x14e>
        *mosiPort |= mosiPinMask;
    2dea:	50 81       	ld	r21, Z
    2dec:	95 2b       	or	r25, r21
    2dee:	03 c0       	rjmp	.+6      	; 0x2df6 <_ZN16Adafruit_SSD13067displayEv+0x154>
      else
        *mosiPort &= ~mosiPinMask;
    2df0:	50 81       	ld	r21, Z
    2df2:	90 95       	com	r25
    2df4:	95 23       	and	r25, r21
    2df6:	90 83       	st	Z, r25
      *clkPort |= clkPinMask;  // Clock high
    2df8:	eb a5       	ldd	r30, Y+43	; 0x2b
    2dfa:	fc a5       	ldd	r31, Y+44	; 0x2c
    2dfc:	50 81       	ld	r21, Z
    2dfe:	9a a9       	ldd	r25, Y+50	; 0x32
    2e00:	95 2b       	or	r25, r21
    2e02:	90 83       	st	Z, r25
      *clkPort &= ~clkPinMask; // Clock low
    2e04:	eb a5       	ldd	r30, Y+43	; 0x2b
    2e06:	fc a5       	ldd	r31, Y+44	; 0x2c
    2e08:	50 81       	ld	r21, Z
    2e0a:	9a a9       	ldd	r25, Y+50	; 0x32
    2e0c:	90 95       	com	r25
    2e0e:	95 23       	and	r25, r21
    2e10:	90 83       	st	Z, r25
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    2e12:	46 95       	lsr	r20
    2e14:	21 50       	subi	r18, 0x01	; 1
    2e16:	31 09       	sbc	r19, r1
    2e18:	11 f7       	brne	.-60     	; 0x2dde <_ZN16Adafruit_SSD13067displayEv+0x13c>
    2e1a:	d1 cf       	rjmp	.-94     	; 0x2dbe <_ZN16Adafruit_SSD13067displayEv+0x11c>
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    2e1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e20:	00 97       	sbiw	r24, 0x00	; 0
    2e22:	69 f0       	breq	.+26     	; 0x2e3e <_ZN16Adafruit_SSD13067displayEv+0x19c>
    2e24:	49 ad       	ldd	r20, Y+57	; 0x39
    2e26:	5a ad       	ldd	r21, Y+58	; 0x3a
    2e28:	6b ad       	ldd	r22, Y+59	; 0x3b
    2e2a:	7c ad       	ldd	r23, Y+60	; 0x3c
#if defined(ESP8266)
  yield();
#endif
}
    2e2c:	df 91       	pop	r29
    2e2e:	cf 91       	pop	r28
    2e30:	1f 91       	pop	r17
    2e32:	0f 91       	pop	r16
    2e34:	ff 90       	pop	r15
    2e36:	ef 90       	pop	r14
    2e38:	df 90       	pop	r13
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    2e3a:	cf 90       	pop	r12
    2e3c:	30 c7       	rjmp	.+3680   	; 0x3c9e <_ZN7TwoWire8setClockEm>
    2e3e:	ef a5       	ldd	r30, Y+47	; 0x2f
    2e40:	f8 a9       	ldd	r31, Y+48	; 0x30
    2e42:	90 81       	ld	r25, Z
    2e44:	8c a9       	ldd	r24, Y+52	; 0x34
    2e46:	89 2b       	or	r24, r25
    2e48:	80 83       	st	Z, r24
    2e4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e4e:	89 2b       	or	r24, r25
    2e50:	51 f0       	breq	.+20     	; 0x2e66 <_ZN16Adafruit_SSD13067displayEv+0x1c4>
#if defined(ESP8266)
  yield();
#endif
}
    2e52:	df 91       	pop	r29
    2e54:	cf 91       	pop	r28
    2e56:	1f 91       	pop	r17
    2e58:	0f 91       	pop	r16
    2e5a:	ff 90       	pop	r15
    2e5c:	ef 90       	pop	r14
    2e5e:	df 90       	pop	r13
    2e60:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    2e62:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <_ZN8SPIClass14endTransactionEv>
#if defined(ESP8266)
  yield();
#endif
}
    2e66:	df 91       	pop	r29
    2e68:	cf 91       	pop	r28
    2e6a:	1f 91       	pop	r17
    2e6c:	0f 91       	pop	r16
    2e6e:	ff 90       	pop	r15
    2e70:	ef 90       	pop	r14
    2e72:	df 90       	pop	r13
    2e74:	cf 90       	pop	r12
    2e76:	08 95       	ret

00002e78 <_ZN3DHTC1Ehhh>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
    2e78:	dc 01       	movw	r26, r24
    2e7a:	15 96       	adiw	r26, 0x05	; 5
    2e7c:	6c 93       	st	X, r22
    2e7e:	15 97       	sbiw	r26, 0x05	; 5
    2e80:	16 96       	adiw	r26, 0x06	; 6
    2e82:	4c 93       	st	X, r20
    2e84:	16 97       	sbiw	r26, 0x06	; 6
    2e86:	70 e0       	ldi	r23, 0x00	; 0
    2e88:	fb 01       	movw	r30, r22
    2e8a:	e7 5b       	subi	r30, 0xB7	; 183
    2e8c:	f4 4f       	sbci	r31, 0xF4	; 244
    2e8e:	e4 91       	lpm	r30, Z
    2e90:	17 96       	adiw	r26, 0x07	; 7
    2e92:	ec 93       	st	X, r30
    2e94:	17 97       	sbiw	r26, 0x07	; 7
    2e96:	fb 01       	movw	r30, r22
    2e98:	e1 57       	subi	r30, 0x71	; 113
    2e9a:	f4 4f       	sbci	r31, 0xF4	; 244
    2e9c:	64 91       	lpm	r22, Z
    2e9e:	18 96       	adiw	r26, 0x08	; 8
    2ea0:	6c 93       	st	X, r22
    2ea2:	18 97       	sbiw	r26, 0x08	; 8
    2ea4:	40 e8       	ldi	r20, 0x80	; 128
    2ea6:	5e e3       	ldi	r21, 0x3E	; 62
    2ea8:	60 e0       	ldi	r22, 0x00	; 0
    2eaa:	70 e0       	ldi	r23, 0x00	; 0
    2eac:	1d 96       	adiw	r26, 0x0d	; 13
    2eae:	4d 93       	st	X+, r20
    2eb0:	5d 93       	st	X+, r21
    2eb2:	6d 93       	st	X+, r22
    2eb4:	7c 93       	st	X, r23
    2eb6:	50 97       	sbiw	r26, 0x10	; 16
    2eb8:	08 95       	ret

00002eba <_ZN3DHT5beginEh>:
    2eba:	1f 93       	push	r17
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	ec 01       	movw	r28, r24
    2ec2:	16 2f       	mov	r17, r22
    2ec4:	62 e0       	ldi	r22, 0x02	; 2
    2ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec8:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <pinMode>
    2ecc:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <millis>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	80 5d       	subi	r24, 0xD0	; 208
    2ed6:	97 40       	sbci	r25, 0x07	; 7
    2ed8:	a1 09       	sbc	r26, r1
    2eda:	b1 09       	sbc	r27, r1
    2edc:	89 87       	std	Y+9, r24	; 0x09
    2ede:	9a 87       	std	Y+10, r25	; 0x0a
    2ee0:	ab 87       	std	Y+11, r26	; 0x0b
    2ee2:	bc 87       	std	Y+12, r27	; 0x0c
    2ee4:	1a 8b       	std	Y+18, r17	; 0x12
    2ee6:	df 91       	pop	r29
    2ee8:	cf 91       	pop	r28
    2eea:	1f 91       	pop	r17
    2eec:	08 95       	ret

00002eee <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    2eee:	cf 92       	push	r12
    2ef0:	df 92       	push	r13
    2ef2:	ef 92       	push	r14
    2ef4:	ff 92       	push	r15
    2ef6:	1f 93       	push	r17
    2ef8:	cf 93       	push	r28
    2efa:	df 93       	push	r29
    2efc:	ec 01       	movw	r28, r24
    2efe:	1f 81       	ldd	r17, Y+7	; 0x07
  uint16_t count = 0; // To work fast enough on slower AVR boards
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    2f00:	66 23       	and	r22, r22
    2f02:	11 f0       	breq	.+4      	; 0x2f08 <_ZN3DHT11expectPulseEb+0x1a>
    2f04:	91 2f       	mov	r25, r17
    2f06:	01 c0       	rjmp	.+2      	; 0x2f0a <_ZN3DHT11expectPulseEb+0x1c>
    2f08:	90 e0       	ldi	r25, 0x00	; 0
  while ((*portInputRegister(_port) & _bit) == portState) {
    2f0a:	28 85       	ldd	r18, Y+8	; 0x08
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	22 0f       	add	r18, r18
    2f10:	33 1f       	adc	r19, r19
    2f12:	2b 52       	subi	r18, 0x2B	; 43
    2f14:	34 4f       	sbci	r19, 0xF4	; 244
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    2f16:	a0 e0       	ldi	r26, 0x00	; 0
    2f18:	b0 e0       	ldi	r27, 0x00	; 0
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
  while ((*portInputRegister(_port) & _bit) == portState) {
    2f1a:	f9 01       	movw	r30, r18
    2f1c:	45 91       	lpm	r20, Z+
    2f1e:	54 91       	lpm	r21, Z
    2f20:	fa 01       	movw	r30, r20
    2f22:	80 81       	ld	r24, Z
    2f24:	81 23       	and	r24, r17
    2f26:	ad 01       	movw	r20, r26
    2f28:	60 e0       	ldi	r22, 0x00	; 0
    2f2a:	70 e0       	ldi	r23, 0x00	; 0
    2f2c:	98 13       	cpse	r25, r24
    2f2e:	0f c0       	rjmp	.+30     	; 0x2f4e <_ZN3DHT11expectPulseEb+0x60>
    if (count++ >= _maxcycles) {
    2f30:	11 96       	adiw	r26, 0x01	; 1
    2f32:	cd 84       	ldd	r12, Y+13	; 0x0d
    2f34:	de 84       	ldd	r13, Y+14	; 0x0e
    2f36:	ef 84       	ldd	r14, Y+15	; 0x0f
    2f38:	f8 88       	ldd	r15, Y+16	; 0x10
    2f3a:	4c 15       	cp	r20, r12
    2f3c:	5d 05       	cpc	r21, r13
    2f3e:	6e 05       	cpc	r22, r14
    2f40:	7f 05       	cpc	r23, r15
    2f42:	58 f3       	brcs	.-42     	; 0x2f1a <_ZN3DHT11expectPulseEb+0x2c>
      return TIMEOUT; // Exceeded timeout, fail.
    2f44:	3f ef       	ldi	r19, 0xFF	; 255
    2f46:	2f ef       	ldi	r18, 0xFF	; 255
    2f48:	8f ef       	ldi	r24, 0xFF	; 255
    2f4a:	9f ef       	ldi	r25, 0xFF	; 255
    2f4c:	03 c0       	rjmp	.+6      	; 0x2f54 <_ZN3DHT11expectPulseEb+0x66>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
    2f4e:	3a 2f       	mov	r19, r26
    2f50:	25 2f       	mov	r18, r21
    2f52:	cb 01       	movw	r24, r22
}
    2f54:	63 2f       	mov	r22, r19
    2f56:	72 2f       	mov	r23, r18
    2f58:	df 91       	pop	r29
    2f5a:	cf 91       	pop	r28
    2f5c:	1f 91       	pop	r17
    2f5e:	ff 90       	pop	r15
    2f60:	ef 90       	pop	r14
    2f62:	df 90       	pop	r13
    2f64:	cf 90       	pop	r12
    2f66:	08 95       	ret

00002f68 <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    2f68:	8f 92       	push	r8
    2f6a:	9f 92       	push	r9
    2f6c:	af 92       	push	r10
    2f6e:	bf 92       	push	r11
    2f70:	cf 92       	push	r12
    2f72:	df 92       	push	r13
    2f74:	ef 92       	push	r14
    2f76:	ff 92       	push	r15
    2f78:	0f 93       	push	r16
    2f7a:	1f 93       	push	r17
    2f7c:	cf 93       	push	r28
    2f7e:	df 93       	push	r29
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
    2f84:	c0 54       	subi	r28, 0x40	; 64
    2f86:	d1 40       	sbci	r29, 0x01	; 1
    2f88:	0f b6       	in	r0, 0x3f	; 63
    2f8a:	f8 94       	cli
    2f8c:	de bf       	out	0x3e, r29	; 62
    2f8e:	0f be       	out	0x3f, r0	; 63
    2f90:	cd bf       	out	0x3d, r28	; 61
    2f92:	8c 01       	movw	r16, r24
    2f94:	f6 2e       	mov	r15, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    2f96:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <millis>
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    2f9a:	f1 10       	cpse	r15, r1
    2f9c:	16 c0       	rjmp	.+44     	; 0x2fca <_ZN3DHT4readEb+0x62>
    2f9e:	f8 01       	movw	r30, r16
    2fa0:	c1 84       	ldd	r12, Z+9	; 0x09
    2fa2:	d2 84       	ldd	r13, Z+10	; 0x0a
    2fa4:	e3 84       	ldd	r14, Z+11	; 0x0b
    2fa6:	f4 84       	ldd	r15, Z+12	; 0x0c
    2fa8:	9b 01       	movw	r18, r22
    2faa:	ac 01       	movw	r20, r24
    2fac:	2c 19       	sub	r18, r12
    2fae:	3d 09       	sbc	r19, r13
    2fb0:	4e 09       	sbc	r20, r14
    2fb2:	5f 09       	sbc	r21, r15
    2fb4:	69 01       	movw	r12, r18
    2fb6:	7a 01       	movw	r14, r20
    2fb8:	30 ed       	ldi	r19, 0xD0	; 208
    2fba:	c3 16       	cp	r12, r19
    2fbc:	37 e0       	ldi	r19, 0x07	; 7
    2fbe:	d3 06       	cpc	r13, r19
    2fc0:	e1 04       	cpc	r14, r1
    2fc2:	f1 04       	cpc	r15, r1
    2fc4:	10 f4       	brcc	.+4      	; 0x2fca <_ZN3DHT4readEb+0x62>
    return _lastresult; // return last correct measurement
    2fc6:	81 89       	ldd	r24, Z+17	; 0x11
    2fc8:	b6 c0       	rjmp	.+364    	; 0x3136 <_ZN3DHT4readEb+0x1ce>
  }
  _lastreadtime = currenttime;
    2fca:	f8 01       	movw	r30, r16
    2fcc:	61 87       	std	Z+9, r22	; 0x09
    2fce:	72 87       	std	Z+10, r23	; 0x0a
    2fd0:	83 87       	std	Z+11, r24	; 0x0b
    2fd2:	94 87       	std	Z+12, r25	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    2fd4:	14 82       	std	Z+4, r1	; 0x04
    2fd6:	13 82       	std	Z+3, r1	; 0x03
    2fd8:	12 82       	std	Z+2, r1	; 0x02
    2fda:	11 82       	std	Z+1, r1	; 0x01
    2fdc:	10 82       	st	Z, r1
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    2fde:	62 e0       	ldi	r22, 0x02	; 2
    2fe0:	85 81       	ldd	r24, Z+5	; 0x05
    2fe2:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <pinMode>
  delay(1);
    2fe6:	61 e0       	ldi	r22, 0x01	; 1
    2fe8:	70 e0       	ldi	r23, 0x00	; 0
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	0e 94 7f 25 	call	0x4afe	; 0x4afe <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    2ff2:	61 e0       	ldi	r22, 0x01	; 1
    2ff4:	f8 01       	movw	r30, r16
    2ff6:	85 81       	ldd	r24, Z+5	; 0x05
    2ff8:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <pinMode>
  digitalWrite(_pin, LOW);
    2ffc:	60 e0       	ldi	r22, 0x00	; 0
    2ffe:	f8 01       	movw	r30, r16
    3000:	85 81       	ldd	r24, Z+5	; 0x05
    3002:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <digitalWrite>
  switch (_type) {
    3006:	f8 01       	movw	r30, r16
    3008:	86 81       	ldd	r24, Z+6	; 0x06
    300a:	85 51       	subi	r24, 0x15	; 21
    300c:	82 30       	cpi	r24, 0x02	; 2
    300e:	28 f4       	brcc	.+10     	; 0x301a <_ZN3DHT4readEb+0xb2>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    3010:	8c e4       	ldi	r24, 0x4C	; 76
    3012:	94 e0       	ldi	r25, 0x04	; 4
    3014:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <delayMicroseconds>
    break;
    3018:	06 c0       	rjmp	.+12     	; 0x3026 <_ZN3DHT4readEb+0xbe>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    301a:	64 e1       	ldi	r22, 0x14	; 20
    301c:	70 e0       	ldi	r23, 0x00	; 0
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	0e 94 7f 25 	call	0x4afe	; 0x4afe <delay>
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    3026:	62 e0       	ldi	r22, 0x02	; 2
    3028:	f8 01       	movw	r30, r16
    302a:	85 81       	ldd	r24, Z+5	; 0x05
    302c:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    3030:	f8 01       	movw	r30, r16
    3032:	82 89       	ldd	r24, Z+18	; 0x12
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <delayMicroseconds>
 */
class InterruptLock {
public:
  InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    noInterrupts();
    303a:	f8 94       	cli
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    303c:	60 e0       	ldi	r22, 0x00	; 0
    303e:	c8 01       	movw	r24, r16
    3040:	56 df       	rcall	.-340    	; 0x2eee <_ZN3DHT11expectPulseEb>
    3042:	6f 3f       	cpi	r22, 0xFF	; 255
    3044:	7f 4f       	sbci	r23, 0xFF	; 255
    3046:	8f 4f       	sbci	r24, 0xFF	; 255
    3048:	9f 4f       	sbci	r25, 0xFF	; 255
    304a:	21 f4       	brne	.+8      	; 0x3054 <_ZN3DHT4readEb+0xec>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    304c:	f8 01       	movw	r30, r16
    304e:	11 8a       	std	Z+17, r1	; 0x11
#endif
  }
  ~InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    interrupts();
    3050:	78 94       	sei
    3052:	42 c0       	rjmp	.+132    	; 0x30d8 <_ZN3DHT4readEb+0x170>
      return _lastresult;
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    3054:	61 e0       	ldi	r22, 0x01	; 1
    3056:	c8 01       	movw	r24, r16
    3058:	4a df       	rcall	.-364    	; 0x2eee <_ZN3DHT11expectPulseEb>
    305a:	6f 3f       	cpi	r22, 0xFF	; 255
    305c:	7f 4f       	sbci	r23, 0xFF	; 255
    305e:	8f 4f       	sbci	r24, 0xFF	; 255
    3060:	9f 4f       	sbci	r25, 0xFF	; 255
    3062:	a1 f3       	breq	.-24     	; 0x304c <_ZN3DHT4readEb+0xe4>
    3064:	9e 01       	movw	r18, r28
    3066:	2f 5f       	subi	r18, 0xFF	; 255
    3068:	3f 4f       	sbci	r19, 0xFF	; 255
    306a:	79 01       	movw	r14, r18
    306c:	5e 01       	movw	r10, r28
    306e:	3f eb       	ldi	r19, 0xBF	; 191
    3070:	a3 1a       	sub	r10, r19
    3072:	3e ef       	ldi	r19, 0xFE	; 254
    3074:	b3 0a       	sbc	r11, r19
    3076:	67 01       	movw	r12, r14
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
      cycles[i] = expectPulse(LOW);
    3078:	60 e0       	ldi	r22, 0x00	; 0
    307a:	c8 01       	movw	r24, r16
    307c:	38 df       	rcall	.-400    	; 0x2eee <_ZN3DHT11expectPulseEb>
    307e:	f6 01       	movw	r30, r12
    3080:	60 83       	st	Z, r22
    3082:	71 83       	std	Z+1, r23	; 0x01
    3084:	82 83       	std	Z+2, r24	; 0x02
    3086:	93 83       	std	Z+3, r25	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
    3088:	61 e0       	ldi	r22, 0x01	; 1
    308a:	c8 01       	movw	r24, r16
    308c:	30 df       	rcall	.-416    	; 0x2eee <_ZN3DHT11expectPulseEb>
    308e:	f6 01       	movw	r30, r12
    3090:	64 83       	std	Z+4, r22	; 0x04
    3092:	75 83       	std	Z+5, r23	; 0x05
    3094:	86 83       	std	Z+6, r24	; 0x06
    3096:	97 83       	std	Z+7, r25	; 0x07
    3098:	f8 e0       	ldi	r31, 0x08	; 8
    309a:	cf 0e       	add	r12, r31
    309c:	d1 1c       	adc	r13, r1
    309e:	ca 14       	cp	r12, r10
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    30a0:	db 04       	cpc	r13, r11
    30a2:	51 f7       	brne	.-44     	; 0x3078 <_ZN3DHT4readEb+0x110>
    30a4:	78 94       	sei
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	f7 01       	movw	r30, r14
    uint32_t lowCycles = cycles[2 * i];
    30ac:	80 80       	ld	r8, Z
    30ae:	91 80       	ldd	r9, Z+1	; 0x01
    30b0:	a2 80       	ldd	r10, Z+2	; 0x02
    30b2:	b3 80       	ldd	r11, Z+3	; 0x03
    30b4:	44 81       	ldd	r20, Z+4	; 0x04
    uint32_t highCycles = cycles[2 * i + 1];
    30b6:	55 81       	ldd	r21, Z+5	; 0x05
    30b8:	66 81       	ldd	r22, Z+6	; 0x06
    30ba:	77 81       	ldd	r23, Z+7	; 0x07
    30bc:	ff ef       	ldi	r31, 0xFF	; 255
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    30be:	8f 16       	cp	r8, r31
    30c0:	9f 06       	cpc	r9, r31
    30c2:	af 06       	cpc	r10, r31
    30c4:	bf 06       	cpc	r11, r31
    30c6:	31 f0       	breq	.+12     	; 0x30d4 <_ZN3DHT4readEb+0x16c>
    30c8:	4f 3f       	cpi	r20, 0xFF	; 255
    30ca:	8f ef       	ldi	r24, 0xFF	; 255
    30cc:	58 07       	cpc	r21, r24
    30ce:	68 07       	cpc	r22, r24
    30d0:	78 07       	cpc	r23, r24
    30d2:	21 f4       	brne	.+8      	; 0x30dc <_ZN3DHT4readEb+0x174>
    30d4:	f8 01       	movw	r30, r16
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    30d6:	11 8a       	std	Z+17, r1	; 0x11
    30d8:	80 e0       	ldi	r24, 0x00	; 0
      return _lastresult;
    30da:	2d c0       	rjmp	.+90     	; 0x3136 <_ZN3DHT4readEb+0x1ce>
    30dc:	f9 01       	movw	r30, r18
    }
    data[i / 8] <<= 1;
    30de:	83 e0       	ldi	r24, 0x03	; 3
    30e0:	f5 95       	asr	r31
    30e2:	e7 95       	ror	r30
    30e4:	8a 95       	dec	r24
    30e6:	e1 f7       	brne	.-8      	; 0x30e0 <_ZN3DHT4readEb+0x178>
    30e8:	e0 0f       	add	r30, r16
    30ea:	f1 1f       	adc	r31, r17
    30ec:	80 81       	ld	r24, Z
    30ee:	88 0f       	add	r24, r24
    30f0:	84 16       	cp	r8, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    30f2:	95 06       	cpc	r9, r21
    30f4:	a6 06       	cpc	r10, r22
    30f6:	b7 06       	cpc	r11, r23
    30f8:	08 f4       	brcc	.+2      	; 0x30fc <_ZN3DHT4readEb+0x194>
    30fa:	81 60       	ori	r24, 0x01	; 1
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    30fc:	80 83       	st	Z, r24
    30fe:	2f 5f       	subi	r18, 0xFF	; 255
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    3100:	3f 4f       	sbci	r19, 0xFF	; 255
    3102:	f8 e0       	ldi	r31, 0x08	; 8
    3104:	ef 0e       	add	r14, r31
    3106:	f1 1c       	adc	r15, r1
    3108:	28 32       	cpi	r18, 0x28	; 40
    310a:	31 05       	cpc	r19, r1
    310c:	71 f6       	brne	.-100    	; 0x30aa <_ZN3DHT4readEb+0x142>
    310e:	f8 01       	movw	r30, r16
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    3110:	24 81       	ldd	r18, Z+4	; 0x04
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 81       	ld	r20, Z
    3116:	81 81       	ldd	r24, Z+1	; 0x01
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	84 0f       	add	r24, r20
    311c:	91 1d       	adc	r25, r1
    311e:	42 81       	ldd	r20, Z+2	; 0x02
    3120:	84 0f       	add	r24, r20
    3122:	91 1d       	adc	r25, r1
    3124:	43 81       	ldd	r20, Z+3	; 0x03
    3126:	84 0f       	add	r24, r20
    3128:	91 1d       	adc	r25, r1
    312a:	99 27       	eor	r25, r25
    312c:	28 17       	cp	r18, r24
    312e:	39 07       	cpc	r19, r25
    3130:	89 f6       	brne	.-94     	; 0x30d4 <_ZN3DHT4readEb+0x16c>
    3132:	81 e0       	ldi	r24, 0x01	; 1
    _lastresult = true;
    3134:	81 8b       	std	Z+17, r24	; 0x11
    3136:	c0 5c       	subi	r28, 0xC0	; 192
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    return _lastresult;
  }
}
    3138:	de 4f       	sbci	r29, 0xFE	; 254
    313a:	0f b6       	in	r0, 0x3f	; 63
    313c:	f8 94       	cli
    313e:	de bf       	out	0x3e, r29	; 62
    3140:	0f be       	out	0x3f, r0	; 63
    3142:	cd bf       	out	0x3d, r28	; 61
    3144:	df 91       	pop	r29
    3146:	cf 91       	pop	r28
    3148:	1f 91       	pop	r17
    314a:	0f 91       	pop	r16
    314c:	ff 90       	pop	r15
    314e:	ef 90       	pop	r14
    3150:	df 90       	pop	r13
    3152:	cf 90       	pop	r12
    3154:	bf 90       	pop	r11
    3156:	af 90       	pop	r10
    3158:	9f 90       	pop	r9
    315a:	8f 90       	pop	r8
    315c:	08 95       	ret

0000315e <_ZN3DHT15readTemperatureEbb>:
    315e:	cf 92       	push	r12
 *					- false = Celcius
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
    3160:	df 92       	push	r13
    3162:	ef 92       	push	r14
    3164:	ff 92       	push	r15
    3166:	0f 93       	push	r16
    3168:	1f 93       	push	r17
    316a:	cf 93       	push	r28
    316c:	df 93       	push	r29
    316e:	8c 01       	movw	r16, r24
    3170:	c6 2f       	mov	r28, r22
  float f = NAN;

  if (read(force)) {
    3172:	64 2f       	mov	r22, r20
    3174:	f9 de       	rcall	.-526    	; 0x2f68 <_ZN3DHT4readEb>
    3176:	88 23       	and	r24, r24
    3178:	09 f4       	brne	.+2      	; 0x317c <_ZN3DHT15readTemperatureEbb+0x1e>
    317a:	6b c0       	rjmp	.+214    	; 0x3252 <_ZN3DHT15readTemperatureEbb+0xf4>
    switch (_type) {
    317c:	f8 01       	movw	r30, r16
    317e:	86 81       	ldd	r24, Z+6	; 0x06
    3180:	8c 30       	cpi	r24, 0x0C	; 12
    3182:	09 f4       	brne	.+2      	; 0x3186 <_ZN3DHT15readTemperatureEbb+0x28>
    3184:	3e c0       	rjmp	.+124    	; 0x3202 <_ZN3DHT15readTemperatureEbb+0xa4>
    3186:	18 f4       	brcc	.+6      	; 0x318e <_ZN3DHT15readTemperatureEbb+0x30>
    3188:	8b 30       	cpi	r24, 0x0B	; 11
    318a:	b9 f0       	breq	.+46     	; 0x31ba <_ZN3DHT15readTemperatureEbb+0x5c>
    318c:	62 c0       	rjmp	.+196    	; 0x3252 <_ZN3DHT15readTemperatureEbb+0xf4>
    318e:	85 51       	subi	r24, 0x15	; 21
    3190:	82 30       	cpi	r24, 0x02	; 2
    3192:	08 f0       	brcs	.+2      	; 0x3196 <_ZN3DHT15readTemperatureEbb+0x38>
    3194:	5e c0       	rjmp	.+188    	; 0x3252 <_ZN3DHT15readTemperatureEbb+0xf4>
        f = convertCtoF(f);
      }
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
    3196:	f8 01       	movw	r30, r16
    3198:	d2 81       	ldd	r29, Z+2	; 0x02
      f *= 0.1;
    319a:	6d 2f       	mov	r22, r29
    319c:	6f 77       	andi	r22, 0x7F	; 127
    319e:	70 e0       	ldi	r23, 0x00	; 0
    31a0:	76 2f       	mov	r23, r22
    31a2:	66 27       	eor	r22, r22
    31a4:	83 81       	ldd	r24, Z+3	; 0x03
    31a6:	68 2b       	or	r22, r24
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	95 d6       	rcall	.+3370   	; 0x3ed8 <__floatunsisf>
    31ae:	2d ec       	ldi	r18, 0xCD	; 205
    31b0:	3c ec       	ldi	r19, 0xCC	; 204
    31b2:	4c ec       	ldi	r20, 0xCC	; 204
    31b4:	5d e3       	ldi	r21, 0x3D	; 61
    31b6:	46 d7       	rcall	.+3724   	; 0x4044 <__mulsf3>
    31b8:	3d c0       	rjmp	.+122    	; 0x3234 <_ZN3DHT15readTemperatureEbb+0xd6>
  float f = NAN;

  if (read(force)) {
    switch (_type) {
    case DHT11:
      f = data[2];
    31ba:	f8 01       	movw	r30, r16
    31bc:	62 81       	ldd	r22, Z+2	; 0x02
    31be:	70 e0       	ldi	r23, 0x00	; 0
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	89 d6       	rcall	.+3346   	; 0x3ed8 <__floatunsisf>
    31c6:	6b 01       	movw	r12, r22
    31c8:	7c 01       	movw	r14, r24
      if (data[3] & 0x80) {
    31ca:	f8 01       	movw	r30, r16
    31cc:	d3 81       	ldd	r29, Z+3	; 0x03
    31ce:	d7 ff       	sbrs	r29, 7
    31d0:	09 c0       	rjmp	.+18     	; 0x31e4 <_ZN3DHT15readTemperatureEbb+0x86>
        f = -1 - f;
    31d2:	9b 01       	movw	r18, r22
    31d4:	ac 01       	movw	r20, r24
    31d6:	60 e0       	ldi	r22, 0x00	; 0
    31d8:	70 e0       	ldi	r23, 0x00	; 0
    31da:	80 e8       	ldi	r24, 0x80	; 128
    31dc:	9f eb       	ldi	r25, 0xBF	; 191
    31de:	e6 d5       	rcall	.+3020   	; 0x3dac <__subsf3>
    31e0:	6b 01       	movw	r12, r22
    31e2:	7c 01       	movw	r14, r24
      }
      f += (data[3] & 0x0f) * 0.1;
    31e4:	6d 2f       	mov	r22, r29
    31e6:	6f 70       	andi	r22, 0x0F	; 15
    31e8:	70 e0       	ldi	r23, 0x00	; 0
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	76 d6       	rcall	.+3308   	; 0x3edc <__floatsisf>
    31f0:	2d ec       	ldi	r18, 0xCD	; 205
    31f2:	3c ec       	ldi	r19, 0xCC	; 204
    31f4:	4c ec       	ldi	r20, 0xCC	; 204
    31f6:	5d e3       	ldi	r21, 0x3D	; 61
    31f8:	25 d7       	rcall	.+3658   	; 0x4044 <__mulsf3>
    31fa:	a7 01       	movw	r20, r14
    31fc:	96 01       	movw	r18, r12
    31fe:	d7 d5       	rcall	.+2990   	; 0x3dae <__addsf3>
    3200:	1b c0       	rjmp	.+54     	; 0x3238 <_ZN3DHT15readTemperatureEbb+0xda>
      if (S) {
        f = convertCtoF(f);
      }
      break;
    case DHT12:
      f = data[2];
    3202:	f8 01       	movw	r30, r16
    3204:	d2 81       	ldd	r29, Z+2	; 0x02
      f += (data[3] & 0x0f) * 0.1;
    3206:	63 81       	ldd	r22, Z+3	; 0x03
    3208:	6f 70       	andi	r22, 0x0F	; 15
    320a:	70 e0       	ldi	r23, 0x00	; 0
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	65 d6       	rcall	.+3274   	; 0x3edc <__floatsisf>
    3212:	2d ec       	ldi	r18, 0xCD	; 205
    3214:	3c ec       	ldi	r19, 0xCC	; 204
    3216:	4c ec       	ldi	r20, 0xCC	; 204
    3218:	5d e3       	ldi	r21, 0x3D	; 61
    321a:	14 d7       	rcall	.+3624   	; 0x4044 <__mulsf3>
    321c:	6b 01       	movw	r12, r22
    321e:	7c 01       	movw	r14, r24
    3220:	6d 2f       	mov	r22, r29
    3222:	70 e0       	ldi	r23, 0x00	; 0
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	57 d6       	rcall	.+3246   	; 0x3ed8 <__floatunsisf>
    322a:	9b 01       	movw	r18, r22
    322c:	ac 01       	movw	r20, r24
    322e:	c7 01       	movw	r24, r14
    3230:	b6 01       	movw	r22, r12
    3232:	bd d5       	rcall	.+2938   	; 0x3dae <__addsf3>
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
      f *= 0.1;
      if (data[2] & 0x80) {
    3234:	d7 fd       	sbrc	r29, 7
        f *= -1;
      }
      if (S) {
    3236:	90 58       	subi	r25, 0x80	; 128
    3238:	cc 23       	and	r28, r28
 *  @brief  Converts Celcius to Fahrenheit
 *  @param  c
 *					value in Celcius
 *	@return float value in Fahrenheit
 */
float DHT::convertCtoF(float c) { return c * 1.8 + 32; }
    323a:	79 f0       	breq	.+30     	; 0x325a <_ZN3DHT15readTemperatureEbb+0xfc>
    323c:	26 e6       	ldi	r18, 0x66	; 102
    323e:	36 e6       	ldi	r19, 0x66	; 102
    3240:	46 ee       	ldi	r20, 0xE6	; 230
    3242:	5f e3       	ldi	r21, 0x3F	; 63
    3244:	ff d6       	rcall	.+3582   	; 0x4044 <__mulsf3>
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	40 e0       	ldi	r20, 0x00	; 0
    324c:	52 e4       	ldi	r21, 0x42	; 66
    324e:	af d5       	rcall	.+2910   	; 0x3dae <__addsf3>
    3250:	04 c0       	rjmp	.+8      	; 0x325a <_ZN3DHT15readTemperatureEbb+0xfc>
    3252:	60 e0       	ldi	r22, 0x00	; 0
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;
    3254:	70 e0       	ldi	r23, 0x00	; 0
    3256:	80 ec       	ldi	r24, 0xC0	; 192
    3258:	9f e7       	ldi	r25, 0x7F	; 127
    325a:	df 91       	pop	r29
      }
      break;
    }
  }
  return f;
}
    325c:	cf 91       	pop	r28
    325e:	1f 91       	pop	r17
    3260:	0f 91       	pop	r16
    3262:	ff 90       	pop	r15
    3264:	ef 90       	pop	r14
    3266:	df 90       	pop	r13
    3268:	cf 90       	pop	r12
    326a:	08 95       	ret

0000326c <_ZN3DHT12readHumidityEb>:
    326c:	cf 92       	push	r12
 *  @brief  Read Humidity
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
    326e:	df 92       	push	r13
    3270:	ef 92       	push	r14
    3272:	ff 92       	push	r15
    3274:	cf 93       	push	r28
    3276:	df 93       	push	r29
    3278:	ec 01       	movw	r28, r24
  float f = NAN;
  if (read(force)) {
    327a:	76 de       	rcall	.-788    	; 0x2f68 <_ZN3DHT4readEb>
    327c:	88 23       	and	r24, r24
    327e:	69 f1       	breq	.+90     	; 0x32da <_ZN3DHT12readHumidityEb+0x6e>
    switch (_type) {
    3280:	8e 81       	ldd	r24, Y+6	; 0x06
    3282:	8b 30       	cpi	r24, 0x0B	; 11
    3284:	50 f1       	brcs	.+84     	; 0x32da <_ZN3DHT12readHumidityEb+0x6e>
    3286:	8d 30       	cpi	r24, 0x0D	; 13
    3288:	88 f0       	brcs	.+34     	; 0x32ac <_ZN3DHT12readHumidityEb+0x40>
    328a:	85 51       	subi	r24, 0x15	; 21
    328c:	82 30       	cpi	r24, 0x02	; 2
    328e:	28 f5       	brcc	.+74     	; 0x32da <_ZN3DHT12readHumidityEb+0x6e>
    case DHT12:
      f = data[0] + data[1] * 0.1;
      break;
    case DHT22:
    case DHT21:
      f = ((word)data[0]) << 8 | data[1];
    3290:	68 81       	ld	r22, Y
    3292:	79 81       	ldd	r23, Y+1	; 0x01
    3294:	76 27       	eor	r23, r22
    3296:	67 27       	eor	r22, r23
    3298:	76 27       	eor	r23, r22
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	1c d6       	rcall	.+3128   	; 0x3ed8 <__floatunsisf>
      f *= 0.1;
    32a0:	2d ec       	ldi	r18, 0xCD	; 205
    32a2:	3c ec       	ldi	r19, 0xCC	; 204
    32a4:	4c ec       	ldi	r20, 0xCC	; 204
    32a6:	5d e3       	ldi	r21, 0x3D	; 61
    32a8:	cd d6       	rcall	.+3482   	; 0x4044 <__mulsf3>
      break;
    32aa:	1b c0       	rjmp	.+54     	; 0x32e2 <_ZN3DHT12readHumidityEb+0x76>
  float f = NAN;
  if (read(force)) {
    switch (_type) {
    case DHT11:
    case DHT12:
      f = data[0] + data[1] * 0.1;
    32ac:	69 81       	ldd	r22, Y+1	; 0x01
    32ae:	70 e0       	ldi	r23, 0x00	; 0
    32b0:	80 e0       	ldi	r24, 0x00	; 0
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	13 d6       	rcall	.+3110   	; 0x3edc <__floatsisf>
    32b6:	2d ec       	ldi	r18, 0xCD	; 205
    32b8:	3c ec       	ldi	r19, 0xCC	; 204
    32ba:	4c ec       	ldi	r20, 0xCC	; 204
    32bc:	5d e3       	ldi	r21, 0x3D	; 61
    32be:	c2 d6       	rcall	.+3460   	; 0x4044 <__mulsf3>
    32c0:	6b 01       	movw	r12, r22
    32c2:	7c 01       	movw	r14, r24
    32c4:	68 81       	ld	r22, Y
    32c6:	70 e0       	ldi	r23, 0x00	; 0
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	07 d6       	rcall	.+3086   	; 0x3edc <__floatsisf>
    32ce:	9b 01       	movw	r18, r22
    32d0:	ac 01       	movw	r20, r24
    32d2:	c7 01       	movw	r24, r14
    32d4:	b6 01       	movw	r22, r12
    32d6:	6b d5       	rcall	.+2774   	; 0x3dae <__addsf3>
    32d8:	04 c0       	rjmp	.+8      	; 0x32e2 <_ZN3DHT12readHumidityEb+0x76>
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
  float f = NAN;
    32da:	60 e0       	ldi	r22, 0x00	; 0
    32dc:	70 e0       	ldi	r23, 0x00	; 0
    32de:	80 ec       	ldi	r24, 0xC0	; 192
    32e0:	9f e7       	ldi	r25, 0x7F	; 127
      f *= 0.1;
      break;
    }
  }
  return f;
}
    32e2:	df 91       	pop	r29
    32e4:	cf 91       	pop	r28
    32e6:	ff 90       	pop	r15
    32e8:	ef 90       	pop	r14
    32ea:	df 90       	pop	r13
    32ec:	cf 90       	pop	r12
    32ee:	08 95       	ret

000032f0 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    32f0:	cf 93       	push	r28
  uint8_t sreg = SREG;
    32f2:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    32f4:	f8 94       	cli
  if (!initialized) {
    32f6:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <_ZN8SPIClass11initializedE>
    32fa:	81 11       	cpse	r24, r1
    32fc:	27 c0       	rjmp	.+78     	; 0x334c <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    32fe:	e4 ec       	ldi	r30, 0xC4	; 196
    3300:	fb e0       	ldi	r31, 0x0B	; 11
    3302:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    3304:	ee e7       	ldi	r30, 0x7E	; 126
    3306:	fb e0       	ldi	r31, 0x0B	; 11
    3308:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    330a:	e8 2f       	mov	r30, r24
    330c:	f0 e0       	ldi	r31, 0x00	; 0
    330e:	ee 0f       	add	r30, r30
    3310:	ff 1f       	adc	r31, r31
    3312:	e7 5f       	subi	r30, 0xF7	; 247
    3314:	f3 4f       	sbci	r31, 0xF3	; 243
    3316:	a5 91       	lpm	r26, Z+
    3318:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    331a:	ec 91       	ld	r30, X
    331c:	e9 23       	and	r30, r25
    331e:	21 f4       	brne	.+8      	; 0x3328 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    3320:	61 e0       	ldi	r22, 0x01	; 1
    3322:	85 e3       	ldi	r24, 0x35	; 53
    3324:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    3328:	61 e0       	ldi	r22, 0x01	; 1
    332a:	85 e3       	ldi	r24, 0x35	; 53
    332c:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    3330:	8c b5       	in	r24, 0x2c	; 44
    3332:	80 61       	ori	r24, 0x10	; 16
    3334:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    3336:	8c b5       	in	r24, 0x2c	; 44
    3338:	80 64       	ori	r24, 0x40	; 64
    333a:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    333c:	61 e0       	ldi	r22, 0x01	; 1
    333e:	84 e3       	ldi	r24, 0x34	; 52
    3340:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <pinMode>
    pinMode(MOSI, OUTPUT);
    3344:	61 e0       	ldi	r22, 0x01	; 1
    3346:	83 e3       	ldi	r24, 0x33	; 51
    3348:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <pinMode>
  }
  initialized++; // reference count
    334c:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <_ZN8SPIClass11initializedE>
    3350:	8f 5f       	subi	r24, 0xFF	; 255
    3352:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <_ZN8SPIClass11initializedE>
  SREG = sreg;
    3356:	cf bf       	out	0x3f, r28	; 63
}
    3358:	cf 91       	pop	r28
    335a:	08 95       	ret

0000335c <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    335c:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <twi_state>
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <twi_sendStop>
    3366:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <twi_inRepStart>
    336a:	61 e0       	ldi	r22, 0x01	; 1
    336c:	84 e1       	ldi	r24, 0x14	; 20
    336e:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <digitalWrite>
    3372:	61 e0       	ldi	r22, 0x01	; 1
    3374:	85 e1       	ldi	r24, 0x15	; 21
    3376:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <digitalWrite>
    337a:	e9 eb       	ldi	r30, 0xB9	; 185
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	80 81       	ld	r24, Z
    3380:	8e 7f       	andi	r24, 0xFE	; 254
    3382:	80 83       	st	Z, r24
    3384:	80 81       	ld	r24, Z
    3386:	8d 7f       	andi	r24, 0xFD	; 253
    3388:	80 83       	st	Z, r24
    338a:	88 e4       	ldi	r24, 0x48	; 72
    338c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    3390:	85 e4       	ldi	r24, 0x45	; 69
    3392:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3396:	08 95       	ret

00003398 <twi_disable>:
    3398:	ec eb       	ldi	r30, 0xBC	; 188
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	80 81       	ld	r24, Z
    339e:	8a 7b       	andi	r24, 0xBA	; 186
    33a0:	80 83       	st	Z, r24
    33a2:	60 e0       	ldi	r22, 0x00	; 0
    33a4:	84 e1       	ldi	r24, 0x14	; 20
    33a6:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <digitalWrite>
    33aa:	60 e0       	ldi	r22, 0x00	; 0
    33ac:	85 e1       	ldi	r24, 0x15	; 21
    33ae:	0c 94 b6 26 	jmp	0x4d6c	; 0x4d6c <digitalWrite>

000033b2 <twi_setFrequency>:
    33b2:	9b 01       	movw	r18, r22
    33b4:	ac 01       	movw	r20, r24
    33b6:	60 e0       	ldi	r22, 0x00	; 0
    33b8:	74 e2       	ldi	r23, 0x24	; 36
    33ba:	84 ef       	ldi	r24, 0xF4	; 244
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	0e 94 07 28 	call	0x500e	; 0x500e <__udivmodsi4>
    33c2:	da 01       	movw	r26, r20
    33c4:	c9 01       	movw	r24, r18
    33c6:	40 97       	sbiw	r24, 0x10	; 16
    33c8:	a1 09       	sbc	r26, r1
    33ca:	b1 09       	sbc	r27, r1
    33cc:	b6 95       	lsr	r27
    33ce:	a7 95       	ror	r26
    33d0:	97 95       	ror	r25
    33d2:	87 95       	ror	r24
    33d4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    33d8:	08 95       	ret

000033da <twi_transmit>:
    33da:	40 91 5e 03 	lds	r20, 0x035E	; 0x80035e <twi_txBufferLength>
    33de:	26 2f       	mov	r18, r22
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	24 0f       	add	r18, r20
    33e4:	31 1d       	adc	r19, r1
    33e6:	21 32       	cpi	r18, 0x21	; 33
    33e8:	31 05       	cpc	r19, r1
    33ea:	dc f4       	brge	.+54     	; 0x3422 <twi_transmit+0x48>
    33ec:	20 91 af 03 	lds	r18, 0x03AF	; 0x8003af <twi_state>
    33f0:	24 30       	cpi	r18, 0x04	; 4
    33f2:	c9 f4       	brne	.+50     	; 0x3426 <twi_transmit+0x4c>
    33f4:	fc 01       	movw	r30, r24
    33f6:	80 e0       	ldi	r24, 0x00	; 0
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	86 17       	cp	r24, r22
    33fc:	58 f4       	brcc	.+22     	; 0x3414 <twi_transmit+0x3a>
    33fe:	30 91 5e 03 	lds	r19, 0x035E	; 0x80035e <twi_txBufferLength>
    3402:	21 91       	ld	r18, Z+
    3404:	dc 01       	movw	r26, r24
    3406:	a0 5a       	subi	r26, 0xA0	; 160
    3408:	bc 4f       	sbci	r27, 0xFC	; 252
    340a:	a3 0f       	add	r26, r19
    340c:	b1 1d       	adc	r27, r1
    340e:	2c 93       	st	X, r18
    3410:	01 96       	adiw	r24, 0x01	; 1
    3412:	f3 cf       	rjmp	.-26     	; 0x33fa <twi_transmit+0x20>
    3414:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <twi_txBufferLength>
    3418:	68 0f       	add	r22, r24
    341a:	60 93 5e 03 	sts	0x035E, r22	; 0x80035e <twi_txBufferLength>
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	08 95       	ret
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	08 95       	ret
    3426:	82 e0       	ldi	r24, 0x02	; 2
    3428:	08 95       	ret

0000342a <twi_attachSlaveRxEvent>:
    342a:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <twi_onSlaveReceive+0x1>
    342e:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <twi_onSlaveReceive>
    3432:	08 95       	ret

00003434 <twi_attachSlaveTxEvent>:
    3434:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <twi_onSlaveTransmit+0x1>
    3438:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <twi_onSlaveTransmit>
    343c:	08 95       	ret

0000343e <twi_releaseBus>:
    343e:	85 ec       	ldi	r24, 0xC5	; 197
    3440:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3444:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <twi_state>
    3448:	08 95       	ret

0000344a <twi_handleTimeout>:
    344a:	cf 93       	push	r28
    344c:	df 93       	push	r29
    344e:	91 e0       	ldi	r25, 0x01	; 1
    3450:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <twi_timed_out_flag>
    3454:	88 23       	and	r24, r24
    3456:	51 f0       	breq	.+20     	; 0x346c <twi_handleTimeout+0x22>
    3458:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    345c:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    3460:	9b df       	rcall	.-202    	; 0x3398 <twi_disable>
    3462:	7c df       	rcall	.-264    	; 0x335c <twi_init>
    3464:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    3468:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    346c:	df 91       	pop	r29
    346e:	cf 91       	pop	r28
    3470:	08 95       	ret

00003472 <twi_readFrom>:
    3472:	4f 92       	push	r4
    3474:	5f 92       	push	r5
    3476:	6f 92       	push	r6
    3478:	7f 92       	push	r7
    347a:	8f 92       	push	r8
    347c:	9f 92       	push	r9
    347e:	af 92       	push	r10
    3480:	bf 92       	push	r11
    3482:	cf 92       	push	r12
    3484:	df 92       	push	r13
    3486:	ef 92       	push	r14
    3488:	ff 92       	push	r15
    348a:	0f 93       	push	r16
    348c:	1f 93       	push	r17
    348e:	cf 93       	push	r28
    3490:	df 93       	push	r29
    3492:	f8 2e       	mov	r15, r24
    3494:	16 2f       	mov	r17, r22
    3496:	07 2f       	mov	r16, r23
    3498:	c4 2f       	mov	r28, r20
    349a:	e2 2e       	mov	r14, r18
    349c:	41 32       	cpi	r20, 0x21	; 33
    349e:	08 f0       	brcs	.+2      	; 0x34a2 <twi_readFrom+0x30>
    34a0:	bc c0       	rjmp	.+376    	; 0x361a <twi_readFrom+0x1a8>
    34a2:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <micros>
    34a6:	4b 01       	movw	r8, r22
    34a8:	5c 01       	movw	r10, r24
    34aa:	d0 91 af 03 	lds	r29, 0x03AF	; 0x8003af <twi_state>
    34ae:	dd 23       	and	r29, r29
    34b0:	29 f1       	breq	.+74     	; 0x34fc <twi_readFrom+0x8a>
    34b2:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <twi_timeout_us>
    34b6:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    34ba:	a0 91 aa 03 	lds	r26, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    34be:	b0 91 ab 03 	lds	r27, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    34c2:	89 2b       	or	r24, r25
    34c4:	8a 2b       	or	r24, r26
    34c6:	8b 2b       	or	r24, r27
    34c8:	81 f3       	breq	.-32     	; 0x34aa <twi_readFrom+0x38>
    34ca:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <micros>
    34ce:	40 90 a8 03 	lds	r4, 0x03A8	; 0x8003a8 <twi_timeout_us>
    34d2:	50 90 a9 03 	lds	r5, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    34d6:	60 90 aa 03 	lds	r6, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    34da:	70 90 ab 03 	lds	r7, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	88 19       	sub	r24, r8
    34e4:	99 09       	sbc	r25, r9
    34e6:	aa 09       	sbc	r26, r10
    34e8:	bb 09       	sbc	r27, r11
    34ea:	48 16       	cp	r4, r24
    34ec:	59 06       	cpc	r5, r25
    34ee:	6a 06       	cpc	r6, r26
    34f0:	7b 06       	cpc	r7, r27
    34f2:	d8 f6       	brcc	.-74     	; 0x34aa <twi_readFrom+0x38>
    34f4:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <twi_do_reset_on_timeout>
    34f8:	a8 df       	rcall	.-176    	; 0x344a <twi_handleTimeout>
    34fa:	8f c0       	rjmp	.+286    	; 0x361a <twi_readFrom+0x1a8>
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <twi_state>
    3502:	e0 92 ad 03 	sts	0x03AD, r14	; 0x8003ad <twi_sendStop>
    3506:	9f ef       	ldi	r25, 0xFF	; 255
    3508:	90 93 3c 03 	sts	0x033C, r25	; 0x80033c <twi_error>
    350c:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <twi_masterBufferIndex>
    3510:	9c 0f       	add	r25, r28
    3512:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <twi_masterBufferLength>
    3516:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <twi_slarw>
    351a:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <twi_slarw>
    351e:	8f 2d       	mov	r24, r15
    3520:	88 0f       	add	r24, r24
    3522:	89 2b       	or	r24, r25
    3524:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <twi_slarw>
    3528:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <twi_inRepStart>
    352c:	81 30       	cpi	r24, 0x01	; 1
    352e:	89 f5       	brne	.+98     	; 0x3592 <twi_readFrom+0x120>
    3530:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <twi_inRepStart>
    3534:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <micros>
    3538:	6b 01       	movw	r12, r22
    353a:	7c 01       	movw	r14, r24
    353c:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <twi_slarw>
    3540:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3544:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <twi_timeout_us>
    3548:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    354c:	a0 91 aa 03 	lds	r26, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    3550:	b0 91 ab 03 	lds	r27, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    3554:	89 2b       	or	r24, r25
    3556:	8a 2b       	or	r24, r26
    3558:	8b 2b       	or	r24, r27
    355a:	a9 f0       	breq	.+42     	; 0x3586 <twi_readFrom+0x114>
    355c:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <micros>
    3560:	80 90 a8 03 	lds	r8, 0x03A8	; 0x8003a8 <twi_timeout_us>
    3564:	90 90 a9 03 	lds	r9, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    3568:	a0 90 aa 03 	lds	r10, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    356c:	b0 90 ab 03 	lds	r11, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	8c 19       	sub	r24, r12
    3576:	9d 09       	sbc	r25, r13
    3578:	ae 09       	sbc	r26, r14
    357a:	bf 09       	sbc	r27, r15
    357c:	88 16       	cp	r8, r24
    357e:	99 06       	cpc	r9, r25
    3580:	aa 06       	cpc	r10, r26
    3582:	bb 06       	cpc	r11, r27
    3584:	90 f1       	brcs	.+100    	; 0x35ea <twi_readFrom+0x178>
    3586:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    358a:	83 fd       	sbrc	r24, 3
    358c:	d7 cf       	rjmp	.-82     	; 0x353c <twi_readFrom+0xca>
    358e:	85 ec       	ldi	r24, 0xC5	; 197
    3590:	01 c0       	rjmp	.+2      	; 0x3594 <twi_readFrom+0x122>
    3592:	85 ee       	ldi	r24, 0xE5	; 229
    3594:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3598:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <micros>
    359c:	6b 01       	movw	r12, r22
    359e:	7c 01       	movw	r14, r24
    35a0:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <twi_state>
    35a4:	81 30       	cpi	r24, 0x01	; 1
    35a6:	29 f5       	brne	.+74     	; 0x35f2 <twi_readFrom+0x180>
    35a8:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <twi_timeout_us>
    35ac:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    35b0:	a0 91 aa 03 	lds	r26, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    35b4:	b0 91 ab 03 	lds	r27, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    35b8:	89 2b       	or	r24, r25
    35ba:	8a 2b       	or	r24, r26
    35bc:	8b 2b       	or	r24, r27
    35be:	81 f3       	breq	.-32     	; 0x35a0 <twi_readFrom+0x12e>
    35c0:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <micros>
    35c4:	80 90 a8 03 	lds	r8, 0x03A8	; 0x8003a8 <twi_timeout_us>
    35c8:	90 90 a9 03 	lds	r9, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    35cc:	a0 90 aa 03 	lds	r10, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    35d0:	b0 90 ab 03 	lds	r11, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    35d4:	dc 01       	movw	r26, r24
    35d6:	cb 01       	movw	r24, r22
    35d8:	8c 19       	sub	r24, r12
    35da:	9d 09       	sbc	r25, r13
    35dc:	ae 09       	sbc	r26, r14
    35de:	bf 09       	sbc	r27, r15
    35e0:	88 16       	cp	r8, r24
    35e2:	99 06       	cpc	r9, r25
    35e4:	aa 06       	cpc	r10, r26
    35e6:	bb 06       	cpc	r11, r27
    35e8:	d8 f6       	brcc	.-74     	; 0x35a0 <twi_readFrom+0x12e>
    35ea:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <twi_do_reset_on_timeout>
    35ee:	2d df       	rcall	.-422    	; 0x344a <twi_handleTimeout>
    35f0:	15 c0       	rjmp	.+42     	; 0x361c <twi_readFrom+0x1aa>
    35f2:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <twi_masterBufferIndex>
    35f6:	8c 17       	cp	r24, r28
    35f8:	10 f4       	brcc	.+4      	; 0x35fe <twi_readFrom+0x18c>
    35fa:	c0 91 81 03 	lds	r28, 0x0381	; 0x800381 <twi_masterBufferIndex>
    35fe:	a2 e8       	ldi	r26, 0x82	; 130
    3600:	b3 e0       	ldi	r27, 0x03	; 3
    3602:	91 2f       	mov	r25, r17
    3604:	e1 2f       	mov	r30, r17
    3606:	f0 2f       	mov	r31, r16
    3608:	8e 2f       	mov	r24, r30
    360a:	89 1b       	sub	r24, r25
    360c:	8c 17       	cp	r24, r28
    360e:	18 f4       	brcc	.+6      	; 0x3616 <twi_readFrom+0x1a4>
    3610:	8d 91       	ld	r24, X+
    3612:	81 93       	st	Z+, r24
    3614:	f9 cf       	rjmp	.-14     	; 0x3608 <twi_readFrom+0x196>
    3616:	dc 2f       	mov	r29, r28
    3618:	01 c0       	rjmp	.+2      	; 0x361c <twi_readFrom+0x1aa>
    361a:	d0 e0       	ldi	r29, 0x00	; 0
    361c:	8d 2f       	mov	r24, r29
    361e:	df 91       	pop	r29
    3620:	cf 91       	pop	r28
    3622:	1f 91       	pop	r17
    3624:	0f 91       	pop	r16
    3626:	ff 90       	pop	r15
    3628:	ef 90       	pop	r14
    362a:	df 90       	pop	r13
    362c:	cf 90       	pop	r12
    362e:	bf 90       	pop	r11
    3630:	af 90       	pop	r10
    3632:	9f 90       	pop	r9
    3634:	8f 90       	pop	r8
    3636:	7f 90       	pop	r7
    3638:	6f 90       	pop	r6
    363a:	5f 90       	pop	r5
    363c:	4f 90       	pop	r4
    363e:	08 95       	ret

00003640 <twi_writeTo>:
    3640:	4f 92       	push	r4
    3642:	5f 92       	push	r5
    3644:	6f 92       	push	r6
    3646:	7f 92       	push	r7
    3648:	8f 92       	push	r8
    364a:	9f 92       	push	r9
    364c:	af 92       	push	r10
    364e:	bf 92       	push	r11
    3650:	cf 92       	push	r12
    3652:	df 92       	push	r13
    3654:	ef 92       	push	r14
    3656:	ff 92       	push	r15
    3658:	0f 93       	push	r16
    365a:	1f 93       	push	r17
    365c:	cf 93       	push	r28
    365e:	df 93       	push	r29
    3660:	41 32       	cpi	r20, 0x21	; 33
    3662:	08 f0       	brcs	.+2      	; 0x3666 <twi_writeTo+0x26>
    3664:	c5 c0       	rjmp	.+394    	; 0x37f0 <twi_writeTo+0x1b0>
    3666:	12 2f       	mov	r17, r18
    3668:	f4 2e       	mov	r15, r20
    366a:	d7 2e       	mov	r13, r23
    366c:	e6 2e       	mov	r14, r22
    366e:	d8 2f       	mov	r29, r24
    3670:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <micros>
    3674:	4b 01       	movw	r8, r22
    3676:	5c 01       	movw	r10, r24
    3678:	c0 91 af 03 	lds	r28, 0x03AF	; 0x8003af <twi_state>
    367c:	cc 23       	and	r28, r28
    367e:	11 f1       	breq	.+68     	; 0x36c4 <twi_writeTo+0x84>
    3680:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <twi_timeout_us>
    3684:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    3688:	a0 91 aa 03 	lds	r26, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    368c:	b0 91 ab 03 	lds	r27, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    3690:	89 2b       	or	r24, r25
    3692:	8a 2b       	or	r24, r26
    3694:	8b 2b       	or	r24, r27
    3696:	81 f3       	breq	.-32     	; 0x3678 <twi_writeTo+0x38>
    3698:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <micros>
    369c:	40 90 a8 03 	lds	r4, 0x03A8	; 0x8003a8 <twi_timeout_us>
    36a0:	50 90 a9 03 	lds	r5, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    36a4:	60 90 aa 03 	lds	r6, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    36a8:	70 90 ab 03 	lds	r7, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	88 19       	sub	r24, r8
    36b2:	99 09       	sbc	r25, r9
    36b4:	aa 09       	sbc	r26, r10
    36b6:	bb 09       	sbc	r27, r11
    36b8:	48 16       	cp	r4, r24
    36ba:	59 06       	cpc	r5, r25
    36bc:	6a 06       	cpc	r6, r26
    36be:	7b 06       	cpc	r7, r27
    36c0:	d8 f6       	brcc	.-74     	; 0x3678 <twi_writeTo+0x38>
    36c2:	83 c0       	rjmp	.+262    	; 0x37ca <twi_writeTo+0x18a>
    36c4:	82 e0       	ldi	r24, 0x02	; 2
    36c6:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <twi_state>
    36ca:	00 93 ad 03 	sts	0x03AD, r16	; 0x8003ad <twi_sendStop>
    36ce:	8f ef       	ldi	r24, 0xFF	; 255
    36d0:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <twi_error>
    36d4:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <twi_masterBufferIndex>
    36d8:	f0 92 80 03 	sts	0x0380, r15	; 0x800380 <twi_masterBufferLength>
    36dc:	9e 2d       	mov	r25, r14
    36de:	a2 e8       	ldi	r26, 0x82	; 130
    36e0:	b3 e0       	ldi	r27, 0x03	; 3
    36e2:	ee 2d       	mov	r30, r14
    36e4:	fd 2d       	mov	r31, r13
    36e6:	8e 2f       	mov	r24, r30
    36e8:	89 1b       	sub	r24, r25
    36ea:	8f 15       	cp	r24, r15
    36ec:	18 f4       	brcc	.+6      	; 0x36f4 <twi_writeTo+0xb4>
    36ee:	81 91       	ld	r24, Z+
    36f0:	8d 93       	st	X+, r24
    36f2:	f9 cf       	rjmp	.-14     	; 0x36e6 <twi_writeTo+0xa6>
    36f4:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <twi_slarw>
    36f8:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <twi_slarw>
    36fc:	dd 0f       	add	r29, r29
    36fe:	d9 2b       	or	r29, r25
    3700:	d0 93 ae 03 	sts	0x03AE, r29	; 0x8003ae <twi_slarw>
    3704:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <twi_inRepStart>
    3708:	81 30       	cpi	r24, 0x01	; 1
    370a:	89 f5       	brne	.+98     	; 0x376e <twi_writeTo+0x12e>
    370c:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <twi_inRepStart>
    3710:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <micros>
    3714:	6b 01       	movw	r12, r22
    3716:	7c 01       	movw	r14, r24
    3718:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <twi_slarw>
    371c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3720:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <twi_timeout_us>
    3724:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    3728:	a0 91 aa 03 	lds	r26, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    372c:	b0 91 ab 03 	lds	r27, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    3730:	89 2b       	or	r24, r25
    3732:	8a 2b       	or	r24, r26
    3734:	8b 2b       	or	r24, r27
    3736:	a9 f0       	breq	.+42     	; 0x3762 <twi_writeTo+0x122>
    3738:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <micros>
    373c:	80 90 a8 03 	lds	r8, 0x03A8	; 0x8003a8 <twi_timeout_us>
    3740:	90 90 a9 03 	lds	r9, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    3744:	a0 90 aa 03 	lds	r10, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    3748:	b0 90 ab 03 	lds	r11, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    374c:	dc 01       	movw	r26, r24
    374e:	cb 01       	movw	r24, r22
    3750:	8c 19       	sub	r24, r12
    3752:	9d 09       	sbc	r25, r13
    3754:	ae 09       	sbc	r26, r14
    3756:	bf 09       	sbc	r27, r15
    3758:	88 16       	cp	r8, r24
    375a:	99 06       	cpc	r9, r25
    375c:	aa 06       	cpc	r10, r26
    375e:	bb 06       	cpc	r11, r27
    3760:	a0 f1       	brcs	.+104    	; 0x37ca <twi_writeTo+0x18a>
    3762:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3766:	83 fd       	sbrc	r24, 3
    3768:	d7 cf       	rjmp	.-82     	; 0x3718 <twi_writeTo+0xd8>
    376a:	85 ec       	ldi	r24, 0xC5	; 197
    376c:	01 c0       	rjmp	.+2      	; 0x3770 <twi_writeTo+0x130>
    376e:	85 ee       	ldi	r24, 0xE5	; 229
    3770:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3774:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <micros>
    3778:	6b 01       	movw	r12, r22
    377a:	7c 01       	movw	r14, r24
    377c:	11 23       	and	r17, r17
    377e:	51 f1       	breq	.+84     	; 0x37d4 <twi_writeTo+0x194>
    3780:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <twi_state>
    3784:	82 30       	cpi	r24, 0x02	; 2
    3786:	31 f5       	brne	.+76     	; 0x37d4 <twi_writeTo+0x194>
    3788:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <twi_timeout_us>
    378c:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    3790:	a0 91 aa 03 	lds	r26, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    3794:	b0 91 ab 03 	lds	r27, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    3798:	89 2b       	or	r24, r25
    379a:	8a 2b       	or	r24, r26
    379c:	8b 2b       	or	r24, r27
    379e:	71 f3       	breq	.-36     	; 0x377c <twi_writeTo+0x13c>
    37a0:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <micros>
    37a4:	80 90 a8 03 	lds	r8, 0x03A8	; 0x8003a8 <twi_timeout_us>
    37a8:	90 90 a9 03 	lds	r9, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    37ac:	a0 90 aa 03 	lds	r10, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    37b0:	b0 90 ab 03 	lds	r11, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    37b4:	dc 01       	movw	r26, r24
    37b6:	cb 01       	movw	r24, r22
    37b8:	8c 19       	sub	r24, r12
    37ba:	9d 09       	sbc	r25, r13
    37bc:	ae 09       	sbc	r26, r14
    37be:	bf 09       	sbc	r27, r15
    37c0:	88 16       	cp	r8, r24
    37c2:	99 06       	cpc	r9, r25
    37c4:	aa 06       	cpc	r10, r26
    37c6:	bb 06       	cpc	r11, r27
    37c8:	c8 f6       	brcc	.-78     	; 0x377c <twi_writeTo+0x13c>
    37ca:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <twi_do_reset_on_timeout>
    37ce:	3d de       	rcall	.-902    	; 0x344a <twi_handleTimeout>
    37d0:	c5 e0       	ldi	r28, 0x05	; 5
    37d2:	13 c0       	rjmp	.+38     	; 0x37fa <twi_writeTo+0x1ba>
    37d4:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <twi_error>
    37d8:	8f 3f       	cpi	r24, 0xFF	; 255
    37da:	79 f0       	breq	.+30     	; 0x37fa <twi_writeTo+0x1ba>
    37dc:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <twi_error>
    37e0:	80 32       	cpi	r24, 0x20	; 32
    37e2:	41 f0       	breq	.+16     	; 0x37f4 <twi_writeTo+0x1b4>
    37e4:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <twi_error>
    37e8:	80 33       	cpi	r24, 0x30	; 48
    37ea:	31 f0       	breq	.+12     	; 0x37f8 <twi_writeTo+0x1b8>
    37ec:	c4 e0       	ldi	r28, 0x04	; 4
    37ee:	05 c0       	rjmp	.+10     	; 0x37fa <twi_writeTo+0x1ba>
    37f0:	c1 e0       	ldi	r28, 0x01	; 1
    37f2:	03 c0       	rjmp	.+6      	; 0x37fa <twi_writeTo+0x1ba>
    37f4:	c2 e0       	ldi	r28, 0x02	; 2
    37f6:	01 c0       	rjmp	.+2      	; 0x37fa <twi_writeTo+0x1ba>
    37f8:	c3 e0       	ldi	r28, 0x03	; 3
    37fa:	8c 2f       	mov	r24, r28
    37fc:	df 91       	pop	r29
    37fe:	cf 91       	pop	r28
    3800:	1f 91       	pop	r17
    3802:	0f 91       	pop	r16
    3804:	ff 90       	pop	r15
    3806:	ef 90       	pop	r14
    3808:	df 90       	pop	r13
    380a:	cf 90       	pop	r12
    380c:	bf 90       	pop	r11
    380e:	af 90       	pop	r10
    3810:	9f 90       	pop	r9
    3812:	8f 90       	pop	r8
    3814:	7f 90       	pop	r7
    3816:	6f 90       	pop	r6
    3818:	5f 90       	pop	r5
    381a:	4f 90       	pop	r4
    381c:	08 95       	ret

0000381e <twi_stop>:
    381e:	85 ed       	ldi	r24, 0xD5	; 213
    3820:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3824:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <twi_timeout_us>
    3828:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    382c:	a0 91 aa 03 	lds	r26, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    3830:	b0 91 ab 03 	lds	r27, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    3834:	07 96       	adiw	r24, 0x07	; 7
    3836:	a1 1d       	adc	r26, r1
    3838:	b1 1d       	adc	r27, r1
    383a:	23 e0       	ldi	r18, 0x03	; 3
    383c:	b6 95       	lsr	r27
    383e:	a7 95       	ror	r26
    3840:	97 95       	ror	r25
    3842:	87 95       	ror	r24
    3844:	2a 95       	dec	r18
    3846:	d1 f7       	brne	.-12     	; 0x383c <twi_stop+0x1e>
    3848:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    384c:	24 ff       	sbrs	r18, 4
    384e:	1b c0       	rjmp	.+54     	; 0x3886 <twi_stop+0x68>
    3850:	40 91 a8 03 	lds	r20, 0x03A8	; 0x8003a8 <twi_timeout_us>
    3854:	50 91 a9 03 	lds	r21, 0x03A9	; 0x8003a9 <twi_timeout_us+0x1>
    3858:	60 91 aa 03 	lds	r22, 0x03AA	; 0x8003aa <twi_timeout_us+0x2>
    385c:	70 91 ab 03 	lds	r23, 0x03AB	; 0x8003ab <twi_timeout_us+0x3>
    3860:	45 2b       	or	r20, r21
    3862:	46 2b       	or	r20, r22
    3864:	47 2b       	or	r20, r23
    3866:	81 f3       	breq	.-32     	; 0x3848 <twi_stop+0x2a>
    3868:	00 97       	sbiw	r24, 0x00	; 0
    386a:	a1 05       	cpc	r26, r1
    386c:	b1 05       	cpc	r27, r1
    386e:	41 f0       	breq	.+16     	; 0x3880 <twi_stop+0x62>
    3870:	25 e3       	ldi	r18, 0x35	; 53
    3872:	2a 95       	dec	r18
    3874:	f1 f7       	brne	.-4      	; 0x3872 <twi_stop+0x54>
    3876:	00 00       	nop
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	a1 09       	sbc	r26, r1
    387c:	b1 09       	sbc	r27, r1
    387e:	e4 cf       	rjmp	.-56     	; 0x3848 <twi_stop+0x2a>
    3880:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <twi_do_reset_on_timeout>
    3884:	e2 cd       	rjmp	.-1084   	; 0x344a <twi_handleTimeout>
    3886:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <twi_state>
    388a:	08 95       	ret

0000388c <__vector_39>:

ISR(TWI_vect)
{
    388c:	1f 92       	push	r1
    388e:	0f 92       	push	r0
    3890:	0f b6       	in	r0, 0x3f	; 63
    3892:	0f 92       	push	r0
    3894:	11 24       	eor	r1, r1
    3896:	0b b6       	in	r0, 0x3b	; 59
    3898:	0f 92       	push	r0
    389a:	2f 93       	push	r18
    389c:	3f 93       	push	r19
    389e:	4f 93       	push	r20
    38a0:	5f 93       	push	r21
    38a2:	6f 93       	push	r22
    38a4:	7f 93       	push	r23
    38a6:	8f 93       	push	r24
    38a8:	9f 93       	push	r25
    38aa:	af 93       	push	r26
    38ac:	bf 93       	push	r27
    38ae:	ef 93       	push	r30
    38b0:	ff 93       	push	r31
  switch(TW_STATUS){
    38b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    38b6:	88 7f       	andi	r24, 0xF8	; 248
    38b8:	80 36       	cpi	r24, 0x60	; 96
    38ba:	09 f4       	brne	.+2      	; 0x38be <__vector_39+0x32>
    38bc:	9d c0       	rjmp	.+314    	; 0x39f8 <__vector_39+0x16c>
    38be:	70 f5       	brcc	.+92     	; 0x391c <__vector_39+0x90>
    38c0:	88 32       	cpi	r24, 0x28	; 40
    38c2:	09 f4       	brne	.+2      	; 0x38c6 <__vector_39+0x3a>
    38c4:	5c c0       	rjmp	.+184    	; 0x397e <__vector_39+0xf2>
    38c6:	90 f4       	brcc	.+36     	; 0x38ec <__vector_39+0x60>
    38c8:	80 31       	cpi	r24, 0x10	; 16
    38ca:	09 f4       	brne	.+2      	; 0x38ce <__vector_39+0x42>
    38cc:	55 c0       	rjmp	.+170    	; 0x3978 <__vector_39+0xec>
    38ce:	38 f4       	brcc	.+14     	; 0x38de <__vector_39+0x52>
    38d0:	88 23       	and	r24, r24
    38d2:	09 f4       	brne	.+2      	; 0x38d6 <__vector_39+0x4a>
    38d4:	f3 c0       	rjmp	.+486    	; 0x3abc <__vector_39+0x230>
    38d6:	88 30       	cpi	r24, 0x08	; 8
    38d8:	09 f4       	brne	.+2      	; 0x38dc <__vector_39+0x50>
    38da:	4e c0       	rjmp	.+156    	; 0x3978 <__vector_39+0xec>
    38dc:	f2 c0       	rjmp	.+484    	; 0x3ac2 <__vector_39+0x236>
    38de:	88 31       	cpi	r24, 0x18	; 24
    38e0:	09 f4       	brne	.+2      	; 0x38e4 <__vector_39+0x58>
    38e2:	4d c0       	rjmp	.+154    	; 0x397e <__vector_39+0xf2>
    38e4:	80 32       	cpi	r24, 0x20	; 32
    38e6:	09 f4       	brne	.+2      	; 0x38ea <__vector_39+0x5e>
    38e8:	5e c0       	rjmp	.+188    	; 0x39a6 <__vector_39+0x11a>
    38ea:	eb c0       	rjmp	.+470    	; 0x3ac2 <__vector_39+0x236>
    38ec:	80 34       	cpi	r24, 0x40	; 64
    38ee:	09 f4       	brne	.+2      	; 0x38f2 <__vector_39+0x66>
    38f0:	69 c0       	rjmp	.+210    	; 0x39c4 <__vector_39+0x138>
    38f2:	50 f4       	brcc	.+20     	; 0x3908 <__vector_39+0x7c>
    38f4:	80 33       	cpi	r24, 0x30	; 48
    38f6:	09 f4       	brne	.+2      	; 0x38fa <__vector_39+0x6e>
    38f8:	56 c0       	rjmp	.+172    	; 0x39a6 <__vector_39+0x11a>
    38fa:	88 33       	cpi	r24, 0x38	; 56
    38fc:	09 f0       	breq	.+2      	; 0x3900 <__vector_39+0x74>
    38fe:	e1 c0       	rjmp	.+450    	; 0x3ac2 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3900:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <twi_error>
      twi_releaseBus();
    3904:	9c dd       	rcall	.-1224   	; 0x343e <twi_releaseBus>
      break;
    3906:	dd c0       	rjmp	.+442    	; 0x3ac2 <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3908:	80 35       	cpi	r24, 0x50	; 80
    390a:	09 f4       	brne	.+2      	; 0x390e <__vector_39+0x82>
    390c:	4f c0       	rjmp	.+158    	; 0x39ac <__vector_39+0x120>
    390e:	88 35       	cpi	r24, 0x58	; 88
    3910:	09 f4       	brne	.+2      	; 0x3914 <__vector_39+0x88>
    3912:	5d c0       	rjmp	.+186    	; 0x39ce <__vector_39+0x142>
    3914:	88 34       	cpi	r24, 0x48	; 72
    3916:	09 f0       	breq	.+2      	; 0x391a <__vector_39+0x8e>
    3918:	d4 c0       	rjmp	.+424    	; 0x3ac2 <__vector_39+0x236>
    391a:	d2 c0       	rjmp	.+420    	; 0x3ac0 <__vector_39+0x234>
    391c:	88 39       	cpi	r24, 0x98	; 152
    391e:	09 f4       	brne	.+2      	; 0x3922 <__vector_39+0x96>
    3920:	c3 c0       	rjmp	.+390    	; 0x3aa8 <__vector_39+0x21c>
    3922:	a8 f4       	brcc	.+42     	; 0x394e <__vector_39+0xc2>
    3924:	88 37       	cpi	r24, 0x78	; 120
    3926:	09 f4       	brne	.+2      	; 0x392a <__vector_39+0x9e>
    3928:	67 c0       	rjmp	.+206    	; 0x39f8 <__vector_39+0x16c>
    392a:	38 f4       	brcc	.+14     	; 0x393a <__vector_39+0xae>
    392c:	88 36       	cpi	r24, 0x68	; 104
    392e:	09 f4       	brne	.+2      	; 0x3932 <__vector_39+0xa6>
    3930:	63 c0       	rjmp	.+198    	; 0x39f8 <__vector_39+0x16c>
    3932:	80 37       	cpi	r24, 0x70	; 112
    3934:	09 f4       	brne	.+2      	; 0x3938 <__vector_39+0xac>
    3936:	60 c0       	rjmp	.+192    	; 0x39f8 <__vector_39+0x16c>
    3938:	c4 c0       	rjmp	.+392    	; 0x3ac2 <__vector_39+0x236>
    393a:	88 38       	cpi	r24, 0x88	; 136
    393c:	09 f4       	brne	.+2      	; 0x3940 <__vector_39+0xb4>
    393e:	b4 c0       	rjmp	.+360    	; 0x3aa8 <__vector_39+0x21c>
    3940:	80 39       	cpi	r24, 0x90	; 144
    3942:	09 f4       	brne	.+2      	; 0x3946 <__vector_39+0xba>
    3944:	5f c0       	rjmp	.+190    	; 0x3a04 <__vector_39+0x178>
    3946:	80 38       	cpi	r24, 0x80	; 128
    3948:	09 f0       	breq	.+2      	; 0x394c <__vector_39+0xc0>
    394a:	bb c0       	rjmp	.+374    	; 0x3ac2 <__vector_39+0x236>
    394c:	5b c0       	rjmp	.+182    	; 0x3a04 <__vector_39+0x178>
    394e:	80 3b       	cpi	r24, 0xB0	; 176
    3950:	09 f4       	brne	.+2      	; 0x3954 <__vector_39+0xc8>
    3952:	82 c0       	rjmp	.+260    	; 0x3a58 <__vector_39+0x1cc>
    3954:	38 f4       	brcc	.+14     	; 0x3964 <__vector_39+0xd8>
    3956:	80 3a       	cpi	r24, 0xA0	; 160
    3958:	09 f4       	brne	.+2      	; 0x395c <__vector_39+0xd0>
    395a:	66 c0       	rjmp	.+204    	; 0x3a28 <__vector_39+0x19c>
    395c:	88 3a       	cpi	r24, 0xA8	; 168
    395e:	09 f4       	brne	.+2      	; 0x3962 <__vector_39+0xd6>
    3960:	7b c0       	rjmp	.+246    	; 0x3a58 <__vector_39+0x1cc>
    3962:	af c0       	rjmp	.+350    	; 0x3ac2 <__vector_39+0x236>
    3964:	80 3c       	cpi	r24, 0xC0	; 192
    3966:	09 f4       	brne	.+2      	; 0x396a <__vector_39+0xde>
    3968:	a3 c0       	rjmp	.+326    	; 0x3ab0 <__vector_39+0x224>
    396a:	88 3c       	cpi	r24, 0xC8	; 200
    396c:	09 f4       	brne	.+2      	; 0x3970 <__vector_39+0xe4>
    396e:	a0 c0       	rjmp	.+320    	; 0x3ab0 <__vector_39+0x224>
    3970:	88 3b       	cpi	r24, 0xB8	; 184
    3972:	09 f4       	brne	.+2      	; 0x3976 <__vector_39+0xea>
    3974:	86 c0       	rjmp	.+268    	; 0x3a82 <__vector_39+0x1f6>
    3976:	a5 c0       	rjmp	.+330    	; 0x3ac2 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3978:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <twi_slarw>
    397c:	10 c0       	rjmp	.+32     	; 0x399e <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    397e:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <twi_masterBufferIndex>
    3982:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <twi_masterBufferLength>
    3986:	98 17       	cp	r25, r24
    3988:	70 f5       	brcc	.+92     	; 0x39e6 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    398a:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <twi_masterBufferIndex>
    398e:	81 e0       	ldi	r24, 0x01	; 1
    3990:	8e 0f       	add	r24, r30
    3992:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <twi_masterBufferIndex>
    3996:	f0 e0       	ldi	r31, 0x00	; 0
    3998:	ee 57       	subi	r30, 0x7E	; 126
    399a:	fc 4f       	sbci	r31, 0xFC	; 252
    399c:	80 81       	ld	r24, Z
    399e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    39a2:	85 ec       	ldi	r24, 0xC5	; 197
    39a4:	82 c0       	rjmp	.+260    	; 0x3aaa <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    39a6:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <twi_error>
    39aa:	8a c0       	rjmp	.+276    	; 0x3ac0 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    39ac:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <twi_masterBufferIndex>
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	8e 0f       	add	r24, r30
    39b4:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <twi_masterBufferIndex>
    39b8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    39bc:	f0 e0       	ldi	r31, 0x00	; 0
    39be:	ee 57       	subi	r30, 0x7E	; 126
    39c0:	fc 4f       	sbci	r31, 0xFC	; 252
    39c2:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    39c4:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <twi_masterBufferIndex>
    39c8:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <twi_masterBufferLength>
    39cc:	6a c0       	rjmp	.+212    	; 0x3aa2 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    39ce:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <twi_masterBufferIndex>
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	8e 0f       	add	r24, r30
    39d6:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <twi_masterBufferIndex>
    39da:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    39de:	f0 e0       	ldi	r31, 0x00	; 0
    39e0:	ee 57       	subi	r30, 0x7E	; 126
    39e2:	fc 4f       	sbci	r31, 0xFC	; 252
    39e4:	80 83       	st	Z, r24
      if (twi_sendStop){
    39e6:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <twi_sendStop>
    39ea:	81 11       	cpse	r24, r1
    39ec:	69 c0       	rjmp	.+210    	; 0x3ac0 <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    39f4:	84 ea       	ldi	r24, 0xA4	; 164
    39f6:	5d c0       	rjmp	.+186    	; 0x3ab2 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    39f8:	83 e0       	ldi	r24, 0x03	; 3
    39fa:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    39fe:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <twi_rxBufferIndex>
    3a02:	cf cf       	rjmp	.-98     	; 0x39a2 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3a04:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <twi_rxBufferIndex>
    3a08:	80 32       	cpi	r24, 0x20	; 32
    3a0a:	08 f0       	brcs	.+2      	; 0x3a0e <__vector_39+0x182>
    3a0c:	4d c0       	rjmp	.+154    	; 0x3aa8 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3a0e:	e0 91 3d 03 	lds	r30, 0x033D	; 0x80033d <twi_rxBufferIndex>
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	8e 0f       	add	r24, r30
    3a16:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <twi_rxBufferIndex>
    3a1a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3a1e:	f0 e0       	ldi	r31, 0x00	; 0
    3a20:	e2 5c       	subi	r30, 0xC2	; 194
    3a22:	fc 4f       	sbci	r31, 0xFC	; 252
    3a24:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3a26:	bd cf       	rjmp	.-134    	; 0x39a2 <__vector_39+0x116>
    3a28:	0a dd       	rcall	.-1516   	; 0x343e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3a2a:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <twi_rxBufferIndex>
    3a2e:	80 32       	cpi	r24, 0x20	; 32
    3a30:	30 f4       	brcc	.+12     	; 0x3a3e <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3a32:	e0 91 3d 03 	lds	r30, 0x033D	; 0x80033d <twi_rxBufferIndex>
    3a36:	f0 e0       	ldi	r31, 0x00	; 0
    3a38:	e2 5c       	subi	r30, 0xC2	; 194
    3a3a:	fc 4f       	sbci	r31, 0xFC	; 252
    3a3c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3a3e:	60 91 3d 03 	lds	r22, 0x033D	; 0x80033d <twi_rxBufferIndex>
    3a42:	70 e0       	ldi	r23, 0x00	; 0
    3a44:	e0 91 a2 03 	lds	r30, 0x03A2	; 0x8003a2 <twi_onSlaveReceive>
    3a48:	f0 91 a3 03 	lds	r31, 0x03A3	; 0x8003a3 <twi_onSlaveReceive+0x1>
    3a4c:	8e e3       	ldi	r24, 0x3E	; 62
    3a4e:	93 e0       	ldi	r25, 0x03	; 3
    3a50:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3a52:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <twi_rxBufferIndex>
      break;
    3a56:	35 c0       	rjmp	.+106    	; 0x3ac2 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3a58:	84 e0       	ldi	r24, 0x04	; 4
    3a5a:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3a5e:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3a62:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3a66:	e0 91 a4 03 	lds	r30, 0x03A4	; 0x8003a4 <twi_onSlaveTransmit>
    3a6a:	f0 91 a5 03 	lds	r31, 0x03A5	; 0x8003a5 <twi_onSlaveTransmit+0x1>
    3a6e:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3a70:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <twi_txBufferLength>
    3a74:	81 11       	cpse	r24, r1
    3a76:	05 c0       	rjmp	.+10     	; 0x3a82 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3a7e:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3a82:	e0 91 5f 03 	lds	r30, 0x035F	; 0x80035f <twi_txBufferIndex>
    3a86:	81 e0       	ldi	r24, 0x01	; 1
    3a88:	8e 0f       	add	r24, r30
    3a8a:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <twi_txBufferIndex>
    3a8e:	f0 e0       	ldi	r31, 0x00	; 0
    3a90:	e0 5a       	subi	r30, 0xA0	; 160
    3a92:	fc 4f       	sbci	r31, 0xFC	; 252
    3a94:	80 81       	ld	r24, Z
    3a96:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3a9a:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <twi_txBufferIndex>
    3a9e:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <twi_txBufferLength>
    3aa2:	98 17       	cp	r25, r24
    3aa4:	08 f4       	brcc	.+2      	; 0x3aa8 <__vector_39+0x21c>
    3aa6:	7d cf       	rjmp	.-262    	; 0x39a2 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3aa8:	85 e8       	ldi	r24, 0x85	; 133
    3aaa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3aae:	09 c0       	rjmp	.+18     	; 0x3ac2 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3ab0:	85 ec       	ldi	r24, 0xC5	; 197
    3ab2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3ab6:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <twi_state>
      break;
    3aba:	03 c0       	rjmp	.+6      	; 0x3ac2 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3abc:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <twi_error>
      twi_stop();
    3ac0:	ae de       	rcall	.-676    	; 0x381e <twi_stop>
      break;
  }
}
    3ac2:	ff 91       	pop	r31
    3ac4:	ef 91       	pop	r30
    3ac6:	bf 91       	pop	r27
    3ac8:	af 91       	pop	r26
    3aca:	9f 91       	pop	r25
    3acc:	8f 91       	pop	r24
    3ace:	7f 91       	pop	r23
    3ad0:	6f 91       	pop	r22
    3ad2:	5f 91       	pop	r21
    3ad4:	4f 91       	pop	r20
    3ad6:	3f 91       	pop	r19
    3ad8:	2f 91       	pop	r18
    3ada:	0f 90       	pop	r0
    3adc:	0b be       	out	0x3b, r0	; 59
    3ade:	0f 90       	pop	r0
    3ae0:	0f be       	out	0x3f, r0	; 63
    3ae2:	0f 90       	pop	r0
    3ae4:	1f 90       	pop	r1
    3ae6:	18 95       	reti

00003ae8 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3ae8:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <_ZN7TwoWire14rxBufferLengthE>
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	20 91 e5 03 	lds	r18, 0x03E5	; 0x8003e5 <_ZN7TwoWire13rxBufferIndexE>
    3af2:	82 1b       	sub	r24, r18
    3af4:	91 09       	sbc	r25, r1
    3af6:	08 95       	ret

00003af8 <_ZN7TwoWire4readEv>:
    3af8:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <_ZN7TwoWire13rxBufferIndexE>
    3afc:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <_ZN7TwoWire14rxBufferLengthE>
    3b00:	98 17       	cp	r25, r24
    3b02:	50 f4       	brcc	.+20     	; 0x3b18 <_ZN7TwoWire4readEv+0x20>
    3b04:	e9 2f       	mov	r30, r25
    3b06:	f0 e0       	ldi	r31, 0x00	; 0
    3b08:	ea 51       	subi	r30, 0x1A	; 26
    3b0a:	fc 4f       	sbci	r31, 0xFC	; 252
    3b0c:	20 81       	ld	r18, Z
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	9f 5f       	subi	r25, 0xFF	; 255
    3b12:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <_ZN7TwoWire13rxBufferIndexE>
    3b16:	02 c0       	rjmp	.+4      	; 0x3b1c <_ZN7TwoWire4readEv+0x24>
    3b18:	2f ef       	ldi	r18, 0xFF	; 255
    3b1a:	3f ef       	ldi	r19, 0xFF	; 255
    3b1c:	c9 01       	movw	r24, r18
    3b1e:	08 95       	ret

00003b20 <_ZN7TwoWire4peekEv>:
    3b20:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <_ZN7TwoWire13rxBufferIndexE>
    3b24:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <_ZN7TwoWire14rxBufferLengthE>
    3b28:	e8 17       	cp	r30, r24
    3b2a:	30 f4       	brcc	.+12     	; 0x3b38 <_ZN7TwoWire4peekEv+0x18>
    3b2c:	f0 e0       	ldi	r31, 0x00	; 0
    3b2e:	ea 51       	subi	r30, 0x1A	; 26
    3b30:	fc 4f       	sbci	r31, 0xFC	; 252
    3b32:	80 81       	ld	r24, Z
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	08 95       	ret
    3b38:	8f ef       	ldi	r24, 0xFF	; 255
    3b3a:	9f ef       	ldi	r25, 0xFF	; 255
    3b3c:	08 95       	ret

00003b3e <_ZN7TwoWire5flushEv>:
    3b3e:	08 95       	ret

00003b40 <_ZN7TwoWire16onReceiveServiceEPhi>:
    3b40:	cf 93       	push	r28
    3b42:	df 93       	push	r29
    3b44:	ec 01       	movw	r28, r24
    3b46:	e0 91 bc 03 	lds	r30, 0x03BC	; 0x8003bc <_ZN7TwoWire14user_onReceiveE>
    3b4a:	f0 91 bd 03 	lds	r31, 0x03BD	; 0x8003bd <_ZN7TwoWire14user_onReceiveE+0x1>
    3b4e:	30 97       	sbiw	r30, 0x00	; 0
    3b50:	f1 f0       	breq	.+60     	; 0x3b8e <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3b52:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <_ZN7TwoWire13rxBufferIndexE>
    3b56:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <_ZN7TwoWire14rxBufferLengthE>
    3b5a:	98 17       	cp	r25, r24
    3b5c:	c0 f0       	brcs	.+48     	; 0x3b8e <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	29 2f       	mov	r18, r25
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	26 17       	cp	r18, r22
    3b66:	37 07       	cpc	r19, r23
    3b68:	54 f4       	brge	.+20     	; 0x3b7e <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    3b6a:	de 01       	movw	r26, r28
    3b6c:	a2 0f       	add	r26, r18
    3b6e:	b3 1f       	adc	r27, r19
    3b70:	4c 91       	ld	r20, X
    3b72:	d9 01       	movw	r26, r18
    3b74:	aa 51       	subi	r26, 0x1A	; 26
    3b76:	bc 4f       	sbci	r27, 0xFC	; 252
    3b78:	4c 93       	st	X, r20
    3b7a:	9f 5f       	subi	r25, 0xFF	; 255
    3b7c:	f1 cf       	rjmp	.-30     	; 0x3b60 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    3b7e:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <_ZN7TwoWire13rxBufferIndexE>
    3b82:	60 93 e4 03 	sts	0x03E4, r22	; 0x8003e4 <_ZN7TwoWire14rxBufferLengthE>
    3b86:	cb 01       	movw	r24, r22
    3b88:	df 91       	pop	r29
    3b8a:	cf 91       	pop	r28
    3b8c:	19 94       	eijmp
    3b8e:	df 91       	pop	r29
    3b90:	cf 91       	pop	r28
    3b92:	08 95       	ret

00003b94 <_ZN7TwoWire16onRequestServiceEv>:
    3b94:	e0 91 be 03 	lds	r30, 0x03BE	; 0x8003be <_ZN7TwoWire14user_onRequestE>
    3b98:	f0 91 bf 03 	lds	r31, 0x03BF	; 0x8003bf <_ZN7TwoWire14user_onRequestE+0x1>
    3b9c:	30 97       	sbiw	r30, 0x00	; 0
    3b9e:	29 f0       	breq	.+10     	; 0x3baa <_ZN7TwoWire16onRequestServiceEv+0x16>
    3ba0:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <_ZN7TwoWire13txBufferIndexE>
    3ba4:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <_ZN7TwoWire14txBufferLengthE>
    3ba8:	19 94       	eijmp
    3baa:	08 95       	ret

00003bac <_ZN7TwoWire5writeEPKhj>:
    3bac:	cf 92       	push	r12
    3bae:	df 92       	push	r13
    3bb0:	ef 92       	push	r14
    3bb2:	ff 92       	push	r15
    3bb4:	0f 93       	push	r16
    3bb6:	1f 93       	push	r17
    3bb8:	cf 93       	push	r28
    3bba:	df 93       	push	r29
    3bbc:	7c 01       	movw	r14, r24
    3bbe:	cb 01       	movw	r24, r22
    3bc0:	8a 01       	movw	r16, r20
    3bc2:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <_ZN7TwoWire12transmittingE>
    3bc6:	22 23       	and	r18, r18
    3bc8:	89 f0       	breq	.+34     	; 0x3bec <_ZN7TwoWire5writeEPKhj+0x40>
    3bca:	eb 01       	movw	r28, r22
    3bcc:	6b 01       	movw	r12, r22
    3bce:	c4 0e       	add	r12, r20
    3bd0:	d5 1e       	adc	r13, r21
    3bd2:	cc 15       	cp	r28, r12
    3bd4:	dd 05       	cpc	r29, r13
    3bd6:	61 f0       	breq	.+24     	; 0x3bf0 <_ZN7TwoWire5writeEPKhj+0x44>
    3bd8:	69 91       	ld	r22, Y+
    3bda:	d7 01       	movw	r26, r14
    3bdc:	ed 91       	ld	r30, X+
    3bde:	fc 91       	ld	r31, X
    3be0:	01 90       	ld	r0, Z+
    3be2:	f0 81       	ld	r31, Z
    3be4:	e0 2d       	mov	r30, r0
    3be6:	c7 01       	movw	r24, r14
    3be8:	19 95       	eicall
    3bea:	f3 cf       	rjmp	.-26     	; 0x3bd2 <_ZN7TwoWire5writeEPKhj+0x26>
    3bec:	64 2f       	mov	r22, r20
    3bee:	f5 db       	rcall	.-2070   	; 0x33da <twi_transmit>
    3bf0:	c8 01       	movw	r24, r16
    3bf2:	df 91       	pop	r29
    3bf4:	cf 91       	pop	r28
    3bf6:	1f 91       	pop	r17
    3bf8:	0f 91       	pop	r16
    3bfa:	ff 90       	pop	r15
    3bfc:	ef 90       	pop	r14
    3bfe:	df 90       	pop	r13
    3c00:	cf 90       	pop	r12
    3c02:	08 95       	ret

00003c04 <_ZN7TwoWire5writeEh>:
    3c04:	cf 93       	push	r28
    3c06:	df 93       	push	r29
    3c08:	1f 92       	push	r1
    3c0a:	cd b7       	in	r28, 0x3d	; 61
    3c0c:	de b7       	in	r29, 0x3e	; 62
    3c0e:	69 83       	std	Y+1, r22	; 0x01
    3c10:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <_ZN7TwoWire12transmittingE>
    3c14:	22 23       	and	r18, r18
    3c16:	d1 f0       	breq	.+52     	; 0x3c4c <_ZN7TwoWire5writeEh+0x48>
    3c18:	20 91 c1 03 	lds	r18, 0x03C1	; 0x8003c1 <_ZN7TwoWire14txBufferLengthE>
    3c1c:	20 32       	cpi	r18, 0x20	; 32
    3c1e:	40 f0       	brcs	.+16     	; 0x3c30 <_ZN7TwoWire5writeEh+0x2c>
    3c20:	21 e0       	ldi	r18, 0x01	; 1
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	fc 01       	movw	r30, r24
    3c26:	33 83       	std	Z+3, r19	; 0x03
    3c28:	22 83       	std	Z+2, r18	; 0x02
    3c2a:	80 e0       	ldi	r24, 0x00	; 0
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	14 c0       	rjmp	.+40     	; 0x3c58 <_ZN7TwoWire5writeEh+0x54>
    3c30:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <_ZN7TwoWire13txBufferIndexE>
    3c34:	e8 2f       	mov	r30, r24
    3c36:	f0 e0       	ldi	r31, 0x00	; 0
    3c38:	ed 53       	subi	r30, 0x3D	; 61
    3c3a:	fc 4f       	sbci	r31, 0xFC	; 252
    3c3c:	99 81       	ldd	r25, Y+1	; 0x01
    3c3e:	90 83       	st	Z, r25
    3c40:	8f 5f       	subi	r24, 0xFF	; 255
    3c42:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <_ZN7TwoWire13txBufferIndexE>
    3c46:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <_ZN7TwoWire14txBufferLengthE>
    3c4a:	04 c0       	rjmp	.+8      	; 0x3c54 <_ZN7TwoWire5writeEh+0x50>
    3c4c:	61 e0       	ldi	r22, 0x01	; 1
    3c4e:	ce 01       	movw	r24, r28
    3c50:	01 96       	adiw	r24, 0x01	; 1
    3c52:	c3 db       	rcall	.-2170   	; 0x33da <twi_transmit>
    3c54:	81 e0       	ldi	r24, 0x01	; 1
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	0f 90       	pop	r0
    3c5a:	df 91       	pop	r29
    3c5c:	cf 91       	pop	r28
    3c5e:	08 95       	ret

00003c60 <_ZN7TwoWireC1Ev>:
    3c60:	fc 01       	movw	r30, r24
    3c62:	13 82       	std	Z+3, r1	; 0x03
    3c64:	12 82       	std	Z+2, r1	; 0x02
    3c66:	88 ee       	ldi	r24, 0xE8	; 232
    3c68:	93 e0       	ldi	r25, 0x03	; 3
    3c6a:	a0 e0       	ldi	r26, 0x00	; 0
    3c6c:	b0 e0       	ldi	r27, 0x00	; 0
    3c6e:	84 83       	std	Z+4, r24	; 0x04
    3c70:	95 83       	std	Z+5, r25	; 0x05
    3c72:	a6 83       	std	Z+6, r26	; 0x06
    3c74:	b7 83       	std	Z+7, r27	; 0x07
    3c76:	8c e8       	ldi	r24, 0x8C	; 140
    3c78:	92 e0       	ldi	r25, 0x02	; 2
    3c7a:	91 83       	std	Z+1, r25	; 0x01
    3c7c:	80 83       	st	Z, r24
    3c7e:	08 95       	ret

00003c80 <_ZN7TwoWire5beginEv>:
    3c80:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <_ZN7TwoWire13rxBufferIndexE>
    3c84:	10 92 e4 03 	sts	0x03E4, r1	; 0x8003e4 <_ZN7TwoWire14rxBufferLengthE>
    3c88:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <_ZN7TwoWire13txBufferIndexE>
    3c8c:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <_ZN7TwoWire14txBufferLengthE>
    3c90:	65 db       	rcall	.-2358   	; 0x335c <twi_init>
    3c92:	8a ec       	ldi	r24, 0xCA	; 202
    3c94:	9d e1       	ldi	r25, 0x1D	; 29
    3c96:	ce db       	rcall	.-2148   	; 0x3434 <twi_attachSlaveTxEvent>
    3c98:	80 ea       	ldi	r24, 0xA0	; 160
    3c9a:	9d e1       	ldi	r25, 0x1D	; 29
    3c9c:	c6 cb       	rjmp	.-2164   	; 0x342a <twi_attachSlaveRxEvent>

00003c9e <_ZN7TwoWire8setClockEm>:
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	ba 01       	movw	r22, r20
    3ca2:	87 cb       	rjmp	.-2290   	; 0x33b2 <twi_setFrequency>

00003ca4 <_ZN7TwoWire17beginTransmissionEh>:
    3ca4:	81 e0       	ldi	r24, 0x01	; 1
    3ca6:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <_ZN7TwoWire12transmittingE>
    3caa:	60 93 e3 03 	sts	0x03E3, r22	; 0x8003e3 <_ZN7TwoWire9txAddressE>
    3cae:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <_ZN7TwoWire13txBufferIndexE>
    3cb2:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <_ZN7TwoWire14txBufferLengthE>
    3cb6:	08 95       	ret

00003cb8 <_ZN7TwoWire17beginTransmissionEi>:
    3cb8:	f5 cf       	rjmp	.-22     	; 0x3ca4 <_ZN7TwoWire17beginTransmissionEh>

00003cba <_ZN7TwoWire15endTransmissionEh>:
    3cba:	0f 93       	push	r16
    3cbc:	06 2f       	mov	r16, r22
    3cbe:	21 e0       	ldi	r18, 0x01	; 1
    3cc0:	40 91 c1 03 	lds	r20, 0x03C1	; 0x8003c1 <_ZN7TwoWire14txBufferLengthE>
    3cc4:	63 ec       	ldi	r22, 0xC3	; 195
    3cc6:	73 e0       	ldi	r23, 0x03	; 3
    3cc8:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <_ZN7TwoWire9txAddressE>
    3ccc:	b9 dc       	rcall	.-1678   	; 0x3640 <twi_writeTo>
    3cce:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <_ZN7TwoWire13txBufferIndexE>
    3cd2:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <_ZN7TwoWire14txBufferLengthE>
    3cd6:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <_ZN7TwoWire12transmittingE>
    3cda:	0f 91       	pop	r16
    3cdc:	08 95       	ret

00003cde <_ZN7TwoWire11requestFromEhhmhh>:
    3cde:	4f 92       	push	r4
    3ce0:	5f 92       	push	r5
    3ce2:	6f 92       	push	r6
    3ce4:	7f 92       	push	r7
    3ce6:	af 92       	push	r10
    3ce8:	bf 92       	push	r11
    3cea:	cf 92       	push	r12
    3cec:	ef 92       	push	r14
    3cee:	ff 92       	push	r15
    3cf0:	0f 93       	push	r16
    3cf2:	1f 93       	push	r17
    3cf4:	cf 93       	push	r28
    3cf6:	df 93       	push	r29
    3cf8:	5c 01       	movw	r10, r24
    3cfa:	f6 2e       	mov	r15, r22
    3cfc:	d4 2f       	mov	r29, r20
    3cfe:	28 01       	movw	r4, r16
    3d00:	39 01       	movw	r6, r18
    3d02:	ee 20       	and	r14, r14
    3d04:	11 f1       	breq	.+68     	; 0x3d4a <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    3d06:	ce df       	rcall	.-100    	; 0x3ca4 <_ZN7TwoWire17beginTransmissionEh>
    3d08:	ce 2d       	mov	r28, r14
    3d0a:	c4 30       	cpi	r28, 0x04	; 4
    3d0c:	08 f0       	brcs	.+2      	; 0x3d10 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    3d0e:	c3 e0       	ldi	r28, 0x03	; 3
    3d10:	c1 50       	subi	r28, 0x01	; 1
    3d12:	c0 f0       	brcs	.+48     	; 0x3d44 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    3d14:	28 e0       	ldi	r18, 0x08	; 8
    3d16:	c2 9f       	mul	r28, r18
    3d18:	c0 01       	movw	r24, r0
    3d1a:	11 24       	eor	r1, r1
    3d1c:	a3 01       	movw	r20, r6
    3d1e:	92 01       	movw	r18, r4
    3d20:	04 c0       	rjmp	.+8      	; 0x3d2a <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    3d22:	56 95       	lsr	r21
    3d24:	47 95       	ror	r20
    3d26:	37 95       	ror	r19
    3d28:	27 95       	ror	r18
    3d2a:	8a 95       	dec	r24
    3d2c:	d2 f7       	brpl	.-12     	; 0x3d22 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    3d2e:	ca 01       	movw	r24, r20
    3d30:	b9 01       	movw	r22, r18
    3d32:	d5 01       	movw	r26, r10
    3d34:	ed 91       	ld	r30, X+
    3d36:	fc 91       	ld	r31, X
    3d38:	01 90       	ld	r0, Z+
    3d3a:	f0 81       	ld	r31, Z
    3d3c:	e0 2d       	mov	r30, r0
    3d3e:	c5 01       	movw	r24, r10
    3d40:	19 95       	eicall
    3d42:	e6 cf       	rjmp	.-52     	; 0x3d10 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    3d44:	60 e0       	ldi	r22, 0x00	; 0
    3d46:	c5 01       	movw	r24, r10
    3d48:	b8 df       	rcall	.-144    	; 0x3cba <_ZN7TwoWire15endTransmissionEh>
    3d4a:	4d 2f       	mov	r20, r29
    3d4c:	d1 32       	cpi	r29, 0x21	; 33
    3d4e:	08 f0       	brcs	.+2      	; 0x3d52 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    3d50:	40 e2       	ldi	r20, 0x20	; 32
    3d52:	2c 2d       	mov	r18, r12
    3d54:	66 ee       	ldi	r22, 0xE6	; 230
    3d56:	73 e0       	ldi	r23, 0x03	; 3
    3d58:	8f 2d       	mov	r24, r15
    3d5a:	8b db       	rcall	.-2282   	; 0x3472 <twi_readFrom>
    3d5c:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <_ZN7TwoWire13rxBufferIndexE>
    3d60:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <_ZN7TwoWire14rxBufferLengthE>
    3d64:	df 91       	pop	r29
    3d66:	cf 91       	pop	r28
    3d68:	1f 91       	pop	r17
    3d6a:	0f 91       	pop	r16
    3d6c:	ff 90       	pop	r15
    3d6e:	ef 90       	pop	r14
    3d70:	cf 90       	pop	r12
    3d72:	bf 90       	pop	r11
    3d74:	af 90       	pop	r10
    3d76:	7f 90       	pop	r7
    3d78:	6f 90       	pop	r6
    3d7a:	5f 90       	pop	r5
    3d7c:	4f 90       	pop	r4
    3d7e:	08 95       	ret

00003d80 <_ZN7TwoWire11requestFromEhhh>:
    3d80:	cf 92       	push	r12
    3d82:	ef 92       	push	r14
    3d84:	0f 93       	push	r16
    3d86:	1f 93       	push	r17
    3d88:	c2 2e       	mov	r12, r18
    3d8a:	e1 2c       	mov	r14, r1
    3d8c:	00 e0       	ldi	r16, 0x00	; 0
    3d8e:	10 e0       	ldi	r17, 0x00	; 0
    3d90:	98 01       	movw	r18, r16
    3d92:	a5 df       	rcall	.-182    	; 0x3cde <_ZN7TwoWire11requestFromEhhmhh>
    3d94:	1f 91       	pop	r17
    3d96:	0f 91       	pop	r16
    3d98:	ef 90       	pop	r14
    3d9a:	cf 90       	pop	r12
    3d9c:	08 95       	ret

00003d9e <_ZN7TwoWire11requestFromEii>:
    3d9e:	21 e0       	ldi	r18, 0x01	; 1
    3da0:	ef cf       	rjmp	.-34     	; 0x3d80 <_ZN7TwoWire11requestFromEhhh>

00003da2 <_ZN7TwoWire15endTransmissionEv>:
    3da2:	61 e0       	ldi	r22, 0x01	; 1
    3da4:	8a cf       	rjmp	.-236    	; 0x3cba <_ZN7TwoWire15endTransmissionEh>

00003da6 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3da6:	80 eb       	ldi	r24, 0xB0	; 176
    3da8:	93 e0       	ldi	r25, 0x03	; 3
    3daa:	5a cf       	rjmp	.-332    	; 0x3c60 <_ZN7TwoWireC1Ev>

00003dac <__subsf3>:
    3dac:	50 58       	subi	r21, 0x80	; 128

00003dae <__addsf3>:
    3dae:	bb 27       	eor	r27, r27
    3db0:	aa 27       	eor	r26, r26
    3db2:	0e d0       	rcall	.+28     	; 0x3dd0 <__addsf3x>
    3db4:	09 c1       	rjmp	.+530    	; 0x3fc8 <__fp_round>
    3db6:	fa d0       	rcall	.+500    	; 0x3fac <__fp_pscA>
    3db8:	30 f0       	brcs	.+12     	; 0x3dc6 <__addsf3+0x18>
    3dba:	ff d0       	rcall	.+510    	; 0x3fba <__fp_pscB>
    3dbc:	20 f0       	brcs	.+8      	; 0x3dc6 <__addsf3+0x18>
    3dbe:	31 f4       	brne	.+12     	; 0x3dcc <__addsf3+0x1e>
    3dc0:	9f 3f       	cpi	r25, 0xFF	; 255
    3dc2:	11 f4       	brne	.+4      	; 0x3dc8 <__addsf3+0x1a>
    3dc4:	1e f4       	brtc	.+6      	; 0x3dcc <__addsf3+0x1e>
    3dc6:	ef c0       	rjmp	.+478    	; 0x3fa6 <__fp_nan>
    3dc8:	0e f4       	brtc	.+2      	; 0x3dcc <__addsf3+0x1e>
    3dca:	e0 95       	com	r30
    3dcc:	e7 fb       	bst	r30, 7
    3dce:	e5 c0       	rjmp	.+458    	; 0x3f9a <__fp_inf>

00003dd0 <__addsf3x>:
    3dd0:	e9 2f       	mov	r30, r25
    3dd2:	0b d1       	rcall	.+534    	; 0x3fea <__fp_split3>
    3dd4:	80 f3       	brcs	.-32     	; 0x3db6 <__addsf3+0x8>
    3dd6:	ba 17       	cp	r27, r26
    3dd8:	62 07       	cpc	r22, r18
    3dda:	73 07       	cpc	r23, r19
    3ddc:	84 07       	cpc	r24, r20
    3dde:	95 07       	cpc	r25, r21
    3de0:	18 f0       	brcs	.+6      	; 0x3de8 <__addsf3x+0x18>
    3de2:	71 f4       	brne	.+28     	; 0x3e00 <__addsf3x+0x30>
    3de4:	9e f5       	brtc	.+102    	; 0x3e4c <__addsf3x+0x7c>
    3de6:	23 c1       	rjmp	.+582    	; 0x402e <__fp_zero>
    3de8:	0e f4       	brtc	.+2      	; 0x3dec <__addsf3x+0x1c>
    3dea:	e0 95       	com	r30
    3dec:	0b 2e       	mov	r0, r27
    3dee:	ba 2f       	mov	r27, r26
    3df0:	a0 2d       	mov	r26, r0
    3df2:	0b 01       	movw	r0, r22
    3df4:	b9 01       	movw	r22, r18
    3df6:	90 01       	movw	r18, r0
    3df8:	0c 01       	movw	r0, r24
    3dfa:	ca 01       	movw	r24, r20
    3dfc:	a0 01       	movw	r20, r0
    3dfe:	11 24       	eor	r1, r1
    3e00:	ff 27       	eor	r31, r31
    3e02:	59 1b       	sub	r21, r25
    3e04:	99 f0       	breq	.+38     	; 0x3e2c <__addsf3x+0x5c>
    3e06:	59 3f       	cpi	r21, 0xF9	; 249
    3e08:	50 f4       	brcc	.+20     	; 0x3e1e <__addsf3x+0x4e>
    3e0a:	50 3e       	cpi	r21, 0xE0	; 224
    3e0c:	68 f1       	brcs	.+90     	; 0x3e68 <__addsf3x+0x98>
    3e0e:	1a 16       	cp	r1, r26
    3e10:	f0 40       	sbci	r31, 0x00	; 0
    3e12:	a2 2f       	mov	r26, r18
    3e14:	23 2f       	mov	r18, r19
    3e16:	34 2f       	mov	r19, r20
    3e18:	44 27       	eor	r20, r20
    3e1a:	58 5f       	subi	r21, 0xF8	; 248
    3e1c:	f3 cf       	rjmp	.-26     	; 0x3e04 <__addsf3x+0x34>
    3e1e:	46 95       	lsr	r20
    3e20:	37 95       	ror	r19
    3e22:	27 95       	ror	r18
    3e24:	a7 95       	ror	r26
    3e26:	f0 40       	sbci	r31, 0x00	; 0
    3e28:	53 95       	inc	r21
    3e2a:	c9 f7       	brne	.-14     	; 0x3e1e <__addsf3x+0x4e>
    3e2c:	7e f4       	brtc	.+30     	; 0x3e4c <__addsf3x+0x7c>
    3e2e:	1f 16       	cp	r1, r31
    3e30:	ba 0b       	sbc	r27, r26
    3e32:	62 0b       	sbc	r22, r18
    3e34:	73 0b       	sbc	r23, r19
    3e36:	84 0b       	sbc	r24, r20
    3e38:	ba f0       	brmi	.+46     	; 0x3e68 <__addsf3x+0x98>
    3e3a:	91 50       	subi	r25, 0x01	; 1
    3e3c:	a1 f0       	breq	.+40     	; 0x3e66 <__addsf3x+0x96>
    3e3e:	ff 0f       	add	r31, r31
    3e40:	bb 1f       	adc	r27, r27
    3e42:	66 1f       	adc	r22, r22
    3e44:	77 1f       	adc	r23, r23
    3e46:	88 1f       	adc	r24, r24
    3e48:	c2 f7       	brpl	.-16     	; 0x3e3a <__addsf3x+0x6a>
    3e4a:	0e c0       	rjmp	.+28     	; 0x3e68 <__addsf3x+0x98>
    3e4c:	ba 0f       	add	r27, r26
    3e4e:	62 1f       	adc	r22, r18
    3e50:	73 1f       	adc	r23, r19
    3e52:	84 1f       	adc	r24, r20
    3e54:	48 f4       	brcc	.+18     	; 0x3e68 <__addsf3x+0x98>
    3e56:	87 95       	ror	r24
    3e58:	77 95       	ror	r23
    3e5a:	67 95       	ror	r22
    3e5c:	b7 95       	ror	r27
    3e5e:	f7 95       	ror	r31
    3e60:	9e 3f       	cpi	r25, 0xFE	; 254
    3e62:	08 f0       	brcs	.+2      	; 0x3e66 <__addsf3x+0x96>
    3e64:	b3 cf       	rjmp	.-154    	; 0x3dcc <__addsf3+0x1e>
    3e66:	93 95       	inc	r25
    3e68:	88 0f       	add	r24, r24
    3e6a:	08 f0       	brcs	.+2      	; 0x3e6e <__addsf3x+0x9e>
    3e6c:	99 27       	eor	r25, r25
    3e6e:	ee 0f       	add	r30, r30
    3e70:	97 95       	ror	r25
    3e72:	87 95       	ror	r24
    3e74:	08 95       	ret

00003e76 <__fixsfsi>:
    3e76:	04 d0       	rcall	.+8      	; 0x3e80 <__fixunssfsi>
    3e78:	68 94       	set
    3e7a:	b1 11       	cpse	r27, r1
    3e7c:	d9 c0       	rjmp	.+434    	; 0x4030 <__fp_szero>
    3e7e:	08 95       	ret

00003e80 <__fixunssfsi>:
    3e80:	bc d0       	rcall	.+376    	; 0x3ffa <__fp_splitA>
    3e82:	88 f0       	brcs	.+34     	; 0x3ea6 <__fixunssfsi+0x26>
    3e84:	9f 57       	subi	r25, 0x7F	; 127
    3e86:	90 f0       	brcs	.+36     	; 0x3eac <__fixunssfsi+0x2c>
    3e88:	b9 2f       	mov	r27, r25
    3e8a:	99 27       	eor	r25, r25
    3e8c:	b7 51       	subi	r27, 0x17	; 23
    3e8e:	a0 f0       	brcs	.+40     	; 0x3eb8 <__fixunssfsi+0x38>
    3e90:	d1 f0       	breq	.+52     	; 0x3ec6 <__fixunssfsi+0x46>
    3e92:	66 0f       	add	r22, r22
    3e94:	77 1f       	adc	r23, r23
    3e96:	88 1f       	adc	r24, r24
    3e98:	99 1f       	adc	r25, r25
    3e9a:	1a f0       	brmi	.+6      	; 0x3ea2 <__fixunssfsi+0x22>
    3e9c:	ba 95       	dec	r27
    3e9e:	c9 f7       	brne	.-14     	; 0x3e92 <__fixunssfsi+0x12>
    3ea0:	12 c0       	rjmp	.+36     	; 0x3ec6 <__fixunssfsi+0x46>
    3ea2:	b1 30       	cpi	r27, 0x01	; 1
    3ea4:	81 f0       	breq	.+32     	; 0x3ec6 <__fixunssfsi+0x46>
    3ea6:	c3 d0       	rcall	.+390    	; 0x402e <__fp_zero>
    3ea8:	b1 e0       	ldi	r27, 0x01	; 1
    3eaa:	08 95       	ret
    3eac:	c0 c0       	rjmp	.+384    	; 0x402e <__fp_zero>
    3eae:	67 2f       	mov	r22, r23
    3eb0:	78 2f       	mov	r23, r24
    3eb2:	88 27       	eor	r24, r24
    3eb4:	b8 5f       	subi	r27, 0xF8	; 248
    3eb6:	39 f0       	breq	.+14     	; 0x3ec6 <__fixunssfsi+0x46>
    3eb8:	b9 3f       	cpi	r27, 0xF9	; 249
    3eba:	cc f3       	brlt	.-14     	; 0x3eae <__fixunssfsi+0x2e>
    3ebc:	86 95       	lsr	r24
    3ebe:	77 95       	ror	r23
    3ec0:	67 95       	ror	r22
    3ec2:	b3 95       	inc	r27
    3ec4:	d9 f7       	brne	.-10     	; 0x3ebc <__fixunssfsi+0x3c>
    3ec6:	3e f4       	brtc	.+14     	; 0x3ed6 <__fixunssfsi+0x56>
    3ec8:	90 95       	com	r25
    3eca:	80 95       	com	r24
    3ecc:	70 95       	com	r23
    3ece:	61 95       	neg	r22
    3ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed2:	8f 4f       	sbci	r24, 0xFF	; 255
    3ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed6:	08 95       	ret

00003ed8 <__floatunsisf>:
    3ed8:	e8 94       	clt
    3eda:	09 c0       	rjmp	.+18     	; 0x3eee <__floatsisf+0x12>

00003edc <__floatsisf>:
    3edc:	97 fb       	bst	r25, 7
    3ede:	3e f4       	brtc	.+14     	; 0x3eee <__floatsisf+0x12>
    3ee0:	90 95       	com	r25
    3ee2:	80 95       	com	r24
    3ee4:	70 95       	com	r23
    3ee6:	61 95       	neg	r22
    3ee8:	7f 4f       	sbci	r23, 0xFF	; 255
    3eea:	8f 4f       	sbci	r24, 0xFF	; 255
    3eec:	9f 4f       	sbci	r25, 0xFF	; 255
    3eee:	99 23       	and	r25, r25
    3ef0:	a9 f0       	breq	.+42     	; 0x3f1c <__floatsisf+0x40>
    3ef2:	f9 2f       	mov	r31, r25
    3ef4:	96 e9       	ldi	r25, 0x96	; 150
    3ef6:	bb 27       	eor	r27, r27
    3ef8:	93 95       	inc	r25
    3efa:	f6 95       	lsr	r31
    3efc:	87 95       	ror	r24
    3efe:	77 95       	ror	r23
    3f00:	67 95       	ror	r22
    3f02:	b7 95       	ror	r27
    3f04:	f1 11       	cpse	r31, r1
    3f06:	f8 cf       	rjmp	.-16     	; 0x3ef8 <__floatsisf+0x1c>
    3f08:	fa f4       	brpl	.+62     	; 0x3f48 <__floatsisf+0x6c>
    3f0a:	bb 0f       	add	r27, r27
    3f0c:	11 f4       	brne	.+4      	; 0x3f12 <__floatsisf+0x36>
    3f0e:	60 ff       	sbrs	r22, 0
    3f10:	1b c0       	rjmp	.+54     	; 0x3f48 <__floatsisf+0x6c>
    3f12:	6f 5f       	subi	r22, 0xFF	; 255
    3f14:	7f 4f       	sbci	r23, 0xFF	; 255
    3f16:	8f 4f       	sbci	r24, 0xFF	; 255
    3f18:	9f 4f       	sbci	r25, 0xFF	; 255
    3f1a:	16 c0       	rjmp	.+44     	; 0x3f48 <__floatsisf+0x6c>
    3f1c:	88 23       	and	r24, r24
    3f1e:	11 f0       	breq	.+4      	; 0x3f24 <__floatsisf+0x48>
    3f20:	96 e9       	ldi	r25, 0x96	; 150
    3f22:	11 c0       	rjmp	.+34     	; 0x3f46 <__floatsisf+0x6a>
    3f24:	77 23       	and	r23, r23
    3f26:	21 f0       	breq	.+8      	; 0x3f30 <__floatsisf+0x54>
    3f28:	9e e8       	ldi	r25, 0x8E	; 142
    3f2a:	87 2f       	mov	r24, r23
    3f2c:	76 2f       	mov	r23, r22
    3f2e:	05 c0       	rjmp	.+10     	; 0x3f3a <__floatsisf+0x5e>
    3f30:	66 23       	and	r22, r22
    3f32:	71 f0       	breq	.+28     	; 0x3f50 <__floatsisf+0x74>
    3f34:	96 e8       	ldi	r25, 0x86	; 134
    3f36:	86 2f       	mov	r24, r22
    3f38:	70 e0       	ldi	r23, 0x00	; 0
    3f3a:	60 e0       	ldi	r22, 0x00	; 0
    3f3c:	2a f0       	brmi	.+10     	; 0x3f48 <__floatsisf+0x6c>
    3f3e:	9a 95       	dec	r25
    3f40:	66 0f       	add	r22, r22
    3f42:	77 1f       	adc	r23, r23
    3f44:	88 1f       	adc	r24, r24
    3f46:	da f7       	brpl	.-10     	; 0x3f3e <__floatsisf+0x62>
    3f48:	88 0f       	add	r24, r24
    3f4a:	96 95       	lsr	r25
    3f4c:	87 95       	ror	r24
    3f4e:	97 f9       	bld	r25, 7
    3f50:	08 95       	ret

00003f52 <__fp_cmp>:
    3f52:	99 0f       	add	r25, r25
    3f54:	00 08       	sbc	r0, r0
    3f56:	55 0f       	add	r21, r21
    3f58:	aa 0b       	sbc	r26, r26
    3f5a:	e0 e8       	ldi	r30, 0x80	; 128
    3f5c:	fe ef       	ldi	r31, 0xFE	; 254
    3f5e:	16 16       	cp	r1, r22
    3f60:	17 06       	cpc	r1, r23
    3f62:	e8 07       	cpc	r30, r24
    3f64:	f9 07       	cpc	r31, r25
    3f66:	c0 f0       	brcs	.+48     	; 0x3f98 <__fp_cmp+0x46>
    3f68:	12 16       	cp	r1, r18
    3f6a:	13 06       	cpc	r1, r19
    3f6c:	e4 07       	cpc	r30, r20
    3f6e:	f5 07       	cpc	r31, r21
    3f70:	98 f0       	brcs	.+38     	; 0x3f98 <__fp_cmp+0x46>
    3f72:	62 1b       	sub	r22, r18
    3f74:	73 0b       	sbc	r23, r19
    3f76:	84 0b       	sbc	r24, r20
    3f78:	95 0b       	sbc	r25, r21
    3f7a:	39 f4       	brne	.+14     	; 0x3f8a <__fp_cmp+0x38>
    3f7c:	0a 26       	eor	r0, r26
    3f7e:	61 f0       	breq	.+24     	; 0x3f98 <__fp_cmp+0x46>
    3f80:	23 2b       	or	r18, r19
    3f82:	24 2b       	or	r18, r20
    3f84:	25 2b       	or	r18, r21
    3f86:	21 f4       	brne	.+8      	; 0x3f90 <__fp_cmp+0x3e>
    3f88:	08 95       	ret
    3f8a:	0a 26       	eor	r0, r26
    3f8c:	09 f4       	brne	.+2      	; 0x3f90 <__fp_cmp+0x3e>
    3f8e:	a1 40       	sbci	r26, 0x01	; 1
    3f90:	a6 95       	lsr	r26
    3f92:	8f ef       	ldi	r24, 0xFF	; 255
    3f94:	81 1d       	adc	r24, r1
    3f96:	81 1d       	adc	r24, r1
    3f98:	08 95       	ret

00003f9a <__fp_inf>:
    3f9a:	97 f9       	bld	r25, 7
    3f9c:	9f 67       	ori	r25, 0x7F	; 127
    3f9e:	80 e8       	ldi	r24, 0x80	; 128
    3fa0:	70 e0       	ldi	r23, 0x00	; 0
    3fa2:	60 e0       	ldi	r22, 0x00	; 0
    3fa4:	08 95       	ret

00003fa6 <__fp_nan>:
    3fa6:	9f ef       	ldi	r25, 0xFF	; 255
    3fa8:	80 ec       	ldi	r24, 0xC0	; 192
    3faa:	08 95       	ret

00003fac <__fp_pscA>:
    3fac:	00 24       	eor	r0, r0
    3fae:	0a 94       	dec	r0
    3fb0:	16 16       	cp	r1, r22
    3fb2:	17 06       	cpc	r1, r23
    3fb4:	18 06       	cpc	r1, r24
    3fb6:	09 06       	cpc	r0, r25
    3fb8:	08 95       	ret

00003fba <__fp_pscB>:
    3fba:	00 24       	eor	r0, r0
    3fbc:	0a 94       	dec	r0
    3fbe:	12 16       	cp	r1, r18
    3fc0:	13 06       	cpc	r1, r19
    3fc2:	14 06       	cpc	r1, r20
    3fc4:	05 06       	cpc	r0, r21
    3fc6:	08 95       	ret

00003fc8 <__fp_round>:
    3fc8:	09 2e       	mov	r0, r25
    3fca:	03 94       	inc	r0
    3fcc:	00 0c       	add	r0, r0
    3fce:	11 f4       	brne	.+4      	; 0x3fd4 <__fp_round+0xc>
    3fd0:	88 23       	and	r24, r24
    3fd2:	52 f0       	brmi	.+20     	; 0x3fe8 <__fp_round+0x20>
    3fd4:	bb 0f       	add	r27, r27
    3fd6:	40 f4       	brcc	.+16     	; 0x3fe8 <__fp_round+0x20>
    3fd8:	bf 2b       	or	r27, r31
    3fda:	11 f4       	brne	.+4      	; 0x3fe0 <__fp_round+0x18>
    3fdc:	60 ff       	sbrs	r22, 0
    3fde:	04 c0       	rjmp	.+8      	; 0x3fe8 <__fp_round+0x20>
    3fe0:	6f 5f       	subi	r22, 0xFF	; 255
    3fe2:	7f 4f       	sbci	r23, 0xFF	; 255
    3fe4:	8f 4f       	sbci	r24, 0xFF	; 255
    3fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    3fe8:	08 95       	ret

00003fea <__fp_split3>:
    3fea:	57 fd       	sbrc	r21, 7
    3fec:	90 58       	subi	r25, 0x80	; 128
    3fee:	44 0f       	add	r20, r20
    3ff0:	55 1f       	adc	r21, r21
    3ff2:	59 f0       	breq	.+22     	; 0x400a <__fp_splitA+0x10>
    3ff4:	5f 3f       	cpi	r21, 0xFF	; 255
    3ff6:	71 f0       	breq	.+28     	; 0x4014 <__fp_splitA+0x1a>
    3ff8:	47 95       	ror	r20

00003ffa <__fp_splitA>:
    3ffa:	88 0f       	add	r24, r24
    3ffc:	97 fb       	bst	r25, 7
    3ffe:	99 1f       	adc	r25, r25
    4000:	61 f0       	breq	.+24     	; 0x401a <__fp_splitA+0x20>
    4002:	9f 3f       	cpi	r25, 0xFF	; 255
    4004:	79 f0       	breq	.+30     	; 0x4024 <__fp_splitA+0x2a>
    4006:	87 95       	ror	r24
    4008:	08 95       	ret
    400a:	12 16       	cp	r1, r18
    400c:	13 06       	cpc	r1, r19
    400e:	14 06       	cpc	r1, r20
    4010:	55 1f       	adc	r21, r21
    4012:	f2 cf       	rjmp	.-28     	; 0x3ff8 <__fp_split3+0xe>
    4014:	46 95       	lsr	r20
    4016:	f1 df       	rcall	.-30     	; 0x3ffa <__fp_splitA>
    4018:	08 c0       	rjmp	.+16     	; 0x402a <__fp_splitA+0x30>
    401a:	16 16       	cp	r1, r22
    401c:	17 06       	cpc	r1, r23
    401e:	18 06       	cpc	r1, r24
    4020:	99 1f       	adc	r25, r25
    4022:	f1 cf       	rjmp	.-30     	; 0x4006 <__fp_splitA+0xc>
    4024:	86 95       	lsr	r24
    4026:	71 05       	cpc	r23, r1
    4028:	61 05       	cpc	r22, r1
    402a:	08 94       	sec
    402c:	08 95       	ret

0000402e <__fp_zero>:
    402e:	e8 94       	clt

00004030 <__fp_szero>:
    4030:	bb 27       	eor	r27, r27
    4032:	66 27       	eor	r22, r22
    4034:	77 27       	eor	r23, r23
    4036:	cb 01       	movw	r24, r22
    4038:	97 f9       	bld	r25, 7
    403a:	08 95       	ret

0000403c <__gesf2>:
    403c:	8a df       	rcall	.-236    	; 0x3f52 <__fp_cmp>
    403e:	08 f4       	brcc	.+2      	; 0x4042 <__gesf2+0x6>
    4040:	8f ef       	ldi	r24, 0xFF	; 255
    4042:	08 95       	ret

00004044 <__mulsf3>:
    4044:	0b d0       	rcall	.+22     	; 0x405c <__mulsf3x>
    4046:	c0 cf       	rjmp	.-128    	; 0x3fc8 <__fp_round>
    4048:	b1 df       	rcall	.-158    	; 0x3fac <__fp_pscA>
    404a:	28 f0       	brcs	.+10     	; 0x4056 <__mulsf3+0x12>
    404c:	b6 df       	rcall	.-148    	; 0x3fba <__fp_pscB>
    404e:	18 f0       	brcs	.+6      	; 0x4056 <__mulsf3+0x12>
    4050:	95 23       	and	r25, r21
    4052:	09 f0       	breq	.+2      	; 0x4056 <__mulsf3+0x12>
    4054:	a2 cf       	rjmp	.-188    	; 0x3f9a <__fp_inf>
    4056:	a7 cf       	rjmp	.-178    	; 0x3fa6 <__fp_nan>
    4058:	11 24       	eor	r1, r1
    405a:	ea cf       	rjmp	.-44     	; 0x4030 <__fp_szero>

0000405c <__mulsf3x>:
    405c:	c6 df       	rcall	.-116    	; 0x3fea <__fp_split3>
    405e:	a0 f3       	brcs	.-24     	; 0x4048 <__mulsf3+0x4>

00004060 <__mulsf3_pse>:
    4060:	95 9f       	mul	r25, r21
    4062:	d1 f3       	breq	.-12     	; 0x4058 <__mulsf3+0x14>
    4064:	95 0f       	add	r25, r21
    4066:	50 e0       	ldi	r21, 0x00	; 0
    4068:	55 1f       	adc	r21, r21
    406a:	62 9f       	mul	r22, r18
    406c:	f0 01       	movw	r30, r0
    406e:	72 9f       	mul	r23, r18
    4070:	bb 27       	eor	r27, r27
    4072:	f0 0d       	add	r31, r0
    4074:	b1 1d       	adc	r27, r1
    4076:	63 9f       	mul	r22, r19
    4078:	aa 27       	eor	r26, r26
    407a:	f0 0d       	add	r31, r0
    407c:	b1 1d       	adc	r27, r1
    407e:	aa 1f       	adc	r26, r26
    4080:	64 9f       	mul	r22, r20
    4082:	66 27       	eor	r22, r22
    4084:	b0 0d       	add	r27, r0
    4086:	a1 1d       	adc	r26, r1
    4088:	66 1f       	adc	r22, r22
    408a:	82 9f       	mul	r24, r18
    408c:	22 27       	eor	r18, r18
    408e:	b0 0d       	add	r27, r0
    4090:	a1 1d       	adc	r26, r1
    4092:	62 1f       	adc	r22, r18
    4094:	73 9f       	mul	r23, r19
    4096:	b0 0d       	add	r27, r0
    4098:	a1 1d       	adc	r26, r1
    409a:	62 1f       	adc	r22, r18
    409c:	83 9f       	mul	r24, r19
    409e:	a0 0d       	add	r26, r0
    40a0:	61 1d       	adc	r22, r1
    40a2:	22 1f       	adc	r18, r18
    40a4:	74 9f       	mul	r23, r20
    40a6:	33 27       	eor	r19, r19
    40a8:	a0 0d       	add	r26, r0
    40aa:	61 1d       	adc	r22, r1
    40ac:	23 1f       	adc	r18, r19
    40ae:	84 9f       	mul	r24, r20
    40b0:	60 0d       	add	r22, r0
    40b2:	21 1d       	adc	r18, r1
    40b4:	82 2f       	mov	r24, r18
    40b6:	76 2f       	mov	r23, r22
    40b8:	6a 2f       	mov	r22, r26
    40ba:	11 24       	eor	r1, r1
    40bc:	9f 57       	subi	r25, 0x7F	; 127
    40be:	50 40       	sbci	r21, 0x00	; 0
    40c0:	8a f0       	brmi	.+34     	; 0x40e4 <__mulsf3_pse+0x84>
    40c2:	e1 f0       	breq	.+56     	; 0x40fc <__mulsf3_pse+0x9c>
    40c4:	88 23       	and	r24, r24
    40c6:	4a f0       	brmi	.+18     	; 0x40da <__mulsf3_pse+0x7a>
    40c8:	ee 0f       	add	r30, r30
    40ca:	ff 1f       	adc	r31, r31
    40cc:	bb 1f       	adc	r27, r27
    40ce:	66 1f       	adc	r22, r22
    40d0:	77 1f       	adc	r23, r23
    40d2:	88 1f       	adc	r24, r24
    40d4:	91 50       	subi	r25, 0x01	; 1
    40d6:	50 40       	sbci	r21, 0x00	; 0
    40d8:	a9 f7       	brne	.-22     	; 0x40c4 <__mulsf3_pse+0x64>
    40da:	9e 3f       	cpi	r25, 0xFE	; 254
    40dc:	51 05       	cpc	r21, r1
    40de:	70 f0       	brcs	.+28     	; 0x40fc <__mulsf3_pse+0x9c>
    40e0:	5c cf       	rjmp	.-328    	; 0x3f9a <__fp_inf>
    40e2:	a6 cf       	rjmp	.-180    	; 0x4030 <__fp_szero>
    40e4:	5f 3f       	cpi	r21, 0xFF	; 255
    40e6:	ec f3       	brlt	.-6      	; 0x40e2 <__mulsf3_pse+0x82>
    40e8:	98 3e       	cpi	r25, 0xE8	; 232
    40ea:	dc f3       	brlt	.-10     	; 0x40e2 <__mulsf3_pse+0x82>
    40ec:	86 95       	lsr	r24
    40ee:	77 95       	ror	r23
    40f0:	67 95       	ror	r22
    40f2:	b7 95       	ror	r27
    40f4:	f7 95       	ror	r31
    40f6:	e7 95       	ror	r30
    40f8:	9f 5f       	subi	r25, 0xFF	; 255
    40fa:	c1 f7       	brne	.-16     	; 0x40ec <__mulsf3_pse+0x8c>
    40fc:	fe 2b       	or	r31, r30
    40fe:	88 0f       	add	r24, r24
    4100:	91 1d       	adc	r25, r1
    4102:	96 95       	lsr	r25
    4104:	87 95       	ror	r24
    4106:	97 f9       	bld	r25, 7
    4108:	08 95       	ret

0000410a <__cxa_pure_virtual>:
    410a:	0e 94 4b 2a 	call	0x5496	; 0x5496 <abort>

0000410e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    410e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    4110:	91 8d       	ldd	r25, Z+25	; 0x19
    4112:	22 8d       	ldd	r18, Z+26	; 0x1a
    4114:	89 2f       	mov	r24, r25
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	80 5c       	subi	r24, 0xC0	; 192
    411a:	9f 4f       	sbci	r25, 0xFF	; 255
    411c:	82 1b       	sub	r24, r18
    411e:	91 09       	sbc	r25, r1
}
    4120:	8f 73       	andi	r24, 0x3F	; 63
    4122:	99 27       	eor	r25, r25
    4124:	08 95       	ret

00004126 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    4126:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    4128:	91 8d       	ldd	r25, Z+25	; 0x19
    412a:	82 8d       	ldd	r24, Z+26	; 0x1a
    412c:	98 17       	cp	r25, r24
    412e:	31 f0       	breq	.+12     	; 0x413c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    4130:	82 8d       	ldd	r24, Z+26	; 0x1a
    4132:	e8 0f       	add	r30, r24
    4134:	f1 1d       	adc	r31, r1
    4136:	85 8d       	ldd	r24, Z+29	; 0x1d
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    413c:	8f ef       	ldi	r24, 0xFF	; 255
    413e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    4140:	08 95       	ret

00004142 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    4142:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    4144:	91 8d       	ldd	r25, Z+25	; 0x19
    4146:	82 8d       	ldd	r24, Z+26	; 0x1a
    4148:	98 17       	cp	r25, r24
    414a:	61 f0       	breq	.+24     	; 0x4164 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    414c:	82 8d       	ldd	r24, Z+26	; 0x1a
    414e:	df 01       	movw	r26, r30
    4150:	a8 0f       	add	r26, r24
    4152:	b1 1d       	adc	r27, r1
    4154:	5d 96       	adiw	r26, 0x1d	; 29
    4156:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    4158:	92 8d       	ldd	r25, Z+26	; 0x1a
    415a:	9f 5f       	subi	r25, 0xFF	; 255
    415c:	9f 73       	andi	r25, 0x3F	; 63
    415e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4164:	8f ef       	ldi	r24, 0xFF	; 255
    4166:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    4168:	08 95       	ret

0000416a <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    416a:	fc 01       	movw	r30, r24
    416c:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    416e:	44 8d       	ldd	r20, Z+28	; 0x1c
    4170:	25 2f       	mov	r18, r21
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	84 2f       	mov	r24, r20
    4176:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    4178:	82 1b       	sub	r24, r18
    417a:	93 0b       	sbc	r25, r19
    417c:	54 17       	cp	r21, r20
    417e:	10 f0       	brcs	.+4      	; 0x4184 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    4180:	cf 96       	adiw	r24, 0x3f	; 63
    4182:	08 95       	ret
  return tail - head - 1;
    4184:	01 97       	sbiw	r24, 0x01	; 1
}
    4186:	08 95       	ret

00004188 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    4188:	81 e5       	ldi	r24, 0x51	; 81
    418a:	92 e2       	ldi	r25, 0x22	; 34
    418c:	89 2b       	or	r24, r25
    418e:	39 f0       	breq	.+14     	; 0x419e <_Z14serialEventRunv+0x16>
    4190:	80 e0       	ldi	r24, 0x00	; 0
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	89 2b       	or	r24, r25
    4196:	19 f0       	breq	.+6      	; 0x419e <_Z14serialEventRunv+0x16>
    4198:	84 d1       	rcall	.+776    	; 0x44a2 <_Z17Serial0_availablev>
    419a:	81 11       	cpse	r24, r1
    419c:	25 c0       	rjmp	.+74     	; 0x41e8 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    419e:	80 e0       	ldi	r24, 0x00	; 0
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	89 2b       	or	r24, r25
    41a4:	41 f0       	breq	.+16     	; 0x41b6 <_Z14serialEventRunv+0x2e>
    41a6:	80 e0       	ldi	r24, 0x00	; 0
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	89 2b       	or	r24, r25
    41ac:	21 f0       	breq	.+8      	; 0x41b6 <_Z14serialEventRunv+0x2e>
    41ae:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    41b2:	81 11       	cpse	r24, r1
    41b4:	1c c0       	rjmp	.+56     	; 0x41ee <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    41b6:	80 e0       	ldi	r24, 0x00	; 0
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	89 2b       	or	r24, r25
    41bc:	41 f0       	breq	.+16     	; 0x41ce <_Z14serialEventRunv+0x46>
    41be:	80 e0       	ldi	r24, 0x00	; 0
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	89 2b       	or	r24, r25
    41c4:	21 f0       	breq	.+8      	; 0x41ce <_Z14serialEventRunv+0x46>
    41c6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    41ca:	81 11       	cpse	r24, r1
    41cc:	13 c0       	rjmp	.+38     	; 0x41f4 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    41ce:	80 e0       	ldi	r24, 0x00	; 0
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	89 2b       	or	r24, r25
    41d4:	a1 f0       	breq	.+40     	; 0x41fe <_Z14serialEventRunv+0x76>
    41d6:	80 e0       	ldi	r24, 0x00	; 0
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	89 2b       	or	r24, r25
    41dc:	81 f0       	breq	.+32     	; 0x41fe <_Z14serialEventRunv+0x76>
    41de:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    41e2:	81 11       	cpse	r24, r1
    41e4:	0a c0       	rjmp	.+20     	; 0x41fa <_Z14serialEventRunv+0x72>
    41e6:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    41e8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    41ec:	d8 cf       	rjmp	.-80     	; 0x419e <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    41ee:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    41f2:	e1 cf       	rjmp	.-62     	; 0x41b6 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    41f4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    41f8:	ea cf       	rjmp	.-44     	; 0x41ce <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    41fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    41fe:	08 95       	ret

00004200 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    4200:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    4202:	84 8d       	ldd	r24, Z+28	; 0x1c
    4204:	df 01       	movw	r26, r30
    4206:	a8 0f       	add	r26, r24
    4208:	b1 1d       	adc	r27, r1
    420a:	a3 5a       	subi	r26, 0xA3	; 163
    420c:	bf 4f       	sbci	r27, 0xFF	; 255
    420e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    4210:	84 8d       	ldd	r24, Z+28	; 0x1c
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	01 96       	adiw	r24, 0x01	; 1
    4216:	8f 73       	andi	r24, 0x3F	; 63
    4218:	99 27       	eor	r25, r25
    421a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    421c:	a6 89       	ldd	r26, Z+22	; 0x16
    421e:	b7 89       	ldd	r27, Z+23	; 0x17
    4220:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    4222:	a0 89       	ldd	r26, Z+16	; 0x10
    4224:	b1 89       	ldd	r27, Z+17	; 0x11
    4226:	8c 91       	ld	r24, X
    4228:	83 70       	andi	r24, 0x03	; 3
    422a:	80 64       	ori	r24, 0x40	; 64
    422c:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    422e:	93 8d       	ldd	r25, Z+27	; 0x1b
    4230:	84 8d       	ldd	r24, Z+28	; 0x1c
    4232:	98 13       	cpse	r25, r24
    4234:	06 c0       	rjmp	.+12     	; 0x4242 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    4236:	02 88       	ldd	r0, Z+18	; 0x12
    4238:	f3 89       	ldd	r31, Z+19	; 0x13
    423a:	e0 2d       	mov	r30, r0
    423c:	80 81       	ld	r24, Z
    423e:	8f 7d       	andi	r24, 0xDF	; 223
    4240:	80 83       	st	Z, r24
    4242:	08 95       	ret

00004244 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    4244:	ef 92       	push	r14
    4246:	ff 92       	push	r15
    4248:	0f 93       	push	r16
    424a:	1f 93       	push	r17
    424c:	cf 93       	push	r28
    424e:	df 93       	push	r29
    4250:	ec 01       	movw	r28, r24
  _written = true;
    4252:	81 e0       	ldi	r24, 0x01	; 1
    4254:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    4256:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4258:	8c 8d       	ldd	r24, Y+28	; 0x1c
    425a:	98 13       	cpse	r25, r24
    425c:	05 c0       	rjmp	.+10     	; 0x4268 <_ZN14HardwareSerial5writeEh+0x24>
    425e:	e8 89       	ldd	r30, Y+16	; 0x10
    4260:	f9 89       	ldd	r31, Y+17	; 0x11
    4262:	80 81       	ld	r24, Z
    4264:	85 fd       	sbrc	r24, 5
    4266:	25 c0       	rjmp	.+74     	; 0x42b2 <_ZN14HardwareSerial5writeEh+0x6e>
    4268:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    426a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    426c:	10 e0       	ldi	r17, 0x00	; 0
    426e:	0f 5f       	subi	r16, 0xFF	; 255
    4270:	1f 4f       	sbci	r17, 0xFF	; 255
    4272:	0f 73       	andi	r16, 0x3F	; 63
    4274:	11 27       	eor	r17, r17
    4276:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    4278:	8c 8d       	ldd	r24, Y+28	; 0x1c
    427a:	e8 12       	cpse	r14, r24
    427c:	0b c0       	rjmp	.+22     	; 0x4294 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    427e:	0f b6       	in	r0, 0x3f	; 63
    4280:	07 fc       	sbrc	r0, 7
    4282:	fa cf       	rjmp	.-12     	; 0x4278 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    4284:	e8 89       	ldd	r30, Y+16	; 0x10
    4286:	f9 89       	ldd	r31, Y+17	; 0x11
    4288:	80 81       	ld	r24, Z
    428a:	85 ff       	sbrs	r24, 5
    428c:	f5 cf       	rjmp	.-22     	; 0x4278 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    428e:	ce 01       	movw	r24, r28
    4290:	b7 df       	rcall	.-146    	; 0x4200 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    4292:	f2 cf       	rjmp	.-28     	; 0x4278 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    4294:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4296:	fe 01       	movw	r30, r28
    4298:	e8 0f       	add	r30, r24
    429a:	f1 1d       	adc	r31, r1
    429c:	e3 5a       	subi	r30, 0xA3	; 163
    429e:	ff 4f       	sbci	r31, 0xFF	; 255
    42a0:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    42a2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    42a4:	f8 94       	cli
    _tx_buffer_head = i;
    42a6:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    42a8:	ea 89       	ldd	r30, Y+18	; 0x12
    42aa:	fb 89       	ldd	r31, Y+19	; 0x13
    42ac:	80 81       	ld	r24, Z
    42ae:	80 62       	ori	r24, 0x20	; 32
    42b0:	0a c0       	rjmp	.+20     	; 0x42c6 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    42b2:	9f b7       	in	r25, 0x3f	; 63
    42b4:	f8 94       	cli
      *_udr = c;
    42b6:	ee 89       	ldd	r30, Y+22	; 0x16
    42b8:	ff 89       	ldd	r31, Y+23	; 0x17
    42ba:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    42bc:	e8 89       	ldd	r30, Y+16	; 0x10
    42be:	f9 89       	ldd	r31, Y+17	; 0x11
    42c0:	80 81       	ld	r24, Z
    42c2:	83 70       	andi	r24, 0x03	; 3
    42c4:	80 64       	ori	r24, 0x40	; 64
    42c6:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    42c8:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    42ca:	81 e0       	ldi	r24, 0x01	; 1
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	df 91       	pop	r29
    42d0:	cf 91       	pop	r28
    42d2:	1f 91       	pop	r17
    42d4:	0f 91       	pop	r16
    42d6:	ff 90       	pop	r15
    42d8:	ef 90       	pop	r14
    42da:	08 95       	ret

000042dc <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    42dc:	cf 93       	push	r28
    42de:	df 93       	push	r29
    42e0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    42e2:	88 8d       	ldd	r24, Y+24	; 0x18
    42e4:	88 23       	and	r24, r24
    42e6:	c1 f0       	breq	.+48     	; 0x4318 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    42e8:	ea 89       	ldd	r30, Y+18	; 0x12
    42ea:	fb 89       	ldd	r31, Y+19	; 0x13
    42ec:	80 81       	ld	r24, Z
    42ee:	85 fd       	sbrc	r24, 5
    42f0:	05 c0       	rjmp	.+10     	; 0x42fc <_ZN14HardwareSerial5flushEv+0x20>
    42f2:	a8 89       	ldd	r26, Y+16	; 0x10
    42f4:	b9 89       	ldd	r27, Y+17	; 0x11
    42f6:	8c 91       	ld	r24, X
    42f8:	86 fd       	sbrc	r24, 6
    42fa:	0e c0       	rjmp	.+28     	; 0x4318 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    42fc:	0f b6       	in	r0, 0x3f	; 63
    42fe:	07 fc       	sbrc	r0, 7
    4300:	f5 cf       	rjmp	.-22     	; 0x42ec <_ZN14HardwareSerial5flushEv+0x10>
    4302:	80 81       	ld	r24, Z
    4304:	85 ff       	sbrs	r24, 5
    4306:	f2 cf       	rjmp	.-28     	; 0x42ec <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    4308:	a8 89       	ldd	r26, Y+16	; 0x10
    430a:	b9 89       	ldd	r27, Y+17	; 0x11
    430c:	8c 91       	ld	r24, X
    430e:	85 ff       	sbrs	r24, 5
    4310:	ed cf       	rjmp	.-38     	; 0x42ec <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    4312:	ce 01       	movw	r24, r28
    4314:	75 df       	rcall	.-278    	; 0x4200 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    4316:	e8 cf       	rjmp	.-48     	; 0x42e8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    4318:	df 91       	pop	r29
    431a:	cf 91       	pop	r28
    431c:	08 95       	ret

0000431e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    431e:	cf 92       	push	r12
    4320:	df 92       	push	r13
    4322:	ef 92       	push	r14
    4324:	ff 92       	push	r15
    4326:	1f 93       	push	r17
    4328:	cf 93       	push	r28
    432a:	df 93       	push	r29
    432c:	ec 01       	movw	r28, r24
    432e:	6a 01       	movw	r12, r20
    4330:	7b 01       	movw	r14, r22
    4332:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    4334:	e8 89       	ldd	r30, Y+16	; 0x10
    4336:	f9 89       	ldd	r31, Y+17	; 0x11
    4338:	82 e0       	ldi	r24, 0x02	; 2
    433a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    433c:	41 15       	cp	r20, r1
    433e:	51 4e       	sbci	r21, 0xE1	; 225
    4340:	61 05       	cpc	r22, r1
    4342:	71 05       	cpc	r23, r1
    4344:	a9 f0       	breq	.+42     	; 0x4370 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4346:	60 e0       	ldi	r22, 0x00	; 0
    4348:	79 e0       	ldi	r23, 0x09	; 9
    434a:	8d e3       	ldi	r24, 0x3D	; 61
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	a7 01       	movw	r20, r14
    4350:	96 01       	movw	r18, r12
    4352:	5d d6       	rcall	.+3258   	; 0x500e <__udivmodsi4>
    4354:	da 01       	movw	r26, r20
    4356:	c9 01       	movw	r24, r18
    4358:	01 97       	sbiw	r24, 0x01	; 1
    435a:	a1 09       	sbc	r26, r1
    435c:	b1 09       	sbc	r27, r1
    435e:	b6 95       	lsr	r27
    4360:	a7 95       	ror	r26
    4362:	97 95       	ror	r25
    4364:	87 95       	ror	r24
    4366:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4368:	21 15       	cp	r18, r1
    436a:	80 e1       	ldi	r24, 0x10	; 16
    436c:	38 07       	cpc	r19, r24
    436e:	a0 f0       	brcs	.+40     	; 0x4398 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    4370:	e8 89       	ldd	r30, Y+16	; 0x10
    4372:	f9 89       	ldd	r31, Y+17	; 0x11
    4374:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4376:	60 e8       	ldi	r22, 0x80	; 128
    4378:	74 e8       	ldi	r23, 0x84	; 132
    437a:	8e e1       	ldi	r24, 0x1E	; 30
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	a7 01       	movw	r20, r14
    4380:	96 01       	movw	r18, r12
    4382:	45 d6       	rcall	.+3210   	; 0x500e <__udivmodsi4>
    4384:	da 01       	movw	r26, r20
    4386:	c9 01       	movw	r24, r18
    4388:	01 97       	sbiw	r24, 0x01	; 1
    438a:	a1 09       	sbc	r26, r1
    438c:	b1 09       	sbc	r27, r1
    438e:	b6 95       	lsr	r27
    4390:	a7 95       	ror	r26
    4392:	97 95       	ror	r25
    4394:	87 95       	ror	r24
    4396:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4398:	ec 85       	ldd	r30, Y+12	; 0x0c
    439a:	fd 85       	ldd	r31, Y+13	; 0x0d
    439c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    439e:	ee 85       	ldd	r30, Y+14	; 0x0e
    43a0:	ff 85       	ldd	r31, Y+15	; 0x0f
    43a2:	20 83       	st	Z, r18

  _written = false;
    43a4:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    43a6:	ec 89       	ldd	r30, Y+20	; 0x14
    43a8:	fd 89       	ldd	r31, Y+21	; 0x15
    43aa:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    43ac:	ea 89       	ldd	r30, Y+18	; 0x12
    43ae:	fb 89       	ldd	r31, Y+19	; 0x13
    43b0:	80 81       	ld	r24, Z
    43b2:	80 61       	ori	r24, 0x10	; 16
    43b4:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    43b6:	ea 89       	ldd	r30, Y+18	; 0x12
    43b8:	fb 89       	ldd	r31, Y+19	; 0x13
    43ba:	80 81       	ld	r24, Z
    43bc:	88 60       	ori	r24, 0x08	; 8
    43be:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    43c0:	ea 89       	ldd	r30, Y+18	; 0x12
    43c2:	fb 89       	ldd	r31, Y+19	; 0x13
    43c4:	80 81       	ld	r24, Z
    43c6:	80 68       	ori	r24, 0x80	; 128
    43c8:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    43ca:	ea 89       	ldd	r30, Y+18	; 0x12
    43cc:	fb 89       	ldd	r31, Y+19	; 0x13
    43ce:	80 81       	ld	r24, Z
    43d0:	8f 7d       	andi	r24, 0xDF	; 223
    43d2:	80 83       	st	Z, r24
}
    43d4:	df 91       	pop	r29
    43d6:	cf 91       	pop	r28
    43d8:	1f 91       	pop	r17
    43da:	ff 90       	pop	r15
    43dc:	ef 90       	pop	r14
    43de:	df 90       	pop	r13
    43e0:	cf 90       	pop	r12
    43e2:	08 95       	ret

000043e4 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    43e4:	1f 92       	push	r1
    43e6:	0f 92       	push	r0
    43e8:	0f b6       	in	r0, 0x3f	; 63
    43ea:	0f 92       	push	r0
    43ec:	11 24       	eor	r1, r1
    43ee:	0b b6       	in	r0, 0x3b	; 59
    43f0:	0f 92       	push	r0
    43f2:	2f 93       	push	r18
    43f4:	8f 93       	push	r24
    43f6:	9f 93       	push	r25
    43f8:	ef 93       	push	r30
    43fa:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    43fc:	e0 91 16 04 	lds	r30, 0x0416	; 0x800416 <Serial+0x10>
    4400:	f0 91 17 04 	lds	r31, 0x0417	; 0x800417 <Serial+0x11>
    4404:	80 81       	ld	r24, Z
    4406:	e0 91 1c 04 	lds	r30, 0x041C	; 0x80041c <Serial+0x16>
    440a:	f0 91 1d 04 	lds	r31, 0x041D	; 0x80041d <Serial+0x17>
    440e:	82 fd       	sbrc	r24, 2
    4410:	12 c0       	rjmp	.+36     	; 0x4436 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    4412:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    4414:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <Serial+0x19>
    4418:	8f 5f       	subi	r24, 0xFF	; 255
    441a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    441c:	20 91 20 04 	lds	r18, 0x0420	; 0x800420 <Serial+0x1a>
    4420:	82 17       	cp	r24, r18
    4422:	51 f0       	breq	.+20     	; 0x4438 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    4424:	e0 91 1f 04 	lds	r30, 0x041F	; 0x80041f <Serial+0x19>
    4428:	f0 e0       	ldi	r31, 0x00	; 0
    442a:	ea 5f       	subi	r30, 0xFA	; 250
    442c:	fb 4f       	sbci	r31, 0xFB	; 251
    442e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    4430:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <Serial+0x19>
    4434:	01 c0       	rjmp	.+2      	; 0x4438 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    4436:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    4438:	ff 91       	pop	r31
    443a:	ef 91       	pop	r30
    443c:	9f 91       	pop	r25
    443e:	8f 91       	pop	r24
    4440:	2f 91       	pop	r18
    4442:	0f 90       	pop	r0
    4444:	0b be       	out	0x3b, r0	; 59
    4446:	0f 90       	pop	r0
    4448:	0f be       	out	0x3f, r0	; 63
    444a:	0f 90       	pop	r0
    444c:	1f 90       	pop	r1
    444e:	18 95       	reti

00004450 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    4450:	1f 92       	push	r1
    4452:	0f 92       	push	r0
    4454:	0f b6       	in	r0, 0x3f	; 63
    4456:	0f 92       	push	r0
    4458:	11 24       	eor	r1, r1
    445a:	0b b6       	in	r0, 0x3b	; 59
    445c:	0f 92       	push	r0
    445e:	2f 93       	push	r18
    4460:	3f 93       	push	r19
    4462:	4f 93       	push	r20
    4464:	5f 93       	push	r21
    4466:	6f 93       	push	r22
    4468:	7f 93       	push	r23
    446a:	8f 93       	push	r24
    446c:	9f 93       	push	r25
    446e:	af 93       	push	r26
    4470:	bf 93       	push	r27
    4472:	ef 93       	push	r30
    4474:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    4476:	86 e0       	ldi	r24, 0x06	; 6
    4478:	94 e0       	ldi	r25, 0x04	; 4
    447a:	c2 de       	rcall	.-636    	; 0x4200 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    447c:	ff 91       	pop	r31
    447e:	ef 91       	pop	r30
    4480:	bf 91       	pop	r27
    4482:	af 91       	pop	r26
    4484:	9f 91       	pop	r25
    4486:	8f 91       	pop	r24
    4488:	7f 91       	pop	r23
    448a:	6f 91       	pop	r22
    448c:	5f 91       	pop	r21
    448e:	4f 91       	pop	r20
    4490:	3f 91       	pop	r19
    4492:	2f 91       	pop	r18
    4494:	0f 90       	pop	r0
    4496:	0b be       	out	0x3b, r0	; 59
    4498:	0f 90       	pop	r0
    449a:	0f be       	out	0x3f, r0	; 63
    449c:	0f 90       	pop	r0
    449e:	1f 90       	pop	r1
    44a0:	18 95       	reti

000044a2 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    44a2:	86 e0       	ldi	r24, 0x06	; 6
    44a4:	94 e0       	ldi	r25, 0x04	; 4
    44a6:	33 de       	rcall	.-922    	; 0x410e <_ZN14HardwareSerial9availableEv>
    44a8:	21 e0       	ldi	r18, 0x01	; 1
    44aa:	89 2b       	or	r24, r25
    44ac:	09 f4       	brne	.+2      	; 0x44b0 <_Z17Serial0_availablev+0xe>
    44ae:	20 e0       	ldi	r18, 0x00	; 0
}
    44b0:	82 2f       	mov	r24, r18
    44b2:	08 95       	ret

000044b4 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    44b4:	e6 e0       	ldi	r30, 0x06	; 6
    44b6:	f4 e0       	ldi	r31, 0x04	; 4
    44b8:	13 82       	std	Z+3, r1	; 0x03
    44ba:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    44bc:	88 ee       	ldi	r24, 0xE8	; 232
    44be:	93 e0       	ldi	r25, 0x03	; 3
    44c0:	a0 e0       	ldi	r26, 0x00	; 0
    44c2:	b0 e0       	ldi	r27, 0x00	; 0
    44c4:	84 83       	std	Z+4, r24	; 0x04
    44c6:	95 83       	std	Z+5, r25	; 0x05
    44c8:	a6 83       	std	Z+6, r26	; 0x06
    44ca:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    44cc:	8e e9       	ldi	r24, 0x9E	; 158
    44ce:	92 e0       	ldi	r25, 0x02	; 2
    44d0:	91 83       	std	Z+1, r25	; 0x01
    44d2:	80 83       	st	Z, r24
    44d4:	85 ec       	ldi	r24, 0xC5	; 197
    44d6:	90 e0       	ldi	r25, 0x00	; 0
    44d8:	95 87       	std	Z+13, r25	; 0x0d
    44da:	84 87       	std	Z+12, r24	; 0x0c
    44dc:	84 ec       	ldi	r24, 0xC4	; 196
    44de:	90 e0       	ldi	r25, 0x00	; 0
    44e0:	97 87       	std	Z+15, r25	; 0x0f
    44e2:	86 87       	std	Z+14, r24	; 0x0e
    44e4:	80 ec       	ldi	r24, 0xC0	; 192
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	91 8b       	std	Z+17, r25	; 0x11
    44ea:	80 8b       	std	Z+16, r24	; 0x10
    44ec:	81 ec       	ldi	r24, 0xC1	; 193
    44ee:	90 e0       	ldi	r25, 0x00	; 0
    44f0:	93 8b       	std	Z+19, r25	; 0x13
    44f2:	82 8b       	std	Z+18, r24	; 0x12
    44f4:	82 ec       	ldi	r24, 0xC2	; 194
    44f6:	90 e0       	ldi	r25, 0x00	; 0
    44f8:	95 8b       	std	Z+21, r25	; 0x15
    44fa:	84 8b       	std	Z+20, r24	; 0x14
    44fc:	86 ec       	ldi	r24, 0xC6	; 198
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	97 8b       	std	Z+23, r25	; 0x17
    4502:	86 8b       	std	Z+22, r24	; 0x16
    4504:	11 8e       	std	Z+25, r1	; 0x19
    4506:	12 8e       	std	Z+26, r1	; 0x1a
    4508:	13 8e       	std	Z+27, r1	; 0x1b
    450a:	14 8e       	std	Z+28, r1	; 0x1c
    450c:	08 95       	ret

0000450e <initVariant>:
    450e:	08 95       	ret

00004510 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    4510:	3a d3       	rcall	.+1652   	; 0x4b86 <init>

	initVariant();
    4512:	fd df       	rcall	.-6      	; 0x450e <initVariant>
    4514:	0e 94 cf 07 	call	0xf9e	; 0xf9e <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    4518:	c4 ec       	ldi	r28, 0xC4	; 196
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    451a:	d0 e2       	ldi	r29, 0x20	; 32
    451c:	0e 94 b7 08 	call	0x116e	; 0x116e <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    4520:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    4522:	e1 f3       	breq	.-8      	; 0x451c <main+0xc>
    4524:	31 de       	rcall	.-926    	; 0x4188 <_Z14serialEventRunv>
    4526:	fa cf       	rjmp	.-12     	; 0x451c <main+0xc>

00004528 <_ZN5Print5writeEPKhj>:
    4528:	cf 92       	push	r12
  return n;
}

size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
    452a:	df 92       	push	r13
    452c:	ef 92       	push	r14
    452e:	ff 92       	push	r15
    4530:	0f 93       	push	r16
    4532:	1f 93       	push	r17
    4534:	cf 93       	push	r28
    4536:	df 93       	push	r29
    4538:	6c 01       	movw	r12, r24
    453a:	7a 01       	movw	r14, r20
    453c:	8b 01       	movw	r16, r22
    453e:	c0 e0       	ldi	r28, 0x00	; 0
    4540:	d0 e0       	ldi	r29, 0x00	; 0
    4542:	ce 15       	cp	r28, r14
    4544:	df 05       	cpc	r29, r15
    4546:	81 f0       	breq	.+32     	; 0x4568 <_ZN5Print5writeEPKhj+0x40>
    4548:	d8 01       	movw	r26, r16
    454a:	6d 91       	ld	r22, X+
    454c:	8d 01       	movw	r16, r26
    454e:	d6 01       	movw	r26, r12
    4550:	ed 91       	ld	r30, X+
    4552:	fc 91       	ld	r31, X
    4554:	01 90       	ld	r0, Z+
    4556:	f0 81       	ld	r31, Z
    4558:	e0 2d       	mov	r30, r0
    455a:	c6 01       	movw	r24, r12
    455c:	19 95       	eicall
    455e:	89 2b       	or	r24, r25
    4560:	11 f0       	breq	.+4      	; 0x4566 <_ZN5Print5writeEPKhj+0x3e>
    4562:	21 96       	adiw	r28, 0x01	; 1
    4564:	ee cf       	rjmp	.-36     	; 0x4542 <_ZN5Print5writeEPKhj+0x1a>
    4566:	7e 01       	movw	r14, r28
    4568:	c7 01       	movw	r24, r14
    456a:	df 91       	pop	r29
    456c:	cf 91       	pop	r28
    456e:	1f 91       	pop	r17
    4570:	0f 91       	pop	r16
    4572:	ff 90       	pop	r15
    4574:	ef 90       	pop	r14
    4576:	df 90       	pop	r13
    4578:	cf 90       	pop	r12
    457a:	08 95       	ret

0000457c <_ZN5Print5writeEPKc>:
    457c:	61 15       	cp	r22, r1
    457e:	71 05       	cpc	r23, r1
    4580:	79 f0       	breq	.+30     	; 0x45a0 <_ZN5Print5writeEPKc+0x24>
    4582:	fb 01       	movw	r30, r22
    4584:	01 90       	ld	r0, Z+
    4586:	00 20       	and	r0, r0
    4588:	e9 f7       	brne	.-6      	; 0x4584 <_ZN5Print5writeEPKc+0x8>
    458a:	31 97       	sbiw	r30, 0x01	; 1
    458c:	af 01       	movw	r20, r30
    458e:	46 1b       	sub	r20, r22
    4590:	57 0b       	sbc	r21, r23
    4592:	dc 01       	movw	r26, r24
    4594:	ed 91       	ld	r30, X+
    4596:	fc 91       	ld	r31, X
    4598:	02 80       	ldd	r0, Z+2	; 0x02
    459a:	f3 81       	ldd	r31, Z+3	; 0x03
    459c:	e0 2d       	mov	r30, r0
    459e:	19 94       	eijmp
    45a0:	80 e0       	ldi	r24, 0x00	; 0
    45a2:	90 e0       	ldi	r25, 0x00	; 0
    45a4:	08 95       	ret

000045a6 <_ZN5Print5printEPK19__FlashStringHelper>:
    45a6:	ef 92       	push	r14
    45a8:	ff 92       	push	r15
    45aa:	0f 93       	push	r16
    45ac:	1f 93       	push	r17
    45ae:	cf 93       	push	r28
    45b0:	df 93       	push	r29
    45b2:	8c 01       	movw	r16, r24
    45b4:	7b 01       	movw	r14, r22
    45b6:	c0 e0       	ldi	r28, 0x00	; 0
    45b8:	d0 e0       	ldi	r29, 0x00	; 0
    45ba:	f7 01       	movw	r30, r14
    45bc:	ec 0f       	add	r30, r28
    45be:	fd 1f       	adc	r31, r29
    45c0:	64 91       	lpm	r22, Z
    45c2:	66 23       	and	r22, r22
    45c4:	61 f0       	breq	.+24     	; 0x45de <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    45c6:	d8 01       	movw	r26, r16
    45c8:	ed 91       	ld	r30, X+
    45ca:	fc 91       	ld	r31, X
    45cc:	01 90       	ld	r0, Z+
    45ce:	f0 81       	ld	r31, Z
    45d0:	e0 2d       	mov	r30, r0
    45d2:	c8 01       	movw	r24, r16
    45d4:	19 95       	eicall
    45d6:	89 2b       	or	r24, r25
    45d8:	11 f0       	breq	.+4      	; 0x45de <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    45da:	21 96       	adiw	r28, 0x01	; 1
    45dc:	ee cf       	rjmp	.-36     	; 0x45ba <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    45de:	ce 01       	movw	r24, r28
    45e0:	df 91       	pop	r29
    45e2:	cf 91       	pop	r28
    45e4:	1f 91       	pop	r17
    45e6:	0f 91       	pop	r16
    45e8:	ff 90       	pop	r15
    45ea:	ef 90       	pop	r14
    45ec:	08 95       	ret

000045ee <_ZN5Print5printERK6String>:
    45ee:	db 01       	movw	r26, r22
    45f0:	14 96       	adiw	r26, 0x04	; 4
    45f2:	4d 91       	ld	r20, X+
    45f4:	5c 91       	ld	r21, X
    45f6:	15 97       	sbiw	r26, 0x05	; 5
    45f8:	6d 91       	ld	r22, X+
    45fa:	7c 91       	ld	r23, X
    45fc:	dc 01       	movw	r26, r24
    45fe:	ed 91       	ld	r30, X+
    4600:	fc 91       	ld	r31, X
    4602:	02 80       	ldd	r0, Z+2	; 0x02
    4604:	f3 81       	ldd	r31, Z+3	; 0x03
    4606:	e0 2d       	mov	r30, r0
    4608:	19 94       	eijmp

0000460a <_ZN5Print7printlnEv>:
}

size_t Print::println(void)
{
  return write("\r\n");
    460a:	6c ea       	ldi	r22, 0xAC	; 172
    460c:	72 e0       	ldi	r23, 0x02	; 2
    460e:	b6 cf       	rjmp	.-148    	; 0x457c <_ZN5Print5writeEPKc>

00004610 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    4610:	0f 93       	push	r16
    4612:	1f 93       	push	r17
    4614:	cf 93       	push	r28
    4616:	df 93       	push	r29
    4618:	ec 01       	movw	r28, r24
  size_t n = print(ifsh);
    461a:	c5 df       	rcall	.-118    	; 0x45a6 <_ZN5Print5printEPK19__FlashStringHelper>
    461c:	8c 01       	movw	r16, r24
  n += println();
    461e:	ce 01       	movw	r24, r28
    4620:	f4 df       	rcall	.-24     	; 0x460a <_ZN5Print7printlnEv>
  return n;
}
    4622:	80 0f       	add	r24, r16
    4624:	91 1f       	adc	r25, r17
    4626:	df 91       	pop	r29
    4628:	cf 91       	pop	r28
    462a:	1f 91       	pop	r17
    462c:	0f 91       	pop	r16
    462e:	08 95       	ret

00004630 <_ZN5Print7printlnERK6String>:
{
  return write("\r\n");
}

size_t Print::println(const String &s)
{
    4630:	0f 93       	push	r16
    4632:	1f 93       	push	r17
    4634:	cf 93       	push	r28
    4636:	df 93       	push	r29
    4638:	ec 01       	movw	r28, r24
  size_t n = print(s);
    463a:	d9 df       	rcall	.-78     	; 0x45ee <_ZN5Print5printERK6String>
    463c:	8c 01       	movw	r16, r24
  n += println();
    463e:	ce 01       	movw	r24, r28
    4640:	e4 df       	rcall	.-56     	; 0x460a <_ZN5Print7printlnEv>
  return n;
}
    4642:	80 0f       	add	r24, r16
    4644:	91 1f       	adc	r25, r17
    4646:	df 91       	pop	r29
    4648:	cf 91       	pop	r28
    464a:	1f 91       	pop	r17
    464c:	0f 91       	pop	r16
    464e:	08 95       	ret

00004650 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    4650:	0f 93       	push	r16
    4652:	1f 93       	push	r17
    4654:	cf 93       	push	r28
    4656:	df 93       	push	r29
    4658:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    465a:	90 df       	rcall	.-224    	; 0x457c <_ZN5Print5writeEPKc>
    465c:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    465e:	ce 01       	movw	r24, r28
    4660:	d4 df       	rcall	.-88     	; 0x460a <_ZN5Print7printlnEv>
  return n;
}
    4662:	80 0f       	add	r24, r16
    4664:	91 1f       	adc	r25, r17
    4666:	df 91       	pop	r29
    4668:	cf 91       	pop	r28
    466a:	1f 91       	pop	r17
    466c:	0f 91       	pop	r16
    466e:	08 95       	ret

00004670 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    4670:	08 95       	ret

00004672 <attachInterrupt>:
    4672:	88 30       	cpi	r24, 0x08	; 8
    4674:	08 f0       	brcs	.+2      	; 0x4678 <attachInterrupt+0x6>
    4676:	6f c0       	rjmp	.+222    	; 0x4756 <attachInterrupt+0xe4>
    4678:	a8 2f       	mov	r26, r24
    467a:	b0 e0       	ldi	r27, 0x00	; 0
    467c:	aa 0f       	add	r26, r26
    467e:	bb 1f       	adc	r27, r27
    4680:	a8 5f       	subi	r26, 0xF8	; 248
    4682:	bd 4f       	sbci	r27, 0xFD	; 253
    4684:	11 96       	adiw	r26, 0x01	; 1
    4686:	7c 93       	st	X, r23
    4688:	6e 93       	st	-X, r22
    468a:	90 e0       	ldi	r25, 0x00	; 0
    468c:	fc 01       	movw	r30, r24
    468e:	31 97       	sbiw	r30, 0x01	; 1
    4690:	e7 30       	cpi	r30, 0x07	; 7
    4692:	f1 05       	cpc	r31, r1
    4694:	98 f5       	brcc	.+102    	; 0x46fc <attachInterrupt+0x8a>
    4696:	88 27       	eor	r24, r24
    4698:	ee 58       	subi	r30, 0x8E	; 142
    469a:	ff 4f       	sbci	r31, 0xFF	; 255
    469c:	8f 4f       	sbci	r24, 0xFF	; 255
    469e:	d9 c4       	rjmp	.+2482   	; 0x5052 <__tablejump2__>
    46a0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    46a4:	8c 7f       	andi	r24, 0xFC	; 252
    46a6:	48 2b       	or	r20, r24
    46a8:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    46ac:	e8 9a       	sbi	0x1d, 0	; 29
    46ae:	08 95       	ret
    46b0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    46b4:	83 7f       	andi	r24, 0xF3	; 243
    46b6:	44 0f       	add	r20, r20
    46b8:	55 1f       	adc	r21, r21
    46ba:	44 0f       	add	r20, r20
    46bc:	55 1f       	adc	r21, r21
    46be:	48 2b       	or	r20, r24
    46c0:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    46c4:	e9 9a       	sbi	0x1d, 1	; 29
    46c6:	08 95       	ret
    46c8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    46cc:	8f 7c       	andi	r24, 0xCF	; 207
    46ce:	74 e0       	ldi	r23, 0x04	; 4
    46d0:	44 0f       	add	r20, r20
    46d2:	55 1f       	adc	r21, r21
    46d4:	7a 95       	dec	r23
    46d6:	e1 f7       	brne	.-8      	; 0x46d0 <attachInterrupt+0x5e>
    46d8:	48 2b       	or	r20, r24
    46da:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    46de:	ea 9a       	sbi	0x1d, 2	; 29
    46e0:	08 95       	ret
    46e2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    46e6:	8f 73       	andi	r24, 0x3F	; 63
    46e8:	66 e0       	ldi	r22, 0x06	; 6
    46ea:	44 0f       	add	r20, r20
    46ec:	55 1f       	adc	r21, r21
    46ee:	6a 95       	dec	r22
    46f0:	e1 f7       	brne	.-8      	; 0x46ea <attachInterrupt+0x78>
    46f2:	48 2b       	or	r20, r24
    46f4:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    46f8:	eb 9a       	sbi	0x1d, 3	; 29
    46fa:	08 95       	ret
    46fc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    4700:	8c 7f       	andi	r24, 0xFC	; 252
    4702:	48 2b       	or	r20, r24
    4704:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    4708:	ec 9a       	sbi	0x1d, 4	; 29
    470a:	08 95       	ret
    470c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    4710:	83 7f       	andi	r24, 0xF3	; 243
    4712:	44 0f       	add	r20, r20
    4714:	55 1f       	adc	r21, r21
    4716:	44 0f       	add	r20, r20
    4718:	55 1f       	adc	r21, r21
    471a:	48 2b       	or	r20, r24
    471c:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    4720:	ed 9a       	sbi	0x1d, 5	; 29
    4722:	08 95       	ret
    4724:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    4728:	8f 7c       	andi	r24, 0xCF	; 207
    472a:	24 e0       	ldi	r18, 0x04	; 4
    472c:	44 0f       	add	r20, r20
    472e:	55 1f       	adc	r21, r21
    4730:	2a 95       	dec	r18
    4732:	e1 f7       	brne	.-8      	; 0x472c <attachInterrupt+0xba>
    4734:	48 2b       	or	r20, r24
    4736:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    473a:	ee 9a       	sbi	0x1d, 6	; 29
    473c:	08 95       	ret
    473e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    4742:	8f 73       	andi	r24, 0x3F	; 63
    4744:	96 e0       	ldi	r25, 0x06	; 6
    4746:	44 0f       	add	r20, r20
    4748:	55 1f       	adc	r21, r21
    474a:	9a 95       	dec	r25
    474c:	e1 f7       	brne	.-8      	; 0x4746 <attachInterrupt+0xd4>
    474e:	48 2b       	or	r20, r24
    4750:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    4754:	ef 9a       	sbi	0x1d, 7	; 29
    4756:	08 95       	ret

00004758 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
    4758:	1f 92       	push	r1
    475a:	0f 92       	push	r0
    475c:	0f b6       	in	r0, 0x3f	; 63
    475e:	0f 92       	push	r0
    4760:	11 24       	eor	r1, r1
    4762:	0b b6       	in	r0, 0x3b	; 59
    4764:	0f 92       	push	r0
    4766:	2f 93       	push	r18
    4768:	3f 93       	push	r19
    476a:	4f 93       	push	r20
    476c:	5f 93       	push	r21
    476e:	6f 93       	push	r22
    4770:	7f 93       	push	r23
    4772:	8f 93       	push	r24
    4774:	9f 93       	push	r25
    4776:	af 93       	push	r26
    4778:	bf 93       	push	r27
    477a:	ef 93       	push	r30
    477c:	ff 93       	push	r31
    477e:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0x4>
    4782:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0x5>
    4786:	19 95       	eicall
    4788:	ff 91       	pop	r31
    478a:	ef 91       	pop	r30
    478c:	bf 91       	pop	r27
    478e:	af 91       	pop	r26
    4790:	9f 91       	pop	r25
    4792:	8f 91       	pop	r24
    4794:	7f 91       	pop	r23
    4796:	6f 91       	pop	r22
    4798:	5f 91       	pop	r21
    479a:	4f 91       	pop	r20
    479c:	3f 91       	pop	r19
    479e:	2f 91       	pop	r18
    47a0:	0f 90       	pop	r0
    47a2:	0b be       	out	0x3b, r0	; 59
    47a4:	0f 90       	pop	r0
    47a6:	0f be       	out	0x3f, r0	; 63
    47a8:	0f 90       	pop	r0
    47aa:	1f 90       	pop	r1
    47ac:	18 95       	reti

000047ae <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
    47ae:	1f 92       	push	r1
    47b0:	0f 92       	push	r0
    47b2:	0f b6       	in	r0, 0x3f	; 63
    47b4:	0f 92       	push	r0
    47b6:	11 24       	eor	r1, r1
    47b8:	0b b6       	in	r0, 0x3b	; 59
    47ba:	0f 92       	push	r0
    47bc:	2f 93       	push	r18
    47be:	3f 93       	push	r19
    47c0:	4f 93       	push	r20
    47c2:	5f 93       	push	r21
    47c4:	6f 93       	push	r22
    47c6:	7f 93       	push	r23
    47c8:	8f 93       	push	r24
    47ca:	9f 93       	push	r25
    47cc:	af 93       	push	r26
    47ce:	bf 93       	push	r27
    47d0:	ef 93       	push	r30
    47d2:	ff 93       	push	r31
    47d4:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0x6>
    47d8:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0x7>
    47dc:	19 95       	eicall
    47de:	ff 91       	pop	r31
    47e0:	ef 91       	pop	r30
    47e2:	bf 91       	pop	r27
    47e4:	af 91       	pop	r26
    47e6:	9f 91       	pop	r25
    47e8:	8f 91       	pop	r24
    47ea:	7f 91       	pop	r23
    47ec:	6f 91       	pop	r22
    47ee:	5f 91       	pop	r21
    47f0:	4f 91       	pop	r20
    47f2:	3f 91       	pop	r19
    47f4:	2f 91       	pop	r18
    47f6:	0f 90       	pop	r0
    47f8:	0b be       	out	0x3b, r0	; 59
    47fa:	0f 90       	pop	r0
    47fc:	0f be       	out	0x3f, r0	; 63
    47fe:	0f 90       	pop	r0
    4800:	1f 90       	pop	r1
    4802:	18 95       	reti

00004804 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
    4804:	1f 92       	push	r1
    4806:	0f 92       	push	r0
    4808:	0f b6       	in	r0, 0x3f	; 63
    480a:	0f 92       	push	r0
    480c:	11 24       	eor	r1, r1
    480e:	0b b6       	in	r0, 0x3b	; 59
    4810:	0f 92       	push	r0
    4812:	2f 93       	push	r18
    4814:	3f 93       	push	r19
    4816:	4f 93       	push	r20
    4818:	5f 93       	push	r21
    481a:	6f 93       	push	r22
    481c:	7f 93       	push	r23
    481e:	8f 93       	push	r24
    4820:	9f 93       	push	r25
    4822:	af 93       	push	r26
    4824:	bf 93       	push	r27
    4826:	ef 93       	push	r30
    4828:	ff 93       	push	r31
    482a:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0x8>
    482e:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0x9>
    4832:	19 95       	eicall
    4834:	ff 91       	pop	r31
    4836:	ef 91       	pop	r30
    4838:	bf 91       	pop	r27
    483a:	af 91       	pop	r26
    483c:	9f 91       	pop	r25
    483e:	8f 91       	pop	r24
    4840:	7f 91       	pop	r23
    4842:	6f 91       	pop	r22
    4844:	5f 91       	pop	r21
    4846:	4f 91       	pop	r20
    4848:	3f 91       	pop	r19
    484a:	2f 91       	pop	r18
    484c:	0f 90       	pop	r0
    484e:	0b be       	out	0x3b, r0	; 59
    4850:	0f 90       	pop	r0
    4852:	0f be       	out	0x3f, r0	; 63
    4854:	0f 90       	pop	r0
    4856:	1f 90       	pop	r1
    4858:	18 95       	reti

0000485a <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
    485a:	1f 92       	push	r1
    485c:	0f 92       	push	r0
    485e:	0f b6       	in	r0, 0x3f	; 63
    4860:	0f 92       	push	r0
    4862:	11 24       	eor	r1, r1
    4864:	0b b6       	in	r0, 0x3b	; 59
    4866:	0f 92       	push	r0
    4868:	2f 93       	push	r18
    486a:	3f 93       	push	r19
    486c:	4f 93       	push	r20
    486e:	5f 93       	push	r21
    4870:	6f 93       	push	r22
    4872:	7f 93       	push	r23
    4874:	8f 93       	push	r24
    4876:	9f 93       	push	r25
    4878:	af 93       	push	r26
    487a:	bf 93       	push	r27
    487c:	ef 93       	push	r30
    487e:	ff 93       	push	r31
    4880:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <intFunc+0xa>
    4884:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <intFunc+0xb>
    4888:	19 95       	eicall
    488a:	ff 91       	pop	r31
    488c:	ef 91       	pop	r30
    488e:	bf 91       	pop	r27
    4890:	af 91       	pop	r26
    4892:	9f 91       	pop	r25
    4894:	8f 91       	pop	r24
    4896:	7f 91       	pop	r23
    4898:	6f 91       	pop	r22
    489a:	5f 91       	pop	r21
    489c:	4f 91       	pop	r20
    489e:	3f 91       	pop	r19
    48a0:	2f 91       	pop	r18
    48a2:	0f 90       	pop	r0
    48a4:	0b be       	out	0x3b, r0	; 59
    48a6:	0f 90       	pop	r0
    48a8:	0f be       	out	0x3f, r0	; 63
    48aa:	0f 90       	pop	r0
    48ac:	1f 90       	pop	r1
    48ae:	18 95       	reti

000048b0 <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
    48b0:	1f 92       	push	r1
    48b2:	0f 92       	push	r0
    48b4:	0f b6       	in	r0, 0x3f	; 63
    48b6:	0f 92       	push	r0
    48b8:	11 24       	eor	r1, r1
    48ba:	0b b6       	in	r0, 0x3b	; 59
    48bc:	0f 92       	push	r0
    48be:	2f 93       	push	r18
    48c0:	3f 93       	push	r19
    48c2:	4f 93       	push	r20
    48c4:	5f 93       	push	r21
    48c6:	6f 93       	push	r22
    48c8:	7f 93       	push	r23
    48ca:	8f 93       	push	r24
    48cc:	9f 93       	push	r25
    48ce:	af 93       	push	r26
    48d0:	bf 93       	push	r27
    48d2:	ef 93       	push	r30
    48d4:	ff 93       	push	r31
    48d6:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <intFunc>
    48da:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <intFunc+0x1>
    48de:	19 95       	eicall
    48e0:	ff 91       	pop	r31
    48e2:	ef 91       	pop	r30
    48e4:	bf 91       	pop	r27
    48e6:	af 91       	pop	r26
    48e8:	9f 91       	pop	r25
    48ea:	8f 91       	pop	r24
    48ec:	7f 91       	pop	r23
    48ee:	6f 91       	pop	r22
    48f0:	5f 91       	pop	r21
    48f2:	4f 91       	pop	r20
    48f4:	3f 91       	pop	r19
    48f6:	2f 91       	pop	r18
    48f8:	0f 90       	pop	r0
    48fa:	0b be       	out	0x3b, r0	; 59
    48fc:	0f 90       	pop	r0
    48fe:	0f be       	out	0x3f, r0	; 63
    4900:	0f 90       	pop	r0
    4902:	1f 90       	pop	r1
    4904:	18 95       	reti

00004906 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
    4906:	1f 92       	push	r1
    4908:	0f 92       	push	r0
    490a:	0f b6       	in	r0, 0x3f	; 63
    490c:	0f 92       	push	r0
    490e:	11 24       	eor	r1, r1
    4910:	0b b6       	in	r0, 0x3b	; 59
    4912:	0f 92       	push	r0
    4914:	2f 93       	push	r18
    4916:	3f 93       	push	r19
    4918:	4f 93       	push	r20
    491a:	5f 93       	push	r21
    491c:	6f 93       	push	r22
    491e:	7f 93       	push	r23
    4920:	8f 93       	push	r24
    4922:	9f 93       	push	r25
    4924:	af 93       	push	r26
    4926:	bf 93       	push	r27
    4928:	ef 93       	push	r30
    492a:	ff 93       	push	r31
    492c:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc+0x2>
    4930:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x3>
    4934:	19 95       	eicall
    4936:	ff 91       	pop	r31
    4938:	ef 91       	pop	r30
    493a:	bf 91       	pop	r27
    493c:	af 91       	pop	r26
    493e:	9f 91       	pop	r25
    4940:	8f 91       	pop	r24
    4942:	7f 91       	pop	r23
    4944:	6f 91       	pop	r22
    4946:	5f 91       	pop	r21
    4948:	4f 91       	pop	r20
    494a:	3f 91       	pop	r19
    494c:	2f 91       	pop	r18
    494e:	0f 90       	pop	r0
    4950:	0b be       	out	0x3b, r0	; 59
    4952:	0f 90       	pop	r0
    4954:	0f be       	out	0x3f, r0	; 63
    4956:	0f 90       	pop	r0
    4958:	1f 90       	pop	r1
    495a:	18 95       	reti

0000495c <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    495c:	1f 92       	push	r1
    495e:	0f 92       	push	r0
    4960:	0f b6       	in	r0, 0x3f	; 63
    4962:	0f 92       	push	r0
    4964:	11 24       	eor	r1, r1
    4966:	0b b6       	in	r0, 0x3b	; 59
    4968:	0f 92       	push	r0
    496a:	2f 93       	push	r18
    496c:	3f 93       	push	r19
    496e:	4f 93       	push	r20
    4970:	5f 93       	push	r21
    4972:	6f 93       	push	r22
    4974:	7f 93       	push	r23
    4976:	8f 93       	push	r24
    4978:	9f 93       	push	r25
    497a:	af 93       	push	r26
    497c:	bf 93       	push	r27
    497e:	ef 93       	push	r30
    4980:	ff 93       	push	r31
    4982:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <intFunc+0xc>
    4986:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <intFunc+0xd>
    498a:	19 95       	eicall
    498c:	ff 91       	pop	r31
    498e:	ef 91       	pop	r30
    4990:	bf 91       	pop	r27
    4992:	af 91       	pop	r26
    4994:	9f 91       	pop	r25
    4996:	8f 91       	pop	r24
    4998:	7f 91       	pop	r23
    499a:	6f 91       	pop	r22
    499c:	5f 91       	pop	r21
    499e:	4f 91       	pop	r20
    49a0:	3f 91       	pop	r19
    49a2:	2f 91       	pop	r18
    49a4:	0f 90       	pop	r0
    49a6:	0b be       	out	0x3b, r0	; 59
    49a8:	0f 90       	pop	r0
    49aa:	0f be       	out	0x3f, r0	; 63
    49ac:	0f 90       	pop	r0
    49ae:	1f 90       	pop	r1
    49b0:	18 95       	reti

000049b2 <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    49b2:	1f 92       	push	r1
    49b4:	0f 92       	push	r0
    49b6:	0f b6       	in	r0, 0x3f	; 63
    49b8:	0f 92       	push	r0
    49ba:	11 24       	eor	r1, r1
    49bc:	0b b6       	in	r0, 0x3b	; 59
    49be:	0f 92       	push	r0
    49c0:	2f 93       	push	r18
    49c2:	3f 93       	push	r19
    49c4:	4f 93       	push	r20
    49c6:	5f 93       	push	r21
    49c8:	6f 93       	push	r22
    49ca:	7f 93       	push	r23
    49cc:	8f 93       	push	r24
    49ce:	9f 93       	push	r25
    49d0:	af 93       	push	r26
    49d2:	bf 93       	push	r27
    49d4:	ef 93       	push	r30
    49d6:	ff 93       	push	r31
    49d8:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <intFunc+0xe>
    49dc:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <intFunc+0xf>
    49e0:	19 95       	eicall
    49e2:	ff 91       	pop	r31
    49e4:	ef 91       	pop	r30
    49e6:	bf 91       	pop	r27
    49e8:	af 91       	pop	r26
    49ea:	9f 91       	pop	r25
    49ec:	8f 91       	pop	r24
    49ee:	7f 91       	pop	r23
    49f0:	6f 91       	pop	r22
    49f2:	5f 91       	pop	r21
    49f4:	4f 91       	pop	r20
    49f6:	3f 91       	pop	r19
    49f8:	2f 91       	pop	r18
    49fa:	0f 90       	pop	r0
    49fc:	0b be       	out	0x3b, r0	; 59
    49fe:	0f 90       	pop	r0
    4a00:	0f be       	out	0x3f, r0	; 63
    4a02:	0f 90       	pop	r0
    4a04:	1f 90       	pop	r1
    4a06:	18 95       	reti

00004a08 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    4a08:	1f 92       	push	r1
    4a0a:	0f 92       	push	r0
    4a0c:	0f b6       	in	r0, 0x3f	; 63
    4a0e:	0f 92       	push	r0
    4a10:	11 24       	eor	r1, r1
    4a12:	2f 93       	push	r18
    4a14:	3f 93       	push	r19
    4a16:	8f 93       	push	r24
    4a18:	9f 93       	push	r25
    4a1a:	af 93       	push	r26
    4a1c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    4a1e:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <timer0_millis>
    4a22:	90 91 a5 04 	lds	r25, 0x04A5	; 0x8004a5 <timer0_millis+0x1>
    4a26:	a0 91 a6 04 	lds	r26, 0x04A6	; 0x8004a6 <timer0_millis+0x2>
    4a2a:	b0 91 a7 04 	lds	r27, 0x04A7	; 0x8004a7 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    4a2e:	30 91 a3 04 	lds	r19, 0x04A3	; 0x8004a3 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    4a32:	23 e0       	ldi	r18, 0x03	; 3
    4a34:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    4a36:	2d 37       	cpi	r18, 0x7D	; 125
    4a38:	20 f4       	brcc	.+8      	; 0x4a42 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    4a3a:	01 96       	adiw	r24, 0x01	; 1
    4a3c:	a1 1d       	adc	r26, r1
    4a3e:	b1 1d       	adc	r27, r1
    4a40:	05 c0       	rjmp	.+10     	; 0x4a4c <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    4a42:	26 e8       	ldi	r18, 0x86	; 134
    4a44:	23 0f       	add	r18, r19
		m += 1;
    4a46:	02 96       	adiw	r24, 0x02	; 2
    4a48:	a1 1d       	adc	r26, r1
    4a4a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    4a4c:	20 93 a3 04 	sts	0x04A3, r18	; 0x8004a3 <timer0_fract>
	timer0_millis = m;
    4a50:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <timer0_millis>
    4a54:	90 93 a5 04 	sts	0x04A5, r25	; 0x8004a5 <timer0_millis+0x1>
    4a58:	a0 93 a6 04 	sts	0x04A6, r26	; 0x8004a6 <timer0_millis+0x2>
    4a5c:	b0 93 a7 04 	sts	0x04A7, r27	; 0x8004a7 <timer0_millis+0x3>
	timer0_overflow_count++;
    4a60:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <timer0_overflow_count>
    4a64:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <timer0_overflow_count+0x1>
    4a68:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <timer0_overflow_count+0x2>
    4a6c:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <timer0_overflow_count+0x3>
    4a70:	01 96       	adiw	r24, 0x01	; 1
    4a72:	a1 1d       	adc	r26, r1
    4a74:	b1 1d       	adc	r27, r1
    4a76:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <timer0_overflow_count>
    4a7a:	90 93 a9 04 	sts	0x04A9, r25	; 0x8004a9 <timer0_overflow_count+0x1>
    4a7e:	a0 93 aa 04 	sts	0x04AA, r26	; 0x8004aa <timer0_overflow_count+0x2>
    4a82:	b0 93 ab 04 	sts	0x04AB, r27	; 0x8004ab <timer0_overflow_count+0x3>
}
    4a86:	bf 91       	pop	r27
    4a88:	af 91       	pop	r26
    4a8a:	9f 91       	pop	r25
    4a8c:	8f 91       	pop	r24
    4a8e:	3f 91       	pop	r19
    4a90:	2f 91       	pop	r18
    4a92:	0f 90       	pop	r0
    4a94:	0f be       	out	0x3f, r0	; 63
    4a96:	0f 90       	pop	r0
    4a98:	1f 90       	pop	r1
    4a9a:	18 95       	reti

00004a9c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    4a9c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    4a9e:	f8 94       	cli
	m = timer0_millis;
    4aa0:	60 91 a4 04 	lds	r22, 0x04A4	; 0x8004a4 <timer0_millis>
    4aa4:	70 91 a5 04 	lds	r23, 0x04A5	; 0x8004a5 <timer0_millis+0x1>
    4aa8:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <timer0_millis+0x2>
    4aac:	90 91 a7 04 	lds	r25, 0x04A7	; 0x8004a7 <timer0_millis+0x3>
	SREG = oldSREG;
    4ab0:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    4ab2:	08 95       	ret

00004ab4 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    4ab4:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    4ab6:	f8 94       	cli
	m = timer0_overflow_count;
    4ab8:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <timer0_overflow_count>
    4abc:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <timer0_overflow_count+0x1>
    4ac0:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <timer0_overflow_count+0x2>
    4ac4:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    4ac8:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    4aca:	a8 9b       	sbis	0x15, 0	; 21
    4acc:	05 c0       	rjmp	.+10     	; 0x4ad8 <micros+0x24>
    4ace:	2f 3f       	cpi	r18, 0xFF	; 255
    4ad0:	19 f0       	breq	.+6      	; 0x4ad8 <micros+0x24>
		m++;
    4ad2:	01 96       	adiw	r24, 0x01	; 1
    4ad4:	a1 1d       	adc	r26, r1
    4ad6:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    4ad8:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    4ada:	ba 2f       	mov	r27, r26
    4adc:	a9 2f       	mov	r26, r25
    4ade:	98 2f       	mov	r25, r24
    4ae0:	88 27       	eor	r24, r24
    4ae2:	82 0f       	add	r24, r18
    4ae4:	91 1d       	adc	r25, r1
    4ae6:	a1 1d       	adc	r26, r1
    4ae8:	b1 1d       	adc	r27, r1
    4aea:	bc 01       	movw	r22, r24
    4aec:	cd 01       	movw	r24, r26
    4aee:	42 e0       	ldi	r20, 0x02	; 2
    4af0:	66 0f       	add	r22, r22
    4af2:	77 1f       	adc	r23, r23
    4af4:	88 1f       	adc	r24, r24
    4af6:	99 1f       	adc	r25, r25
    4af8:	4a 95       	dec	r20
    4afa:	d1 f7       	brne	.-12     	; 0x4af0 <micros+0x3c>
}
    4afc:	08 95       	ret

00004afe <delay>:

void delay(unsigned long ms)
{
    4afe:	8f 92       	push	r8
    4b00:	9f 92       	push	r9
    4b02:	af 92       	push	r10
    4b04:	bf 92       	push	r11
    4b06:	cf 92       	push	r12
    4b08:	df 92       	push	r13
    4b0a:	ef 92       	push	r14
    4b0c:	ff 92       	push	r15
    4b0e:	6b 01       	movw	r12, r22
    4b10:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    4b12:	d0 df       	rcall	.-96     	; 0x4ab4 <micros>
    4b14:	4b 01       	movw	r8, r22
    4b16:	5c 01       	movw	r10, r24

	while (ms > 0) {
    4b18:	c1 14       	cp	r12, r1
    4b1a:	d1 04       	cpc	r13, r1
    4b1c:	e1 04       	cpc	r14, r1
    4b1e:	f1 04       	cpc	r15, r1
		yield();
    4b20:	f1 f0       	breq	.+60     	; 0x4b5e <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    4b22:	74 d2       	rcall	.+1256   	; 0x500c <yield>
    4b24:	c7 df       	rcall	.-114    	; 0x4ab4 <micros>
    4b26:	dc 01       	movw	r26, r24
    4b28:	cb 01       	movw	r24, r22
    4b2a:	88 19       	sub	r24, r8
    4b2c:	99 09       	sbc	r25, r9
    4b2e:	aa 09       	sbc	r26, r10
    4b30:	bb 09       	sbc	r27, r11
    4b32:	88 3e       	cpi	r24, 0xE8	; 232
    4b34:	93 40       	sbci	r25, 0x03	; 3
    4b36:	a1 05       	cpc	r26, r1
    4b38:	b1 05       	cpc	r27, r1
    4b3a:	70 f3       	brcs	.-36     	; 0x4b18 <delay+0x1a>
			ms--;
    4b3c:	21 e0       	ldi	r18, 0x01	; 1
    4b3e:	c2 1a       	sub	r12, r18
    4b40:	d1 08       	sbc	r13, r1
    4b42:	e1 08       	sbc	r14, r1
    4b44:	f1 08       	sbc	r15, r1
			start += 1000;
    4b46:	88 ee       	ldi	r24, 0xE8	; 232
    4b48:	88 0e       	add	r8, r24
    4b4a:	83 e0       	ldi	r24, 0x03	; 3
    4b4c:	98 1e       	adc	r9, r24
    4b4e:	a1 1c       	adc	r10, r1
    4b50:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    4b52:	c1 14       	cp	r12, r1
    4b54:	d1 04       	cpc	r13, r1
    4b56:	e1 04       	cpc	r14, r1
    4b58:	f1 04       	cpc	r15, r1
    4b5a:	21 f7       	brne	.-56     	; 0x4b24 <delay+0x26>
    4b5c:	dd cf       	rjmp	.-70     	; 0x4b18 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    4b5e:	ff 90       	pop	r15
    4b60:	ef 90       	pop	r14
    4b62:	df 90       	pop	r13
    4b64:	cf 90       	pop	r12
    4b66:	bf 90       	pop	r11
    4b68:	af 90       	pop	r10
    4b6a:	9f 90       	pop	r9
    4b6c:	8f 90       	pop	r8
    4b6e:	08 95       	ret

00004b70 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    4b70:	82 30       	cpi	r24, 0x02	; 2
    4b72:	91 05       	cpc	r25, r1
    4b74:	38 f0       	brcs	.+14     	; 0x4b84 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    4b76:	88 0f       	add	r24, r24
    4b78:	99 1f       	adc	r25, r25
    4b7a:	88 0f       	add	r24, r24
    4b7c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    4b7e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    4b80:	01 97       	sbiw	r24, 0x01	; 1
    4b82:	f1 f7       	brne	.-4      	; 0x4b80 <delayMicroseconds+0x10>
    4b84:	08 95       	ret

00004b86 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    4b86:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    4b88:	84 b5       	in	r24, 0x24	; 36
    4b8a:	82 60       	ori	r24, 0x02	; 2
    4b8c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4b8e:	84 b5       	in	r24, 0x24	; 36
    4b90:	81 60       	ori	r24, 0x01	; 1
    4b92:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    4b94:	85 b5       	in	r24, 0x25	; 37
    4b96:	82 60       	ori	r24, 0x02	; 2
    4b98:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    4b9a:	85 b5       	in	r24, 0x25	; 37
    4b9c:	81 60       	ori	r24, 0x01	; 1
    4b9e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    4ba0:	ee e6       	ldi	r30, 0x6E	; 110
    4ba2:	f0 e0       	ldi	r31, 0x00	; 0
    4ba4:	80 81       	ld	r24, Z
    4ba6:	81 60       	ori	r24, 0x01	; 1
    4ba8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    4baa:	e1 e8       	ldi	r30, 0x81	; 129
    4bac:	f0 e0       	ldi	r31, 0x00	; 0
    4bae:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    4bb0:	80 81       	ld	r24, Z
    4bb2:	82 60       	ori	r24, 0x02	; 2
    4bb4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    4bb6:	80 81       	ld	r24, Z
    4bb8:	81 60       	ori	r24, 0x01	; 1
    4bba:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    4bbc:	e0 e8       	ldi	r30, 0x80	; 128
    4bbe:	f0 e0       	ldi	r31, 0x00	; 0
    4bc0:	80 81       	ld	r24, Z
    4bc2:	81 60       	ori	r24, 0x01	; 1
    4bc4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    4bc6:	e1 eb       	ldi	r30, 0xB1	; 177
    4bc8:	f0 e0       	ldi	r31, 0x00	; 0
    4bca:	80 81       	ld	r24, Z
    4bcc:	84 60       	ori	r24, 0x04	; 4
    4bce:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    4bd0:	e0 eb       	ldi	r30, 0xB0	; 176
    4bd2:	f0 e0       	ldi	r31, 0x00	; 0
    4bd4:	80 81       	ld	r24, Z
    4bd6:	81 60       	ori	r24, 0x01	; 1
    4bd8:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    4bda:	e1 e9       	ldi	r30, 0x91	; 145
    4bdc:	f0 e0       	ldi	r31, 0x00	; 0
    4bde:	80 81       	ld	r24, Z
    4be0:	82 60       	ori	r24, 0x02	; 2
    4be2:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    4be4:	80 81       	ld	r24, Z
    4be6:	81 60       	ori	r24, 0x01	; 1
    4be8:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    4bea:	e0 e9       	ldi	r30, 0x90	; 144
    4bec:	f0 e0       	ldi	r31, 0x00	; 0
    4bee:	80 81       	ld	r24, Z
    4bf0:	81 60       	ori	r24, 0x01	; 1
    4bf2:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    4bf4:	e1 ea       	ldi	r30, 0xA1	; 161
    4bf6:	f0 e0       	ldi	r31, 0x00	; 0
    4bf8:	80 81       	ld	r24, Z
    4bfa:	82 60       	ori	r24, 0x02	; 2
    4bfc:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    4bfe:	80 81       	ld	r24, Z
    4c00:	81 60       	ori	r24, 0x01	; 1
    4c02:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    4c04:	e0 ea       	ldi	r30, 0xA0	; 160
    4c06:	f0 e0       	ldi	r31, 0x00	; 0
    4c08:	80 81       	ld	r24, Z
    4c0a:	81 60       	ori	r24, 0x01	; 1
    4c0c:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    4c0e:	e1 e2       	ldi	r30, 0x21	; 33
    4c10:	f1 e0       	ldi	r31, 0x01	; 1
    4c12:	80 81       	ld	r24, Z
    4c14:	82 60       	ori	r24, 0x02	; 2
    4c16:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    4c18:	80 81       	ld	r24, Z
    4c1a:	81 60       	ori	r24, 0x01	; 1
    4c1c:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    4c1e:	e0 e2       	ldi	r30, 0x20	; 32
    4c20:	f1 e0       	ldi	r31, 0x01	; 1
    4c22:	80 81       	ld	r24, Z
    4c24:	81 60       	ori	r24, 0x01	; 1
    4c26:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    4c28:	ea e7       	ldi	r30, 0x7A	; 122
    4c2a:	f0 e0       	ldi	r31, 0x00	; 0
    4c2c:	80 81       	ld	r24, Z
    4c2e:	84 60       	ori	r24, 0x04	; 4
    4c30:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    4c32:	80 81       	ld	r24, Z
    4c34:	82 60       	ori	r24, 0x02	; 2
    4c36:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    4c38:	80 81       	ld	r24, Z
    4c3a:	81 60       	ori	r24, 0x01	; 1
    4c3c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    4c3e:	80 81       	ld	r24, Z
    4c40:	80 68       	ori	r24, 0x80	; 128
    4c42:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    4c44:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    4c48:	08 95       	ret

00004c4a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4c4a:	90 e0       	ldi	r25, 0x00	; 0
    4c4c:	fc 01       	movw	r30, r24
    4c4e:	31 97       	sbiw	r30, 0x01	; 1
    4c50:	e2 31       	cpi	r30, 0x12	; 18
    4c52:	f1 05       	cpc	r31, r1
    4c54:	08 f0       	brcs	.+2      	; 0x4c58 <turnOffPWM+0xe>
    4c56:	4d c0       	rjmp	.+154    	; 0x4cf2 <turnOffPWM+0xa8>
    4c58:	88 27       	eor	r24, r24
    4c5a:	e7 58       	subi	r30, 0x87	; 135
    4c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c5e:	8f 4f       	sbci	r24, 0xFF	; 255
    4c60:	f8 c1       	rjmp	.+1008   	; 0x5052 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4c62:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    4c66:	8f 77       	andi	r24, 0x7F	; 127
    4c68:	03 c0       	rjmp	.+6      	; 0x4c70 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4c6a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    4c6e:	8f 7d       	andi	r24, 0xDF	; 223
    4c70:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    4c74:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    4c76:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    4c7a:	87 7f       	andi	r24, 0xF7	; 247
    4c7c:	f9 cf       	rjmp	.-14     	; 0x4c70 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4c7e:	84 b5       	in	r24, 0x24	; 36
    4c80:	8f 77       	andi	r24, 0x7F	; 127
    4c82:	02 c0       	rjmp	.+4      	; 0x4c88 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4c84:	84 b5       	in	r24, 0x24	; 36
    4c86:	8f 7d       	andi	r24, 0xDF	; 223
    4c88:	84 bd       	out	0x24, r24	; 36
    4c8a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    4c8c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    4c90:	8f 77       	andi	r24, 0x7F	; 127
    4c92:	03 c0       	rjmp	.+6      	; 0x4c9a <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    4c94:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    4c98:	8f 7d       	andi	r24, 0xDF	; 223
    4c9a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    4c9e:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    4ca0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    4ca4:	8f 77       	andi	r24, 0x7F	; 127
    4ca6:	07 c0       	rjmp	.+14     	; 0x4cb6 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    4ca8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    4cac:	8f 7d       	andi	r24, 0xDF	; 223
    4cae:	03 c0       	rjmp	.+6      	; 0x4cb6 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    4cb0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    4cb4:	87 7f       	andi	r24, 0xF7	; 247
    4cb6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    4cba:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    4cbc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    4cc0:	8f 77       	andi	r24, 0x7F	; 127
    4cc2:	07 c0       	rjmp	.+14     	; 0x4cd2 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    4cc4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    4cc8:	8f 7d       	andi	r24, 0xDF	; 223
    4cca:	03 c0       	rjmp	.+6      	; 0x4cd2 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    4ccc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    4cd0:	87 7f       	andi	r24, 0xF7	; 247
    4cd2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    4cd6:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    4cd8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    4cdc:	8f 77       	andi	r24, 0x7F	; 127
    4cde:	07 c0       	rjmp	.+14     	; 0x4cee <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    4ce0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    4ce4:	8f 7d       	andi	r24, 0xDF	; 223
    4ce6:	03 c0       	rjmp	.+6      	; 0x4cee <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    4ce8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    4cec:	87 7f       	andi	r24, 0xF7	; 247
    4cee:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    4cf2:	08 95       	ret

00004cf4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    4cf4:	cf 93       	push	r28
    4cf6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    4cf8:	90 e0       	ldi	r25, 0x00	; 0
    4cfa:	fc 01       	movw	r30, r24
    4cfc:	e7 5b       	subi	r30, 0xB7	; 183
    4cfe:	f4 4f       	sbci	r31, 0xF4	; 244
    4d00:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    4d02:	fc 01       	movw	r30, r24
    4d04:	e1 57       	subi	r30, 0x71	; 113
    4d06:	f4 4f       	sbci	r31, 0xF4	; 244
    4d08:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4d0a:	88 23       	and	r24, r24
    4d0c:	61 f1       	breq	.+88     	; 0x4d66 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    4d0e:	90 e0       	ldi	r25, 0x00	; 0
    4d10:	88 0f       	add	r24, r24
    4d12:	99 1f       	adc	r25, r25
    4d14:	fc 01       	movw	r30, r24
    4d16:	e7 5f       	subi	r30, 0xF7	; 247
    4d18:	f3 4f       	sbci	r31, 0xF3	; 243
    4d1a:	c5 91       	lpm	r28, Z+
    4d1c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    4d1e:	fc 01       	movw	r30, r24
    4d20:	e1 51       	subi	r30, 0x11	; 17
    4d22:	f4 4f       	sbci	r31, 0xF4	; 244
    4d24:	a5 91       	lpm	r26, Z+
    4d26:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    4d28:	61 11       	cpse	r22, r1
    4d2a:	09 c0       	rjmp	.+18     	; 0x4d3e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    4d2c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4d2e:	f8 94       	cli
		*reg &= ~bit;
    4d30:	88 81       	ld	r24, Y
    4d32:	20 95       	com	r18
    4d34:	82 23       	and	r24, r18
    4d36:	88 83       	st	Y, r24
		*out &= ~bit;
    4d38:	ec 91       	ld	r30, X
    4d3a:	2e 23       	and	r18, r30
    4d3c:	0b c0       	rjmp	.+22     	; 0x4d54 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    4d3e:	62 30       	cpi	r22, 0x02	; 2
    4d40:	61 f4       	brne	.+24     	; 0x4d5a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    4d42:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4d44:	f8 94       	cli
		*reg &= ~bit;
    4d46:	88 81       	ld	r24, Y
    4d48:	32 2f       	mov	r19, r18
    4d4a:	30 95       	com	r19
    4d4c:	83 23       	and	r24, r19
    4d4e:	88 83       	st	Y, r24
		*out |= bit;
    4d50:	ec 91       	ld	r30, X
    4d52:	2e 2b       	or	r18, r30
    4d54:	2c 93       	st	X, r18
		SREG = oldSREG;
    4d56:	9f bf       	out	0x3f, r25	; 63
    4d58:	06 c0       	rjmp	.+12     	; 0x4d66 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    4d5a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    4d5c:	f8 94       	cli
		*reg |= bit;
    4d5e:	e8 81       	ld	r30, Y
    4d60:	2e 2b       	or	r18, r30
    4d62:	28 83       	st	Y, r18
		SREG = oldSREG;
    4d64:	8f bf       	out	0x3f, r24	; 63
	}
}
    4d66:	df 91       	pop	r29
    4d68:	cf 91       	pop	r28
    4d6a:	08 95       	ret

00004d6c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    4d6c:	1f 93       	push	r17
    4d6e:	cf 93       	push	r28
    4d70:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    4d72:	28 2f       	mov	r18, r24
    4d74:	30 e0       	ldi	r19, 0x00	; 0
    4d76:	f9 01       	movw	r30, r18
    4d78:	ed 5f       	subi	r30, 0xFD	; 253
    4d7a:	f4 4f       	sbci	r31, 0xF4	; 244
    4d7c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4d7e:	f9 01       	movw	r30, r18
    4d80:	e7 5b       	subi	r30, 0xB7	; 183
    4d82:	f4 4f       	sbci	r31, 0xF4	; 244
    4d84:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    4d86:	f9 01       	movw	r30, r18
    4d88:	e1 57       	subi	r30, 0x71	; 113
    4d8a:	f4 4f       	sbci	r31, 0xF4	; 244
    4d8c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4d8e:	cc 23       	and	r28, r28
    4d90:	b9 f0       	breq	.+46     	; 0x4dc0 <digitalWrite+0x54>
    4d92:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4d94:	81 11       	cpse	r24, r1
    4d96:	59 df       	rcall	.-334    	; 0x4c4a <turnOffPWM>

	out = portOutputRegister(port);
    4d98:	ec 2f       	mov	r30, r28
    4d9a:	f0 e0       	ldi	r31, 0x00	; 0
    4d9c:	ee 0f       	add	r30, r30
    4d9e:	ff 1f       	adc	r31, r31
    4da0:	e1 51       	subi	r30, 0x11	; 17
    4da2:	f4 4f       	sbci	r31, 0xF4	; 244
    4da4:	a5 91       	lpm	r26, Z+
    4da6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    4da8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4daa:	f8 94       	cli

	if (val == LOW) {
    4dac:	11 11       	cpse	r17, r1
    4dae:	04 c0       	rjmp	.+8      	; 0x4db8 <digitalWrite+0x4c>
		*out &= ~bit;
    4db0:	8c 91       	ld	r24, X
    4db2:	d0 95       	com	r29
    4db4:	d8 23       	and	r29, r24
    4db6:	02 c0       	rjmp	.+4      	; 0x4dbc <digitalWrite+0x50>
	} else {
		*out |= bit;
    4db8:	ec 91       	ld	r30, X
    4dba:	de 2b       	or	r29, r30
    4dbc:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    4dbe:	9f bf       	out	0x3f, r25	; 63
}
    4dc0:	df 91       	pop	r29
    4dc2:	cf 91       	pop	r28
    4dc4:	1f 91       	pop	r17
    4dc6:	08 95       	ret

00004dc8 <_ZN6StringD1Ev>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
    4dc8:	fc 01       	movw	r30, r24
    4dca:	80 81       	ld	r24, Z
    4dcc:	91 81       	ldd	r25, Z+1	; 0x01
    4dce:	00 97       	sbiw	r24, 0x00	; 0
    4dd0:	09 f0       	breq	.+2      	; 0x4dd4 <_ZN6StringD1Ev+0xc>
    4dd2:	f8 c1       	rjmp	.+1008   	; 0x51c4 <free>
    4dd4:	08 95       	ret

00004dd6 <_ZN6String10invalidateEv>:
    4dd6:	cf 93       	push	r28
    4dd8:	df 93       	push	r29
    4dda:	ec 01       	movw	r28, r24
    4ddc:	88 81       	ld	r24, Y
    4dde:	99 81       	ldd	r25, Y+1	; 0x01
    4de0:	00 97       	sbiw	r24, 0x00	; 0
    4de2:	09 f0       	breq	.+2      	; 0x4de6 <_ZN6String10invalidateEv+0x10>
    4de4:	ef d1       	rcall	.+990    	; 0x51c4 <free>
    4de6:	19 82       	std	Y+1, r1	; 0x01
    4de8:	18 82       	st	Y, r1
    4dea:	1d 82       	std	Y+5, r1	; 0x05
    4dec:	1c 82       	std	Y+4, r1	; 0x04
    4dee:	1b 82       	std	Y+3, r1	; 0x03
    4df0:	1a 82       	std	Y+2, r1	; 0x02
    4df2:	df 91       	pop	r29
    4df4:	cf 91       	pop	r28
    4df6:	08 95       	ret

00004df8 <_ZN6String12changeBufferEj>:
    4df8:	0f 93       	push	r16
    4dfa:	1f 93       	push	r17
    4dfc:	cf 93       	push	r28
    4dfe:	df 93       	push	r29
    4e00:	ec 01       	movw	r28, r24
    4e02:	8b 01       	movw	r16, r22
    4e04:	6f 5f       	subi	r22, 0xFF	; 255
    4e06:	7f 4f       	sbci	r23, 0xFF	; 255
    4e08:	88 81       	ld	r24, Y
    4e0a:	99 81       	ldd	r25, Y+1	; 0x01
    4e0c:	64 d2       	rcall	.+1224   	; 0x52d6 <realloc>
    4e0e:	00 97       	sbiw	r24, 0x00	; 0
    4e10:	31 f0       	breq	.+12     	; 0x4e1e <_ZN6String12changeBufferEj+0x26>
    4e12:	99 83       	std	Y+1, r25	; 0x01
    4e14:	88 83       	st	Y, r24
    4e16:	1b 83       	std	Y+3, r17	; 0x03
    4e18:	0a 83       	std	Y+2, r16	; 0x02
    4e1a:	81 e0       	ldi	r24, 0x01	; 1
    4e1c:	01 c0       	rjmp	.+2      	; 0x4e20 <_ZN6String12changeBufferEj+0x28>
    4e1e:	80 e0       	ldi	r24, 0x00	; 0
    4e20:	df 91       	pop	r29
    4e22:	cf 91       	pop	r28
    4e24:	1f 91       	pop	r17
    4e26:	0f 91       	pop	r16
    4e28:	08 95       	ret

00004e2a <_ZN6String7reserveEj>:
    4e2a:	cf 93       	push	r28
    4e2c:	df 93       	push	r29
    4e2e:	ec 01       	movw	r28, r24
    4e30:	88 81       	ld	r24, Y
    4e32:	99 81       	ldd	r25, Y+1	; 0x01
    4e34:	89 2b       	or	r24, r25
    4e36:	29 f0       	breq	.+10     	; 0x4e42 <_ZN6String7reserveEj+0x18>
    4e38:	8a 81       	ldd	r24, Y+2	; 0x02
    4e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    4e3c:	86 17       	cp	r24, r22
    4e3e:	97 07       	cpc	r25, r23
    4e40:	58 f4       	brcc	.+22     	; 0x4e58 <_ZN6String7reserveEj+0x2e>
    4e42:	ce 01       	movw	r24, r28
    4e44:	d9 df       	rcall	.-78     	; 0x4df8 <_ZN6String12changeBufferEj>
    4e46:	88 23       	and	r24, r24
    4e48:	41 f0       	breq	.+16     	; 0x4e5a <_ZN6String7reserveEj+0x30>
    4e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    4e4c:	9d 81       	ldd	r25, Y+5	; 0x05
    4e4e:	89 2b       	or	r24, r25
    4e50:	19 f4       	brne	.+6      	; 0x4e58 <_ZN6String7reserveEj+0x2e>
    4e52:	e8 81       	ld	r30, Y
    4e54:	f9 81       	ldd	r31, Y+1	; 0x01
    4e56:	10 82       	st	Z, r1
    4e58:	81 e0       	ldi	r24, 0x01	; 1
    4e5a:	df 91       	pop	r29
    4e5c:	cf 91       	pop	r28
    4e5e:	08 95       	ret

00004e60 <_ZN6String4copyEPKcj>:
    4e60:	ef 92       	push	r14
    4e62:	ff 92       	push	r15
    4e64:	0f 93       	push	r16
    4e66:	1f 93       	push	r17
    4e68:	cf 93       	push	r28
    4e6a:	df 93       	push	r29
    4e6c:	ec 01       	movw	r28, r24
    4e6e:	7b 01       	movw	r14, r22
    4e70:	8a 01       	movw	r16, r20
    4e72:	ba 01       	movw	r22, r20
    4e74:	da df       	rcall	.-76     	; 0x4e2a <_ZN6String7reserveEj>
    4e76:	81 11       	cpse	r24, r1
    4e78:	03 c0       	rjmp	.+6      	; 0x4e80 <_ZN6String4copyEPKcj+0x20>
    4e7a:	ce 01       	movw	r24, r28
    4e7c:	ac df       	rcall	.-168    	; 0x4dd6 <_ZN6String10invalidateEv>
    4e7e:	06 c0       	rjmp	.+12     	; 0x4e8c <_ZN6String4copyEPKcj+0x2c>
    4e80:	1d 83       	std	Y+5, r17	; 0x05
    4e82:	0c 83       	std	Y+4, r16	; 0x04
    4e84:	b7 01       	movw	r22, r14
    4e86:	88 81       	ld	r24, Y
    4e88:	99 81       	ldd	r25, Y+1	; 0x01
    4e8a:	19 d3       	rcall	.+1586   	; 0x54be <strcpy>
    4e8c:	ce 01       	movw	r24, r28
    4e8e:	df 91       	pop	r29
    4e90:	cf 91       	pop	r28
    4e92:	1f 91       	pop	r17
    4e94:	0f 91       	pop	r16
    4e96:	ff 90       	pop	r15
    4e98:	ef 90       	pop	r14
    4e9a:	08 95       	ret

00004e9c <_ZN6StringC1EPKc>:
    4e9c:	fc 01       	movw	r30, r24
    4e9e:	11 82       	std	Z+1, r1	; 0x01
    4ea0:	10 82       	st	Z, r1
    4ea2:	13 82       	std	Z+3, r1	; 0x03
    4ea4:	12 82       	std	Z+2, r1	; 0x02
    4ea6:	15 82       	std	Z+5, r1	; 0x05
    4ea8:	14 82       	std	Z+4, r1	; 0x04
    4eaa:	61 15       	cp	r22, r1
    4eac:	71 05       	cpc	r23, r1
    4eae:	49 f0       	breq	.+18     	; 0x4ec2 <_ZN6StringC1EPKc+0x26>
    4eb0:	fb 01       	movw	r30, r22
    4eb2:	01 90       	ld	r0, Z+
    4eb4:	00 20       	and	r0, r0
    4eb6:	e9 f7       	brne	.-6      	; 0x4eb2 <_ZN6StringC1EPKc+0x16>
    4eb8:	31 97       	sbiw	r30, 0x01	; 1
    4eba:	af 01       	movw	r20, r30
    4ebc:	46 1b       	sub	r20, r22
    4ebe:	57 0b       	sbc	r21, r23
    4ec0:	cf cf       	rjmp	.-98     	; 0x4e60 <_ZN6String4copyEPKcj>
    4ec2:	08 95       	ret

00004ec4 <_ZN6String6concatEPKcj>:
    4ec4:	ef 92       	push	r14
    4ec6:	ff 92       	push	r15
    4ec8:	0f 93       	push	r16
    4eca:	1f 93       	push	r17
    4ecc:	cf 93       	push	r28
    4ece:	df 93       	push	r29
    4ed0:	61 15       	cp	r22, r1
    4ed2:	71 05       	cpc	r23, r1
    4ed4:	11 f4       	brne	.+4      	; 0x4eda <_ZN6String6concatEPKcj+0x16>
    4ed6:	80 e0       	ldi	r24, 0x00	; 0
    4ed8:	1a c0       	rjmp	.+52     	; 0x4f0e <_ZN6String6concatEPKcj+0x4a>
    4eda:	41 15       	cp	r20, r1
    4edc:	51 05       	cpc	r21, r1
    4ede:	b1 f0       	breq	.+44     	; 0x4f0c <_ZN6String6concatEPKcj+0x48>
    4ee0:	7b 01       	movw	r14, r22
    4ee2:	ec 01       	movw	r28, r24
    4ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    4ee6:	9d 81       	ldd	r25, Y+5	; 0x05
    4ee8:	8a 01       	movw	r16, r20
    4eea:	08 0f       	add	r16, r24
    4eec:	19 1f       	adc	r17, r25
    4eee:	b8 01       	movw	r22, r16
    4ef0:	ce 01       	movw	r24, r28
    4ef2:	9b df       	rcall	.-202    	; 0x4e2a <_ZN6String7reserveEj>
    4ef4:	88 23       	and	r24, r24
    4ef6:	79 f3       	breq	.-34     	; 0x4ed6 <_ZN6String6concatEPKcj+0x12>
    4ef8:	28 81       	ld	r18, Y
    4efa:	39 81       	ldd	r19, Y+1	; 0x01
    4efc:	8c 81       	ldd	r24, Y+4	; 0x04
    4efe:	9d 81       	ldd	r25, Y+5	; 0x05
    4f00:	b7 01       	movw	r22, r14
    4f02:	82 0f       	add	r24, r18
    4f04:	93 1f       	adc	r25, r19
    4f06:	db d2       	rcall	.+1462   	; 0x54be <strcpy>
    4f08:	1d 83       	std	Y+5, r17	; 0x05
    4f0a:	0c 83       	std	Y+4, r16	; 0x04
    4f0c:	81 e0       	ldi	r24, 0x01	; 1
    4f0e:	df 91       	pop	r29
    4f10:	cf 91       	pop	r28
    4f12:	1f 91       	pop	r17
    4f14:	0f 91       	pop	r16
    4f16:	ff 90       	pop	r15
    4f18:	ef 90       	pop	r14
    4f1a:	08 95       	ret

00004f1c <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    4f1c:	61 15       	cp	r22, r1
    4f1e:	71 05       	cpc	r23, r1
    4f20:	49 f0       	breq	.+18     	; 0x4f34 <_ZN6String6concatEPKc+0x18>
	return concat(cstr, strlen(cstr));
    4f22:	fb 01       	movw	r30, r22
    4f24:	01 90       	ld	r0, Z+
    4f26:	00 20       	and	r0, r0
    4f28:	e9 f7       	brne	.-6      	; 0x4f24 <_ZN6String6concatEPKc+0x8>
    4f2a:	31 97       	sbiw	r30, 0x01	; 1
    4f2c:	af 01       	movw	r20, r30
    4f2e:	46 1b       	sub	r20, r22
    4f30:	57 0b       	sbc	r21, r23
    4f32:	c8 cf       	rjmp	.-112    	; 0x4ec4 <_ZN6String6concatEPKcj>
}
    4f34:	80 e0       	ldi	r24, 0x00	; 0
    4f36:	08 95       	ret

00004f38 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    4f38:	cf 93       	push	r28
    4f3a:	df 93       	push	r29
    4f3c:	1f 92       	push	r1
    4f3e:	1f 92       	push	r1
    4f40:	cd b7       	in	r28, 0x3d	; 61
    4f42:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
    4f44:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    4f46:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    4f48:	41 e0       	ldi	r20, 0x01	; 1
    4f4a:	50 e0       	ldi	r21, 0x00	; 0
    4f4c:	be 01       	movw	r22, r28
    4f4e:	6f 5f       	subi	r22, 0xFF	; 255
    4f50:	7f 4f       	sbci	r23, 0xFF	; 255
    4f52:	b8 df       	rcall	.-144    	; 0x4ec4 <_ZN6String6concatEPKcj>
}
    4f54:	0f 90       	pop	r0
    4f56:	0f 90       	pop	r0
    4f58:	df 91       	pop	r29
    4f5a:	cf 91       	pop	r28
    4f5c:	08 95       	ret

00004f5e <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    4f5e:	ef 92       	push	r14
    4f60:	ff 92       	push	r15
    4f62:	0f 93       	push	r16
    4f64:	1f 93       	push	r17
    4f66:	cf 93       	push	r28
    4f68:	df 93       	push	r29
    4f6a:	00 d0       	rcall	.+0      	; 0x4f6c <_ZN6String6concatEh+0xe>
    4f6c:	1f 92       	push	r1
    4f6e:	cd b7       	in	r28, 0x3d	; 61
    4f70:	de b7       	in	r29, 0x3e	; 62
    4f72:	7c 01       	movw	r14, r24
    4f74:	86 2f       	mov	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    4f76:	4a e0       	ldi	r20, 0x0A	; 10
    4f78:	8e 01       	movw	r16, r28
    4f7a:	0f 5f       	subi	r16, 0xFF	; 255
    4f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f7e:	b8 01       	movw	r22, r16
    4f80:	90 e0       	ldi	r25, 0x00	; 0
    4f82:	a4 d2       	rcall	.+1352   	; 0x54cc <__itoa_ncheck>
	char buf[1 + 3 * sizeof(unsigned char)];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
    4f84:	f8 01       	movw	r30, r16
    4f86:	01 90       	ld	r0, Z+
    4f88:	00 20       	and	r0, r0
    4f8a:	e9 f7       	brne	.-6      	; 0x4f86 <_ZN6String6concatEh+0x28>
    4f8c:	31 97       	sbiw	r30, 0x01	; 1
    4f8e:	af 01       	movw	r20, r30
    4f90:	40 1b       	sub	r20, r16
    4f92:	51 0b       	sbc	r21, r17
    4f94:	b8 01       	movw	r22, r16
    4f96:	c7 01       	movw	r24, r14
    4f98:	95 df       	rcall	.-214    	; 0x4ec4 <_ZN6String6concatEPKcj>
}
    4f9a:	0f 90       	pop	r0
    4f9c:	0f 90       	pop	r0
    4f9e:	0f 90       	pop	r0
    4fa0:	0f 90       	pop	r0
    4fa2:	df 91       	pop	r29
    4fa4:	cf 91       	pop	r28
    4fa6:	1f 91       	pop	r17
    4fa8:	0f 91       	pop	r16
    4faa:	ff 90       	pop	r15
    4fac:	ef 90       	pop	r14
    4fae:	08 95       	ret

00004fb0 <_ZN6String6concatEi>:

unsigned char String::concat(int num)
{
    4fb0:	ef 92       	push	r14
    4fb2:	ff 92       	push	r15
    4fb4:	0f 93       	push	r16
    4fb6:	1f 93       	push	r17
    4fb8:	cf 93       	push	r28
    4fba:	df 93       	push	r29
    4fbc:	cd b7       	in	r28, 0x3d	; 61
    4fbe:	de b7       	in	r29, 0x3e	; 62
    4fc0:	28 97       	sbiw	r28, 0x08	; 8
    4fc2:	0f b6       	in	r0, 0x3f	; 63
    4fc4:	f8 94       	cli
    4fc6:	de bf       	out	0x3e, r29	; 62
    4fc8:	0f be       	out	0x3f, r0	; 63
    4fca:	cd bf       	out	0x3d, r28	; 61
    4fcc:	7c 01       	movw	r14, r24
    4fce:	cb 01       	movw	r24, r22
    4fd0:	4a e0       	ldi	r20, 0x0A	; 10
    4fd2:	8e 01       	movw	r16, r28
    4fd4:	0f 5f       	subi	r16, 0xFF	; 255
    4fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    4fd8:	b8 01       	movw	r22, r16
    4fda:	78 d2       	rcall	.+1264   	; 0x54cc <__itoa_ncheck>
	char buf[2 + 3 * sizeof(int)];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
    4fdc:	f8 01       	movw	r30, r16
    4fde:	01 90       	ld	r0, Z+
    4fe0:	00 20       	and	r0, r0
    4fe2:	e9 f7       	brne	.-6      	; 0x4fde <_ZN6String6concatEi+0x2e>
    4fe4:	31 97       	sbiw	r30, 0x01	; 1
    4fe6:	af 01       	movw	r20, r30
    4fe8:	40 1b       	sub	r20, r16
    4fea:	51 0b       	sbc	r21, r17
    4fec:	b8 01       	movw	r22, r16
    4fee:	c7 01       	movw	r24, r14
    4ff0:	69 df       	rcall	.-302    	; 0x4ec4 <_ZN6String6concatEPKcj>
}
    4ff2:	28 96       	adiw	r28, 0x08	; 8
    4ff4:	0f b6       	in	r0, 0x3f	; 63
    4ff6:	f8 94       	cli
    4ff8:	de bf       	out	0x3e, r29	; 62
    4ffa:	0f be       	out	0x3f, r0	; 63
    4ffc:	cd bf       	out	0x3d, r28	; 61
    4ffe:	df 91       	pop	r29
    5000:	cf 91       	pop	r28
    5002:	1f 91       	pop	r17
    5004:	0f 91       	pop	r16
    5006:	ff 90       	pop	r15
    5008:	ef 90       	pop	r14
    500a:	08 95       	ret

0000500c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    500c:	08 95       	ret

0000500e <__udivmodsi4>:
    500e:	a1 e2       	ldi	r26, 0x21	; 33
    5010:	1a 2e       	mov	r1, r26
    5012:	aa 1b       	sub	r26, r26
    5014:	bb 1b       	sub	r27, r27
    5016:	fd 01       	movw	r30, r26
    5018:	0d c0       	rjmp	.+26     	; 0x5034 <__udivmodsi4_ep>

0000501a <__udivmodsi4_loop>:
    501a:	aa 1f       	adc	r26, r26
    501c:	bb 1f       	adc	r27, r27
    501e:	ee 1f       	adc	r30, r30
    5020:	ff 1f       	adc	r31, r31
    5022:	a2 17       	cp	r26, r18
    5024:	b3 07       	cpc	r27, r19
    5026:	e4 07       	cpc	r30, r20
    5028:	f5 07       	cpc	r31, r21
    502a:	20 f0       	brcs	.+8      	; 0x5034 <__udivmodsi4_ep>
    502c:	a2 1b       	sub	r26, r18
    502e:	b3 0b       	sbc	r27, r19
    5030:	e4 0b       	sbc	r30, r20
    5032:	f5 0b       	sbc	r31, r21

00005034 <__udivmodsi4_ep>:
    5034:	66 1f       	adc	r22, r22
    5036:	77 1f       	adc	r23, r23
    5038:	88 1f       	adc	r24, r24
    503a:	99 1f       	adc	r25, r25
    503c:	1a 94       	dec	r1
    503e:	69 f7       	brne	.-38     	; 0x501a <__udivmodsi4_loop>
    5040:	60 95       	com	r22
    5042:	70 95       	com	r23
    5044:	80 95       	com	r24
    5046:	90 95       	com	r25
    5048:	9b 01       	movw	r18, r22
    504a:	ac 01       	movw	r20, r24
    504c:	bd 01       	movw	r22, r26
    504e:	cf 01       	movw	r24, r30
    5050:	08 95       	ret

00005052 <__tablejump2__>:
    5052:	ee 0f       	add	r30, r30
    5054:	ff 1f       	adc	r31, r31
    5056:	88 1f       	adc	r24, r24
    5058:	8b bf       	out	0x3b, r24	; 59
    505a:	07 90       	elpm	r0, Z+
    505c:	f6 91       	elpm	r31, Z
    505e:	e0 2d       	mov	r30, r0
    5060:	19 94       	eijmp

00005062 <__umulhisi3>:
    5062:	a2 9f       	mul	r26, r18
    5064:	b0 01       	movw	r22, r0
    5066:	b3 9f       	mul	r27, r19
    5068:	c0 01       	movw	r24, r0
    506a:	a3 9f       	mul	r26, r19
    506c:	70 0d       	add	r23, r0
    506e:	81 1d       	adc	r24, r1
    5070:	11 24       	eor	r1, r1
    5072:	91 1d       	adc	r25, r1
    5074:	b2 9f       	mul	r27, r18
    5076:	70 0d       	add	r23, r0
    5078:	81 1d       	adc	r24, r1
    507a:	11 24       	eor	r1, r1
    507c:	91 1d       	adc	r25, r1
    507e:	08 95       	ret

00005080 <__muluhisi3>:
    5080:	f0 df       	rcall	.-32     	; 0x5062 <__umulhisi3>
    5082:	a5 9f       	mul	r26, r21
    5084:	90 0d       	add	r25, r0
    5086:	b4 9f       	mul	r27, r20
    5088:	90 0d       	add	r25, r0
    508a:	a4 9f       	mul	r26, r20
    508c:	80 0d       	add	r24, r0
    508e:	91 1d       	adc	r25, r1
    5090:	11 24       	eor	r1, r1
    5092:	08 95       	ret

00005094 <malloc>:
    5094:	0f 93       	push	r16
    5096:	1f 93       	push	r17
    5098:	cf 93       	push	r28
    509a:	df 93       	push	r29
    509c:	82 30       	cpi	r24, 0x02	; 2
    509e:	91 05       	cpc	r25, r1
    50a0:	10 f4       	brcc	.+4      	; 0x50a6 <malloc+0x12>
    50a2:	82 e0       	ldi	r24, 0x02	; 2
    50a4:	90 e0       	ldi	r25, 0x00	; 0
    50a6:	e0 91 ae 04 	lds	r30, 0x04AE	; 0x8004ae <__flp>
    50aa:	f0 91 af 04 	lds	r31, 0x04AF	; 0x8004af <__flp+0x1>
    50ae:	20 e0       	ldi	r18, 0x00	; 0
    50b0:	30 e0       	ldi	r19, 0x00	; 0
    50b2:	a0 e0       	ldi	r26, 0x00	; 0
    50b4:	b0 e0       	ldi	r27, 0x00	; 0
    50b6:	30 97       	sbiw	r30, 0x00	; 0
    50b8:	19 f1       	breq	.+70     	; 0x5100 <malloc+0x6c>
    50ba:	40 81       	ld	r20, Z
    50bc:	51 81       	ldd	r21, Z+1	; 0x01
    50be:	02 81       	ldd	r16, Z+2	; 0x02
    50c0:	13 81       	ldd	r17, Z+3	; 0x03
    50c2:	48 17       	cp	r20, r24
    50c4:	59 07       	cpc	r21, r25
    50c6:	c8 f0       	brcs	.+50     	; 0x50fa <malloc+0x66>
    50c8:	84 17       	cp	r24, r20
    50ca:	95 07       	cpc	r25, r21
    50cc:	69 f4       	brne	.+26     	; 0x50e8 <malloc+0x54>
    50ce:	10 97       	sbiw	r26, 0x00	; 0
    50d0:	31 f0       	breq	.+12     	; 0x50de <malloc+0x4a>
    50d2:	12 96       	adiw	r26, 0x02	; 2
    50d4:	0c 93       	st	X, r16
    50d6:	12 97       	sbiw	r26, 0x02	; 2
    50d8:	13 96       	adiw	r26, 0x03	; 3
    50da:	1c 93       	st	X, r17
    50dc:	27 c0       	rjmp	.+78     	; 0x512c <malloc+0x98>
    50de:	00 93 ae 04 	sts	0x04AE, r16	; 0x8004ae <__flp>
    50e2:	10 93 af 04 	sts	0x04AF, r17	; 0x8004af <__flp+0x1>
    50e6:	22 c0       	rjmp	.+68     	; 0x512c <malloc+0x98>
    50e8:	21 15       	cp	r18, r1
    50ea:	31 05       	cpc	r19, r1
    50ec:	19 f0       	breq	.+6      	; 0x50f4 <malloc+0x60>
    50ee:	42 17       	cp	r20, r18
    50f0:	53 07       	cpc	r21, r19
    50f2:	18 f4       	brcc	.+6      	; 0x50fa <malloc+0x66>
    50f4:	9a 01       	movw	r18, r20
    50f6:	bd 01       	movw	r22, r26
    50f8:	ef 01       	movw	r28, r30
    50fa:	df 01       	movw	r26, r30
    50fc:	f8 01       	movw	r30, r16
    50fe:	db cf       	rjmp	.-74     	; 0x50b6 <malloc+0x22>
    5100:	21 15       	cp	r18, r1
    5102:	31 05       	cpc	r19, r1
    5104:	f9 f0       	breq	.+62     	; 0x5144 <malloc+0xb0>
    5106:	28 1b       	sub	r18, r24
    5108:	39 0b       	sbc	r19, r25
    510a:	24 30       	cpi	r18, 0x04	; 4
    510c:	31 05       	cpc	r19, r1
    510e:	80 f4       	brcc	.+32     	; 0x5130 <malloc+0x9c>
    5110:	8a 81       	ldd	r24, Y+2	; 0x02
    5112:	9b 81       	ldd	r25, Y+3	; 0x03
    5114:	61 15       	cp	r22, r1
    5116:	71 05       	cpc	r23, r1
    5118:	21 f0       	breq	.+8      	; 0x5122 <malloc+0x8e>
    511a:	fb 01       	movw	r30, r22
    511c:	93 83       	std	Z+3, r25	; 0x03
    511e:	82 83       	std	Z+2, r24	; 0x02
    5120:	04 c0       	rjmp	.+8      	; 0x512a <malloc+0x96>
    5122:	90 93 af 04 	sts	0x04AF, r25	; 0x8004af <__flp+0x1>
    5126:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <__flp>
    512a:	fe 01       	movw	r30, r28
    512c:	32 96       	adiw	r30, 0x02	; 2
    512e:	44 c0       	rjmp	.+136    	; 0x51b8 <malloc+0x124>
    5130:	fe 01       	movw	r30, r28
    5132:	e2 0f       	add	r30, r18
    5134:	f3 1f       	adc	r31, r19
    5136:	81 93       	st	Z+, r24
    5138:	91 93       	st	Z+, r25
    513a:	22 50       	subi	r18, 0x02	; 2
    513c:	31 09       	sbc	r19, r1
    513e:	39 83       	std	Y+1, r19	; 0x01
    5140:	28 83       	st	Y, r18
    5142:	3a c0       	rjmp	.+116    	; 0x51b8 <malloc+0x124>
    5144:	20 91 ac 04 	lds	r18, 0x04AC	; 0x8004ac <__brkval>
    5148:	30 91 ad 04 	lds	r19, 0x04AD	; 0x8004ad <__brkval+0x1>
    514c:	23 2b       	or	r18, r19
    514e:	41 f4       	brne	.+16     	; 0x5160 <malloc+0xcc>
    5150:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5154:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5158:	30 93 ad 04 	sts	0x04AD, r19	; 0x8004ad <__brkval+0x1>
    515c:	20 93 ac 04 	sts	0x04AC, r18	; 0x8004ac <__brkval>
    5160:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5164:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5168:	21 15       	cp	r18, r1
    516a:	31 05       	cpc	r19, r1
    516c:	41 f4       	brne	.+16     	; 0x517e <malloc+0xea>
    516e:	2d b7       	in	r18, 0x3d	; 61
    5170:	3e b7       	in	r19, 0x3e	; 62
    5172:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5176:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    517a:	24 1b       	sub	r18, r20
    517c:	35 0b       	sbc	r19, r21
    517e:	e0 91 ac 04 	lds	r30, 0x04AC	; 0x8004ac <__brkval>
    5182:	f0 91 ad 04 	lds	r31, 0x04AD	; 0x8004ad <__brkval+0x1>
    5186:	e2 17       	cp	r30, r18
    5188:	f3 07       	cpc	r31, r19
    518a:	a0 f4       	brcc	.+40     	; 0x51b4 <malloc+0x120>
    518c:	2e 1b       	sub	r18, r30
    518e:	3f 0b       	sbc	r19, r31
    5190:	28 17       	cp	r18, r24
    5192:	39 07       	cpc	r19, r25
    5194:	78 f0       	brcs	.+30     	; 0x51b4 <malloc+0x120>
    5196:	ac 01       	movw	r20, r24
    5198:	4e 5f       	subi	r20, 0xFE	; 254
    519a:	5f 4f       	sbci	r21, 0xFF	; 255
    519c:	24 17       	cp	r18, r20
    519e:	35 07       	cpc	r19, r21
    51a0:	48 f0       	brcs	.+18     	; 0x51b4 <malloc+0x120>
    51a2:	4e 0f       	add	r20, r30
    51a4:	5f 1f       	adc	r21, r31
    51a6:	50 93 ad 04 	sts	0x04AD, r21	; 0x8004ad <__brkval+0x1>
    51aa:	40 93 ac 04 	sts	0x04AC, r20	; 0x8004ac <__brkval>
    51ae:	81 93       	st	Z+, r24
    51b0:	91 93       	st	Z+, r25
    51b2:	02 c0       	rjmp	.+4      	; 0x51b8 <malloc+0x124>
    51b4:	e0 e0       	ldi	r30, 0x00	; 0
    51b6:	f0 e0       	ldi	r31, 0x00	; 0
    51b8:	cf 01       	movw	r24, r30
    51ba:	df 91       	pop	r29
    51bc:	cf 91       	pop	r28
    51be:	1f 91       	pop	r17
    51c0:	0f 91       	pop	r16
    51c2:	08 95       	ret

000051c4 <free>:
    51c4:	cf 93       	push	r28
    51c6:	df 93       	push	r29
    51c8:	00 97       	sbiw	r24, 0x00	; 0
    51ca:	09 f4       	brne	.+2      	; 0x51ce <free+0xa>
    51cc:	81 c0       	rjmp	.+258    	; 0x52d0 <free+0x10c>
    51ce:	fc 01       	movw	r30, r24
    51d0:	32 97       	sbiw	r30, 0x02	; 2
    51d2:	13 82       	std	Z+3, r1	; 0x03
    51d4:	12 82       	std	Z+2, r1	; 0x02
    51d6:	a0 91 ae 04 	lds	r26, 0x04AE	; 0x8004ae <__flp>
    51da:	b0 91 af 04 	lds	r27, 0x04AF	; 0x8004af <__flp+0x1>
    51de:	10 97       	sbiw	r26, 0x00	; 0
    51e0:	81 f4       	brne	.+32     	; 0x5202 <free+0x3e>
    51e2:	20 81       	ld	r18, Z
    51e4:	31 81       	ldd	r19, Z+1	; 0x01
    51e6:	82 0f       	add	r24, r18
    51e8:	93 1f       	adc	r25, r19
    51ea:	20 91 ac 04 	lds	r18, 0x04AC	; 0x8004ac <__brkval>
    51ee:	30 91 ad 04 	lds	r19, 0x04AD	; 0x8004ad <__brkval+0x1>
    51f2:	28 17       	cp	r18, r24
    51f4:	39 07       	cpc	r19, r25
    51f6:	51 f5       	brne	.+84     	; 0x524c <free+0x88>
    51f8:	f0 93 ad 04 	sts	0x04AD, r31	; 0x8004ad <__brkval+0x1>
    51fc:	e0 93 ac 04 	sts	0x04AC, r30	; 0x8004ac <__brkval>
    5200:	67 c0       	rjmp	.+206    	; 0x52d0 <free+0x10c>
    5202:	ed 01       	movw	r28, r26
    5204:	20 e0       	ldi	r18, 0x00	; 0
    5206:	30 e0       	ldi	r19, 0x00	; 0
    5208:	ce 17       	cp	r28, r30
    520a:	df 07       	cpc	r29, r31
    520c:	40 f4       	brcc	.+16     	; 0x521e <free+0x5a>
    520e:	4a 81       	ldd	r20, Y+2	; 0x02
    5210:	5b 81       	ldd	r21, Y+3	; 0x03
    5212:	9e 01       	movw	r18, r28
    5214:	41 15       	cp	r20, r1
    5216:	51 05       	cpc	r21, r1
    5218:	f1 f0       	breq	.+60     	; 0x5256 <free+0x92>
    521a:	ea 01       	movw	r28, r20
    521c:	f5 cf       	rjmp	.-22     	; 0x5208 <free+0x44>
    521e:	d3 83       	std	Z+3, r29	; 0x03
    5220:	c2 83       	std	Z+2, r28	; 0x02
    5222:	40 81       	ld	r20, Z
    5224:	51 81       	ldd	r21, Z+1	; 0x01
    5226:	84 0f       	add	r24, r20
    5228:	95 1f       	adc	r25, r21
    522a:	c8 17       	cp	r28, r24
    522c:	d9 07       	cpc	r29, r25
    522e:	59 f4       	brne	.+22     	; 0x5246 <free+0x82>
    5230:	88 81       	ld	r24, Y
    5232:	99 81       	ldd	r25, Y+1	; 0x01
    5234:	84 0f       	add	r24, r20
    5236:	95 1f       	adc	r25, r21
    5238:	02 96       	adiw	r24, 0x02	; 2
    523a:	91 83       	std	Z+1, r25	; 0x01
    523c:	80 83       	st	Z, r24
    523e:	8a 81       	ldd	r24, Y+2	; 0x02
    5240:	9b 81       	ldd	r25, Y+3	; 0x03
    5242:	93 83       	std	Z+3, r25	; 0x03
    5244:	82 83       	std	Z+2, r24	; 0x02
    5246:	21 15       	cp	r18, r1
    5248:	31 05       	cpc	r19, r1
    524a:	29 f4       	brne	.+10     	; 0x5256 <free+0x92>
    524c:	f0 93 af 04 	sts	0x04AF, r31	; 0x8004af <__flp+0x1>
    5250:	e0 93 ae 04 	sts	0x04AE, r30	; 0x8004ae <__flp>
    5254:	3d c0       	rjmp	.+122    	; 0x52d0 <free+0x10c>
    5256:	e9 01       	movw	r28, r18
    5258:	fb 83       	std	Y+3, r31	; 0x03
    525a:	ea 83       	std	Y+2, r30	; 0x02
    525c:	49 91       	ld	r20, Y+
    525e:	59 91       	ld	r21, Y+
    5260:	c4 0f       	add	r28, r20
    5262:	d5 1f       	adc	r29, r21
    5264:	ec 17       	cp	r30, r28
    5266:	fd 07       	cpc	r31, r29
    5268:	61 f4       	brne	.+24     	; 0x5282 <free+0xbe>
    526a:	80 81       	ld	r24, Z
    526c:	91 81       	ldd	r25, Z+1	; 0x01
    526e:	84 0f       	add	r24, r20
    5270:	95 1f       	adc	r25, r21
    5272:	02 96       	adiw	r24, 0x02	; 2
    5274:	e9 01       	movw	r28, r18
    5276:	99 83       	std	Y+1, r25	; 0x01
    5278:	88 83       	st	Y, r24
    527a:	82 81       	ldd	r24, Z+2	; 0x02
    527c:	93 81       	ldd	r25, Z+3	; 0x03
    527e:	9b 83       	std	Y+3, r25	; 0x03
    5280:	8a 83       	std	Y+2, r24	; 0x02
    5282:	e0 e0       	ldi	r30, 0x00	; 0
    5284:	f0 e0       	ldi	r31, 0x00	; 0
    5286:	12 96       	adiw	r26, 0x02	; 2
    5288:	8d 91       	ld	r24, X+
    528a:	9c 91       	ld	r25, X
    528c:	13 97       	sbiw	r26, 0x03	; 3
    528e:	00 97       	sbiw	r24, 0x00	; 0
    5290:	19 f0       	breq	.+6      	; 0x5298 <free+0xd4>
    5292:	fd 01       	movw	r30, r26
    5294:	dc 01       	movw	r26, r24
    5296:	f7 cf       	rjmp	.-18     	; 0x5286 <free+0xc2>
    5298:	8d 91       	ld	r24, X+
    529a:	9c 91       	ld	r25, X
    529c:	11 97       	sbiw	r26, 0x01	; 1
    529e:	9d 01       	movw	r18, r26
    52a0:	2e 5f       	subi	r18, 0xFE	; 254
    52a2:	3f 4f       	sbci	r19, 0xFF	; 255
    52a4:	82 0f       	add	r24, r18
    52a6:	93 1f       	adc	r25, r19
    52a8:	20 91 ac 04 	lds	r18, 0x04AC	; 0x8004ac <__brkval>
    52ac:	30 91 ad 04 	lds	r19, 0x04AD	; 0x8004ad <__brkval+0x1>
    52b0:	28 17       	cp	r18, r24
    52b2:	39 07       	cpc	r19, r25
    52b4:	69 f4       	brne	.+26     	; 0x52d0 <free+0x10c>
    52b6:	30 97       	sbiw	r30, 0x00	; 0
    52b8:	29 f4       	brne	.+10     	; 0x52c4 <free+0x100>
    52ba:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <__flp+0x1>
    52be:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <__flp>
    52c2:	02 c0       	rjmp	.+4      	; 0x52c8 <free+0x104>
    52c4:	13 82       	std	Z+3, r1	; 0x03
    52c6:	12 82       	std	Z+2, r1	; 0x02
    52c8:	b0 93 ad 04 	sts	0x04AD, r27	; 0x8004ad <__brkval+0x1>
    52cc:	a0 93 ac 04 	sts	0x04AC, r26	; 0x8004ac <__brkval>
    52d0:	df 91       	pop	r29
    52d2:	cf 91       	pop	r28
    52d4:	08 95       	ret

000052d6 <realloc>:
    52d6:	6f 92       	push	r6
    52d8:	7f 92       	push	r7
    52da:	8f 92       	push	r8
    52dc:	9f 92       	push	r9
    52de:	af 92       	push	r10
    52e0:	bf 92       	push	r11
    52e2:	cf 92       	push	r12
    52e4:	df 92       	push	r13
    52e6:	ef 92       	push	r14
    52e8:	ff 92       	push	r15
    52ea:	0f 93       	push	r16
    52ec:	1f 93       	push	r17
    52ee:	cf 93       	push	r28
    52f0:	df 93       	push	r29
    52f2:	00 97       	sbiw	r24, 0x00	; 0
    52f4:	81 f4       	brne	.+32     	; 0x5316 <realloc+0x40>
    52f6:	cb 01       	movw	r24, r22
    52f8:	df 91       	pop	r29
    52fa:	cf 91       	pop	r28
    52fc:	1f 91       	pop	r17
    52fe:	0f 91       	pop	r16
    5300:	ff 90       	pop	r15
    5302:	ef 90       	pop	r14
    5304:	df 90       	pop	r13
    5306:	cf 90       	pop	r12
    5308:	bf 90       	pop	r11
    530a:	af 90       	pop	r10
    530c:	9f 90       	pop	r9
    530e:	8f 90       	pop	r8
    5310:	7f 90       	pop	r7
    5312:	6f 90       	pop	r6
    5314:	bf ce       	rjmp	.-642    	; 0x5094 <malloc>
    5316:	fc 01       	movw	r30, r24
    5318:	e6 0f       	add	r30, r22
    531a:	f7 1f       	adc	r31, r23
    531c:	9c 01       	movw	r18, r24
    531e:	22 50       	subi	r18, 0x02	; 2
    5320:	31 09       	sbc	r19, r1
    5322:	e2 17       	cp	r30, r18
    5324:	f3 07       	cpc	r31, r19
    5326:	08 f4       	brcc	.+2      	; 0x532a <realloc+0x54>
    5328:	a5 c0       	rjmp	.+330    	; 0x5474 <realloc+0x19e>
    532a:	ec 01       	movw	r28, r24
    532c:	d9 01       	movw	r26, r18
    532e:	0d 91       	ld	r16, X+
    5330:	1c 91       	ld	r17, X
    5332:	11 97       	sbiw	r26, 0x01	; 1
    5334:	06 17       	cp	r16, r22
    5336:	17 07       	cpc	r17, r23
    5338:	a8 f0       	brcs	.+42     	; 0x5364 <realloc+0x8e>
    533a:	05 30       	cpi	r16, 0x05	; 5
    533c:	11 05       	cpc	r17, r1
    533e:	08 f4       	brcc	.+2      	; 0x5342 <realloc+0x6c>
    5340:	97 c0       	rjmp	.+302    	; 0x5470 <realloc+0x19a>
    5342:	c8 01       	movw	r24, r16
    5344:	04 97       	sbiw	r24, 0x04	; 4
    5346:	86 17       	cp	r24, r22
    5348:	97 07       	cpc	r25, r23
    534a:	08 f4       	brcc	.+2      	; 0x534e <realloc+0x78>
    534c:	91 c0       	rjmp	.+290    	; 0x5470 <realloc+0x19a>
    534e:	02 50       	subi	r16, 0x02	; 2
    5350:	11 09       	sbc	r17, r1
    5352:	06 1b       	sub	r16, r22
    5354:	17 0b       	sbc	r17, r23
    5356:	01 93       	st	Z+, r16
    5358:	11 93       	st	Z+, r17
    535a:	6d 93       	st	X+, r22
    535c:	7c 93       	st	X, r23
    535e:	cf 01       	movw	r24, r30
    5360:	31 df       	rcall	.-414    	; 0x51c4 <free>
    5362:	86 c0       	rjmp	.+268    	; 0x5470 <realloc+0x19a>
    5364:	5b 01       	movw	r10, r22
    5366:	a0 1a       	sub	r10, r16
    5368:	b1 0a       	sbc	r11, r17
    536a:	4c 01       	movw	r8, r24
    536c:	80 0e       	add	r8, r16
    536e:	91 1e       	adc	r9, r17
    5370:	a0 91 ae 04 	lds	r26, 0x04AE	; 0x8004ae <__flp>
    5374:	b0 91 af 04 	lds	r27, 0x04AF	; 0x8004af <__flp+0x1>
    5378:	61 2c       	mov	r6, r1
    537a:	71 2c       	mov	r7, r1
    537c:	e1 2c       	mov	r14, r1
    537e:	f1 2c       	mov	r15, r1
    5380:	10 97       	sbiw	r26, 0x00	; 0
    5382:	09 f4       	brne	.+2      	; 0x5386 <realloc+0xb0>
    5384:	46 c0       	rjmp	.+140    	; 0x5412 <realloc+0x13c>
    5386:	8d 91       	ld	r24, X+
    5388:	9c 91       	ld	r25, X
    538a:	11 97       	sbiw	r26, 0x01	; 1
    538c:	a8 15       	cp	r26, r8
    538e:	b9 05       	cpc	r27, r9
    5390:	b1 f5       	brne	.+108    	; 0x53fe <realloc+0x128>
    5392:	6c 01       	movw	r12, r24
    5394:	42 e0       	ldi	r20, 0x02	; 2
    5396:	c4 0e       	add	r12, r20
    5398:	d1 1c       	adc	r13, r1
    539a:	ca 14       	cp	r12, r10
    539c:	db 04       	cpc	r13, r11
    539e:	78 f1       	brcs	.+94     	; 0x53fe <realloc+0x128>
    53a0:	4c 01       	movw	r8, r24
    53a2:	8a 18       	sub	r8, r10
    53a4:	9b 08       	sbc	r9, r11
    53a6:	64 01       	movw	r12, r8
    53a8:	42 e0       	ldi	r20, 0x02	; 2
    53aa:	c4 0e       	add	r12, r20
    53ac:	d1 1c       	adc	r13, r1
    53ae:	12 96       	adiw	r26, 0x02	; 2
    53b0:	bc 90       	ld	r11, X
    53b2:	12 97       	sbiw	r26, 0x02	; 2
    53b4:	13 96       	adiw	r26, 0x03	; 3
    53b6:	ac 91       	ld	r26, X
    53b8:	b5 e0       	ldi	r27, 0x05	; 5
    53ba:	cb 16       	cp	r12, r27
    53bc:	d1 04       	cpc	r13, r1
    53be:	40 f0       	brcs	.+16     	; 0x53d0 <realloc+0xfa>
    53c0:	b2 82       	std	Z+2, r11	; 0x02
    53c2:	a3 83       	std	Z+3, r26	; 0x03
    53c4:	91 82       	std	Z+1, r9	; 0x01
    53c6:	80 82       	st	Z, r8
    53c8:	d9 01       	movw	r26, r18
    53ca:	6d 93       	st	X+, r22
    53cc:	7c 93       	st	X, r23
    53ce:	09 c0       	rjmp	.+18     	; 0x53e2 <realloc+0x10c>
    53d0:	0e 5f       	subi	r16, 0xFE	; 254
    53d2:	1f 4f       	sbci	r17, 0xFF	; 255
    53d4:	80 0f       	add	r24, r16
    53d6:	91 1f       	adc	r25, r17
    53d8:	f9 01       	movw	r30, r18
    53da:	91 83       	std	Z+1, r25	; 0x01
    53dc:	80 83       	st	Z, r24
    53de:	eb 2d       	mov	r30, r11
    53e0:	fa 2f       	mov	r31, r26
    53e2:	e1 14       	cp	r14, r1
    53e4:	f1 04       	cpc	r15, r1
    53e6:	31 f0       	breq	.+12     	; 0x53f4 <realloc+0x11e>
    53e8:	d7 01       	movw	r26, r14
    53ea:	13 96       	adiw	r26, 0x03	; 3
    53ec:	fc 93       	st	X, r31
    53ee:	ee 93       	st	-X, r30
    53f0:	12 97       	sbiw	r26, 0x02	; 2
    53f2:	3e c0       	rjmp	.+124    	; 0x5470 <realloc+0x19a>
    53f4:	f0 93 af 04 	sts	0x04AF, r31	; 0x8004af <__flp+0x1>
    53f8:	e0 93 ae 04 	sts	0x04AE, r30	; 0x8004ae <__flp>
    53fc:	39 c0       	rjmp	.+114    	; 0x5470 <realloc+0x19a>
    53fe:	68 16       	cp	r6, r24
    5400:	79 06       	cpc	r7, r25
    5402:	08 f4       	brcc	.+2      	; 0x5406 <realloc+0x130>
    5404:	3c 01       	movw	r6, r24
    5406:	7d 01       	movw	r14, r26
    5408:	12 96       	adiw	r26, 0x02	; 2
    540a:	0d 90       	ld	r0, X+
    540c:	bc 91       	ld	r27, X
    540e:	a0 2d       	mov	r26, r0
    5410:	b7 cf       	rjmp	.-146    	; 0x5380 <realloc+0xaa>
    5412:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <__brkval>
    5416:	90 91 ad 04 	lds	r25, 0x04AD	; 0x8004ad <__brkval+0x1>
    541a:	88 16       	cp	r8, r24
    541c:	99 06       	cpc	r9, r25
    541e:	e1 f4       	brne	.+56     	; 0x5458 <realloc+0x182>
    5420:	66 16       	cp	r6, r22
    5422:	77 06       	cpc	r7, r23
    5424:	c8 f4       	brcc	.+50     	; 0x5458 <realloc+0x182>
    5426:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    542a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    542e:	00 97       	sbiw	r24, 0x00	; 0
    5430:	41 f4       	brne	.+16     	; 0x5442 <realloc+0x16c>
    5432:	8d b7       	in	r24, 0x3d	; 61
    5434:	9e b7       	in	r25, 0x3e	; 62
    5436:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    543a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    543e:	84 1b       	sub	r24, r20
    5440:	95 0b       	sbc	r25, r21
    5442:	e8 17       	cp	r30, r24
    5444:	f9 07       	cpc	r31, r25
    5446:	b0 f4       	brcc	.+44     	; 0x5474 <realloc+0x19e>
    5448:	f0 93 ad 04 	sts	0x04AD, r31	; 0x8004ad <__brkval+0x1>
    544c:	e0 93 ac 04 	sts	0x04AC, r30	; 0x8004ac <__brkval>
    5450:	f9 01       	movw	r30, r18
    5452:	71 83       	std	Z+1, r23	; 0x01
    5454:	60 83       	st	Z, r22
    5456:	0c c0       	rjmp	.+24     	; 0x5470 <realloc+0x19a>
    5458:	cb 01       	movw	r24, r22
    545a:	1c de       	rcall	.-968    	; 0x5094 <malloc>
    545c:	7c 01       	movw	r14, r24
    545e:	00 97       	sbiw	r24, 0x00	; 0
    5460:	49 f0       	breq	.+18     	; 0x5474 <realloc+0x19e>
    5462:	a8 01       	movw	r20, r16
    5464:	be 01       	movw	r22, r28
    5466:	1b d0       	rcall	.+54     	; 0x549e <memcpy>
    5468:	ce 01       	movw	r24, r28
    546a:	ac de       	rcall	.-680    	; 0x51c4 <free>
    546c:	c7 01       	movw	r24, r14
    546e:	04 c0       	rjmp	.+8      	; 0x5478 <realloc+0x1a2>
    5470:	ce 01       	movw	r24, r28
    5472:	02 c0       	rjmp	.+4      	; 0x5478 <realloc+0x1a2>
    5474:	80 e0       	ldi	r24, 0x00	; 0
    5476:	90 e0       	ldi	r25, 0x00	; 0
    5478:	df 91       	pop	r29
    547a:	cf 91       	pop	r28
    547c:	1f 91       	pop	r17
    547e:	0f 91       	pop	r16
    5480:	ff 90       	pop	r15
    5482:	ef 90       	pop	r14
    5484:	df 90       	pop	r13
    5486:	cf 90       	pop	r12
    5488:	bf 90       	pop	r11
    548a:	af 90       	pop	r10
    548c:	9f 90       	pop	r9
    548e:	8f 90       	pop	r8
    5490:	7f 90       	pop	r7
    5492:	6f 90       	pop	r6
    5494:	08 95       	ret

00005496 <abort>:
    5496:	81 e0       	ldi	r24, 0x01	; 1
    5498:	90 e0       	ldi	r25, 0x00	; 0
    549a:	f8 94       	cli
    549c:	4a c0       	rjmp	.+148    	; 0x5532 <__do_global_dtors>

0000549e <memcpy>:
    549e:	fb 01       	movw	r30, r22
    54a0:	dc 01       	movw	r26, r24
    54a2:	02 c0       	rjmp	.+4      	; 0x54a8 <memcpy+0xa>
    54a4:	01 90       	ld	r0, Z+
    54a6:	0d 92       	st	X+, r0
    54a8:	41 50       	subi	r20, 0x01	; 1
    54aa:	50 40       	sbci	r21, 0x00	; 0
    54ac:	d8 f7       	brcc	.-10     	; 0x54a4 <memcpy+0x6>
    54ae:	08 95       	ret

000054b0 <memset>:
    54b0:	dc 01       	movw	r26, r24
    54b2:	01 c0       	rjmp	.+2      	; 0x54b6 <memset+0x6>
    54b4:	6d 93       	st	X+, r22
    54b6:	41 50       	subi	r20, 0x01	; 1
    54b8:	50 40       	sbci	r21, 0x00	; 0
    54ba:	e0 f7       	brcc	.-8      	; 0x54b4 <memset+0x4>
    54bc:	08 95       	ret

000054be <strcpy>:
    54be:	fb 01       	movw	r30, r22
    54c0:	dc 01       	movw	r26, r24
    54c2:	01 90       	ld	r0, Z+
    54c4:	0d 92       	st	X+, r0
    54c6:	00 20       	and	r0, r0
    54c8:	e1 f7       	brne	.-8      	; 0x54c2 <strcpy+0x4>
    54ca:	08 95       	ret

000054cc <__itoa_ncheck>:
    54cc:	bb 27       	eor	r27, r27
    54ce:	4a 30       	cpi	r20, 0x0A	; 10
    54d0:	31 f4       	brne	.+12     	; 0x54de <__itoa_ncheck+0x12>
    54d2:	99 23       	and	r25, r25
    54d4:	22 f4       	brpl	.+8      	; 0x54de <__itoa_ncheck+0x12>
    54d6:	bd e2       	ldi	r27, 0x2D	; 45
    54d8:	90 95       	com	r25
    54da:	81 95       	neg	r24
    54dc:	9f 4f       	sbci	r25, 0xFF	; 255
    54de:	01 c0       	rjmp	.+2      	; 0x54e2 <__utoa_common>

000054e0 <__utoa_ncheck>:
    54e0:	bb 27       	eor	r27, r27

000054e2 <__utoa_common>:
    54e2:	fb 01       	movw	r30, r22
    54e4:	55 27       	eor	r21, r21
    54e6:	aa 27       	eor	r26, r26
    54e8:	88 0f       	add	r24, r24
    54ea:	99 1f       	adc	r25, r25
    54ec:	aa 1f       	adc	r26, r26
    54ee:	a4 17       	cp	r26, r20
    54f0:	10 f0       	brcs	.+4      	; 0x54f6 <__utoa_common+0x14>
    54f2:	a4 1b       	sub	r26, r20
    54f4:	83 95       	inc	r24
    54f6:	50 51       	subi	r21, 0x10	; 16
    54f8:	b9 f7       	brne	.-18     	; 0x54e8 <__utoa_common+0x6>
    54fa:	a0 5d       	subi	r26, 0xD0	; 208
    54fc:	aa 33       	cpi	r26, 0x3A	; 58
    54fe:	08 f0       	brcs	.+2      	; 0x5502 <__utoa_common+0x20>
    5500:	a9 5d       	subi	r26, 0xD9	; 217
    5502:	a1 93       	st	Z+, r26
    5504:	00 97       	sbiw	r24, 0x00	; 0
    5506:	79 f7       	brne	.-34     	; 0x54e6 <__utoa_common+0x4>
    5508:	b1 11       	cpse	r27, r1
    550a:	b1 93       	st	Z+, r27
    550c:	11 92       	st	Z+, r1
    550e:	cb 01       	movw	r24, r22
    5510:	00 c0       	rjmp	.+0      	; 0x5512 <strrev>

00005512 <strrev>:
    5512:	dc 01       	movw	r26, r24
    5514:	fc 01       	movw	r30, r24
    5516:	67 2f       	mov	r22, r23
    5518:	71 91       	ld	r23, Z+
    551a:	77 23       	and	r23, r23
    551c:	e1 f7       	brne	.-8      	; 0x5516 <strrev+0x4>
    551e:	32 97       	sbiw	r30, 0x02	; 2
    5520:	04 c0       	rjmp	.+8      	; 0x552a <strrev+0x18>
    5522:	7c 91       	ld	r23, X
    5524:	6d 93       	st	X+, r22
    5526:	70 83       	st	Z, r23
    5528:	62 91       	ld	r22, -Z
    552a:	ae 17       	cp	r26, r30
    552c:	bf 07       	cpc	r27, r31
    552e:	c8 f3       	brcs	.-14     	; 0x5522 <strrev+0x10>
    5530:	08 95       	ret

00005532 <__do_global_dtors>:
    5532:	16 e0       	ldi	r17, 0x06	; 6
    5534:	c5 e1       	ldi	r28, 0x15	; 21
    5536:	d6 e0       	ldi	r29, 0x06	; 6
    5538:	00 e0       	ldi	r16, 0x00	; 0
    553a:	05 c0       	rjmp	.+10     	; 0x5546 <__do_global_dtors+0x14>
    553c:	80 2f       	mov	r24, r16
    553e:	fe 01       	movw	r30, r28
    5540:	88 dd       	rcall	.-1264   	; 0x5052 <__tablejump2__>
    5542:	21 96       	adiw	r28, 0x01	; 1
    5544:	01 1d       	adc	r16, r1
    5546:	c6 31       	cpi	r28, 0x16	; 22
    5548:	d1 07       	cpc	r29, r17
    554a:	80 e0       	ldi	r24, 0x00	; 0
    554c:	08 07       	cpc	r16, r24
    554e:	b1 f7       	brne	.-20     	; 0x553c <__do_global_dtors+0xa>
    5550:	f8 94       	cli

00005552 <__stop_program>:
    5552:	ff cf       	rjmp	.-2      	; 0x5552 <__stop_program>
