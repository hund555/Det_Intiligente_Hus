
Mega2560Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800200  00004dca  00004e5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004dca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001df  008002ac  008002ac  00004f0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004f0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004f3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000e18  00000000  00000000  00004f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00021e4f  00000000  00000000  00005d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004758  00000000  00000000  00027be3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000092b0  00000000  00000000  0002c33b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003d7c  00000000  00000000  000355ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005f76  00000000  00000000  00039368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001c58f  00000000  00000000  0003f2de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001070  00000000  00000000  0005b86d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	08 c6       	rjmp	.+3088   	; 0xc12 <__dtors_end>
       2:	00 00       	nop
       4:	0c 94 f2 1f 	jmp	0x3fe4	; 0x3fe4 <__vector_1>
       8:	0c 94 1d 20 	jmp	0x403a	; 0x403a <__vector_2>
       c:	0c 94 48 20 	jmp	0x4090	; 0x4090 <__vector_3>
      10:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__vector_4>
      14:	0c 94 9e 20 	jmp	0x413c	; 0x413c <__vector_5>
      18:	0c 94 c9 20 	jmp	0x4192	; 0x4192 <__vector_6>
      1c:	0c 94 f4 20 	jmp	0x41e8	; 0x41e8 <__vector_7>
      20:	0c 94 1f 21 	jmp	0x423e	; 0x423e <__vector_8>
      24:	27 c6       	rjmp	.+3150   	; 0xc74 <__bad_interrupt>
      26:	00 00       	nop
      28:	25 c6       	rjmp	.+3146   	; 0xc74 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	23 c6       	rjmp	.+3142   	; 0xc74 <__bad_interrupt>
      2e:	00 00       	nop
      30:	21 c6       	rjmp	.+3138   	; 0xc74 <__bad_interrupt>
      32:	00 00       	nop
      34:	1f c6       	rjmp	.+3134   	; 0xc74 <__bad_interrupt>
      36:	00 00       	nop
      38:	1d c6       	rjmp	.+3130   	; 0xc74 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1b c6       	rjmp	.+3126   	; 0xc74 <__bad_interrupt>
      3e:	00 00       	nop
      40:	19 c6       	rjmp	.+3122   	; 0xc74 <__bad_interrupt>
      42:	00 00       	nop
      44:	17 c6       	rjmp	.+3118   	; 0xc74 <__bad_interrupt>
      46:	00 00       	nop
      48:	15 c6       	rjmp	.+3114   	; 0xc74 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	13 c6       	rjmp	.+3110   	; 0xc74 <__bad_interrupt>
      4e:	00 00       	nop
      50:	11 c6       	rjmp	.+3106   	; 0xc74 <__bad_interrupt>
      52:	00 00       	nop
      54:	0f c6       	rjmp	.+3102   	; 0xc74 <__bad_interrupt>
      56:	00 00       	nop
      58:	0d c6       	rjmp	.+3098   	; 0xc74 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 4a 21 	jmp	0x4294	; 0x4294 <__vector_23>
      60:	09 c6       	rjmp	.+3090   	; 0xc74 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__vector_25>
      68:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <__vector_26>
      6c:	03 c6       	rjmp	.+3078   	; 0xc74 <__bad_interrupt>
      6e:	00 00       	nop
      70:	01 c6       	rjmp	.+3074   	; 0xc74 <__bad_interrupt>
      72:	00 00       	nop
      74:	ff c5       	rjmp	.+3070   	; 0xc74 <__bad_interrupt>
      76:	00 00       	nop
      78:	fd c5       	rjmp	.+3066   	; 0xc74 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fb c5       	rjmp	.+3062   	; 0xc74 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f9 c5       	rjmp	.+3058   	; 0xc74 <__bad_interrupt>
      82:	00 00       	nop
      84:	f7 c5       	rjmp	.+3054   	; 0xc74 <__bad_interrupt>
      86:	00 00       	nop
      88:	f5 c5       	rjmp	.+3050   	; 0xc74 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f3 c5       	rjmp	.+3046   	; 0xc74 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f1 c5       	rjmp	.+3042   	; 0xc74 <__bad_interrupt>
      92:	00 00       	nop
      94:	ef c5       	rjmp	.+3038   	; 0xc74 <__bad_interrupt>
      96:	00 00       	nop
      98:	ed c5       	rjmp	.+3034   	; 0xc74 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <__vector_39>
      a0:	e9 c5       	rjmp	.+3026   	; 0xc74 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e7 c5       	rjmp	.+3022   	; 0xc74 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e5 c5       	rjmp	.+3018   	; 0xc74 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e3 c5       	rjmp	.+3014   	; 0xc74 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e1 c5       	rjmp	.+3010   	; 0xc74 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	df c5       	rjmp	.+3006   	; 0xc74 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	dd c5       	rjmp	.+3002   	; 0xc74 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	db c5       	rjmp	.+2998   	; 0xc74 <__bad_interrupt>
      be:	00 00       	nop
      c0:	d9 c5       	rjmp	.+2994   	; 0xc74 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d7 c5       	rjmp	.+2990   	; 0xc74 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d5 c5       	rjmp	.+2986   	; 0xc74 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d3 c5       	rjmp	.+2982   	; 0xc74 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d1 c5       	rjmp	.+2978   	; 0xc74 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	cf c5       	rjmp	.+2974   	; 0xc74 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	cd c5       	rjmp	.+2970   	; 0xc74 <__bad_interrupt>
      da:	00 00       	nop
      dc:	cb c5       	rjmp	.+2966   	; 0xc74 <__bad_interrupt>
      de:	00 00       	nop
      e0:	c9 c5       	rjmp	.+2962   	; 0xc74 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	cc 1f       	adc	r28, r28
      e6:	96 1f       	adc	r25, r22
      e8:	9e 1f       	adc	r25, r30
      ea:	aa 1f       	adc	r26, r26
      ec:	b7 1f       	adc	r27, r23
      ee:	d8 1f       	adc	r29, r24
      f0:	e5 1f       	adc	r30, r21
      f2:	7a 22       	and	r7, r26
      f4:	7d 22       	and	r7, r29
      f6:	6c 22       	and	r6, r28
      f8:	70 22       	and	r7, r16
      fa:	76 22       	and	r7, r22
      fc:	b4 22       	and	r11, r20
      fe:	81 22       	and	r8, r17
     100:	85 22       	and	r8, r21
     102:	8b 22       	and	r8, r27
     104:	8f 22       	and	r8, r31
     106:	93 22       	and	r9, r19
     108:	99 22       	and	r9, r25
     10a:	9d 22       	and	r9, r29
     10c:	a1 22       	and	r10, r17
     10e:	b4 22       	and	r11, r20
     110:	a7 22       	and	r10, r23
     112:	ab 22       	and	r10, r27
     114:	af 22       	and	r10, r31

00000116 <__trampolines_end>:
     116:	1f 1c       	adc	r1, r15
     118:	1f 1e       	adc	r1, r31
     11a:	1f 1e       	adc	r1, r31
     11c:	1f 1f       	adc	r17, r31
     11e:	1e 1f       	adc	r17, r30
     120:	1e 1f       	adc	r17, r30

00000122 <_ZZ5setupE3__c>:
     122:	53 53 44 31 33 30 36 20 61 6c 6c 6f 63 61 74 69     SSD1306 allocati
     132:	6f 6e 20 66 61 69 6c 65 64 00                       on failed.

0000013c <_ZL4font>:
     13c:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     14c:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     15c:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     16c:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     17c:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     18c:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     19c:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     1ac:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     1bc:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     1cc:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     1dc:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1ec:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     1fc:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     20c:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     21c:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     22c:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     23c:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     24c:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     25c:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     26c:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     27c:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     28c:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     29c:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     2ac:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2bc:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2cc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     2dc:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     2ec:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     2fc:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     30c:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     31c:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     32c:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     33c:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     34c:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     35c:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     36c:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     37c:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     38c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     39c:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     3ac:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     3bc:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     3cc:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     3dc:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     3ec:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     3fc:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     40c:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     41c:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     42c:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     43c:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     44c:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     45c:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     46c:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     47c:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     48c:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     49c:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     4ac:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     4bc:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     4cc:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     4dc:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     4ec:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     4fc:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     50c:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     51c:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     52c:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     53c:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     54c:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     55c:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     56c:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     57c:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     58c:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     59c:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     5ac:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     5bc:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     5cc:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     5dc:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     5ec:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     5fc:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     60c:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     61c:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     62c:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

0000063c <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
     63c:	22 00 ff 21 00                                      "..!.

00000641 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE8postmask>:
     641:	00 01 03 07 0f 1f 3f 7f                             ......?.

00000649 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE7premask>:
     649:	00 80 c0 e0 f0 f8 fc fe                             ........

00000651 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
     651:	db 40 a4 a6 2e af                                   .@....

00000657 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
     657:	20 00 a1 c8                                          ...

0000065b <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
     65b:	d3 00 40 8d                                         ..@.

0000065f <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
     65f:	ae d5 80 a8                                         ....

00000663 <_ZL12splash2_data>:
     663:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     673:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     683:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     69f:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     6af:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     6bf:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     6cf:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     6df:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     6ef:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     6ff:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     70f:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     71f:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     72f:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     73f:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     74f:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     75f:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     76f:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     77f:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     78f:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     79f:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     7af:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     7bf:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     7cf:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     7df:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     7f7:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     807:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     817:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     827:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     837:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

00000843 <_ZL12splash1_data>:
     843:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     853:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     863:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     873:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     883:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     893:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     8ab:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     8bb:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     8cb:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     8db:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     8eb:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     8fb:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     90b:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     91b:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
     92b:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
     93b:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
     94b:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
     95b:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
     96b:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
     97b:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
     98b:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
     99b:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
     9ab:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
     9bb:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
     9d3:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
     9eb:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
     9fb:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
     a0b:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
     a1b:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
     a2b:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
     a3b:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
     a4b:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
     a5b:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
     a6b:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
     a7b:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
     a8b:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
     a9b:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
     aab:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
     abb:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
     acb:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
     adb:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
     aeb:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
     afb:	ff fd 6b 5b db 6a fd c0                             ..k[.j..

00000b03 <digital_pin_to_timer_PGM>:
     b03:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     b2f:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000b49 <digital_pin_to_bit_mask_PGM>:
     b49:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     b59:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     b69:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     b79:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     b89:	04 08 10 20 40 80                                   ... @.

00000b8f <digital_pin_to_port_PGM>:
     b8f:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     b9f:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     baf:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     bbf:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     bcf:	0b 0b 0b 0b 0b 0b                                   ......

00000bd5 <port_to_output_PGM>:
     bd5:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     be5:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000bef <port_to_mode_PGM>:
     bef:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     bff:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000c0a <__ctors_start>:
     c0a:	38 09       	sbc	r19, r8
     c0c:	2f 1c       	adc	r2, r15
     c0e:	07 1e       	adc	r0, r23

00000c10 <__ctors_end>:
     c10:	61 09       	sbc	r22, r1

00000c12 <__dtors_end>:
     c12:	11 24       	eor	r1, r1
     c14:	1f be       	out	0x3f, r1	; 63
     c16:	cf ef       	ldi	r28, 0xFF	; 255
     c18:	d1 e2       	ldi	r29, 0x21	; 33
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	cd bf       	out	0x3d, r28	; 61
     c1e:	00 e0       	ldi	r16, 0x00	; 0
     c20:	0c bf       	out	0x3c, r16	; 60

00000c22 <__do_copy_data>:
     c22:	12 e0       	ldi	r17, 0x02	; 2
     c24:	a0 e0       	ldi	r26, 0x00	; 0
     c26:	b2 e0       	ldi	r27, 0x02	; 2
     c28:	ea ec       	ldi	r30, 0xCA	; 202
     c2a:	fd e4       	ldi	r31, 0x4D	; 77
     c2c:	00 e0       	ldi	r16, 0x00	; 0
     c2e:	0b bf       	out	0x3b, r16	; 59
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <__do_copy_data+0x14>
     c32:	07 90       	elpm	r0, Z+
     c34:	0d 92       	st	X+, r0
     c36:	ac 3a       	cpi	r26, 0xAC	; 172
     c38:	b1 07       	cpc	r27, r17
     c3a:	d9 f7       	brne	.-10     	; 0xc32 <__do_copy_data+0x10>

00000c3c <__do_clear_bss>:
     c3c:	24 e0       	ldi	r18, 0x04	; 4
     c3e:	ac ea       	ldi	r26, 0xAC	; 172
     c40:	b2 e0       	ldi	r27, 0x02	; 2
     c42:	01 c0       	rjmp	.+2      	; 0xc46 <.do_clear_bss_start>

00000c44 <.do_clear_bss_loop>:
     c44:	1d 92       	st	X+, r1

00000c46 <.do_clear_bss_start>:
     c46:	ab 38       	cpi	r26, 0x8B	; 139
     c48:	b2 07       	cpc	r27, r18
     c4a:	e1 f7       	brne	.-8      	; 0xc44 <.do_clear_bss_loop>

00000c4c <__do_global_ctors>:
     c4c:	16 e0       	ldi	r17, 0x06	; 6
     c4e:	c8 e0       	ldi	r28, 0x08	; 8
     c50:	d6 e0       	ldi	r29, 0x06	; 6
     c52:	00 e0       	ldi	r16, 0x00	; 0
     c54:	06 c0       	rjmp	.+12     	; 0xc62 <__do_global_ctors+0x16>
     c56:	21 97       	sbiw	r28, 0x01	; 1
     c58:	01 09       	sbc	r16, r1
     c5a:	80 2f       	mov	r24, r16
     c5c:	fe 01       	movw	r30, r28
     c5e:	0e 94 64 24 	call	0x48c8	; 0x48c8 <__tablejump2__>
     c62:	c5 30       	cpi	r28, 0x05	; 5
     c64:	d1 07       	cpc	r29, r17
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	08 07       	cpc	r16, r24
     c6a:	a9 f7       	brne	.-22     	; 0xc56 <__do_global_ctors+0xa>
     c6c:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <main>
     c70:	0c 94 d4 26 	jmp	0x4da8	; 0x4da8 <__do_global_dtors>

00000c74 <__bad_interrupt>:
     c74:	c5 c9       	rjmp	.-3190   	; 0x0 <__vectors>

00000c76 <_ZN7TwoWire5writeEi>:
    value = readRegister8(DS3231_REG_CONTROL);

    value &= 0b11111011;
    value |= (!enabled << 2);

    writeRegister8(DS3231_REG_CONTROL, value);
     c76:	dc 01       	movw	r26, r24
     c78:	ed 91       	ld	r30, X+
     c7a:	fc 91       	ld	r31, X
     c7c:	01 90       	ld	r0, Z+
     c7e:	f0 81       	ld	r31, Z
     c80:	e0 2d       	mov	r30, r0
     c82:	19 94       	eijmp

00000c84 <_ZN6DS32319date2daysEjhh>:
     c84:	db 01       	movw	r26, r22
     c86:	a0 5d       	subi	r26, 0xD0	; 208
     c88:	b7 40       	sbci	r27, 0x07	; 7
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	e6 e1       	ldi	r30, 0x16	; 22
     c8e:	f1 e0       	ldi	r31, 0x01	; 1
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	84 17       	cp	r24, r20
     c94:	30 f4       	brcc	.+12     	; 0xca2 <_ZN6DS32319date2daysEjhh+0x1e>
     c96:	94 91       	lpm	r25, Z
     c98:	29 0f       	add	r18, r25
     c9a:	31 1d       	adc	r19, r1
     c9c:	8f 5f       	subi	r24, 0xFF	; 255
     c9e:	31 96       	adiw	r30, 0x01	; 1
     ca0:	f8 cf       	rjmp	.-16     	; 0xc92 <_ZN6DS32319date2daysEjhh+0xe>
     ca2:	42 30       	cpi	r20, 0x02	; 2
     ca4:	29 f4       	brne	.+10     	; 0xcb0 <_ZN6DS32319date2daysEjhh+0x2c>
     ca6:	cd 01       	movw	r24, r26
     ca8:	83 70       	andi	r24, 0x03	; 3
     caa:	99 27       	eor	r25, r25
     cac:	89 2b       	or	r24, r25
     cae:	a9 f0       	breq	.+42     	; 0xcda <_ZN6DS32319date2daysEjhh+0x56>
     cb0:	6d 5c       	subi	r22, 0xCD	; 205
     cb2:	77 40       	sbci	r23, 0x07	; 7
     cb4:	76 95       	lsr	r23
     cb6:	67 95       	ror	r22
     cb8:	76 95       	lsr	r23
     cba:	67 95       	ror	r22
     cbc:	4d e6       	ldi	r20, 0x6D	; 109
     cbe:	51 e0       	ldi	r21, 0x01	; 1
     cc0:	a4 9f       	mul	r26, r20
     cc2:	c0 01       	movw	r24, r0
     cc4:	a5 9f       	mul	r26, r21
     cc6:	90 0d       	add	r25, r0
     cc8:	b4 9f       	mul	r27, r20
     cca:	90 0d       	add	r25, r0
     ccc:	11 24       	eor	r1, r1
     cce:	86 0f       	add	r24, r22
     cd0:	97 1f       	adc	r25, r23
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	82 0f       	add	r24, r18
     cd6:	93 1f       	adc	r25, r19
     cd8:	08 95       	ret
     cda:	2f 5f       	subi	r18, 0xFF	; 255
     cdc:	3f 4f       	sbci	r19, 0xFF	; 255
     cde:	e8 cf       	rjmp	.-48     	; 0xcb0 <_ZN6DS32319date2daysEjhh+0x2c>

00000ce0 <_ZN6DS32318unixtimeEv>:
     ce0:	1f 93       	push	r17
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	fc 01       	movw	r30, r24
     ce8:	c6 81       	ldd	r28, Z+6	; 0x06
     cea:	d5 81       	ldd	r29, Z+5	; 0x05
     cec:	14 81       	ldd	r17, Z+4	; 0x04
     cee:	60 81       	ld	r22, Z
     cf0:	71 81       	ldd	r23, Z+1	; 0x01
     cf2:	23 81       	ldd	r18, Z+3	; 0x03
     cf4:	42 81       	ldd	r20, Z+2	; 0x02
     cf6:	c6 df       	rcall	.-116    	; 0xc84 <_ZN6DS32319date2daysEjhh>
     cf8:	9c 01       	movw	r18, r24
     cfa:	a8 e1       	ldi	r26, 0x18	; 24
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	0e 94 6c 24 	call	0x48d8	; 0x48d8 <__umulhisi3>
     d02:	9b 01       	movw	r18, r22
     d04:	ac 01       	movw	r20, r24
     d06:	21 0f       	add	r18, r17
     d08:	31 1d       	adc	r19, r1
     d0a:	41 1d       	adc	r20, r1
     d0c:	51 1d       	adc	r21, r1
     d0e:	ac e3       	ldi	r26, 0x3C	; 60
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <__muluhisi3>
     d16:	9b 01       	movw	r18, r22
     d18:	ac 01       	movw	r20, r24
     d1a:	2d 0f       	add	r18, r29
     d1c:	31 1d       	adc	r19, r1
     d1e:	41 1d       	adc	r20, r1
     d20:	51 1d       	adc	r21, r1
     d22:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <__muluhisi3>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	8c 0f       	add	r24, r28
     d2c:	91 1d       	adc	r25, r1
     d2e:	a1 1d       	adc	r26, r1
     d30:	b1 1d       	adc	r27, r1
     d32:	bc 01       	movw	r22, r24
     d34:	cd 01       	movw	r24, r26
     d36:	60 59       	subi	r22, 0x90	; 144
     d38:	7a 4c       	sbci	r23, 0xCA	; 202
     d3a:	82 49       	sbci	r24, 0x92	; 146
     d3c:	97 4c       	sbci	r25, 0xC7	; 199
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	08 95       	ret

00000d46 <_ZN6DS323114writeRegister8Ehh>:
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	d6 2f       	mov	r29, r22
     d4c:	c4 2f       	mov	r28, r20
     d4e:	68 e6       	ldi	r22, 0x68	; 104
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	8b e8       	ldi	r24, 0x8B	; 139
     d54:	93 e0       	ldi	r25, 0x03	; 3
     d56:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_ZN7TwoWire17beginTransmissionEi>
     d5a:	6d 2f       	mov	r22, r29
     d5c:	8b e8       	ldi	r24, 0x8B	; 139
     d5e:	93 e0       	ldi	r25, 0x03	; 3
     d60:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <_ZN7TwoWire5writeEh>
     d64:	6c 2f       	mov	r22, r28
     d66:	8b e8       	ldi	r24, 0x8B	; 139
     d68:	93 e0       	ldi	r25, 0x03	; 3
     d6a:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <_ZN7TwoWire5writeEh>
     d6e:	8b e8       	ldi	r24, 0x8B	; 139
     d70:	93 e0       	ldi	r25, 0x03	; 3
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	0c 94 2d 1c 	jmp	0x385a	; 0x385a <_ZN7TwoWire15endTransmissionEv>

00000d7a <_ZN6DS323111getDateTimeEv>:
     d7a:	af 92       	push	r10
     d7c:	bf 92       	push	r11
     d7e:	cf 92       	push	r12
     d80:	df 92       	push	r13
     d82:	ef 92       	push	r14
     d84:	ff 92       	push	r15
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	2e 97       	sbiw	r28, 0x0e	; 14
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	7c 01       	movw	r14, r24
     da0:	8b 01       	movw	r16, r22
     da2:	68 e6       	ldi	r22, 0x68	; 104
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	8b e8       	ldi	r24, 0x8B	; 139
     da8:	93 e0       	ldi	r25, 0x03	; 3
     daa:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_ZN7TwoWire17beginTransmissionEi>
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	8b e8       	ldi	r24, 0x8B	; 139
     db4:	93 e0       	ldi	r25, 0x03	; 3
     db6:	5f df       	rcall	.-322    	; 0xc76 <_ZN7TwoWire5writeEi>
     db8:	8b e8       	ldi	r24, 0x8B	; 139
     dba:	93 e0       	ldi	r25, 0x03	; 3
     dbc:	0e 94 2d 1c 	call	0x385a	; 0x385a <_ZN7TwoWire15endTransmissionEv>
     dc0:	47 e0       	ldi	r20, 0x07	; 7
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	68 e6       	ldi	r22, 0x68	; 104
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	8b e8       	ldi	r24, 0x8B	; 139
     dca:	93 e0       	ldi	r25, 0x03	; 3
     dcc:	0e 94 2b 1c 	call	0x3856	; 0x3856 <_ZN7TwoWire11requestFromEii>
     dd0:	8b e8       	ldi	r24, 0x8B	; 139
     dd2:	93 e0       	ldi	r25, 0x03	; 3
     dd4:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <_ZN7TwoWire9availableEv>
     dd8:	89 2b       	or	r24, r25
     dda:	d1 f3       	breq	.-12     	; 0xdd0 <_ZN6DS323111getDateTimeEv+0x56>
     ddc:	5e 01       	movw	r10, r28
     dde:	2f e0       	ldi	r18, 0x0F	; 15
     de0:	a2 0e       	add	r10, r18
     de2:	b1 1c       	adc	r11, r1
     de4:	ce 01       	movw	r24, r28
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	6c 01       	movw	r12, r24
     dea:	8b e8       	ldi	r24, 0x8B	; 139
     dec:	93 e0       	ldi	r25, 0x03	; 3
     dee:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZN7TwoWire4readEv>
     df2:	98 2f       	mov	r25, r24
     df4:	92 95       	swap	r25
     df6:	9f 70       	andi	r25, 0x0F	; 15
     df8:	8f 70       	andi	r24, 0x0F	; 15
     dfa:	ea e0       	ldi	r30, 0x0A	; 10
     dfc:	9e 9f       	mul	r25, r30
     dfe:	80 0d       	add	r24, r0
     e00:	11 24       	eor	r1, r1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	f5 01       	movw	r30, r10
     e06:	92 93       	st	-Z, r25
     e08:	82 93       	st	-Z, r24
     e0a:	5f 01       	movw	r10, r30
     e0c:	ec 15       	cp	r30, r12
     e0e:	fd 05       	cpc	r31, r13
     e10:	61 f7       	brne	.-40     	; 0xdea <_ZN6DS323111getDateTimeEv+0x70>
     e12:	8b e8       	ldi	r24, 0x8B	; 139
     e14:	93 e0       	ldi	r25, 0x03	; 3
     e16:	0e 94 2d 1c 	call	0x385a	; 0x385a <_ZN7TwoWire15endTransmissionEv>
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	9a 81       	ldd	r25, Y+2	; 0x02
     e1e:	80 53       	subi	r24, 0x30	; 48
     e20:	98 4f       	sbci	r25, 0xF8	; 248
     e22:	f8 01       	movw	r30, r16
     e24:	91 83       	std	Z+1, r25	; 0x01
     e26:	80 83       	st	Z, r24
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	82 83       	std	Z+2, r24	; 0x02
     e2c:	8d 81       	ldd	r24, Y+5	; 0x05
     e2e:	83 83       	std	Z+3, r24	; 0x03
     e30:	8f 81       	ldd	r24, Y+7	; 0x07
     e32:	87 83       	std	Z+7, r24	; 0x07
     e34:	89 85       	ldd	r24, Y+9	; 0x09
     e36:	84 83       	std	Z+4, r24	; 0x04
     e38:	8b 85       	ldd	r24, Y+11	; 0x0b
     e3a:	85 83       	std	Z+5, r24	; 0x05
     e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3e:	86 83       	std	Z+6, r24	; 0x06
     e40:	c8 01       	movw	r24, r16
     e42:	4e df       	rcall	.-356    	; 0xce0 <_ZN6DS32318unixtimeEv>
     e44:	f8 01       	movw	r30, r16
     e46:	60 87       	std	Z+8, r22	; 0x08
     e48:	71 87       	std	Z+9, r23	; 0x09
     e4a:	82 87       	std	Z+10, r24	; 0x0a
     e4c:	93 87       	std	Z+11, r25	; 0x0b
     e4e:	8c e0       	ldi	r24, 0x0C	; 12
     e50:	d7 01       	movw	r26, r14
     e52:	01 90       	ld	r0, Z+
     e54:	0d 92       	st	X+, r0
     e56:	8a 95       	dec	r24
     e58:	e1 f7       	brne	.-8      	; 0xe52 <_ZN6DS323111getDateTimeEv+0xd8>
     e5a:	c7 01       	movw	r24, r14
     e5c:	2e 96       	adiw	r28, 0x0e	; 14
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
     e76:	cf 90       	pop	r12
     e78:	bf 90       	pop	r11
     e7a:	af 90       	pop	r10
     e7c:	08 95       	ret

00000e7e <_ZN6DS323113readRegister8Eh>:
     e7e:	cf 93       	push	r28
     e80:	c6 2f       	mov	r28, r22
     e82:	68 e6       	ldi	r22, 0x68	; 104
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	8b e8       	ldi	r24, 0x8B	; 139
     e88:	93 e0       	ldi	r25, 0x03	; 3
     e8a:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_ZN7TwoWire17beginTransmissionEi>
     e8e:	6c 2f       	mov	r22, r28
     e90:	8b e8       	ldi	r24, 0x8B	; 139
     e92:	93 e0       	ldi	r25, 0x03	; 3
     e94:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <_ZN7TwoWire5writeEh>
     e98:	8b e8       	ldi	r24, 0x8B	; 139
     e9a:	93 e0       	ldi	r25, 0x03	; 3
     e9c:	0e 94 2d 1c 	call	0x385a	; 0x385a <_ZN7TwoWire15endTransmissionEv>
     ea0:	41 e0       	ldi	r20, 0x01	; 1
     ea2:	50 e0       	ldi	r21, 0x00	; 0
     ea4:	68 e6       	ldi	r22, 0x68	; 104
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	8b e8       	ldi	r24, 0x8B	; 139
     eaa:	93 e0       	ldi	r25, 0x03	; 3
     eac:	0e 94 2b 1c 	call	0x3856	; 0x3856 <_ZN7TwoWire11requestFromEii>
     eb0:	8b e8       	ldi	r24, 0x8B	; 139
     eb2:	93 e0       	ldi	r25, 0x03	; 3
     eb4:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <_ZN7TwoWire9availableEv>
     eb8:	89 2b       	or	r24, r25
     eba:	d1 f3       	breq	.-12     	; 0xeb0 <_ZN6DS323113readRegister8Eh+0x32>
     ebc:	8b e8       	ldi	r24, 0x8B	; 139
     ebe:	93 e0       	ldi	r25, 0x03	; 3
     ec0:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZN7TwoWire4readEv>
     ec4:	c8 2f       	mov	r28, r24
     ec6:	8b e8       	ldi	r24, 0x8B	; 139
     ec8:	93 e0       	ldi	r25, 0x03	; 3
     eca:	0e 94 2d 1c 	call	0x385a	; 0x385a <_ZN7TwoWire15endTransmissionEv>
     ece:	8c 2f       	mov	r24, r28
     ed0:	cf 91       	pop	r28
     ed2:	08 95       	ret

00000ed4 <_ZN6DS323110setBatteryEbb>:
}

void DS3231::setBattery(bool timeBattery, bool squareBattery)
{
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	ec 01       	movw	r28, r24
     ede:	16 2f       	mov	r17, r22
     ee0:	04 2f       	mov	r16, r20
    uint8_t value;

    value = readRegister8(DS3231_REG_CONTROL);
     ee2:	6e e0       	ldi	r22, 0x0E	; 14
     ee4:	cc df       	rcall	.-104    	; 0xe7e <_ZN6DS323113readRegister8Eh>

    if (squareBattery)
     ee6:	00 23       	and	r16, r16
     ee8:	11 f0       	breq	.+4      	; 0xeee <_ZN6DS323110setBatteryEbb+0x1a>
    {
        value |= 0b01000000;
     eea:	80 64       	ori	r24, 0x40	; 64
     eec:	01 c0       	rjmp	.+2      	; 0xef0 <_ZN6DS323110setBatteryEbb+0x1c>
    } else
    {
        value &= 0b10111111;
     eee:	8f 7b       	andi	r24, 0xBF	; 191
    }

    if (timeBattery)
    {
        value &= 0b01111011;
     ef0:	48 2f       	mov	r20, r24
    } else
    {
        value &= 0b10111111;
    }

    if (timeBattery)
     ef2:	11 23       	and	r17, r17
     ef4:	11 f0       	breq	.+4      	; 0xefa <_ZN6DS323110setBatteryEbb+0x26>
    {
        value &= 0b01111011;
     ef6:	4b 77       	andi	r20, 0x7B	; 123
     ef8:	01 c0       	rjmp	.+2      	; 0xefc <_ZN6DS323110setBatteryEbb+0x28>
    } else
    {
        value |= 0b10000000;
     efa:	40 68       	ori	r20, 0x80	; 128
    }

    writeRegister8(DS3231_REG_CONTROL, value);
     efc:	6e e0       	ldi	r22, 0x0E	; 14
     efe:	ce 01       	movw	r24, r28
}
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
    } else
    {
        value |= 0b10000000;
    }

    writeRegister8(DS3231_REG_CONTROL, value);
     f06:	0f 91       	pop	r16
     f08:	1e cf       	rjmp	.-452    	; 0xd46 <_ZN6DS323114writeRegister8Ehh>

00000f0a <_ZN6DS32315beginEv>:

const uint8_t daysArray [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };
const uint8_t dowArray[] PROGMEM = { 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 };

bool DS3231::begin(void)
{
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	ec 01       	movw	r28, r24
    Wire.begin();
     f10:	8b e8       	ldi	r24, 0x8B	; 139
     f12:	93 e0       	ldi	r25, 0x03	; 3
     f14:	0e 94 9c 1b 	call	0x3738	; 0x3738 <_ZN7TwoWire5beginEv>

    setBattery(true, false);
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	ce 01       	movw	r24, r28
     f1e:	da df       	rcall	.-76     	; 0xed4 <_ZN6DS323110setBatteryEbb>

    t.year = 2000;
     f20:	80 ed       	ldi	r24, 0xD0	; 208
     f22:	97 e0       	ldi	r25, 0x07	; 7
     f24:	99 83       	std	Y+1, r25	; 0x01
     f26:	88 83       	st	Y, r24
    t.month = 1;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	8a 83       	std	Y+2, r24	; 0x02
    t.day = 1;
     f2c:	8b 83       	std	Y+3, r24	; 0x03
    t.hour = 0;
     f2e:	1c 82       	std	Y+4, r1	; 0x04
    t.minute = 0;
     f30:	1d 82       	std	Y+5, r1	; 0x05
    t.second = 0;
     f32:	1e 82       	std	Y+6, r1	; 0x06
    t.dayOfWeek = 6;
     f34:	86 e0       	ldi	r24, 0x06	; 6
     f36:	8f 83       	std	Y+7, r24	; 0x07
    t.unixtime = 946681200;
     f38:	80 e7       	ldi	r24, 0x70	; 112
     f3a:	95 e3       	ldi	r25, 0x35	; 53
     f3c:	ad e6       	ldi	r26, 0x6D	; 109
     f3e:	b8 e3       	ldi	r27, 0x38	; 56
     f40:	88 87       	std	Y+8, r24	; 0x08
     f42:	99 87       	std	Y+9, r25	; 0x09
     f44:	aa 87       	std	Y+10, r26	; 0x0a
     f46:	bb 87       	std	Y+11, r27	; 0x0b

    return true;
}
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	08 95       	ret

00000f50 <_Z11buttonSwichv>:
	return dsTime;
}

void buttonSwich()
{
	previousMillis10 = millis();
     f50:	0e 94 94 21 	call	0x4328	; 0x4328 <millis>
     f54:	60 93 ae 02 	sts	0x02AE, r22	; 0x8002ae <previousMillis10>
     f58:	70 93 af 02 	sts	0x02AF, r23	; 0x8002af <previousMillis10+0x1>
     f5c:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <previousMillis10+0x2>
     f60:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <previousMillis10+0x3>
	showTime = true;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <showTime>
     f6a:	08 95       	ret

00000f6c <setup>:
void buttonSwich(void);

int* temperature = 0;

void setup (void)
{
     f6c:	0f 93       	push	r16
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     f6e:	26 e0       	ldi	r18, 0x06	; 6
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	52 ec       	ldi	r21, 0xC2	; 194
     f74:	61 e0       	ldi	r22, 0x01	; 1
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	81 ee       	ldi	r24, 0xE1	; 225
     f7a:	93 e0       	ldi	r25, 0x03	; 3
     f7c:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <_ZN14HardwareSerial5beginEmh>

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
     f80:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_ZN8SPIClass13interruptModeE>
     f84:	88 23       	and	r24, r24
     f86:	99 f0       	breq	.+38     	; 0xfae <setup+0x42>
      uint8_t sreg = SREG;
     f88:	2f b7       	in	r18, 0x3f	; 63
      noInterrupts();
     f8a:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
     f8c:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_ZN8SPIClass13interruptModeE>
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	59 f4       	brne	.+22     	; 0xfaa <setup+0x3e>
        interruptSave = SPI_AVR_EIMSK;
     f94:	8d b3       	in	r24, 0x1d	; 29
     f96:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
     f9a:	9d b3       	in	r25, 0x1d	; 29
     f9c:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <_ZN8SPIClass13interruptMaskE>
     fa0:	80 95       	com	r24
     fa2:	89 23       	and	r24, r25
     fa4:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
     fa6:	2f bf       	out	0x3f, r18	; 63
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <setup+0x42>
      } else
      #endif
      {
        interruptSave = sreg;
     faa:	20 93 13 03 	sts	0x0313, r18	; 0x800313 <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
     fae:	80 e5       	ldi	r24, 0x50	; 80
     fb0:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
     fb2:	1d bc       	out	0x2d, r1	; 45
	Serial.begin(115200);												//set baud rate to 115200 for usart
	SPI.beginTransaction(SPISettings(4000000, MSBFIRST, SPI_MODE0));	// Set configuration for SPI
	SPI.begin();
     fb4:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <_ZN8SPIClass5beginEv>
	
	clock.begin();														// Initializes the SPI bus by setting SCK, MOSI, and SS to outputs, pulling SCK and MOSI low, and SS high.
     fb8:	87 ec       	ldi	r24, 0xC7	; 199
     fba:	92 e0       	ldi	r25, 0x02	; 2
     fbc:	a6 df       	rcall	.-180    	; 0xf0a <_ZN6DS32315beginEv>
	
	if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C))
     fbe:	01 e0       	ldi	r16, 0x01	; 1
     fc0:	21 e0       	ldi	r18, 0x01	; 1
     fc2:	4c e3       	ldi	r20, 0x3C	; 60
     fc4:	62 e0       	ldi	r22, 0x02	; 2
     fc6:	83 ed       	ldi	r24, 0xD3	; 211
     fc8:	92 e0       	ldi	r25, 0x02	; 2
     fca:	0e 94 87 12 	call	0x250e	; 0x250e <_ZN16Adafruit_SSD13065beginEhhbb>
     fce:	81 11       	cpse	r24, r1
     fd0:	07 c0       	rjmp	.+14     	; 0xfe0 <setup+0x74>
	{ // Address for 128x64
		Serial.println(F("SSD1306 allocation failed"));
     fd2:	62 e2       	ldi	r22, 0x22	; 34
     fd4:	71 e0       	ldi	r23, 0x01	; 1
     fd6:	81 ee       	ldi	r24, 0xE1	; 225
     fd8:	93 e0       	ldi	r25, 0x03	; 3
     fda:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <_ZN5Print7printlnEPK19__FlashStringHelper>
     fde:	ff cf       	rjmp	.-2      	; 0xfde <setup+0x72>
		for(;;); // Don't proceed, loop forever
	}
	
	pinMode(3, INPUT_PULLUP);
     fe0:	62 e0       	ldi	r22, 0x02	; 2
     fe2:	83 e0       	ldi	r24, 0x03	; 3
     fe4:	0e 94 b5 22 	call	0x456a	; 0x456a <pinMode>
	attachInterrupt(digitalPinToInterrupt(3), buttonSwich, CHANGE);
     fe8:	41 e0       	ldi	r20, 0x01	; 1
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	68 ea       	ldi	r22, 0xA8	; 168
     fee:	77 e0       	ldi	r23, 0x07	; 7
     ff0:	81 e0       	ldi	r24, 0x01	; 1
}
     ff2:	0f 91       	pop	r16
		Serial.println(F("SSD1306 allocation failed"));
		for(;;); // Don't proceed, loop forever
	}
	
	pinMode(3, INPUT_PULLUP);
	attachInterrupt(digitalPinToInterrupt(3), buttonSwich, CHANGE);
     ff4:	0c 94 7f 1f 	jmp	0x3efe	; 0x3efe <attachInterrupt>

00000ff8 <_Z9printTimev>:
	
	display.display();
}

String printTime()
{
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	2c 97       	sbiw	r28, 0x0c	; 12
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	8c 01       	movw	r16, r24
	if (millis() - previousMillis1 >= (delay2Sec/2))
    101a:	0e 94 94 21 	call	0x4328	; 0x4328 <millis>
    101e:	c0 90 b6 02 	lds	r12, 0x02B6	; 0x8002b6 <previousMillis1>
    1022:	d0 90 b7 02 	lds	r13, 0x02B7	; 0x8002b7 <previousMillis1+0x1>
    1026:	e0 90 b8 02 	lds	r14, 0x02B8	; 0x8002b8 <previousMillis1+0x2>
    102a:	f0 90 b9 02 	lds	r15, 0x02B9	; 0x8002b9 <previousMillis1+0x3>
    102e:	ab 01       	movw	r20, r22
    1030:	bc 01       	movw	r22, r24
    1032:	4c 19       	sub	r20, r12
    1034:	5d 09       	sbc	r21, r13
    1036:	6e 09       	sbc	r22, r14
    1038:	7f 09       	sbc	r23, r15
    103a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <delay2Sec>
    103e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <delay2Sec+0x1>
    1042:	97 fd       	sbrc	r25, 7
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	95 95       	asr	r25
    1048:	87 95       	ror	r24
    104a:	09 2e       	mov	r0, r25
    104c:	00 0c       	add	r0, r0
    104e:	aa 0b       	sbc	r26, r26
    1050:	bb 0b       	sbc	r27, r27
    1052:	48 17       	cp	r20, r24
    1054:	59 07       	cpc	r21, r25
    1056:	6a 07       	cpc	r22, r26
    1058:	7b 07       	cpc	r23, r27
    105a:	c0 f0       	brcs	.+48     	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
	{
		previousMillis1 = millis();
    105c:	0e 94 94 21 	call	0x4328	; 0x4328 <millis>
    1060:	60 93 b6 02 	sts	0x02B6, r22	; 0x8002b6 <previousMillis1>
    1064:	70 93 b7 02 	sts	0x02B7, r23	; 0x8002b7 <previousMillis1+0x1>
    1068:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <previousMillis1+0x2>
    106c:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <previousMillis1+0x3>
		dt = clock.getDateTime();
    1070:	67 ec       	ldi	r22, 0xC7	; 199
    1072:	72 e0       	ldi	r23, 0x02	; 2
    1074:	ce 01       	movw	r24, r28
    1076:	01 96       	adiw	r24, 0x01	; 1
    1078:	80 de       	rcall	.-768    	; 0xd7a <_ZN6DS323111getDateTimeEv>
    107a:	8c e0       	ldi	r24, 0x0C	; 12
    107c:	fe 01       	movw	r30, r28
    107e:	31 96       	adiw	r30, 0x01	; 1
    1080:	ab eb       	ldi	r26, 0xBB	; 187
    1082:	b2 e0       	ldi	r27, 0x02	; 2
    1084:	01 90       	ld	r0, Z+
    1086:	0d 92       	st	X+, r0
    1088:	8a 95       	dec	r24
    108a:	e1 f7       	brne	.-8      	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
	}
	if (millis() - previousMillis10 >= (delay2Sec*5))
    108c:	0e 94 94 21 	call	0x4328	; 0x4328 <millis>
    1090:	c0 90 ae 02 	lds	r12, 0x02AE	; 0x8002ae <previousMillis10>
    1094:	d0 90 af 02 	lds	r13, 0x02AF	; 0x8002af <previousMillis10+0x1>
    1098:	e0 90 b0 02 	lds	r14, 0x02B0	; 0x8002b0 <previousMillis10+0x2>
    109c:	f0 90 b1 02 	lds	r15, 0x02B1	; 0x8002b1 <previousMillis10+0x3>
    10a0:	ab 01       	movw	r20, r22
    10a2:	bc 01       	movw	r22, r24
    10a4:	4c 19       	sub	r20, r12
    10a6:	5d 09       	sbc	r21, r13
    10a8:	6e 09       	sbc	r22, r14
    10aa:	7f 09       	sbc	r23, r15
    10ac:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <delay2Sec>
    10b0:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <delay2Sec+0x1>
    10b4:	e5 e0       	ldi	r30, 0x05	; 5
    10b6:	e2 9f       	mul	r30, r18
    10b8:	c0 01       	movw	r24, r0
    10ba:	e3 9f       	mul	r30, r19
    10bc:	90 0d       	add	r25, r0
    10be:	11 24       	eor	r1, r1
    10c0:	09 2e       	mov	r0, r25
    10c2:	00 0c       	add	r0, r0
    10c4:	aa 0b       	sbc	r26, r26
    10c6:	bb 0b       	sbc	r27, r27
    10c8:	48 17       	cp	r20, r24
    10ca:	59 07       	cpc	r21, r25
    10cc:	6a 07       	cpc	r22, r26
    10ce:	7b 07       	cpc	r23, r27
    10d0:	10 f0       	brcs	.+4      	; 0x10d6 <__EEPROM_REGION_LENGTH__+0xd6>
	{
		showTime = false;
    10d2:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <showTime>
	}
	
	String dsTime = "";			// dsTime = Display Show Time
    10d6:	6f e9       	ldi	r22, 0x9F	; 159
    10d8:	72 e0       	ldi	r23, 0x02	; 2
    10da:	c8 01       	movw	r24, r16
    10dc:	0e 94 89 23 	call	0x4712	; 0x4712 <_ZN6StringC1EPKc>
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
    10e0:	60 91 bf 02 	lds	r22, 0x02BF	; 0x8002bf <dt+0x4>
    10e4:	c8 01       	movw	r24, r16
    10e6:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <_ZN6String6concatEh>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    10ea:	68 e1       	ldi	r22, 0x18	; 24
    10ec:	72 e0       	ldi	r23, 0x02	; 2
    10ee:	c8 01       	movw	r24, r16
    10f0:	0e 94 c9 23 	call	0x4792	; 0x4792 <_ZN6String6concatEPKc>
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
    10f4:	60 91 c0 02 	lds	r22, 0x02C0	; 0x8002c0 <dt+0x5>
    10f8:	c8 01       	movw	r24, r16
    10fa:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <_ZN6String6concatEh>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    10fe:	68 e1       	ldi	r22, 0x18	; 24
    1100:	72 e0       	ldi	r23, 0x02	; 2
    1102:	c8 01       	movw	r24, r16
    1104:	0e 94 c9 23 	call	0x4792	; 0x4792 <_ZN6String6concatEPKc>
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
    1108:	60 91 c1 02 	lds	r22, 0x02C1	; 0x8002c1 <dt+0x6>
    110c:	c8 01       	movw	r24, r16
    110e:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <_ZN6String6concatEh>
	dsTime += dt.minute;
	dsTime += ":";
	dsTime += dt.second;
	
	return dsTime;
}
    1112:	c8 01       	movw	r24, r16
    1114:	2c 96       	adiw	r28, 0x0c	; 12
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	cd bf       	out	0x3d, r28	; 61
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	ff 90       	pop	r15
    112a:	ef 90       	pop	r14
    112c:	df 90       	pop	r13
    112e:	cf 90       	pop	r12
    1130:	08 95       	ret

00001132 <loop>:
	pinMode(3, INPUT_PULLUP);
	attachInterrupt(digitalPinToInterrupt(3), buttonSwich, CHANGE);
}

void loop (void)
{
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	00 d0       	rcall	.+0      	; 0x113c <loop+0xa>
    113c:	00 d0       	rcall	.+0      	; 0x113e <loop+0xc>
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
	display.clearDisplay();
    1142:	83 ed       	ldi	r24, 0xD3	; 211
    1144:	92 e0       	ldi	r25, 0x02	; 2
    1146:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN16Adafruit_SSD130612clearDisplayEv>
	
	display.setTextSize(2);			// Normal 1:1 pixel scale
    114a:	62 e0       	ldi	r22, 0x02	; 2
    114c:	83 ed       	ldi	r24, 0xD3	; 211
    114e:	92 e0       	ldi	r25, 0x02	; 2
    1150:	57 d7       	rcall	.+3758   	; 0x2000 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <display+0x13>
    115a:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <display+0x12>
    115e:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <display+0x11>
    1162:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <display+0x10>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    1166:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <display+0xd>
    116a:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <display+0xc>
    cursor_y = y;
    116e:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <display+0xf>
    1172:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <display+0xe>
	display.setTextColor(WHITE);	// Draw white text
	display.setCursor(0,0);			// Start at top-left corner
	if (showTime)
    1176:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <showTime>
    117a:	88 23       	and	r24, r24
    117c:	21 f0       	breq	.+8      	; 0x1186 <loop+0x54>
	{
		display.println(printTime());
    117e:	ce 01       	movw	r24, r28
    1180:	01 96       	adiw	r24, 0x01	; 1
    1182:	3a df       	rcall	.-396    	; 0xff8 <_Z9printTimev>
    1184:	5b c0       	rjmp	.+182    	; 0x123c <loop+0x10a>
	}
	else
	{
		if (millis() - previousMillis2 >= delay2Sec)
    1186:	0e 94 94 21 	call	0x4328	; 0x4328 <millis>
    118a:	00 91 b2 02 	lds	r16, 0x02B2	; 0x8002b2 <previousMillis2>
    118e:	10 91 b3 02 	lds	r17, 0x02B3	; 0x8002b3 <previousMillis2+0x1>
    1192:	20 91 b4 02 	lds	r18, 0x02B4	; 0x8002b4 <previousMillis2+0x2>
    1196:	30 91 b5 02 	lds	r19, 0x02B5	; 0x8002b5 <previousMillis2+0x3>
    119a:	ab 01       	movw	r20, r22
    119c:	bc 01       	movw	r22, r24
    119e:	40 1b       	sub	r20, r16
    11a0:	51 0b       	sbc	r21, r17
    11a2:	62 0b       	sbc	r22, r18
    11a4:	73 0b       	sbc	r23, r19
    11a6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <delay2Sec>
    11aa:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <delay2Sec+0x1>
    11ae:	09 2e       	mov	r0, r25
    11b0:	00 0c       	add	r0, r0
    11b2:	aa 0b       	sbc	r26, r26
    11b4:	bb 0b       	sbc	r27, r27
    11b6:	48 17       	cp	r20, r24
    11b8:	59 07       	cpc	r21, r25
    11ba:	6a 07       	cpc	r22, r26
    11bc:	7b 07       	cpc	r23, r27
    11be:	48 f1       	brcs	.+82     	; 0x1212 <loop+0xe0>
		{
			previousMillis2 = millis();
    11c0:	0e 94 94 21 	call	0x4328	; 0x4328 <millis>
    11c4:	60 93 b2 02 	sts	0x02B2, r22	; 0x8002b2 <previousMillis2>
    11c8:	70 93 b3 02 	sts	0x02B3, r23	; 0x8002b3 <previousMillis2+0x1>
    11cc:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <previousMillis2+0x2>
    11d0:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <previousMillis2+0x3>
			digitalWrite(SS, LOW);				// enable Slave Select
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	85 e3       	ldi	r24, 0x35	; 53
    11d8:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <digitalWrite>
			
			
			SPI.transfer(*temperature);
    11dc:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <__data_end>
    11e0:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <__data_end+0x1>
    11e4:	80 81       	ld	r24, Z
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    11e6:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    11e8:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    11ea:	0d b4       	in	r0, 0x2d	; 45
    11ec:	07 fe       	sbrs	r0, 7
    11ee:	fd cf       	rjmp	.-6      	; 0x11ea <loop+0xb8>
    return SPDR;
    11f0:	8e b5       	in	r24, 0x2e	; 46
			Serial.println(*temperature);
    11f2:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <__data_end>
    11f6:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <__data_end+0x1>
    11fa:	60 81       	ld	r22, Z
    11fc:	71 81       	ldd	r23, Z+1	; 0x01
    11fe:	4a e0       	ldi	r20, 0x0A	; 10
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	81 ee       	ldi	r24, 0xE1	; 225
    1204:	93 e0       	ldi	r25, 0x03	; 3
    1206:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <_ZN5Print7printlnEii>
			
			digitalWrite(SS, HIGH);				// disable Slave Select
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	85 e3       	ldi	r24, 0x35	; 53
    120e:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <digitalWrite>
		}
		
		String dstr = "Temp: ";					//dstr = Display show temperature rounded
    1212:	6a e1       	ldi	r22, 0x1A	; 26
    1214:	72 e0       	ldi	r23, 0x02	; 2
    1216:	ce 01       	movw	r24, r28
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	0e 94 89 23 	call	0x4712	; 0x4712 <_ZN6StringC1EPKc>
		dstr += *temperature;
    121e:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <__data_end>
    1222:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <__data_end+0x1>
	String & operator += (int num)			{concat(num); return (*this);}
    1226:	60 81       	ld	r22, Z
    1228:	71 81       	ldd	r23, Z+1	; 0x01
    122a:	ce 01       	movw	r24, r28
    122c:	01 96       	adiw	r24, 0x01	; 1
    122e:	0e 94 13 24 	call	0x4826	; 0x4826 <_ZN6String6concatEi>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1232:	67 ef       	ldi	r22, 0xF7	; 247
    1234:	ce 01       	movw	r24, r28
    1236:	01 96       	adiw	r24, 0x01	; 1
    1238:	0e 94 d7 23 	call	0x47ae	; 0x47ae <_ZN6String6concatEc>
		dstr += (char)247;
		
		display.println(dstr);
    123c:	be 01       	movw	r22, r28
    123e:	6f 5f       	subi	r22, 0xFF	; 255
    1240:	7f 4f       	sbci	r23, 0xFF	; 255
    1242:	83 ed       	ldi	r24, 0xD3	; 211
    1244:	92 e0       	ldi	r25, 0x02	; 2
    1246:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <_ZN5Print7printlnERK6String>
			Serial.println(*temperature);
			
			digitalWrite(SS, HIGH);				// disable Slave Select
		}
		
		String dstr = "Temp: ";					//dstr = Display show temperature rounded
    124a:	ce 01       	movw	r24, r28
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	0e 94 1f 23 	call	0x463e	; 0x463e <_ZN6StringD1Ev>
		dstr += (char)247;
		
		display.println(dstr);
	}
	
	display.display();
    1252:	83 ed       	ldi	r24, 0xD3	; 211
    1254:	92 e0       	ldi	r25, 0x02	; 2
    1256:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <_ZN16Adafruit_SSD13067displayEv>
}
    125a:	26 96       	adiw	r28, 0x06	; 6
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	08 95       	ret

00001270 <_GLOBAL__sub_I_display>:

void buttonSwich()
{
	previousMillis10 = millis();
	showTime = true;
    1270:	8f 92       	push	r8
    1272:	9f 92       	push	r9
    1274:	af 92       	push	r10
    1276:	bf 92       	push	r11
    1278:	cf 92       	push	r12
    127a:	df 92       	push	r13
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET 4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    1282:	80 ea       	ldi	r24, 0xA0	; 160
    1284:	88 2e       	mov	r8, r24
    1286:	86 e8       	ldi	r24, 0x86	; 134
    1288:	98 2e       	mov	r9, r24
    128a:	aa 24       	eor	r10, r10
    128c:	a3 94       	inc	r10
    128e:	b1 2c       	mov	r11, r1
    1290:	90 e8       	ldi	r25, 0x80	; 128
    1292:	c9 2e       	mov	r12, r25
    1294:	9a e1       	ldi	r25, 0x1A	; 26
    1296:	d9 2e       	mov	r13, r25
    1298:	96 e0       	ldi	r25, 0x06	; 6
    129a:	e9 2e       	mov	r14, r25
    129c:	f1 2c       	mov	r15, r1
    129e:	04 e0       	ldi	r16, 0x04	; 4
    12a0:	2b e8       	ldi	r18, 0x8B	; 139
    12a2:	33 e0       	ldi	r19, 0x03	; 3
    12a4:	40 e4       	ldi	r20, 0x40	; 64
    12a6:	60 e8       	ldi	r22, 0x80	; 128
    12a8:	83 ed       	ldi	r24, 0xD3	; 211
    12aa:	92 e0       	ldi	r25, 0x02	; 2
    12ac:	6f d7       	rcall	.+3806   	; 0x218c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>

void buttonSwich()
{
	previousMillis10 = millis();
	showTime = true;
    12ae:	0f 91       	pop	r16
    12b0:	ff 90       	pop	r15
    12b2:	ef 90       	pop	r14
    12b4:	df 90       	pop	r13
    12b6:	cf 90       	pop	r12
    12b8:	bf 90       	pop	r11
    12ba:	af 90       	pop	r10
    12bc:	9f 90       	pop	r9
    12be:	8f 90       	pop	r8
    12c0:	08 95       	ret

000012c2 <_GLOBAL__sub_D_display>:
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET 4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    12c2:	83 ed       	ldi	r24, 0xD3	; 211
    12c4:	92 e0       	ldi	r25, 0x02	; 2
    12c6:	ac c7       	rjmp	.+3928   	; 0x2220 <_ZN16Adafruit_SSD1306D1Ev>

000012c8 <_ZN8SPIClass16beginTransactionE11SPISettings>:

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    12c8:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <_ZN8SPIClass13interruptModeE>
    12cc:	22 23       	and	r18, r18
    12ce:	99 f0       	breq	.+38     	; 0x12f6 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      uint8_t sreg = SREG;
    12d0:	4f b7       	in	r20, 0x3f	; 63
      noInterrupts();
    12d2:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    12d4:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <_ZN8SPIClass13interruptModeE>
    12d8:	21 30       	cpi	r18, 0x01	; 1
    12da:	59 f4       	brne	.+22     	; 0x12f2 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
        interruptSave = SPI_AVR_EIMSK;
    12dc:	2d b3       	in	r18, 0x1d	; 29
    12de:	20 93 13 03 	sts	0x0313, r18	; 0x800313 <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    12e2:	3d b3       	in	r19, 0x1d	; 29
    12e4:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <_ZN8SPIClass13interruptMaskE>
    12e8:	20 95       	com	r18
    12ea:	23 23       	and	r18, r19
    12ec:	2d bb       	out	0x1d, r18	; 29
        SREG = sreg;
    12ee:	4f bf       	out	0x3f, r20	; 63
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      } else
      #endif
      {
        interruptSave = sreg;
    12f2:	40 93 13 03 	sts	0x0313, r20	; 0x800313 <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    12f6:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
    12f8:	9d bd       	out	0x2d, r25	; 45
    12fa:	08 95       	ret

000012fc <_ZN8SPIClass14endTransactionEv>:
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    12fc:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_ZN8SPIClass13interruptModeE>
    1300:	88 23       	and	r24, r24
    1302:	61 f0       	breq	.+24     	; 0x131c <_ZN8SPIClass14endTransactionEv+0x20>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    1304:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    1306:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    1308:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <_ZN8SPIClass13interruptModeE>
    130c:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_ZN8SPIClass13interruptSaveE>
    1310:	21 30       	cpi	r18, 0x01	; 1
    1312:	19 f4       	brne	.+6      	; 0x131a <_ZN8SPIClass14endTransactionEv+0x1e>
        SPI_AVR_EIMSK = interruptSave;
    1314:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    1316:	9f bf       	out	0x3f, r25	; 63
    1318:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
    131a:	8f bf       	out	0x3f, r24	; 63
    131c:	08 95       	ret

0000131e <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	08 95       	ret

00001324 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1324:	08 95       	ret

00001326 <_ZN12Adafruit_GFX9writeLineEiiiij>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
  drawChar(x, y, c, color, bg, size, size);
}
    1326:	2f 92       	push	r2
    1328:	3f 92       	push	r3
    132a:	4f 92       	push	r4
    132c:	5f 92       	push	r5
    132e:	6f 92       	push	r6
    1330:	7f 92       	push	r7
    1332:	8f 92       	push	r8
    1334:	9f 92       	push	r9
    1336:	af 92       	push	r10
    1338:	bf 92       	push	r11
    133a:	cf 92       	push	r12
    133c:	df 92       	push	r13
    133e:	ef 92       	push	r14
    1340:	ff 92       	push	r15
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	00 d0       	rcall	.+0      	; 0x134c <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    134c:	00 d0       	rcall	.+0      	; 0x134e <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	2c 01       	movw	r4, r24
    1354:	7e 83       	std	Y+6, r23	; 0x06
    1356:	6d 83       	std	Y+5, r22	; 0x05
    1358:	6a 01       	movw	r12, r20
    135a:	59 01       	movw	r10, r18
    135c:	c8 01       	movw	r24, r16
    135e:	fc 82       	std	Y+4, r15	; 0x04
    1360:	eb 82       	std	Y+3, r14	; 0x03
    1362:	48 01       	movw	r8, r16
    1364:	84 1a       	sub	r8, r20
    1366:	95 0a       	sbc	r9, r21
    1368:	97 fe       	sbrs	r9, 7
    136a:	03 c0       	rjmp	.+6      	; 0x1372 <_ZN12Adafruit_GFX9writeLineEiiiij+0x4c>
    136c:	91 94       	neg	r9
    136e:	81 94       	neg	r8
    1370:	91 08       	sbc	r9, r1
    1372:	35 01       	movw	r6, r10
    1374:	2d 81       	ldd	r18, Y+5	; 0x05
    1376:	3e 81       	ldd	r19, Y+6	; 0x06
    1378:	62 1a       	sub	r6, r18
    137a:	73 0a       	sbc	r7, r19
    137c:	77 fe       	sbrs	r7, 7
    137e:	03 c0       	rjmp	.+6      	; 0x1386 <_ZN12Adafruit_GFX9writeLineEiiiij+0x60>
    1380:	71 94       	neg	r7
    1382:	61 94       	neg	r6
    1384:	71 08       	sbc	r7, r1
    1386:	68 14       	cp	r6, r8
    1388:	79 04       	cpc	r7, r9
    138a:	5c f4       	brge	.+22     	; 0x13a2 <_ZN12Adafruit_GFX9writeLineEiiiij+0x7c>
    138c:	3a 2d       	mov	r19, r10
    138e:	2b 2d       	mov	r18, r11
    1390:	5c 01       	movw	r10, r24
    1392:	83 2f       	mov	r24, r19
    1394:	92 2f       	mov	r25, r18
    1396:	3d 81       	ldd	r19, Y+5	; 0x05
    1398:	2e 81       	ldd	r18, Y+6	; 0x06
    139a:	de 82       	std	Y+6, r13	; 0x06
    139c:	cd 82       	std	Y+5, r12	; 0x05
    139e:	c3 2e       	mov	r12, r19
    13a0:	d2 2e       	mov	r13, r18
    13a2:	ad 81       	ldd	r26, Y+5	; 0x05
    13a4:	be 81       	ldd	r27, Y+6	; 0x06
    13a6:	aa 16       	cp	r10, r26
    13a8:	bb 06       	cpc	r11, r27
    13aa:	5c f4       	brge	.+22     	; 0x13c2 <_ZN12Adafruit_GFX9writeLineEiiiij+0x9c>
    13ac:	3c 2d       	mov	r19, r12
    13ae:	2d 2d       	mov	r18, r13
    13b0:	6c 01       	movw	r12, r24
    13b2:	83 2f       	mov	r24, r19
    13b4:	92 2f       	mov	r25, r18
    13b6:	3d 81       	ldd	r19, Y+5	; 0x05
    13b8:	2e 81       	ldd	r18, Y+6	; 0x06
    13ba:	be 82       	std	Y+6, r11	; 0x06
    13bc:	ad 82       	std	Y+5, r10	; 0x05
    13be:	a3 2e       	mov	r10, r19
    13c0:	b2 2e       	mov	r11, r18
    13c2:	85 01       	movw	r16, r10
    13c4:	2d 81       	ldd	r18, Y+5	; 0x05
    13c6:	3e 81       	ldd	r19, Y+6	; 0x06
    13c8:	02 1b       	sub	r16, r18
    13ca:	13 0b       	sbc	r17, r19
    13cc:	1c 01       	movw	r2, r24
    13ce:	2c 18       	sub	r2, r12
    13d0:	3d 08       	sbc	r3, r13
    13d2:	37 fe       	sbrs	r3, 7
    13d4:	03 c0       	rjmp	.+6      	; 0x13dc <_ZN12Adafruit_GFX9writeLineEiiiij+0xb6>
    13d6:	31 94       	neg	r3
    13d8:	21 94       	neg	r2
    13da:	31 08       	sbc	r3, r1
    13dc:	78 01       	movw	r14, r16
    13de:	17 ff       	sbrs	r17, 7
    13e0:	03 c0       	rjmp	.+6      	; 0x13e8 <_ZN12Adafruit_GFX9writeLineEiiiij+0xc2>
    13e2:	3f ef       	ldi	r19, 0xFF	; 255
    13e4:	e3 1a       	sub	r14, r19
    13e6:	f3 0a       	sbc	r15, r19
    13e8:	f5 94       	asr	r15
    13ea:	e7 94       	ror	r14
    13ec:	c8 16       	cp	r12, r24
    13ee:	d9 06       	cpc	r13, r25
    13f0:	2c f0       	brlt	.+10     	; 0x13fc <_ZN12Adafruit_GFX9writeLineEiiiij+0xd6>
    13f2:	8f ef       	ldi	r24, 0xFF	; 255
    13f4:	9f ef       	ldi	r25, 0xFF	; 255
    13f6:	9a 83       	std	Y+2, r25	; 0x02
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    13fc:	a1 e0       	ldi	r26, 0x01	; 1
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	ba 83       	std	Y+2, r27	; 0x02
    1402:	a9 83       	std	Y+1, r26	; 0x01
    1404:	2d 81       	ldd	r18, Y+5	; 0x05
    1406:	3e 81       	ldd	r19, Y+6	; 0x06
    1408:	a2 16       	cp	r10, r18
    140a:	b3 06       	cpc	r11, r19
    140c:	24 f1       	brlt	.+72     	; 0x1456 <_ZN12Adafruit_GFX9writeLineEiiiij+0x130>
    140e:	d2 01       	movw	r26, r4
    1410:	ed 91       	ld	r30, X+
    1412:	fc 91       	ld	r31, X
    1414:	04 84       	ldd	r0, Z+12	; 0x0c
    1416:	f5 85       	ldd	r31, Z+13	; 0x0d
    1418:	e0 2d       	mov	r30, r0
    141a:	2b 81       	ldd	r18, Y+3	; 0x03
    141c:	3c 81       	ldd	r19, Y+4	; 0x04
    141e:	68 14       	cp	r6, r8
    1420:	79 04       	cpc	r7, r9
    1422:	24 f4       	brge	.+8      	; 0x142c <_ZN12Adafruit_GFX9writeLineEiiiij+0x106>
    1424:	4d 81       	ldd	r20, Y+5	; 0x05
    1426:	5e 81       	ldd	r21, Y+6	; 0x06
    1428:	b6 01       	movw	r22, r12
    142a:	03 c0       	rjmp	.+6      	; 0x1432 <_ZN12Adafruit_GFX9writeLineEiiiij+0x10c>
    142c:	a6 01       	movw	r20, r12
    142e:	6d 81       	ldd	r22, Y+5	; 0x05
    1430:	7e 81       	ldd	r23, Y+6	; 0x06
    1432:	c2 01       	movw	r24, r4
    1434:	19 95       	eicall
    1436:	e2 18       	sub	r14, r2
    1438:	f3 08       	sbc	r15, r3
    143a:	f7 fe       	sbrs	r15, 7
    143c:	06 c0       	rjmp	.+12     	; 0x144a <_ZN12Adafruit_GFX9writeLineEiiiij+0x124>
    143e:	29 81       	ldd	r18, Y+1	; 0x01
    1440:	3a 81       	ldd	r19, Y+2	; 0x02
    1442:	c2 0e       	add	r12, r18
    1444:	d3 1e       	adc	r13, r19
    1446:	e0 0e       	add	r14, r16
    1448:	f1 1e       	adc	r15, r17
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	9e 83       	std	Y+6, r25	; 0x06
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	d7 cf       	rjmp	.-82     	; 0x1404 <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    1456:	26 96       	adiw	r28, 0x06	; 6
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	ff 90       	pop	r15
    146c:	ef 90       	pop	r14
    146e:	df 90       	pop	r13
    1470:	cf 90       	pop	r12
    1472:	bf 90       	pop	r11
    1474:	af 90       	pop	r10
    1476:	9f 90       	pop	r9
    1478:	8f 90       	pop	r8
    147a:	7f 90       	pop	r7
    147c:	6f 90       	pop	r6
    147e:	5f 90       	pop	r5
    1480:	4f 90       	pop	r4
    1482:	3f 90       	pop	r3
    1484:	2f 90       	pop	r2
    1486:	08 95       	ret

00001488 <_ZN12Adafruit_GFX10writePixelEiij>:
    1488:	dc 01       	movw	r26, r24
    148a:	ed 91       	ld	r30, X+
    148c:	fc 91       	ld	r31, X
    148e:	00 84       	ldd	r0, Z+8	; 0x08
    1490:	f1 85       	ldd	r31, Z+9	; 0x09
    1492:	e0 2d       	mov	r30, r0
    1494:	19 94       	eijmp

00001496 <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	dc 01       	movw	r26, r24
    149c:	ed 91       	ld	r30, X+
    149e:	fc 91       	ld	r31, X
    14a0:	04 8c       	ldd	r0, Z+28	; 0x1c
    14a2:	f5 8d       	ldd	r31, Z+29	; 0x1d
    14a4:	e0 2d       	mov	r30, r0
    14a6:	19 95       	eicall
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	08 95       	ret

000014ae <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	dc 01       	movw	r26, r24
    14b4:	ed 91       	ld	r30, X+
    14b6:	fc 91       	ld	r31, X
    14b8:	06 8c       	ldd	r0, Z+30	; 0x1e
    14ba:	f7 8d       	ldd	r31, Z+31	; 0x1f
    14bc:	e0 2d       	mov	r30, r0
    14be:	19 95       	eicall
    14c0:	1f 91       	pop	r17
    14c2:	0f 91       	pop	r16
    14c4:	08 95       	ret

000014c6 <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    14c6:	ef 92       	push	r14
    14c8:	ff 92       	push	r15
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	dc 01       	movw	r26, r24
    14d0:	ed 91       	ld	r30, X+
    14d2:	fc 91       	ld	r31, X
    14d4:	00 a0       	ldd	r0, Z+32	; 0x20
    14d6:	f1 a1       	ldd	r31, Z+33	; 0x21
    14d8:	e0 2d       	mov	r30, r0
    14da:	19 95       	eicall
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	ff 90       	pop	r15
    14e2:	ef 90       	pop	r14
    14e4:	08 95       	ret

000014e6 <_ZN12Adafruit_GFX10startWriteEv>:
    14e6:	08 95       	ret

000014e8 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    14e8:	8f 92       	push	r8
    14ea:	9f 92       	push	r9
    14ec:	af 92       	push	r10
    14ee:	bf 92       	push	r11
    14f0:	cf 92       	push	r12
    14f2:	df 92       	push	r13
    14f4:	ef 92       	push	r14
    14f6:	ff 92       	push	r15
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	ec 01       	movw	r28, r24
    1502:	5b 01       	movw	r10, r22
    1504:	4a 01       	movw	r8, r20
    1506:	69 01       	movw	r12, r18
    1508:	78 01       	movw	r14, r16
    150a:	e8 81       	ld	r30, Y
    150c:	f9 81       	ldd	r31, Y+1	; 0x01
    150e:	02 84       	ldd	r0, Z+10	; 0x0a
    1510:	f3 85       	ldd	r31, Z+11	; 0x0b
    1512:	e0 2d       	mov	r30, r0
    1514:	19 95       	eicall
    1516:	c8 0c       	add	r12, r8
    1518:	d9 1c       	adc	r13, r9
    151a:	86 01       	movw	r16, r12
    151c:	01 50       	subi	r16, 0x01	; 1
    151e:	11 09       	sbc	r17, r1
    1520:	e8 81       	ld	r30, Y
    1522:	f9 81       	ldd	r31, Y+1	; 0x01
    1524:	04 88       	ldd	r0, Z+20	; 0x14
    1526:	f5 89       	ldd	r31, Z+21	; 0x15
    1528:	e0 2d       	mov	r30, r0
    152a:	95 01       	movw	r18, r10
    152c:	a4 01       	movw	r20, r8
    152e:	b5 01       	movw	r22, r10
    1530:	ce 01       	movw	r24, r28
    1532:	19 95       	eicall
    1534:	e8 81       	ld	r30, Y
    1536:	f9 81       	ldd	r31, Y+1	; 0x01
    1538:	06 88       	ldd	r0, Z+22	; 0x16
    153a:	f7 89       	ldd	r31, Z+23	; 0x17
    153c:	e0 2d       	mov	r30, r0
    153e:	ce 01       	movw	r24, r28
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	df 90       	pop	r13
    154e:	cf 90       	pop	r12
    1550:	bf 90       	pop	r11
    1552:	af 90       	pop	r10
    1554:	9f 90       	pop	r9
    1556:	8f 90       	pop	r8
    1558:	19 94       	eijmp

0000155a <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    155a:	8f 92       	push	r8
    155c:	9f 92       	push	r9
    155e:	af 92       	push	r10
    1560:	bf 92       	push	r11
    1562:	cf 92       	push	r12
    1564:	df 92       	push	r13
    1566:	ef 92       	push	r14
    1568:	ff 92       	push	r15
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	ec 01       	movw	r28, r24
    1574:	5b 01       	movw	r10, r22
    1576:	4a 01       	movw	r8, r20
    1578:	69 01       	movw	r12, r18
    157a:	e8 81       	ld	r30, Y
    157c:	f9 81       	ldd	r31, Y+1	; 0x01
    157e:	02 84       	ldd	r0, Z+10	; 0x0a
    1580:	f3 85       	ldd	r31, Z+11	; 0x0b
    1582:	e0 2d       	mov	r30, r0
    1584:	19 95       	eicall
    1586:	95 01       	movw	r18, r10
    1588:	2c 0d       	add	r18, r12
    158a:	3d 1d       	adc	r19, r13
    158c:	21 50       	subi	r18, 0x01	; 1
    158e:	31 09       	sbc	r19, r1
    1590:	e8 81       	ld	r30, Y
    1592:	f9 81       	ldd	r31, Y+1	; 0x01
    1594:	04 88       	ldd	r0, Z+20	; 0x14
    1596:	f5 89       	ldd	r31, Z+21	; 0x15
    1598:	e0 2d       	mov	r30, r0
    159a:	78 01       	movw	r14, r16
    159c:	84 01       	movw	r16, r8
    159e:	a4 01       	movw	r20, r8
    15a0:	b5 01       	movw	r22, r10
    15a2:	ce 01       	movw	r24, r28
    15a4:	19 95       	eicall
    15a6:	e8 81       	ld	r30, Y
    15a8:	f9 81       	ldd	r31, Y+1	; 0x01
    15aa:	06 88       	ldd	r0, Z+22	; 0x16
    15ac:	f7 89       	ldd	r31, Z+23	; 0x17
    15ae:	e0 2d       	mov	r30, r0
    15b0:	ce 01       	movw	r24, r28
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	ff 90       	pop	r15
    15bc:	ef 90       	pop	r14
    15be:	df 90       	pop	r13
    15c0:	cf 90       	pop	r12
    15c2:	bf 90       	pop	r11
    15c4:	af 90       	pop	r10
    15c6:	9f 90       	pop	r9
    15c8:	8f 90       	pop	r8
    15ca:	19 94       	eijmp

000015cc <_ZN12Adafruit_GFX8fillRectEiiiij>:
    15cc:	4f 92       	push	r4
    15ce:	5f 92       	push	r5
    15d0:	6f 92       	push	r6
    15d2:	7f 92       	push	r7
    15d4:	8f 92       	push	r8
    15d6:	9f 92       	push	r9
    15d8:	af 92       	push	r10
    15da:	bf 92       	push	r11
    15dc:	cf 92       	push	r12
    15de:	df 92       	push	r13
    15e0:	ef 92       	push	r14
    15e2:	ff 92       	push	r15
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	6c 01       	movw	r12, r24
    15ee:	2b 01       	movw	r4, r22
    15f0:	5a 01       	movw	r10, r20
    15f2:	39 01       	movw	r6, r18
    15f4:	48 01       	movw	r8, r16
    15f6:	dc 01       	movw	r26, r24
    15f8:	ed 91       	ld	r30, X+
    15fa:	fc 91       	ld	r31, X
    15fc:	02 84       	ldd	r0, Z+10	; 0x0a
    15fe:	f3 85       	ldd	r31, Z+11	; 0x0b
    1600:	e0 2d       	mov	r30, r0
    1602:	19 95       	eicall
    1604:	e2 01       	movw	r28, r4
    1606:	64 0c       	add	r6, r4
    1608:	75 1c       	adc	r7, r5
    160a:	d6 01       	movw	r26, r12
    160c:	ed 91       	ld	r30, X+
    160e:	fc 91       	ld	r31, X
    1610:	c6 15       	cp	r28, r6
    1612:	d7 05       	cpc	r29, r7
    1614:	5c f4       	brge	.+22     	; 0x162c <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    1616:	00 88       	ldd	r0, Z+16	; 0x10
    1618:	f1 89       	ldd	r31, Z+17	; 0x11
    161a:	e0 2d       	mov	r30, r0
    161c:	87 01       	movw	r16, r14
    161e:	94 01       	movw	r18, r8
    1620:	a5 01       	movw	r20, r10
    1622:	be 01       	movw	r22, r28
    1624:	c6 01       	movw	r24, r12
    1626:	19 95       	eicall
    1628:	21 96       	adiw	r28, 0x01	; 1
    162a:	ef cf       	rjmp	.-34     	; 0x160a <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    162c:	06 88       	ldd	r0, Z+22	; 0x16
    162e:	f7 89       	ldd	r31, Z+23	; 0x17
    1630:	e0 2d       	mov	r30, r0
    1632:	c6 01       	movw	r24, r12
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	1f 91       	pop	r17
    163a:	0f 91       	pop	r16
    163c:	ff 90       	pop	r15
    163e:	ef 90       	pop	r14
    1640:	df 90       	pop	r13
    1642:	cf 90       	pop	r12
    1644:	bf 90       	pop	r11
    1646:	af 90       	pop	r10
    1648:	9f 90       	pop	r9
    164a:	8f 90       	pop	r8
    164c:	7f 90       	pop	r7
    164e:	6f 90       	pop	r6
    1650:	5f 90       	pop	r5
    1652:	4f 90       	pop	r4
    1654:	19 94       	eijmp

00001656 <_ZN12Adafruit_GFX10fillScreenEj>:
    1656:	ef 92       	push	r14
    1658:	ff 92       	push	r15
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	dc 01       	movw	r26, r24
    1660:	1a 96       	adiw	r26, 0x0a	; 10
    1662:	0d 91       	ld	r16, X+
    1664:	1c 91       	ld	r17, X
    1666:	1b 97       	sbiw	r26, 0x0b	; 11
    1668:	18 96       	adiw	r26, 0x08	; 8
    166a:	2d 91       	ld	r18, X+
    166c:	3c 91       	ld	r19, X
    166e:	19 97       	sbiw	r26, 0x09	; 9
    1670:	ed 91       	ld	r30, X+
    1672:	fc 91       	ld	r31, X
    1674:	00 a0       	ldd	r0, Z+32	; 0x20
    1676:	f1 a1       	ldd	r31, Z+33	; 0x21
    1678:	e0 2d       	mov	r30, r0
    167a:	7b 01       	movw	r14, r22
    167c:	40 e0       	ldi	r20, 0x00	; 0
    167e:	50 e0       	ldi	r21, 0x00	; 0
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	19 95       	eicall
    1686:	1f 91       	pop	r17
    1688:	0f 91       	pop	r16
    168a:	ff 90       	pop	r15
    168c:	ef 90       	pop	r14
    168e:	08 95       	ret

00001690 <_ZN12Adafruit_GFX8drawLineEiiiij>:
    1690:	8f 92       	push	r8
    1692:	9f 92       	push	r9
    1694:	af 92       	push	r10
    1696:	bf 92       	push	r11
    1698:	cf 92       	push	r12
    169a:	df 92       	push	r13
    169c:	ef 92       	push	r14
    169e:	ff 92       	push	r15
    16a0:	0f 93       	push	r16
    16a2:	1f 93       	push	r17
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	4c 01       	movw	r8, r24
    16aa:	6b 01       	movw	r12, r22
    16ac:	5a 01       	movw	r10, r20
    16ae:	e9 01       	movw	r28, r18
    16b0:	dc 01       	movw	r26, r24
    16b2:	ed 91       	ld	r30, X+
    16b4:	fc 91       	ld	r31, X
    16b6:	62 17       	cp	r22, r18
    16b8:	73 07       	cpc	r23, r19
    16ba:	81 f4       	brne	.+32     	; 0x16dc <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    16bc:	04 17       	cp	r16, r20
    16be:	15 07       	cpc	r17, r21
    16c0:	24 f4       	brge	.+8      	; 0x16ca <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    16c2:	8b 2d       	mov	r24, r11
    16c4:	58 01       	movw	r10, r16
    16c6:	04 2f       	mov	r16, r20
    16c8:	18 2f       	mov	r17, r24
    16ca:	0a 19       	sub	r16, r10
    16cc:	1b 09       	sbc	r17, r11
    16ce:	98 01       	movw	r18, r16
    16d0:	2f 5f       	subi	r18, 0xFF	; 255
    16d2:	3f 4f       	sbci	r19, 0xFF	; 255
    16d4:	04 8c       	ldd	r0, Z+28	; 0x1c
    16d6:	f5 8d       	ldd	r31, Z+29	; 0x1d
    16d8:	e0 2d       	mov	r30, r0
    16da:	12 c0       	rjmp	.+36     	; 0x1700 <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    16dc:	40 17       	cp	r20, r16
    16de:	51 07       	cpc	r21, r17
    16e0:	09 f5       	brne	.+66     	; 0x1724 <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    16e2:	26 17       	cp	r18, r22
    16e4:	37 07       	cpc	r19, r23
    16e6:	24 f4       	brge	.+8      	; 0x16f0 <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    16e8:	8d 2d       	mov	r24, r13
    16ea:	69 01       	movw	r12, r18
    16ec:	c6 2f       	mov	r28, r22
    16ee:	d8 2f       	mov	r29, r24
    16f0:	9e 01       	movw	r18, r28
    16f2:	2c 19       	sub	r18, r12
    16f4:	3d 09       	sbc	r19, r13
    16f6:	2f 5f       	subi	r18, 0xFF	; 255
    16f8:	3f 4f       	sbci	r19, 0xFF	; 255
    16fa:	06 8c       	ldd	r0, Z+30	; 0x1e
    16fc:	f7 8d       	ldd	r31, Z+31	; 0x1f
    16fe:	e0 2d       	mov	r30, r0
    1700:	87 01       	movw	r16, r14
    1702:	a5 01       	movw	r20, r10
    1704:	b6 01       	movw	r22, r12
    1706:	c4 01       	movw	r24, r8
    1708:	19 95       	eicall
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	df 90       	pop	r13
    1718:	cf 90       	pop	r12
    171a:	bf 90       	pop	r11
    171c:	af 90       	pop	r10
    171e:	9f 90       	pop	r9
    1720:	8f 90       	pop	r8
    1722:	08 95       	ret
    1724:	02 84       	ldd	r0, Z+10	; 0x0a
    1726:	f3 85       	ldd	r31, Z+11	; 0x0b
    1728:	e0 2d       	mov	r30, r0
    172a:	19 95       	eicall
    172c:	d4 01       	movw	r26, r8
    172e:	ed 91       	ld	r30, X+
    1730:	fc 91       	ld	r31, X
    1732:	04 88       	ldd	r0, Z+20	; 0x14
    1734:	f5 89       	ldd	r31, Z+21	; 0x15
    1736:	e0 2d       	mov	r30, r0
    1738:	9e 01       	movw	r18, r28
    173a:	a5 01       	movw	r20, r10
    173c:	b6 01       	movw	r22, r12
    173e:	c4 01       	movw	r24, r8
    1740:	19 95       	eicall
    1742:	d4 01       	movw	r26, r8
    1744:	ed 91       	ld	r30, X+
    1746:	fc 91       	ld	r31, X
    1748:	06 88       	ldd	r0, Z+22	; 0x16
    174a:	f7 89       	ldd	r31, Z+23	; 0x17
    174c:	e0 2d       	mov	r30, r0
    174e:	c4 01       	movw	r24, r8
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	1f 91       	pop	r17
    1756:	0f 91       	pop	r16
    1758:	ff 90       	pop	r15
    175a:	ef 90       	pop	r14
    175c:	df 90       	pop	r13
    175e:	cf 90       	pop	r12
    1760:	bf 90       	pop	r11
    1762:	af 90       	pop	r10
    1764:	9f 90       	pop	r9
    1766:	8f 90       	pop	r8
    1768:	19 94       	eijmp

0000176a <_ZN12Adafruit_GFX8drawRectEiiiij>:
    176a:	6f 92       	push	r6
    176c:	7f 92       	push	r7
    176e:	8f 92       	push	r8
    1770:	9f 92       	push	r9
    1772:	af 92       	push	r10
    1774:	bf 92       	push	r11
    1776:	cf 92       	push	r12
    1778:	df 92       	push	r13
    177a:	ef 92       	push	r14
    177c:	ff 92       	push	r15
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	ec 01       	movw	r28, r24
    1788:	4b 01       	movw	r8, r22
    178a:	5a 01       	movw	r10, r20
    178c:	69 01       	movw	r12, r18
    178e:	38 01       	movw	r6, r16
    1790:	e8 81       	ld	r30, Y
    1792:	f9 81       	ldd	r31, Y+1	; 0x01
    1794:	02 84       	ldd	r0, Z+10	; 0x0a
    1796:	f3 85       	ldd	r31, Z+11	; 0x0b
    1798:	e0 2d       	mov	r30, r0
    179a:	19 95       	eicall
    179c:	e8 81       	ld	r30, Y
    179e:	f9 81       	ldd	r31, Y+1	; 0x01
    17a0:	02 88       	ldd	r0, Z+18	; 0x12
    17a2:	f3 89       	ldd	r31, Z+19	; 0x13
    17a4:	e0 2d       	mov	r30, r0
    17a6:	87 01       	movw	r16, r14
    17a8:	96 01       	movw	r18, r12
    17aa:	a5 01       	movw	r20, r10
    17ac:	b4 01       	movw	r22, r8
    17ae:	ce 01       	movw	r24, r28
    17b0:	19 95       	eicall
    17b2:	a5 01       	movw	r20, r10
    17b4:	46 0d       	add	r20, r6
    17b6:	57 1d       	adc	r21, r7
    17b8:	41 50       	subi	r20, 0x01	; 1
    17ba:	51 09       	sbc	r21, r1
    17bc:	e8 81       	ld	r30, Y
    17be:	f9 81       	ldd	r31, Y+1	; 0x01
    17c0:	02 88       	ldd	r0, Z+18	; 0x12
    17c2:	f3 89       	ldd	r31, Z+19	; 0x13
    17c4:	e0 2d       	mov	r30, r0
    17c6:	96 01       	movw	r18, r12
    17c8:	b4 01       	movw	r22, r8
    17ca:	ce 01       	movw	r24, r28
    17cc:	19 95       	eicall
    17ce:	e8 81       	ld	r30, Y
    17d0:	f9 81       	ldd	r31, Y+1	; 0x01
    17d2:	00 88       	ldd	r0, Z+16	; 0x10
    17d4:	f1 89       	ldd	r31, Z+17	; 0x11
    17d6:	e0 2d       	mov	r30, r0
    17d8:	93 01       	movw	r18, r6
    17da:	a5 01       	movw	r20, r10
    17dc:	b4 01       	movw	r22, r8
    17de:	ce 01       	movw	r24, r28
    17e0:	19 95       	eicall
    17e2:	c8 0c       	add	r12, r8
    17e4:	d9 1c       	adc	r13, r9
    17e6:	b6 01       	movw	r22, r12
    17e8:	61 50       	subi	r22, 0x01	; 1
    17ea:	71 09       	sbc	r23, r1
    17ec:	e8 81       	ld	r30, Y
    17ee:	f9 81       	ldd	r31, Y+1	; 0x01
    17f0:	00 88       	ldd	r0, Z+16	; 0x10
    17f2:	f1 89       	ldd	r31, Z+17	; 0x11
    17f4:	e0 2d       	mov	r30, r0
    17f6:	93 01       	movw	r18, r6
    17f8:	a5 01       	movw	r20, r10
    17fa:	ce 01       	movw	r24, r28
    17fc:	19 95       	eicall
    17fe:	e8 81       	ld	r30, Y
    1800:	f9 81       	ldd	r31, Y+1	; 0x01
    1802:	06 88       	ldd	r0, Z+22	; 0x16
    1804:	f7 89       	ldd	r31, Z+23	; 0x17
    1806:	e0 2d       	mov	r30, r0
    1808:	ce 01       	movw	r24, r28
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	ff 90       	pop	r15
    1814:	ef 90       	pop	r14
    1816:	df 90       	pop	r13
    1818:	cf 90       	pop	r12
    181a:	bf 90       	pop	r11
    181c:	af 90       	pop	r10
    181e:	9f 90       	pop	r9
    1820:	8f 90       	pop	r8
    1822:	7f 90       	pop	r7
    1824:	6f 90       	pop	r6
    1826:	19 94       	eijmp

00001828 <_ZN12Adafruit_GFX13invertDisplayEb>:
    1828:	08 95       	ret

0000182a <_ZN12Adafruit_GFX11setRotationEh>:
    182a:	fc 01       	movw	r30, r24
    182c:	63 70       	andi	r22, 0x03	; 3
    182e:	66 8b       	std	Z+22, r22	; 0x16
    1830:	84 81       	ldd	r24, Z+4	; 0x04
    1832:	95 81       	ldd	r25, Z+5	; 0x05
    1834:	26 81       	ldd	r18, Z+6	; 0x06
    1836:	37 81       	ldd	r19, Z+7	; 0x07
    1838:	61 30       	cpi	r22, 0x01	; 1
    183a:	39 f0       	breq	.+14     	; 0x184a <_ZN12Adafruit_GFX11setRotationEh+0x20>
    183c:	63 30       	cpi	r22, 0x03	; 3
    183e:	29 f0       	breq	.+10     	; 0x184a <_ZN12Adafruit_GFX11setRotationEh+0x20>
    1840:	91 87       	std	Z+9, r25	; 0x09
    1842:	80 87       	std	Z+8, r24	; 0x08
    1844:	33 87       	std	Z+11, r19	; 0x0b
    1846:	22 87       	std	Z+10, r18	; 0x0a
    1848:	08 95       	ret
    184a:	31 87       	std	Z+9, r19	; 0x09
    184c:	20 87       	std	Z+8, r18	; 0x08
    184e:	93 87       	std	Z+11, r25	; 0x0b
    1850:	82 87       	std	Z+10, r24	; 0x0a
    1852:	08 95       	ret

00001854 <_ZN12Adafruit_GFXC1Eii>:
    1854:	fc 01       	movw	r30, r24
    1856:	13 82       	std	Z+3, r1	; 0x03
    1858:	12 82       	std	Z+2, r1	; 0x02
    185a:	85 e2       	ldi	r24, 0x25	; 37
    185c:	92 e0       	ldi	r25, 0x02	; 2
    185e:	91 83       	std	Z+1, r25	; 0x01
    1860:	80 83       	st	Z, r24
    1862:	75 83       	std	Z+5, r23	; 0x05
    1864:	64 83       	std	Z+4, r22	; 0x04
    1866:	57 83       	std	Z+7, r21	; 0x07
    1868:	46 83       	std	Z+6, r20	; 0x06
    186a:	71 87       	std	Z+9, r23	; 0x09
    186c:	60 87       	std	Z+8, r22	; 0x08
    186e:	53 87       	std	Z+11, r21	; 0x0b
    1870:	42 87       	std	Z+10, r20	; 0x0a
    1872:	16 8a       	std	Z+22, r1	; 0x16
    1874:	15 86       	std	Z+13, r1	; 0x0d
    1876:	14 86       	std	Z+12, r1	; 0x0c
    1878:	17 86       	std	Z+15, r1	; 0x0f
    187a:	16 86       	std	Z+14, r1	; 0x0e
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	85 8b       	std	Z+21, r24	; 0x15
    1880:	84 8b       	std	Z+20, r24	; 0x14
    1882:	2f ef       	ldi	r18, 0xFF	; 255
    1884:	3f ef       	ldi	r19, 0xFF	; 255
    1886:	33 8b       	std	Z+19, r19	; 0x13
    1888:	22 8b       	std	Z+18, r18	; 0x12
    188a:	31 8b       	std	Z+17, r19	; 0x11
    188c:	20 8b       	std	Z+16, r18	; 0x10
    188e:	87 8b       	std	Z+23, r24	; 0x17
    1890:	10 8e       	std	Z+24, r1	; 0x18
    1892:	12 8e       	std	Z+26, r1	; 0x1a
    1894:	11 8e       	std	Z+25, r1	; 0x19
    1896:	08 95       	ret

00001898 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>:
    1898:	3f 92       	push	r3
    189a:	4f 92       	push	r4
    189c:	5f 92       	push	r5
    189e:	6f 92       	push	r6
    18a0:	7f 92       	push	r7
    18a2:	8f 92       	push	r8
    18a4:	9f 92       	push	r9
    18a6:	af 92       	push	r10
    18a8:	bf 92       	push	r11
    18aa:	cf 92       	push	r12
    18ac:	df 92       	push	r13
    18ae:	ef 92       	push	r14
    18b0:	ff 92       	push	r15
    18b2:	0f 93       	push	r16
    18b4:	1f 93       	push	r17
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	2a 97       	sbiw	r28, 0x0a	; 10
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	5c 01       	movw	r10, r24
    18cc:	7e 83       	std	Y+6, r23	; 0x06
    18ce:	6d 83       	std	Y+5, r22	; 0x05
    18d0:	58 87       	std	Y+8, r21	; 0x08
    18d2:	4f 83       	std	Y+7, r20	; 0x07
    18d4:	29 01       	movw	r4, r18
    18d6:	37 01       	movw	r6, r14
    18d8:	dc 01       	movw	r26, r24
    18da:	ed 91       	ld	r30, X+
    18dc:	fc 91       	ld	r31, X
    18de:	02 84       	ldd	r0, Z+10	; 0x0a
    18e0:	f3 85       	ldd	r31, Z+11	; 0x0b
    18e2:	e0 2d       	mov	r30, r0
    18e4:	19 95       	eicall
    18e6:	c8 01       	movw	r24, r16
    18e8:	07 96       	adiw	r24, 0x07	; 7
    18ea:	97 fd       	sbrc	r25, 7
    18ec:	07 96       	adiw	r24, 0x07	; 7
    18ee:	9c 01       	movw	r18, r24
    18f0:	93 e0       	ldi	r25, 0x03	; 3
    18f2:	35 95       	asr	r19
    18f4:	27 95       	ror	r18
    18f6:	9a 95       	dec	r25
    18f8:	e1 f7       	brne	.-8      	; 0x18f2 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x5a>
    18fa:	3a 83       	std	Y+2, r19	; 0x02
    18fc:	29 83       	std	Y+1, r18	; 0x01
    18fe:	81 2c       	mov	r8, r1
    1900:	91 2c       	mov	r9, r1
    1902:	e1 2c       	mov	r14, r1
    1904:	f1 2c       	mov	r15, r1
    1906:	31 2c       	mov	r3, r1
    1908:	8f 81       	ldd	r24, Y+7	; 0x07
    190a:	98 85       	ldd	r25, Y+8	; 0x08
    190c:	8e 0d       	add	r24, r14
    190e:	9f 1d       	adc	r25, r15
    1910:	9c 83       	std	Y+4, r25	; 0x04
    1912:	8b 83       	std	Y+3, r24	; 0x03
    1914:	e6 14       	cp	r14, r6
    1916:	f7 04       	cpc	r15, r7
    1918:	0c f0       	brlt	.+2      	; 0x191c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x84>
    191a:	3d c0       	rjmp	.+122    	; 0x1996 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xfe>
    191c:	1a 86       	std	Y+10, r1	; 0x0a
    191e:	19 86       	std	Y+9, r1	; 0x09
    1920:	a9 85       	ldd	r26, Y+9	; 0x09
    1922:	ba 85       	ldd	r27, Y+10	; 0x0a
    1924:	a0 17       	cp	r26, r16
    1926:	b1 07       	cpc	r27, r17
    1928:	74 f5       	brge	.+92     	; 0x1986 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xee>
    192a:	cd 01       	movw	r24, r26
    192c:	87 70       	andi	r24, 0x07	; 7
    192e:	99 27       	eor	r25, r25
    1930:	89 2b       	or	r24, r25
    1932:	11 f0       	breq	.+4      	; 0x1938 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xa0>
    1934:	33 0c       	add	r3, r3
    1936:	0e c0       	rjmp	.+28     	; 0x1954 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xbc>
    1938:	e9 85       	ldd	r30, Y+9	; 0x09
    193a:	fa 85       	ldd	r31, Y+10	; 0x0a
    193c:	f7 fd       	sbrc	r31, 7
    193e:	37 96       	adiw	r30, 0x07	; 7
    1940:	83 e0       	ldi	r24, 0x03	; 3
    1942:	f5 95       	asr	r31
    1944:	e7 95       	ror	r30
    1946:	8a 95       	dec	r24
    1948:	e1 f7       	brne	.-8      	; 0x1942 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xaa>
    194a:	e8 0d       	add	r30, r8
    194c:	f9 1d       	adc	r31, r9
    194e:	e4 0d       	add	r30, r4
    1950:	f5 1d       	adc	r31, r5
    1952:	34 90       	lpm	r3, Z
    1954:	37 fe       	sbrs	r3, 7
    1956:	11 c0       	rjmp	.+34     	; 0x197a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xe2>
    1958:	d5 01       	movw	r26, r10
    195a:	ed 91       	ld	r30, X+
    195c:	fc 91       	ld	r31, X
    195e:	04 84       	ldd	r0, Z+12	; 0x0c
    1960:	f5 85       	ldd	r31, Z+13	; 0x0d
    1962:	e0 2d       	mov	r30, r0
    1964:	96 01       	movw	r18, r12
    1966:	4b 81       	ldd	r20, Y+3	; 0x03
    1968:	5c 81       	ldd	r21, Y+4	; 0x04
    196a:	6d 81       	ldd	r22, Y+5	; 0x05
    196c:	7e 81       	ldd	r23, Y+6	; 0x06
    196e:	89 85       	ldd	r24, Y+9	; 0x09
    1970:	9a 85       	ldd	r25, Y+10	; 0x0a
    1972:	68 0f       	add	r22, r24
    1974:	79 1f       	adc	r23, r25
    1976:	c5 01       	movw	r24, r10
    1978:	19 95       	eicall
    197a:	a9 85       	ldd	r26, Y+9	; 0x09
    197c:	ba 85       	ldd	r27, Y+10	; 0x0a
    197e:	11 96       	adiw	r26, 0x01	; 1
    1980:	ba 87       	std	Y+10, r27	; 0x0a
    1982:	a9 87       	std	Y+9, r26	; 0x09
    1984:	cd cf       	rjmp	.-102    	; 0x1920 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x88>
    1986:	bf ef       	ldi	r27, 0xFF	; 255
    1988:	eb 1a       	sub	r14, r27
    198a:	fb 0a       	sbc	r15, r27
    198c:	29 81       	ldd	r18, Y+1	; 0x01
    198e:	3a 81       	ldd	r19, Y+2	; 0x02
    1990:	82 0e       	add	r8, r18
    1992:	93 1e       	adc	r9, r19
    1994:	b9 cf       	rjmp	.-142    	; 0x1908 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x70>
    1996:	d5 01       	movw	r26, r10
    1998:	ed 91       	ld	r30, X+
    199a:	fc 91       	ld	r31, X
    199c:	06 88       	ldd	r0, Z+22	; 0x16
    199e:	f7 89       	ldd	r31, Z+23	; 0x17
    19a0:	e0 2d       	mov	r30, r0
    19a2:	c5 01       	movw	r24, r10
    19a4:	2a 96       	adiw	r28, 0x0a	; 10
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	de bf       	out	0x3e, r29	; 62
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	1f 91       	pop	r17
    19b6:	0f 91       	pop	r16
    19b8:	ff 90       	pop	r15
    19ba:	ef 90       	pop	r14
    19bc:	df 90       	pop	r13
    19be:	cf 90       	pop	r12
    19c0:	bf 90       	pop	r11
    19c2:	af 90       	pop	r10
    19c4:	9f 90       	pop	r9
    19c6:	8f 90       	pop	r8
    19c8:	7f 90       	pop	r7
    19ca:	6f 90       	pop	r6
    19cc:	5f 90       	pop	r5
    19ce:	4f 90       	pop	r4
    19d0:	3f 90       	pop	r3
    19d2:	19 94       	eijmp

000019d4 <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    19d4:	2f 92       	push	r2
    19d6:	3f 92       	push	r3
    19d8:	4f 92       	push	r4
    19da:	5f 92       	push	r5
    19dc:	6f 92       	push	r6
    19de:	7f 92       	push	r7
    19e0:	8f 92       	push	r8
    19e2:	9f 92       	push	r9
    19e4:	af 92       	push	r10
    19e6:	bf 92       	push	r11
    19e8:	cf 92       	push	r12
    19ea:	df 92       	push	r13
    19ec:	ef 92       	push	r14
    19ee:	ff 92       	push	r15
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	6b 97       	sbiw	r28, 0x1b	; 27
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	9b 8f       	std	Y+27, r25	; 0x1b
    1a0a:	8a 8f       	std	Y+26, r24	; 0x1a
    1a0c:	2b 01       	movw	r4, r22
    1a0e:	5a 83       	std	Y+2, r21	; 0x02
    1a10:	49 83       	std	Y+1, r20	; 0x01
    1a12:	d2 2e       	mov	r13, r18
    1a14:	19 87       	std	Y+9, r17	; 0x09
    1a16:	08 87       	std	Y+8, r16	; 0x08
    1a18:	47 01       	movw	r8, r14
    1a1a:	ab 82       	std	Y+3, r10	; 0x03
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	59 96       	adiw	r26, 0x19	; 25
    1a20:	2d 91       	ld	r18, X+
    1a22:	3c 91       	ld	r19, X
    1a24:	5a 97       	sbiw	r26, 0x1a	; 26
    1a26:	21 15       	cp	r18, r1
    1a28:	31 05       	cpc	r19, r1
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5a>
    1a2c:	00 c1       	rjmp	.+512    	; 0x1c2e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x25a>
    1a2e:	18 96       	adiw	r26, 0x08	; 8
    1a30:	8d 91       	ld	r24, X+
    1a32:	9c 91       	ld	r25, X
    1a34:	19 97       	sbiw	r26, 0x09	; 9
    1a36:	68 17       	cp	r22, r24
    1a38:	79 07       	cpc	r23, r25
    1a3a:	0c f0       	brlt	.+2      	; 0x1a3e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x6a>
    1a3c:	e7 c1       	rjmp	.+974    	; 0x1e0c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    1a3e:	1a 96       	adiw	r26, 0x0a	; 10
    1a40:	8d 91       	ld	r24, X+
    1a42:	9c 91       	ld	r25, X
    1a44:	1b 97       	sbiw	r26, 0x0b	; 11
    1a46:	48 17       	cp	r20, r24
    1a48:	59 07       	cpc	r21, r25
    1a4a:	0c f0       	brlt	.+2      	; 0x1a4e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x7a>
    1a4c:	df c1       	rjmp	.+958    	; 0x1e0c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    1a4e:	2c 2c       	mov	r2, r12
    1a50:	31 2c       	mov	r3, r1
    1a52:	fb 01       	movw	r30, r22
    1a54:	26 e0       	ldi	r18, 0x06	; 6
    1a56:	c2 9e       	mul	r12, r18
    1a58:	e0 0d       	add	r30, r0
    1a5a:	f1 1d       	adc	r31, r1
    1a5c:	11 24       	eor	r1, r1
    1a5e:	fd 87       	std	Y+13, r31	; 0x0d
    1a60:	ec 87       	std	Y+12, r30	; 0x0c
    1a62:	1e 16       	cp	r1, r30
    1a64:	1f 06       	cpc	r1, r31
    1a66:	0c f0       	brlt	.+2      	; 0x1a6a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x96>
    1a68:	d1 c1       	rjmp	.+930    	; 0x1e0c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    1a6a:	4a 2d       	mov	r20, r10
    1a6c:	50 e0       	ldi	r21, 0x00	; 0
    1a6e:	5b 87       	std	Y+11, r21	; 0x0b
    1a70:	4a 87       	std	Y+10, r20	; 0x0a
    1a72:	83 e0       	ldi	r24, 0x03	; 3
    1a74:	44 0f       	add	r20, r20
    1a76:	55 1f       	adc	r21, r21
    1a78:	8a 95       	dec	r24
    1a7a:	e1 f7       	brne	.-8      	; 0x1a74 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa0>
    1a7c:	5f 87       	std	Y+15, r21	; 0x0f
    1a7e:	4e 87       	std	Y+14, r20	; 0x0e
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	9a 81       	ldd	r25, Y+2	; 0x02
    1a84:	84 0f       	add	r24, r20
    1a86:	95 1f       	adc	r25, r21
    1a88:	18 16       	cp	r1, r24
    1a8a:	19 06       	cpc	r1, r25
    1a8c:	0c f0       	brlt	.+2      	; 0x1a90 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xbc>
    1a8e:	be c1       	rjmp	.+892    	; 0x1e0c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    1a90:	58 96       	adiw	r26, 0x18	; 24
    1a92:	8c 91       	ld	r24, X
    1a94:	81 11       	cpse	r24, r1
    1a96:	04 c0       	rjmp	.+8      	; 0x1aa0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    1a98:	6f ea       	ldi	r22, 0xAF	; 175
    1a9a:	6d 15       	cp	r22, r13
    1a9c:	08 f4       	brcc	.+2      	; 0x1aa0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    1a9e:	d3 94       	inc	r13
    1aa0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1aa2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1aa4:	ed 91       	ld	r30, X+
    1aa6:	fc 91       	ld	r31, X
    1aa8:	11 97       	sbiw	r26, 0x01	; 1
    1aaa:	02 84       	ldd	r0, Z+10	; 0x0a
    1aac:	f3 85       	ldd	r31, Z+11	; 0x0b
    1aae:	e0 2d       	mov	r30, r0
    1ab0:	cd 01       	movw	r24, r26
    1ab2:	19 95       	eicall
    1ab4:	b5 e0       	ldi	r27, 0x05	; 5
    1ab6:	db 9e       	mul	r13, r27
    1ab8:	c0 01       	movw	r24, r0
    1aba:	11 24       	eor	r1, r1
    1abc:	ec 2d       	mov	r30, r12
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	f9 8b       	std	Y+17, r31	; 0x11
    1ac2:	e8 8b       	std	Y+16, r30	; 0x10
    1ac4:	92 01       	movw	r18, r4
    1ac6:	2b 5f       	subi	r18, 0xFB	; 251
    1ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aca:	3b 8b       	std	Y+19, r19	; 0x13
    1acc:	2a 8b       	std	Y+18, r18	; 0x12
    1ace:	32 01       	movw	r6, r4
    1ad0:	5d 82       	std	Y+5, r5	; 0x05
    1ad2:	4c 82       	std	Y+4, r4	; 0x04
    1ad4:	ac 01       	movw	r20, r24
    1ad6:	44 19       	sub	r20, r4
    1ad8:	55 09       	sbc	r21, r5
    1ada:	5d 8b       	std	Y+21, r21	; 0x15
    1adc:	4c 8b       	std	Y+20, r20	; 0x14
    1ade:	7b 81       	ldd	r23, Y+3	; 0x03
    1ae0:	67 2f       	mov	r22, r23
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	7f 8b       	std	Y+23, r23	; 0x17
    1ae6:	6e 8b       	std	Y+22, r22	; 0x16
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	9a 81       	ldd	r25, Y+2	; 0x02
    1aec:	08 96       	adiw	r24, 0x08	; 8
    1aee:	99 8f       	std	Y+25, r25	; 0x19
    1af0:	88 8f       	std	Y+24, r24	; 0x18
    1af2:	ec 89       	ldd	r30, Y+20	; 0x14
    1af4:	fd 89       	ldd	r31, Y+21	; 0x15
    1af6:	e6 0d       	add	r30, r6
    1af8:	f7 1d       	adc	r31, r7
    1afa:	e4 5c       	subi	r30, 0xC4	; 196
    1afc:	fe 4f       	sbci	r31, 0xFE	; 254
    1afe:	d4 90       	lpm	r13, Z
    1b00:	a9 81       	ldd	r26, Y+1	; 0x01
    1b02:	ba 81       	ldd	r27, Y+2	; 0x02
    1b04:	bf 83       	std	Y+7, r27	; 0x07
    1b06:	ae 83       	std	Y+6, r26	; 0x06
    1b08:	5d 01       	movw	r10, r26
    1b0a:	d0 fe       	sbrs	r13, 0
    1b0c:	16 c0       	rjmp	.+44     	; 0x1b3a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x166>
    1b0e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1b10:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1b12:	ed 91       	ld	r30, X+
    1b14:	fc 91       	ld	r31, X
    1b16:	b1 e0       	ldi	r27, 0x01	; 1
    1b18:	cb 12       	cpse	r12, r27
    1b1a:	09 c0       	rjmp	.+18     	; 0x1b2e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    1b1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1e:	21 30       	cpi	r18, 0x01	; 1
    1b20:	31 f4       	brne	.+12     	; 0x1b2e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    1b22:	04 84       	ldd	r0, Z+12	; 0x0c
    1b24:	f5 85       	ldd	r31, Z+13	; 0x0d
    1b26:	e0 2d       	mov	r30, r0
    1b28:	28 85       	ldd	r18, Y+8	; 0x08
    1b2a:	39 85       	ldd	r19, Y+9	; 0x09
    1b2c:	19 c0       	rjmp	.+50     	; 0x1b60 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x18c>
    1b2e:	06 84       	ldd	r0, Z+14	; 0x0e
    1b30:	f7 85       	ldd	r31, Z+15	; 0x0f
    1b32:	e0 2d       	mov	r30, r0
    1b34:	e8 84       	ldd	r14, Y+8	; 0x08
    1b36:	f9 84       	ldd	r15, Y+9	; 0x09
    1b38:	1d c0       	rjmp	.+58     	; 0x1b74 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a0>
    1b3a:	48 85       	ldd	r20, Y+8	; 0x08
    1b3c:	59 85       	ldd	r21, Y+9	; 0x09
    1b3e:	48 15       	cp	r20, r8
    1b40:	59 05       	cpc	r21, r9
    1b42:	11 f1       	breq	.+68     	; 0x1b88 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    1b44:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1b46:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1b48:	ed 91       	ld	r30, X+
    1b4a:	fc 91       	ld	r31, X
    1b4c:	b1 e0       	ldi	r27, 0x01	; 1
    1b4e:	cb 12       	cpse	r12, r27
    1b50:	0d c0       	rjmp	.+26     	; 0x1b6c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    1b52:	2b 81       	ldd	r18, Y+3	; 0x03
    1b54:	21 30       	cpi	r18, 0x01	; 1
    1b56:	51 f4       	brne	.+20     	; 0x1b6c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    1b58:	04 84       	ldd	r0, Z+12	; 0x0c
    1b5a:	f5 85       	ldd	r31, Z+13	; 0x0d
    1b5c:	e0 2d       	mov	r30, r0
    1b5e:	94 01       	movw	r18, r8
    1b60:	a5 01       	movw	r20, r10
    1b62:	b3 01       	movw	r22, r6
    1b64:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b66:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b68:	19 95       	eicall
    1b6a:	0e c0       	rjmp	.+28     	; 0x1b88 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    1b6c:	06 84       	ldd	r0, Z+14	; 0x0e
    1b6e:	f7 85       	ldd	r31, Z+15	; 0x0f
    1b70:	e0 2d       	mov	r30, r0
    1b72:	74 01       	movw	r14, r8
    1b74:	0a 85       	ldd	r16, Y+10	; 0x0a
    1b76:	1b 85       	ldd	r17, Y+11	; 0x0b
    1b78:	91 01       	movw	r18, r2
    1b7a:	4e 81       	ldd	r20, Y+6	; 0x06
    1b7c:	5f 81       	ldd	r21, Y+7	; 0x07
    1b7e:	6c 81       	ldd	r22, Y+4	; 0x04
    1b80:	7d 81       	ldd	r23, Y+5	; 0x05
    1b82:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b84:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b86:	19 95       	eicall
    1b88:	d6 94       	lsr	r13
    1b8a:	4e 81       	ldd	r20, Y+6	; 0x06
    1b8c:	5f 81       	ldd	r21, Y+7	; 0x07
    1b8e:	6e 89       	ldd	r22, Y+22	; 0x16
    1b90:	7f 89       	ldd	r23, Y+23	; 0x17
    1b92:	46 0f       	add	r20, r22
    1b94:	57 1f       	adc	r21, r23
    1b96:	5f 83       	std	Y+7, r21	; 0x07
    1b98:	4e 83       	std	Y+6, r20	; 0x06
    1b9a:	7f ef       	ldi	r23, 0xFF	; 255
    1b9c:	a7 1a       	sub	r10, r23
    1b9e:	b7 0a       	sbc	r11, r23
    1ba0:	88 8d       	ldd	r24, Y+24	; 0x18
    1ba2:	99 8d       	ldd	r25, Y+25	; 0x19
    1ba4:	a8 16       	cp	r10, r24
    1ba6:	b9 06       	cpc	r11, r25
    1ba8:	09 f0       	breq	.+2      	; 0x1bac <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1d8>
    1baa:	af cf       	rjmp	.-162    	; 0x1b0a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x136>
    1bac:	ac 81       	ldd	r26, Y+4	; 0x04
    1bae:	bd 81       	ldd	r27, Y+5	; 0x05
    1bb0:	e8 89       	ldd	r30, Y+16	; 0x10
    1bb2:	f9 89       	ldd	r31, Y+17	; 0x11
    1bb4:	ae 0f       	add	r26, r30
    1bb6:	bf 1f       	adc	r27, r31
    1bb8:	bd 83       	std	Y+5, r27	; 0x05
    1bba:	ac 83       	std	Y+4, r26	; 0x04
    1bbc:	ff ef       	ldi	r31, 0xFF	; 255
    1bbe:	6f 1a       	sub	r6, r31
    1bc0:	7f 0a       	sbc	r7, r31
    1bc2:	2a 89       	ldd	r18, Y+18	; 0x12
    1bc4:	3b 89       	ldd	r19, Y+19	; 0x13
    1bc6:	62 16       	cp	r6, r18
    1bc8:	73 06       	cpc	r7, r19
    1bca:	09 f0       	breq	.+2      	; 0x1bce <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1fa>
    1bcc:	92 cf       	rjmp	.-220    	; 0x1af2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x11e>
    1bce:	48 85       	ldd	r20, Y+8	; 0x08
    1bd0:	59 85       	ldd	r21, Y+9	; 0x09
    1bd2:	48 15       	cp	r20, r8
    1bd4:	59 05       	cpc	r21, r9
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x206>
    1bd8:	f7 c0       	rjmp	.+494    	; 0x1dc8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    1bda:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1bdc:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1bde:	ed 91       	ld	r30, X+
    1be0:	fc 91       	ld	r31, X
    1be2:	b1 e0       	ldi	r27, 0x01	; 1
    1be4:	cb 12       	cpse	r12, r27
    1be6:	12 c0       	rjmp	.+36     	; 0x1c0c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    1be8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bea:	21 30       	cpi	r18, 0x01	; 1
    1bec:	79 f4       	brne	.+30     	; 0x1c0c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    1bee:	b2 01       	movw	r22, r4
    1bf0:	6b 5f       	subi	r22, 0xFB	; 251
    1bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf4:	00 88       	ldd	r0, Z+16	; 0x10
    1bf6:	f1 89       	ldd	r31, Z+17	; 0x11
    1bf8:	e0 2d       	mov	r30, r0
    1bfa:	84 01       	movw	r16, r8
    1bfc:	28 e0       	ldi	r18, 0x08	; 8
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	49 81       	ldd	r20, Y+1	; 0x01
    1c02:	5a 81       	ldd	r21, Y+2	; 0x02
    1c04:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c06:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c08:	19 95       	eicall
    1c0a:	de c0       	rjmp	.+444    	; 0x1dc8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    1c0c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c0e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c10:	62 19       	sub	r22, r2
    1c12:	73 09       	sbc	r23, r3
    1c14:	06 84       	ldd	r0, Z+14	; 0x0e
    1c16:	f7 85       	ldd	r31, Z+15	; 0x0f
    1c18:	e0 2d       	mov	r30, r0
    1c1a:	74 01       	movw	r14, r8
    1c1c:	0e 85       	ldd	r16, Y+14	; 0x0e
    1c1e:	1f 85       	ldd	r17, Y+15	; 0x0f
    1c20:	91 01       	movw	r18, r2
    1c22:	49 81       	ldd	r20, Y+1	; 0x01
    1c24:	5a 81       	ldd	r21, Y+2	; 0x02
    1c26:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c28:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c2a:	19 95       	eicall
    1c2c:	cd c0       	rjmp	.+410    	; 0x1dc8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    1c2e:	f9 01       	movw	r30, r18
    1c30:	34 96       	adiw	r30, 0x04	; 4
    1c32:	e4 91       	lpm	r30, Z
    1c34:	de 1a       	sub	r13, r30
    1c36:	f9 01       	movw	r30, r18
    1c38:	32 96       	adiw	r30, 0x02	; 2
    1c3a:	85 91       	lpm	r24, Z+
    1c3c:	94 91       	lpm	r25, Z
    1c3e:	b7 e0       	ldi	r27, 0x07	; 7
    1c40:	db 9e       	mul	r13, r27
    1c42:	80 0d       	add	r24, r0
    1c44:	91 1d       	adc	r25, r1
    1c46:	11 24       	eor	r1, r1
    1c48:	f9 01       	movw	r30, r18
    1c4a:	25 91       	lpm	r18, Z+
    1c4c:	34 91       	lpm	r19, Z
    1c4e:	39 8b       	std	Y+17, r19	; 0x11
    1c50:	28 8b       	std	Y+16, r18	; 0x10
    1c52:	fc 01       	movw	r30, r24
    1c54:	25 90       	lpm	r2, Z+
    1c56:	34 90       	lpm	r3, Z
    1c58:	fc 01       	movw	r30, r24
    1c5a:	32 96       	adiw	r30, 0x02	; 2
    1c5c:	74 90       	lpm	r7, Z
    1c5e:	31 96       	adiw	r30, 0x01	; 1
    1c60:	a4 90       	lpm	r10, Z
    1c62:	32 96       	adiw	r30, 0x02	; 2
    1c64:	94 90       	lpm	r9, Z
    1c66:	31 96       	adiw	r30, 0x01	; 1
    1c68:	b4 90       	lpm	r11, Z
    1c6a:	31 e0       	ldi	r19, 0x01	; 1
    1c6c:	3c 15       	cp	r19, r12
    1c6e:	18 f0       	brcs	.+6      	; 0x1c76 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2a2>
    1c70:	4b 81       	ldd	r20, Y+3	; 0x03
    1c72:	42 30       	cpi	r20, 0x02	; 2
    1c74:	68 f0       	brcs	.+26     	; 0x1c90 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2bc>
    1c76:	69 2d       	mov	r22, r9
    1c78:	09 2c       	mov	r0, r9
    1c7a:	00 0c       	add	r0, r0
    1c7c:	77 0b       	sbc	r23, r23
    1c7e:	7d 83       	std	Y+5, r23	; 0x05
    1c80:	6c 83       	std	Y+4, r22	; 0x04
    1c82:	8b 2d       	mov	r24, r11
    1c84:	0b 2c       	mov	r0, r11
    1c86:	00 0c       	add	r0, r0
    1c88:	99 0b       	sbc	r25, r25
    1c8a:	9f 83       	std	Y+7, r25	; 0x07
    1c8c:	8e 83       	std	Y+6, r24	; 0x06
    1c8e:	04 c0       	rjmp	.+8      	; 0x1c98 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2c4>
    1c90:	1f 82       	std	Y+7, r1	; 0x07
    1c92:	1e 82       	std	Y+6, r1	; 0x06
    1c94:	1d 82       	std	Y+5, r1	; 0x05
    1c96:	1c 82       	std	Y+4, r1	; 0x04
    1c98:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1c9a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1c9c:	ed 91       	ld	r30, X+
    1c9e:	fc 91       	ld	r31, X
    1ca0:	11 97       	sbiw	r26, 0x01	; 1
    1ca2:	02 84       	ldd	r0, Z+10	; 0x0a
    1ca4:	f3 85       	ldd	r31, Z+11	; 0x0b
    1ca6:	e0 2d       	mov	r30, r0
    1ca8:	cd 01       	movw	r24, r26
    1caa:	19 95       	eicall
    1cac:	61 2c       	mov	r6, r1
    1cae:	d1 2c       	mov	r13, r1
    1cb0:	81 2c       	mov	r8, r1
    1cb2:	fb 81       	ldd	r31, Y+3	; 0x03
    1cb4:	ef 2f       	mov	r30, r31
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	fb 87       	std	Y+11, r31	; 0x0b
    1cba:	ea 87       	std	Y+10, r30	; 0x0a
    1cbc:	2c 2d       	mov	r18, r12
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	3d 87       	std	Y+13, r19	; 0x0d
    1cc2:	2c 87       	std	Y+12, r18	; 0x0c
    1cc4:	49 81       	ldd	r20, Y+1	; 0x01
    1cc6:	5a 81       	ldd	r21, Y+2	; 0x02
    1cc8:	4b 0d       	add	r20, r11
    1cca:	51 1d       	adc	r21, r1
    1ccc:	b7 fc       	sbrc	r11, 7
    1cce:	5a 95       	dec	r21
    1cd0:	5d 8b       	std	Y+21, r21	; 0x15
    1cd2:	4c 8b       	std	Y+20, r20	; 0x14
    1cd4:	b2 01       	movw	r22, r4
    1cd6:	69 0d       	add	r22, r9
    1cd8:	71 1d       	adc	r23, r1
    1cda:	97 fc       	sbrc	r9, 7
    1cdc:	7a 95       	dec	r23
    1cde:	7f 8b       	std	Y+23, r23	; 0x17
    1ce0:	6e 8b       	std	Y+22, r22	; 0x16
    1ce2:	8a 14       	cp	r8, r10
    1ce4:	08 f0       	brcs	.+2      	; 0x1ce8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x314>
    1ce6:	70 c0       	rjmp	.+224    	; 0x1dc8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    1ce8:	28 2d       	mov	r18, r8
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	4e 81       	ldd	r20, Y+6	; 0x06
    1cee:	5f 81       	ldd	r21, Y+7	; 0x07
    1cf0:	42 0f       	add	r20, r18
    1cf2:	53 1f       	adc	r21, r19
    1cf4:	aa 85       	ldd	r26, Y+10	; 0x0a
    1cf6:	bb 85       	ldd	r27, Y+11	; 0x0b
    1cf8:	a4 9f       	mul	r26, r20
    1cfa:	c0 01       	movw	r24, r0
    1cfc:	a5 9f       	mul	r26, r21
    1cfe:	90 0d       	add	r25, r0
    1d00:	b4 9f       	mul	r27, r20
    1d02:	90 0d       	add	r25, r0
    1d04:	11 24       	eor	r1, r1
    1d06:	e9 81       	ldd	r30, Y+1	; 0x01
    1d08:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0a:	e8 0f       	add	r30, r24
    1d0c:	f9 1f       	adc	r31, r25
    1d0e:	ff 87       	std	Y+15, r31	; 0x0f
    1d10:	ee 87       	std	Y+14, r30	; 0x0e
    1d12:	86 2d       	mov	r24, r6
    1d14:	91 2c       	mov	r9, r1
    1d16:	4c 89       	ldd	r20, Y+20	; 0x14
    1d18:	5d 89       	ldd	r21, Y+21	; 0x15
    1d1a:	42 0f       	add	r20, r18
    1d1c:	53 1f       	adc	r21, r19
    1d1e:	5b 8b       	std	Y+19, r21	; 0x13
    1d20:	4a 8b       	std	Y+18, r20	; 0x12
    1d22:	97 14       	cp	r9, r7
    1d24:	08 f0       	brcs	.+2      	; 0x1d28 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x354>
    1d26:	4d c0       	rjmp	.+154    	; 0x1dc2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3ee>
    1d28:	bb 24       	eor	r11, r11
    1d2a:	b3 94       	inc	r11
    1d2c:	b8 0e       	add	r11, r24
    1d2e:	87 70       	andi	r24, 0x07	; 7
    1d30:	41 f4       	brne	.+16     	; 0x1d42 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x36e>
    1d32:	c1 01       	movw	r24, r2
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	e8 89       	ldd	r30, Y+16	; 0x10
    1d38:	f9 89       	ldd	r31, Y+17	; 0x11
    1d3a:	e2 0d       	add	r30, r2
    1d3c:	f3 1d       	adc	r31, r3
    1d3e:	d4 90       	lpm	r13, Z
    1d40:	1c 01       	movw	r2, r24
    1d42:	d7 fe       	sbrs	r13, 7
    1d44:	3a c0       	rjmp	.+116    	; 0x1dba <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    1d46:	51 e0       	ldi	r21, 0x01	; 1
    1d48:	c5 12       	cpse	r12, r21
    1d4a:	16 c0       	rjmp	.+44     	; 0x1d78 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    1d4c:	6b 81       	ldd	r22, Y+3	; 0x03
    1d4e:	61 30       	cpi	r22, 0x01	; 1
    1d50:	99 f4       	brne	.+38     	; 0x1d78 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    1d52:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1d54:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1d56:	ed 91       	ld	r30, X+
    1d58:	fc 91       	ld	r31, X
    1d5a:	11 97       	sbiw	r26, 0x01	; 1
    1d5c:	04 84       	ldd	r0, Z+12	; 0x0c
    1d5e:	f5 85       	ldd	r31, Z+13	; 0x0d
    1d60:	e0 2d       	mov	r30, r0
    1d62:	28 85       	ldd	r18, Y+8	; 0x08
    1d64:	39 85       	ldd	r19, Y+9	; 0x09
    1d66:	4a 89       	ldd	r20, Y+18	; 0x12
    1d68:	5b 89       	ldd	r21, Y+19	; 0x13
    1d6a:	6e 89       	ldd	r22, Y+22	; 0x16
    1d6c:	7f 89       	ldd	r23, Y+23	; 0x17
    1d6e:	69 0d       	add	r22, r9
    1d70:	71 1d       	adc	r23, r1
    1d72:	cd 01       	movw	r24, r26
    1d74:	19 95       	eicall
    1d76:	21 c0       	rjmp	.+66     	; 0x1dba <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    1d78:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7c:	89 0d       	add	r24, r9
    1d7e:	91 1d       	adc	r25, r1
    1d80:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d82:	fd 85       	ldd	r31, Y+13	; 0x0d
    1d84:	8e 9f       	mul	r24, r30
    1d86:	b0 01       	movw	r22, r0
    1d88:	8f 9f       	mul	r24, r31
    1d8a:	70 0d       	add	r23, r0
    1d8c:	9e 9f       	mul	r25, r30
    1d8e:	70 0d       	add	r23, r0
    1d90:	11 24       	eor	r1, r1
    1d92:	64 0d       	add	r22, r4
    1d94:	75 1d       	adc	r23, r5
    1d96:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1d98:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1d9a:	ed 91       	ld	r30, X+
    1d9c:	fc 91       	ld	r31, X
    1d9e:	11 97       	sbiw	r26, 0x01	; 1
    1da0:	06 84       	ldd	r0, Z+14	; 0x0e
    1da2:	f7 85       	ldd	r31, Z+15	; 0x0f
    1da4:	e0 2d       	mov	r30, r0
    1da6:	e8 84       	ldd	r14, Y+8	; 0x08
    1da8:	f9 84       	ldd	r15, Y+9	; 0x09
    1daa:	0a 85       	ldd	r16, Y+10	; 0x0a
    1dac:	1b 85       	ldd	r17, Y+11	; 0x0b
    1dae:	2c 85       	ldd	r18, Y+12	; 0x0c
    1db0:	3d 85       	ldd	r19, Y+13	; 0x0d
    1db2:	4e 85       	ldd	r20, Y+14	; 0x0e
    1db4:	5f 85       	ldd	r21, Y+15	; 0x0f
    1db6:	cd 01       	movw	r24, r26
    1db8:	19 95       	eicall
    1dba:	dd 0c       	add	r13, r13
    1dbc:	93 94       	inc	r9
    1dbe:	8b 2d       	mov	r24, r11
    1dc0:	b0 cf       	rjmp	.-160    	; 0x1d22 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x34e>
    1dc2:	67 0c       	add	r6, r7
    1dc4:	83 94       	inc	r8
    1dc6:	8d cf       	rjmp	.-230    	; 0x1ce2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x30e>
    1dc8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1dca:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1dcc:	ed 91       	ld	r30, X+
    1dce:	fc 91       	ld	r31, X
    1dd0:	11 97       	sbiw	r26, 0x01	; 1
    1dd2:	06 88       	ldd	r0, Z+22	; 0x16
    1dd4:	f7 89       	ldd	r31, Z+23	; 0x17
    1dd6:	e0 2d       	mov	r30, r0
    1dd8:	cd 01       	movw	r24, r26
    1dda:	6b 96       	adiw	r28, 0x1b	; 27
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	de bf       	out	0x3e, r29	; 62
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	cd bf       	out	0x3d, r28	; 61
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	ff 90       	pop	r15
    1df0:	ef 90       	pop	r14
    1df2:	df 90       	pop	r13
    1df4:	cf 90       	pop	r12
    1df6:	bf 90       	pop	r11
    1df8:	af 90       	pop	r10
    1dfa:	9f 90       	pop	r9
    1dfc:	8f 90       	pop	r8
    1dfe:	7f 90       	pop	r7
    1e00:	6f 90       	pop	r6
    1e02:	5f 90       	pop	r5
    1e04:	4f 90       	pop	r4
    1e06:	3f 90       	pop	r3
    1e08:	2f 90       	pop	r2
    1e0a:	19 94       	eijmp
    1e0c:	6b 96       	adiw	r28, 0x1b	; 27
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	1f 91       	pop	r17
    1e1e:	0f 91       	pop	r16
    1e20:	ff 90       	pop	r15
    1e22:	ef 90       	pop	r14
    1e24:	df 90       	pop	r13
    1e26:	cf 90       	pop	r12
    1e28:	bf 90       	pop	r11
    1e2a:	af 90       	pop	r10
    1e2c:	9f 90       	pop	r9
    1e2e:	8f 90       	pop	r8
    1e30:	7f 90       	pop	r7
    1e32:	6f 90       	pop	r6
    1e34:	5f 90       	pop	r5
    1e36:	4f 90       	pop	r4
    1e38:	3f 90       	pop	r3
    1e3a:	2f 90       	pop	r2
    1e3c:	08 95       	ret

00001e3e <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    1e3e:	8f 92       	push	r8
    1e40:	9f 92       	push	r9
    1e42:	af 92       	push	r10
    1e44:	cf 92       	push	r12
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	ec 01       	movw	r28, r24
    1e54:	26 2f       	mov	r18, r22
  if (!gfxFont) { // 'Classic' built-in font
    1e56:	89 8d       	ldd	r24, Y+25	; 0x19
    1e58:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	09 f0       	breq	.+2      	; 0x1e60 <_ZN12Adafruit_GFX5writeEh+0x22>
    1e5e:	41 c0       	rjmp	.+130    	; 0x1ee2 <_ZN12Adafruit_GFX5writeEh+0xa4>

    if (c == '\n') {              // Newline?
    1e60:	6a 30       	cpi	r22, 0x0A	; 10
    1e62:	59 f4       	brne	.+22     	; 0x1e7a <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
    1e64:	1d 86       	std	Y+13, r1	; 0x0d
    1e66:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += textsize_y * 8; // advance y one line
    1e68:	2d 89       	ldd	r18, Y+21	; 0x15
    1e6a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e6c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e6e:	38 e0       	ldi	r19, 0x08	; 8
    1e70:	23 9f       	mul	r18, r19
    1e72:	80 0d       	add	r24, r0
    1e74:	91 1d       	adc	r25, r1
    1e76:	11 24       	eor	r1, r1
    1e78:	42 c0       	rjmp	.+132    	; 0x1efe <_ZN12Adafruit_GFX5writeEh+0xc0>
    } else if (c != '\r') {       // Ignore carriage returns
    1e7a:	6d 30       	cpi	r22, 0x0D	; 13
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <_ZN12Adafruit_GFX5writeEh+0x42>
    1e7e:	a8 c0       	rjmp	.+336    	; 0x1fd0 <_ZN12Adafruit_GFX5writeEh+0x192>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    1e80:	8f 89       	ldd	r24, Y+23	; 0x17
    1e82:	88 23       	and	r24, r24
    1e84:	c9 f0       	breq	.+50     	; 0x1eb8 <_ZN12Adafruit_GFX5writeEh+0x7a>
    1e86:	3c 89       	ldd	r19, Y+20	; 0x14
    1e88:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e8a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e8c:	46 e0       	ldi	r20, 0x06	; 6
    1e8e:	34 9f       	mul	r19, r20
    1e90:	80 0d       	add	r24, r0
    1e92:	91 1d       	adc	r25, r1
    1e94:	11 24       	eor	r1, r1
    1e96:	48 85       	ldd	r20, Y+8	; 0x08
    1e98:	59 85       	ldd	r21, Y+9	; 0x09
    1e9a:	48 17       	cp	r20, r24
    1e9c:	59 07       	cpc	r21, r25
    1e9e:	64 f4       	brge	.+24     	; 0x1eb8 <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x = 0;                                       // Reset x to zero,
    1ea0:	1d 86       	std	Y+13, r1	; 0x0d
    1ea2:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize_y * 8; // advance y one line
    1ea4:	3d 89       	ldd	r19, Y+21	; 0x15
    1ea6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ea8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1eaa:	48 e0       	ldi	r20, 0x08	; 8
    1eac:	34 9f       	mul	r19, r20
    1eae:	80 0d       	add	r24, r0
    1eb0:	91 1d       	adc	r25, r1
    1eb2:	11 24       	eor	r1, r1
    1eb4:	9f 87       	std	Y+15, r25	; 0x0f
    1eb6:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
               textsize_y);
    1eb8:	ea 88       	ldd	r14, Y+18	; 0x12
    1eba:	fb 88       	ldd	r15, Y+19	; 0x13
    1ebc:	08 89       	ldd	r16, Y+16	; 0x10
    1ebe:	19 89       	ldd	r17, Y+17	; 0x11
    1ec0:	4e 85       	ldd	r20, Y+14	; 0x0e
    1ec2:	5f 85       	ldd	r21, Y+15	; 0x0f
    1ec4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ec6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ec8:	ad 88       	ldd	r10, Y+21	; 0x15
    1eca:	cc 88       	ldd	r12, Y+20	; 0x14
    1ecc:	ce 01       	movw	r24, r28
    1ece:	82 dd       	rcall	.-1276   	; 0x19d4 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
      cursor_x += textsize_x * 6; // Advance x one char
    1ed0:	2c 89       	ldd	r18, Y+20	; 0x14
    1ed2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ed4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ed6:	36 e0       	ldi	r19, 0x06	; 6
    1ed8:	23 9f       	mul	r18, r19
    1eda:	80 0d       	add	r24, r0
    1edc:	91 1d       	adc	r25, r1
    1ede:	11 24       	eor	r1, r1
    1ee0:	3e c0       	rjmp	.+124    	; 0x1f5e <_ZN12Adafruit_GFX5writeEh+0x120>
    }

  } else { // Custom font

    if (c == '\n') {
    1ee2:	6a 30       	cpi	r22, 0x0A	; 10
    1ee4:	79 f4       	brne	.+30     	; 0x1f04 <_ZN12Adafruit_GFX5writeEh+0xc6>
      cursor_x = 0;
    1ee6:	1d 86       	std	Y+13, r1	; 0x0d
    1ee8:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    1eea:	2d 89       	ldd	r18, Y+21	; 0x15
    1eec:	fc 01       	movw	r30, r24
    1eee:	38 96       	adiw	r30, 0x08	; 8
    1ef0:	e4 91       	lpm	r30, Z
    1ef2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ef4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ef6:	2e 9f       	mul	r18, r30
    1ef8:	80 0d       	add	r24, r0
    1efa:	91 1d       	adc	r25, r1
    1efc:	11 24       	eor	r1, r1
    1efe:	9f 87       	std	Y+15, r25	; 0x0f
    1f00:	8e 87       	std	Y+14, r24	; 0x0e
    1f02:	66 c0       	rjmp	.+204    	; 0x1fd0 <_ZN12Adafruit_GFX5writeEh+0x192>
    } else if (c != '\r') {
    1f04:	6d 30       	cpi	r22, 0x0D	; 13
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <_ZN12Adafruit_GFX5writeEh+0xcc>
    1f08:	63 c0       	rjmp	.+198    	; 0x1fd0 <_ZN12Adafruit_GFX5writeEh+0x192>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	34 96       	adiw	r30, 0x04	; 4
    1f0e:	34 91       	lpm	r19, Z
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    1f10:	63 17       	cp	r22, r19
    1f12:	08 f4       	brcc	.+2      	; 0x1f16 <_ZN12Adafruit_GFX5writeEh+0xd8>
    1f14:	5d c0       	rjmp	.+186    	; 0x1fd0 <_ZN12Adafruit_GFX5writeEh+0x192>
    1f16:	32 96       	adiw	r30, 0x02	; 2
    1f18:	e4 91       	lpm	r30, Z
    1f1a:	e6 17       	cp	r30, r22
    1f1c:	08 f4       	brcc	.+2      	; 0x1f20 <_ZN12Adafruit_GFX5writeEh+0xe2>
    1f1e:	58 c0       	rjmp	.+176    	; 0x1fd0 <_ZN12Adafruit_GFX5writeEh+0x192>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    1f20:	46 2f       	mov	r20, r22
    1f22:	43 1b       	sub	r20, r19
    1f24:	34 2f       	mov	r19, r20
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    1f26:	fc 01       	movw	r30, r24
    1f28:	32 96       	adiw	r30, 0x02	; 2
    1f2a:	85 90       	lpm	r8, Z+
    1f2c:	94 90       	lpm	r9, Z
    1f2e:	47 e0       	ldi	r20, 0x07	; 7
    1f30:	34 9f       	mul	r19, r20
    1f32:	80 0c       	add	r8, r0
    1f34:	91 1c       	adc	r9, r1
    1f36:	11 24       	eor	r1, r1
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    1f38:	f4 01       	movw	r30, r8
    1f3a:	32 96       	adiw	r30, 0x02	; 2
    1f3c:	34 91       	lpm	r19, Z
                h = pgm_read_byte(&glyph->height);
    1f3e:	31 96       	adiw	r30, 0x01	; 1
    1f40:	e4 91       	lpm	r30, Z
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    1f42:	33 23       	and	r19, r19
    1f44:	11 f0       	breq	.+4      	; 0x1f4a <_ZN12Adafruit_GFX5writeEh+0x10c>
    1f46:	e1 11       	cpse	r30, r1
    1f48:	0d c0       	rjmp	.+26     	; 0x1f64 <_ZN12Adafruit_GFX5writeEh+0x126>
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    1f4a:	f4 01       	movw	r30, r8
    1f4c:	34 96       	adiw	r30, 0x04	; 4
    1f4e:	e4 91       	lpm	r30, Z
    1f50:	2c 89       	ldd	r18, Y+20	; 0x14
    1f52:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f54:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f56:	e2 9f       	mul	r30, r18
    1f58:	80 0d       	add	r24, r0
    1f5a:	91 1d       	adc	r25, r1
    1f5c:	11 24       	eor	r1, r1
    1f5e:	9d 87       	std	Y+13, r25	; 0x0d
    1f60:	8c 87       	std	Y+12, r24	; 0x0c
      }
    }
  }
  return 1;
    1f62:	36 c0       	rjmp	.+108    	; 0x1fd0 <_ZN12Adafruit_GFX5writeEh+0x192>
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    1f64:	f4 01       	movw	r30, r8
    1f66:	35 96       	adiw	r30, 0x05	; 5
    1f68:	44 91       	lpm	r20, Z
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    1f6a:	5f 89       	ldd	r21, Y+23	; 0x17
    1f6c:	55 23       	and	r21, r21
    1f6e:	19 f1       	breq	.+70     	; 0x1fb6 <_ZN12Adafruit_GFX5writeEh+0x178>
    1f70:	5c 89       	ldd	r21, Y+20	; 0x14
    1f72:	e3 2f       	mov	r30, r19
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	e4 0f       	add	r30, r20
    1f78:	f1 1d       	adc	r31, r1
    1f7a:	47 fd       	sbrc	r20, 7
    1f7c:	fa 95       	dec	r31
    1f7e:	5e 9f       	mul	r21, r30
    1f80:	b0 01       	movw	r22, r0
    1f82:	5f 9f       	mul	r21, r31
    1f84:	70 0d       	add	r23, r0
    1f86:	11 24       	eor	r1, r1
    1f88:	4c 85       	ldd	r20, Y+12	; 0x0c
    1f8a:	5d 85       	ldd	r21, Y+13	; 0x0d
    1f8c:	46 0f       	add	r20, r22
    1f8e:	57 1f       	adc	r21, r23
    1f90:	68 85       	ldd	r22, Y+8	; 0x08
    1f92:	79 85       	ldd	r23, Y+9	; 0x09
    1f94:	64 17       	cp	r22, r20
    1f96:	75 07       	cpc	r23, r21
    1f98:	74 f4       	brge	.+28     	; 0x1fb6 <_ZN12Adafruit_GFX5writeEh+0x178>
            cursor_x = 0;
    1f9a:	1d 86       	std	Y+13, r1	; 0x0d
    1f9c:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize_y *
    1f9e:	3d 89       	ldd	r19, Y+21	; 0x15
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	38 96       	adiw	r30, 0x08	; 8
    1fa4:	e4 91       	lpm	r30, Z
    1fa6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fa8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1faa:	3e 9f       	mul	r19, r30
    1fac:	80 0d       	add	r24, r0
    1fae:	91 1d       	adc	r25, r1
    1fb0:	11 24       	eor	r1, r1
    1fb2:	9f 87       	std	Y+15, r25	; 0x0f
    1fb4:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
    1fb6:	ea 88       	ldd	r14, Y+18	; 0x12
    1fb8:	fb 88       	ldd	r15, Y+19	; 0x13
    1fba:	08 89       	ldd	r16, Y+16	; 0x10
    1fbc:	19 89       	ldd	r17, Y+17	; 0x11
    1fbe:	4e 85       	ldd	r20, Y+14	; 0x0e
    1fc0:	5f 85       	ldd	r21, Y+15	; 0x0f
    1fc2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fc4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fc6:	ad 88       	ldd	r10, Y+21	; 0x15
    1fc8:	cc 88       	ldd	r12, Y+20	; 0x14
    1fca:	ce 01       	movw	r24, r28
    1fcc:	03 dd       	rcall	.-1530   	; 0x19d4 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    1fce:	bd cf       	rjmp	.-134    	; 0x1f4a <_ZN12Adafruit_GFX5writeEh+0x10c>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	df 91       	pop	r29
    1fd6:	cf 91       	pop	r28
    1fd8:	1f 91       	pop	r17
    1fda:	0f 91       	pop	r16
    1fdc:	ff 90       	pop	r15
    1fde:	ef 90       	pop	r14
    1fe0:	cf 90       	pop	r12
    1fe2:	af 90       	pop	r10
    1fe4:	9f 90       	pop	r9
    1fe6:	8f 90       	pop	r8
    1fe8:	08 95       	ret

00001fea <_ZN12Adafruit_GFX11setTextSizeEhh>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    1fea:	61 11       	cpse	r22, r1
    1fec:	01 c0       	rjmp	.+2      	; 0x1ff0 <_ZN12Adafruit_GFX11setTextSizeEhh+0x6>
    1fee:	61 e0       	ldi	r22, 0x01	; 1
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	64 8b       	std	Z+20, r22	; 0x14
  textsize_y = (s_y > 0) ? s_y : 1;
    1ff4:	41 11       	cpse	r20, r1
    1ff6:	01 c0       	rjmp	.+2      	; 0x1ffa <_ZN12Adafruit_GFX11setTextSizeEhh+0x10>
    1ff8:	41 e0       	ldi	r20, 0x01	; 1
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	45 8b       	std	Z+21, r20	; 0x15
    1ffe:	08 95       	ret

00002000 <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
    2000:	46 2f       	mov	r20, r22
    2002:	f3 cf       	rjmp	.-26     	; 0x1fea <_ZN12Adafruit_GFX11setTextSizeEhh>

00002004 <_ZN16Adafruit_SSD13069drawPixelEiij>:
/*!
    @brief  Get base address of display buffer for direct reading or writing.
    @return Pointer to an unsigned 8-bit array, column-major, columns padded
            to full byte boundary if needed.
*/
uint8_t *Adafruit_SSD1306::getBuffer(void) { return buffer; }
    2004:	fc 01       	movw	r30, r24
    2006:	77 fd       	sbrc	r23, 7
    2008:	b9 c0       	rjmp	.+370    	; 0x217c <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    200a:	80 85       	ldd	r24, Z+8	; 0x08
    200c:	91 85       	ldd	r25, Z+9	; 0x09
    200e:	68 17       	cp	r22, r24
    2010:	79 07       	cpc	r23, r25
    2012:	0c f0       	brlt	.+2      	; 0x2016 <_ZN16Adafruit_SSD13069drawPixelEiij+0x12>
    2014:	b3 c0       	rjmp	.+358    	; 0x217c <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    2016:	57 fd       	sbrc	r21, 7
    2018:	b1 c0       	rjmp	.+354    	; 0x217c <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    201a:	82 85       	ldd	r24, Z+10	; 0x0a
    201c:	93 85       	ldd	r25, Z+11	; 0x0b
    201e:	48 17       	cp	r20, r24
    2020:	59 07       	cpc	r21, r25
    2022:	0c f0       	brlt	.+2      	; 0x2026 <_ZN16Adafruit_SSD13069drawPixelEiij+0x22>
    2024:	08 95       	ret
    2026:	86 89       	ldd	r24, Z+22	; 0x16
    2028:	82 30       	cpi	r24, 0x02	; 2
    202a:	79 f4       	brne	.+30     	; 0x204a <_ZN16Adafruit_SSD13069drawPixelEiij+0x46>
    202c:	84 81       	ldd	r24, Z+4	; 0x04
    202e:	95 81       	ldd	r25, Z+5	; 0x05
    2030:	dc 01       	movw	r26, r24
    2032:	a6 1b       	sub	r26, r22
    2034:	b7 0b       	sbc	r27, r23
    2036:	bd 01       	movw	r22, r26
    2038:	61 50       	subi	r22, 0x01	; 1
    203a:	71 09       	sbc	r23, r1
    203c:	86 81       	ldd	r24, Z+6	; 0x06
    203e:	97 81       	ldd	r25, Z+7	; 0x07
    2040:	dc 01       	movw	r26, r24
    2042:	a4 1b       	sub	r26, r20
    2044:	b5 0b       	sbc	r27, r21
    2046:	ad 01       	movw	r20, r26
    2048:	0e c0       	rjmp	.+28     	; 0x2066 <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    204a:	83 30       	cpi	r24, 0x03	; 3
    204c:	09 f0       	breq	.+2      	; 0x2050 <_ZN16Adafruit_SSD13069drawPixelEiij+0x4c>
    204e:	84 c0       	rjmp	.+264    	; 0x2158 <_ZN16Adafruit_SSD13069drawPixelEiij+0x154>
    2050:	64 27       	eor	r22, r20
    2052:	75 27       	eor	r23, r21
    2054:	ca 01       	movw	r24, r20
    2056:	86 27       	eor	r24, r22
    2058:	97 27       	eor	r25, r23
    205a:	68 27       	eor	r22, r24
    205c:	79 27       	eor	r23, r25
    205e:	46 81       	ldd	r20, Z+6	; 0x06
    2060:	57 81       	ldd	r21, Z+7	; 0x07
    2062:	48 1b       	sub	r20, r24
    2064:	59 0b       	sbc	r21, r25
    2066:	41 50       	subi	r20, 0x01	; 1
    2068:	51 09       	sbc	r21, r1
    206a:	21 30       	cpi	r18, 0x01	; 1
    206c:	31 05       	cpc	r19, r1
    206e:	31 f0       	breq	.+12     	; 0x207c <_ZN16Adafruit_SSD13069drawPixelEiij+0x78>
    2070:	48 f1       	brcs	.+82     	; 0x20c4 <_ZN16Adafruit_SSD13069drawPixelEiij+0xc0>
    2072:	22 30       	cpi	r18, 0x02	; 2
    2074:	31 05       	cpc	r19, r1
    2076:	09 f4       	brne	.+2      	; 0x207a <_ZN16Adafruit_SSD13069drawPixelEiij+0x76>
    2078:	4a c0       	rjmp	.+148    	; 0x210e <_ZN16Adafruit_SSD13069drawPixelEiij+0x10a>
    207a:	08 95       	ret
    207c:	ca 01       	movw	r24, r20
    207e:	57 fd       	sbrc	r21, 7
    2080:	07 96       	adiw	r24, 0x07	; 7
    2082:	9c 01       	movw	r18, r24
    2084:	a3 e0       	ldi	r26, 0x03	; 3
    2086:	35 95       	asr	r19
    2088:	27 95       	ror	r18
    208a:	aa 95       	dec	r26
    208c:	e1 f7       	brne	.-8      	; 0x2086 <_ZN16Adafruit_SSD13069drawPixelEiij+0x82>
    208e:	a4 81       	ldd	r26, Z+4	; 0x04
    2090:	b5 81       	ldd	r27, Z+5	; 0x05
    2092:	2a 9f       	mul	r18, r26
    2094:	c0 01       	movw	r24, r0
    2096:	2b 9f       	mul	r18, r27
    2098:	90 0d       	add	r25, r0
    209a:	3a 9f       	mul	r19, r26
    209c:	90 0d       	add	r25, r0
    209e:	11 24       	eor	r1, r1
    20a0:	68 0f       	add	r22, r24
    20a2:	79 1f       	adc	r23, r25
    20a4:	07 8c       	ldd	r0, Z+31	; 0x1f
    20a6:	f0 a1       	ldd	r31, Z+32	; 0x20
    20a8:	e0 2d       	mov	r30, r0
    20aa:	e6 0f       	add	r30, r22
    20ac:	f7 1f       	adc	r31, r23
    20ae:	47 70       	andi	r20, 0x07	; 7
    20b0:	55 27       	eor	r21, r21
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	01 c0       	rjmp	.+2      	; 0x20ba <_ZN16Adafruit_SSD13069drawPixelEiij+0xb6>
    20b8:	88 0f       	add	r24, r24
    20ba:	4a 95       	dec	r20
    20bc:	ea f7       	brpl	.-6      	; 0x20b8 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb4>
    20be:	90 81       	ld	r25, Z
    20c0:	89 2b       	or	r24, r25
    20c2:	48 c0       	rjmp	.+144    	; 0x2154 <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    20c4:	ca 01       	movw	r24, r20
    20c6:	57 fd       	sbrc	r21, 7
    20c8:	07 96       	adiw	r24, 0x07	; 7
    20ca:	9c 01       	movw	r18, r24
    20cc:	93 e0       	ldi	r25, 0x03	; 3
    20ce:	35 95       	asr	r19
    20d0:	27 95       	ror	r18
    20d2:	9a 95       	dec	r25
    20d4:	e1 f7       	brne	.-8      	; 0x20ce <_ZN16Adafruit_SSD13069drawPixelEiij+0xca>
    20d6:	a4 81       	ldd	r26, Z+4	; 0x04
    20d8:	b5 81       	ldd	r27, Z+5	; 0x05
    20da:	2a 9f       	mul	r18, r26
    20dc:	c0 01       	movw	r24, r0
    20de:	2b 9f       	mul	r18, r27
    20e0:	90 0d       	add	r25, r0
    20e2:	3a 9f       	mul	r19, r26
    20e4:	90 0d       	add	r25, r0
    20e6:	11 24       	eor	r1, r1
    20e8:	68 0f       	add	r22, r24
    20ea:	79 1f       	adc	r23, r25
    20ec:	07 8c       	ldd	r0, Z+31	; 0x1f
    20ee:	f0 a1       	ldd	r31, Z+32	; 0x20
    20f0:	e0 2d       	mov	r30, r0
    20f2:	e6 0f       	add	r30, r22
    20f4:	f7 1f       	adc	r31, r23
    20f6:	47 70       	andi	r20, 0x07	; 7
    20f8:	55 27       	eor	r21, r21
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	01 c0       	rjmp	.+2      	; 0x2102 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfe>
    2100:	88 0f       	add	r24, r24
    2102:	4a 95       	dec	r20
    2104:	ea f7       	brpl	.-6      	; 0x2100 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfc>
    2106:	80 95       	com	r24
    2108:	90 81       	ld	r25, Z
    210a:	89 23       	and	r24, r25
    210c:	23 c0       	rjmp	.+70     	; 0x2154 <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    210e:	ca 01       	movw	r24, r20
    2110:	57 fd       	sbrc	r21, 7
    2112:	07 96       	adiw	r24, 0x07	; 7
    2114:	9c 01       	movw	r18, r24
    2116:	83 e0       	ldi	r24, 0x03	; 3
    2118:	35 95       	asr	r19
    211a:	27 95       	ror	r18
    211c:	8a 95       	dec	r24
    211e:	e1 f7       	brne	.-8      	; 0x2118 <_ZN16Adafruit_SSD13069drawPixelEiij+0x114>
    2120:	a4 81       	ldd	r26, Z+4	; 0x04
    2122:	b5 81       	ldd	r27, Z+5	; 0x05
    2124:	2a 9f       	mul	r18, r26
    2126:	c0 01       	movw	r24, r0
    2128:	2b 9f       	mul	r18, r27
    212a:	90 0d       	add	r25, r0
    212c:	3a 9f       	mul	r19, r26
    212e:	90 0d       	add	r25, r0
    2130:	11 24       	eor	r1, r1
    2132:	68 0f       	add	r22, r24
    2134:	79 1f       	adc	r23, r25
    2136:	07 8c       	ldd	r0, Z+31	; 0x1f
    2138:	f0 a1       	ldd	r31, Z+32	; 0x20
    213a:	e0 2d       	mov	r30, r0
    213c:	e6 0f       	add	r30, r22
    213e:	f7 1f       	adc	r31, r23
    2140:	47 70       	andi	r20, 0x07	; 7
    2142:	55 27       	eor	r21, r21
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	01 c0       	rjmp	.+2      	; 0x214c <_ZN16Adafruit_SSD13069drawPixelEiij+0x148>
    214a:	88 0f       	add	r24, r24
    214c:	4a 95       	dec	r20
    214e:	ea f7       	brpl	.-6      	; 0x214a <_ZN16Adafruit_SSD13069drawPixelEiij+0x146>
    2150:	90 81       	ld	r25, Z
    2152:	89 27       	eor	r24, r25
    2154:	80 83       	st	Z, r24
    2156:	08 95       	ret
    2158:	81 30       	cpi	r24, 0x01	; 1
    215a:	09 f0       	breq	.+2      	; 0x215e <_ZN16Adafruit_SSD13069drawPixelEiij+0x15a>
    215c:	86 cf       	rjmp	.-244    	; 0x206a <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    215e:	64 27       	eor	r22, r20
    2160:	75 27       	eor	r23, r21
    2162:	46 27       	eor	r20, r22
    2164:	57 27       	eor	r21, r23
    2166:	64 27       	eor	r22, r20
    2168:	75 27       	eor	r23, r21
    216a:	84 81       	ldd	r24, Z+4	; 0x04
    216c:	95 81       	ldd	r25, Z+5	; 0x05
    216e:	dc 01       	movw	r26, r24
    2170:	a6 1b       	sub	r26, r22
    2172:	b7 0b       	sbc	r27, r23
    2174:	bd 01       	movw	r22, r26
    2176:	61 50       	subi	r22, 0x01	; 1
    2178:	71 09       	sbc	r23, r1
    217a:	77 cf       	rjmp	.-274    	; 0x206a <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    217c:	08 95       	ret

0000217e <_ZN8SPIClass8transferEh>:
    217e:	8e bd       	out	0x2e, r24	; 46
    2180:	00 00       	nop
    2182:	0d b4       	in	r0, 0x2d	; 45
    2184:	07 fe       	sbrs	r0, 7
    2186:	fd cf       	rjmp	.-6      	; 0x2182 <_ZN8SPIClass8transferEh+0x4>
    2188:	8e b5       	in	r24, 0x2e	; 46
    218a:	08 95       	ret

0000218c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
    218c:	4f 92       	push	r4
    218e:	5f 92       	push	r5
    2190:	6f 92       	push	r6
    2192:	7f 92       	push	r7
    2194:	8f 92       	push	r8
    2196:	9f 92       	push	r9
    2198:	af 92       	push	r10
    219a:	bf 92       	push	r11
    219c:	cf 92       	push	r12
    219e:	df 92       	push	r13
    21a0:	ef 92       	push	r14
    21a2:	ff 92       	push	r15
    21a4:	0f 93       	push	r16
    21a6:	cf 93       	push	r28
    21a8:	df 93       	push	r29
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	3c 01       	movw	r6, r24
    21b0:	29 01       	movw	r4, r18
    21b2:	50 e0       	ldi	r21, 0x00	; 0
    21b4:	70 e0       	ldi	r23, 0x00	; 0
    21b6:	4e db       	rcall	.-2404   	; 0x1854 <_ZN12Adafruit_GFXC1Eii>
    21b8:	81 e5       	ldi	r24, 0x51	; 81
    21ba:	92 e0       	ldi	r25, 0x02	; 2
    21bc:	f3 01       	movw	r30, r6
    21be:	91 83       	std	Z+1, r25	; 0x01
    21c0:	80 83       	st	Z, r24
    21c2:	14 8e       	std	Z+28, r1	; 0x1c
    21c4:	13 8e       	std	Z+27, r1	; 0x1b
    21c6:	41 14       	cp	r4, r1
    21c8:	51 04       	cpc	r5, r1
    21ca:	11 f0       	breq	.+4      	; 0x21d0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x44>
    21cc:	c2 01       	movw	r24, r4
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x48>
    21d0:	8b e8       	ldi	r24, 0x8B	; 139
    21d2:	93 e0       	ldi	r25, 0x03	; 3
    21d4:	f3 01       	movw	r30, r6
    21d6:	96 8f       	std	Z+30, r25	; 0x1e
    21d8:	85 8f       	std	Z+29, r24	; 0x1d
    21da:	10 a2       	std	Z+32, r1	; 0x20
    21dc:	17 8e       	std	Z+31, r1	; 0x1f
    21de:	8f ef       	ldi	r24, 0xFF	; 255
    21e0:	84 a3       	std	Z+36, r24	; 0x24
    21e2:	85 a3       	std	Z+37, r24	; 0x25
    21e4:	86 a3       	std	Z+38, r24	; 0x26
    21e6:	87 a3       	std	Z+39, r24	; 0x27
    21e8:	00 a7       	std	Z+40, r16	; 0x28
    21ea:	c5 aa       	std	Z+53, r12	; 0x35
    21ec:	d6 aa       	std	Z+54, r13	; 0x36
    21ee:	e7 aa       	std	Z+55, r14	; 0x37
    21f0:	f0 ae       	std	Z+56, r15	; 0x38
    21f2:	81 ae       	std	Z+57, r8	; 0x39
    21f4:	92 ae       	std	Z+58, r9	; 0x3a
    21f6:	a3 ae       	std	Z+59, r10	; 0x3b
    21f8:	b4 ae       	std	Z+60, r11	; 0x3c
    21fa:	80 e5       	ldi	r24, 0x50	; 80
    21fc:	86 af       	std	Z+62, r24	; 0x3e
    21fe:	17 ae       	std	Z+63, r1	; 0x3f
    2200:	df 91       	pop	r29
    2202:	cf 91       	pop	r28
    2204:	0f 91       	pop	r16
    2206:	ff 90       	pop	r15
    2208:	ef 90       	pop	r14
    220a:	df 90       	pop	r13
    220c:	cf 90       	pop	r12
    220e:	bf 90       	pop	r11
    2210:	af 90       	pop	r10
    2212:	9f 90       	pop	r9
    2214:	8f 90       	pop	r8
    2216:	7f 90       	pop	r7
    2218:	6f 90       	pop	r6
    221a:	5f 90       	pop	r5
    221c:	4f 90       	pop	r4
    221e:	08 95       	ret

00002220 <_ZN16Adafruit_SSD1306D1Ev>:
    2220:	21 e5       	ldi	r18, 0x51	; 81
    2222:	32 e0       	ldi	r19, 0x02	; 2
    2224:	fc 01       	movw	r30, r24
    2226:	31 83       	std	Z+1, r19	; 0x01
    2228:	20 83       	st	Z, r18
    222a:	87 8d       	ldd	r24, Z+31	; 0x1f
    222c:	90 a1       	ldd	r25, Z+32	; 0x20
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	11 f0       	breq	.+4      	; 0x2236 <_ZN16Adafruit_SSD1306D1Ev+0x16>
    2232:	0c 94 1d 25 	jmp	0x4a3a	; 0x4a3a <free>
    2236:	08 95       	ret

00002238 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
    2238:	1f 93       	push	r17
    223a:	cf 93       	push	r28
    223c:	df 93       	push	r29
    223e:	fc 01       	movw	r30, r24
    2240:	85 8d       	ldd	r24, Z+29	; 0x1d
    2242:	96 8d       	ldd	r25, Z+30	; 0x1e
    2244:	00 97       	sbiw	r24, 0x00	; 0
    2246:	19 f1       	breq	.+70     	; 0x228e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x56>
    2248:	16 2f       	mov	r17, r22
    224a:	ef 01       	movw	r28, r30
    224c:	61 a1       	ldd	r22, Z+33	; 0x21
    224e:	06 2e       	mov	r0, r22
    2250:	00 0c       	add	r0, r0
    2252:	77 0b       	sbc	r23, r23
    2254:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_ZN7TwoWire17beginTransmissionEi>
    2258:	8d 8d       	ldd	r24, Y+29	; 0x1d
    225a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    225c:	dc 01       	movw	r26, r24
    225e:	ed 91       	ld	r30, X+
    2260:	fc 91       	ld	r31, X
    2262:	01 90       	ld	r0, Z+
    2264:	f0 81       	ld	r31, Z
    2266:	e0 2d       	mov	r30, r0
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	19 95       	eicall
    226c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    226e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2270:	dc 01       	movw	r26, r24
    2272:	ed 91       	ld	r30, X+
    2274:	fc 91       	ld	r31, X
    2276:	01 90       	ld	r0, Z+
    2278:	f0 81       	ld	r31, Z
    227a:	e0 2d       	mov	r30, r0
    227c:	61 2f       	mov	r22, r17
    227e:	19 95       	eicall
    2280:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2282:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	1f 91       	pop	r17
    228a:	0c 94 2d 1c 	jmp	0x385a	; 0x385a <_ZN7TwoWire15endTransmissionEv>
    228e:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2290:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2292:	9c 91       	ld	r25, X
    2294:	83 a9       	ldd	r24, Z+51	; 0x33
    2296:	80 95       	com	r24
    2298:	89 23       	and	r24, r25
    229a:	8c 93       	st	X, r24
    229c:	83 8d       	ldd	r24, Z+27	; 0x1b
    229e:	94 8d       	ldd	r25, Z+28	; 0x1c
    22a0:	89 2b       	or	r24, r25
    22a2:	29 f0       	breq	.+10     	; 0x22ae <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x76>
    22a4:	86 2f       	mov	r24, r22
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	1f 91       	pop	r17
    22ac:	68 cf       	rjmp	.-304    	; 0x217e <_ZN8SPIClass8transferEh>
    22ae:	28 e0       	ldi	r18, 0x08	; 8
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	80 e8       	ldi	r24, 0x80	; 128
    22b4:	a1 a5       	ldd	r26, Z+41	; 0x29
    22b6:	b2 a5       	ldd	r27, Z+42	; 0x2a
    22b8:	91 a9       	ldd	r25, Z+49	; 0x31
    22ba:	46 2f       	mov	r20, r22
    22bc:	48 23       	and	r20, r24
    22be:	19 f0       	breq	.+6      	; 0x22c6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x8e>
    22c0:	4c 91       	ld	r20, X
    22c2:	94 2b       	or	r25, r20
    22c4:	03 c0       	rjmp	.+6      	; 0x22cc <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x94>
    22c6:	4c 91       	ld	r20, X
    22c8:	90 95       	com	r25
    22ca:	94 23       	and	r25, r20
    22cc:	9c 93       	st	X, r25
    22ce:	a3 a5       	ldd	r26, Z+43	; 0x2b
    22d0:	b4 a5       	ldd	r27, Z+44	; 0x2c
    22d2:	4c 91       	ld	r20, X
    22d4:	92 a9       	ldd	r25, Z+50	; 0x32
    22d6:	94 2b       	or	r25, r20
    22d8:	9c 93       	st	X, r25
    22da:	a3 a5       	ldd	r26, Z+43	; 0x2b
    22dc:	b4 a5       	ldd	r27, Z+44	; 0x2c
    22de:	4c 91       	ld	r20, X
    22e0:	92 a9       	ldd	r25, Z+50	; 0x32
    22e2:	90 95       	com	r25
    22e4:	94 23       	and	r25, r20
    22e6:	9c 93       	st	X, r25
    22e8:	86 95       	lsr	r24
    22ea:	21 50       	subi	r18, 0x01	; 1
    22ec:	31 09       	sbc	r19, r1
    22ee:	11 f7       	brne	.-60     	; 0x22b4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x7c>
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	1f 91       	pop	r17
    22f6:	08 95       	ret

000022f8 <_ZN16Adafruit_SSD130613invertDisplayEb>:
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	ec 01       	movw	r28, r24
    2300:	16 2f       	mov	r17, r22
    2302:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2304:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	39 f0       	breq	.+14     	; 0x2318 <_ZN16Adafruit_SSD130613invertDisplayEb+0x20>
    230a:	4d a9       	ldd	r20, Y+53	; 0x35
    230c:	5e a9       	ldd	r21, Y+54	; 0x36
    230e:	6f a9       	ldd	r22, Y+55	; 0x37
    2310:	78 ad       	ldd	r23, Y+56	; 0x38
    2312:	0e 94 ab 1b 	call	0x3756	; 0x3756 <_ZN7TwoWire8setClockEm>
    2316:	0f c0       	rjmp	.+30     	; 0x2336 <_ZN16Adafruit_SSD130613invertDisplayEb+0x3e>
    2318:	8b 8d       	ldd	r24, Y+27	; 0x1b
    231a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    231c:	89 2b       	or	r24, r25
    231e:	21 f0       	breq	.+8      	; 0x2328 <_ZN16Adafruit_SSD130613invertDisplayEb+0x30>
    2320:	8e ad       	ldd	r24, Y+62	; 0x3e
    2322:	9f ad       	ldd	r25, Y+63	; 0x3f
    2324:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2328:	ef a5       	ldd	r30, Y+47	; 0x2f
    232a:	f8 a9       	ldd	r31, Y+48	; 0x30
    232c:	90 81       	ld	r25, Z
    232e:	8c a9       	ldd	r24, Y+52	; 0x34
    2330:	80 95       	com	r24
    2332:	89 23       	and	r24, r25
    2334:	80 83       	st	Z, r24
    2336:	11 11       	cpse	r17, r1
    2338:	02 c0       	rjmp	.+4      	; 0x233e <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
    233a:	66 ea       	ldi	r22, 0xA6	; 166
    233c:	01 c0       	rjmp	.+2      	; 0x2340 <_ZN16Adafruit_SSD130613invertDisplayEb+0x48>
    233e:	67 ea       	ldi	r22, 0xA7	; 167
    2340:	ce 01       	movw	r24, r28
    2342:	7a df       	rcall	.-268    	; 0x2238 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2344:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2346:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2348:	00 97       	sbiw	r24, 0x00	; 0
    234a:	49 f0       	breq	.+18     	; 0x235e <_ZN16Adafruit_SSD130613invertDisplayEb+0x66>
    234c:	49 ad       	ldd	r20, Y+57	; 0x39
    234e:	5a ad       	ldd	r21, Y+58	; 0x3a
    2350:	6b ad       	ldd	r22, Y+59	; 0x3b
    2352:	7c ad       	ldd	r23, Y+60	; 0x3c
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	1f 91       	pop	r17
    235a:	0c 94 ab 1b 	jmp	0x3756	; 0x3756 <_ZN7TwoWire8setClockEm>
    235e:	ef a5       	ldd	r30, Y+47	; 0x2f
    2360:	f8 a9       	ldd	r31, Y+48	; 0x30
    2362:	90 81       	ld	r25, Z
    2364:	8c a9       	ldd	r24, Y+52	; 0x34
    2366:	89 2b       	or	r24, r25
    2368:	80 83       	st	Z, r24
    236a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    236c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    236e:	89 2b       	or	r24, r25
    2370:	29 f0       	breq	.+10     	; 0x237c <_ZN16Adafruit_SSD130613invertDisplayEb+0x84>
    2372:	df 91       	pop	r29
    2374:	cf 91       	pop	r28
    2376:	1f 91       	pop	r17
    2378:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <_ZN8SPIClass14endTransactionEv>
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	1f 91       	pop	r17
    2382:	08 95       	ret

00002384 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
    2384:	bf 92       	push	r11
    2386:	cf 92       	push	r12
    2388:	df 92       	push	r13
    238a:	ef 92       	push	r14
    238c:	ff 92       	push	r15
    238e:	0f 93       	push	r16
    2390:	1f 93       	push	r17
    2392:	cf 93       	push	r28
    2394:	df 93       	push	r29
    2396:	ec 01       	movw	r28, r24
    2398:	b6 2e       	mov	r11, r22
    239a:	07 2f       	mov	r16, r23
    239c:	14 2f       	mov	r17, r20
    239e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x24>
    23a6:	52 c0       	rjmp	.+164    	; 0x244c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xc8>
    23a8:	69 a1       	ldd	r22, Y+33	; 0x21
    23aa:	06 2e       	mov	r0, r22
    23ac:	00 0c       	add	r0, r0
    23ae:	77 0b       	sbc	r23, r23
    23b0:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_ZN7TwoWire17beginTransmissionEi>
    23b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23b8:	dc 01       	movw	r26, r24
    23ba:	ed 91       	ld	r30, X+
    23bc:	fc 91       	ld	r31, X
    23be:	01 90       	ld	r0, Z+
    23c0:	f0 81       	ld	r31, Z
    23c2:	e0 2d       	mov	r30, r0
    23c4:	60 e0       	ldi	r22, 0x00	; 0
    23c6:	19 95       	eicall
    23c8:	cb 2c       	mov	r12, r11
    23ca:	d0 2e       	mov	r13, r16
    23cc:	ee 24       	eor	r14, r14
    23ce:	e3 94       	inc	r14
    23d0:	f1 2c       	mov	r15, r1
    23d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23d6:	11 23       	and	r17, r17
    23d8:	71 f1       	breq	.+92     	; 0x2436 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb2>
    23da:	b0 e2       	ldi	r27, 0x20	; 32
    23dc:	eb 16       	cp	r14, r27
    23de:	f1 04       	cpc	r15, r1
    23e0:	b8 f0       	brcs	.+46     	; 0x2410 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x8c>
    23e2:	0e 94 2d 1c 	call	0x385a	; 0x385a <_ZN7TwoWire15endTransmissionEv>
    23e6:	69 a1       	ldd	r22, Y+33	; 0x21
    23e8:	06 2e       	mov	r0, r22
    23ea:	00 0c       	add	r0, r0
    23ec:	77 0b       	sbc	r23, r23
    23ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23f2:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_ZN7TwoWire17beginTransmissionEi>
    23f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23fa:	dc 01       	movw	r26, r24
    23fc:	ed 91       	ld	r30, X+
    23fe:	fc 91       	ld	r31, X
    2400:	01 90       	ld	r0, Z+
    2402:	f0 81       	ld	r31, Z
    2404:	e0 2d       	mov	r30, r0
    2406:	60 e0       	ldi	r22, 0x00	; 0
    2408:	19 95       	eicall
    240a:	ee 24       	eor	r14, r14
    240c:	e3 94       	inc	r14
    240e:	f1 2c       	mov	r15, r1
    2410:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2412:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2414:	f6 01       	movw	r30, r12
    2416:	64 91       	lpm	r22, Z
    2418:	dc 01       	movw	r26, r24
    241a:	ed 91       	ld	r30, X+
    241c:	fc 91       	ld	r31, X
    241e:	01 90       	ld	r0, Z+
    2420:	f0 81       	ld	r31, Z
    2422:	e0 2d       	mov	r30, r0
    2424:	19 95       	eicall
    2426:	bf ef       	ldi	r27, 0xFF	; 255
    2428:	eb 1a       	sub	r14, r27
    242a:	fb 0a       	sbc	r15, r27
    242c:	11 50       	subi	r17, 0x01	; 1
    242e:	f6 01       	movw	r30, r12
    2430:	31 96       	adiw	r30, 0x01	; 1
    2432:	6f 01       	movw	r12, r30
    2434:	ce cf       	rjmp	.-100    	; 0x23d2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x4e>
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	1f 91       	pop	r17
    243c:	0f 91       	pop	r16
    243e:	ff 90       	pop	r15
    2440:	ef 90       	pop	r14
    2442:	df 90       	pop	r13
    2444:	cf 90       	pop	r12
    2446:	bf 90       	pop	r11
    2448:	0c 94 2d 1c 	jmp	0x385a	; 0x385a <_ZN7TwoWire15endTransmissionEv>
    244c:	ed a5       	ldd	r30, Y+45	; 0x2d
    244e:	fe a5       	ldd	r31, Y+46	; 0x2e
    2450:	90 81       	ld	r25, Z
    2452:	8b a9       	ldd	r24, Y+51	; 0x33
    2454:	80 95       	com	r24
    2456:	89 23       	and	r24, r25
    2458:	80 83       	st	Z, r24
    245a:	e6 2e       	mov	r14, r22
    245c:	f7 2e       	mov	r15, r23
    245e:	11 23       	and	r17, r17
    2460:	71 f1       	breq	.+92     	; 0x24be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x13a>
    2462:	f7 01       	movw	r30, r14
    2464:	84 91       	lpm	r24, Z
    2466:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2468:	3c 8d       	ldd	r19, Y+28	; 0x1c
    246a:	23 2b       	or	r18, r19
    246c:	31 f0       	breq	.+12     	; 0x247a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xf6>
    246e:	87 de       	rcall	.-754    	; 0x217e <_ZN8SPIClass8transferEh>
    2470:	11 50       	subi	r17, 0x01	; 1
    2472:	c7 01       	movw	r24, r14
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	7c 01       	movw	r14, r24
    2478:	f2 cf       	rjmp	.-28     	; 0x245e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xda>
    247a:	28 e0       	ldi	r18, 0x08	; 8
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e8       	ldi	r20, 0x80	; 128
    2480:	e9 a5       	ldd	r30, Y+41	; 0x29
    2482:	fa a5       	ldd	r31, Y+42	; 0x2a
    2484:	99 a9       	ldd	r25, Y+49	; 0x31
    2486:	58 2f       	mov	r21, r24
    2488:	54 23       	and	r21, r20
    248a:	19 f0       	breq	.+6      	; 0x2492 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x10e>
    248c:	50 81       	ld	r21, Z
    248e:	95 2b       	or	r25, r21
    2490:	03 c0       	rjmp	.+6      	; 0x2498 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x114>
    2492:	50 81       	ld	r21, Z
    2494:	90 95       	com	r25
    2496:	95 23       	and	r25, r21
    2498:	90 83       	st	Z, r25
    249a:	eb a5       	ldd	r30, Y+43	; 0x2b
    249c:	fc a5       	ldd	r31, Y+44	; 0x2c
    249e:	50 81       	ld	r21, Z
    24a0:	9a a9       	ldd	r25, Y+50	; 0x32
    24a2:	95 2b       	or	r25, r21
    24a4:	90 83       	st	Z, r25
    24a6:	eb a5       	ldd	r30, Y+43	; 0x2b
    24a8:	fc a5       	ldd	r31, Y+44	; 0x2c
    24aa:	50 81       	ld	r21, Z
    24ac:	9a a9       	ldd	r25, Y+50	; 0x32
    24ae:	90 95       	com	r25
    24b0:	95 23       	and	r25, r21
    24b2:	90 83       	st	Z, r25
    24b4:	46 95       	lsr	r20
    24b6:	21 50       	subi	r18, 0x01	; 1
    24b8:	31 09       	sbc	r19, r1
    24ba:	11 f7       	brne	.-60     	; 0x2480 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xfc>
    24bc:	d9 cf       	rjmp	.-78     	; 0x2470 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xec>
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	1f 91       	pop	r17
    24c4:	0f 91       	pop	r16
    24c6:	ff 90       	pop	r15
    24c8:	ef 90       	pop	r14
    24ca:	df 90       	pop	r13
    24cc:	cf 90       	pop	r12
    24ce:	bf 90       	pop	r11
    24d0:	08 95       	ret

000024d2 <_ZN16Adafruit_SSD130612clearDisplayEv>:
    24d2:	fc 01       	movw	r30, r24
    24d4:	86 81       	ldd	r24, Z+6	; 0x06
    24d6:	97 81       	ldd	r25, Z+7	; 0x07
    24d8:	9c 01       	movw	r18, r24
    24da:	29 5f       	subi	r18, 0xF9	; 249
    24dc:	3f 4f       	sbci	r19, 0xFF	; 255
    24de:	37 ff       	sbrs	r19, 7
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <_ZN16Adafruit_SSD130612clearDisplayEv+0x14>
    24e2:	29 5f       	subi	r18, 0xF9	; 249
    24e4:	3f 4f       	sbci	r19, 0xFF	; 255
    24e6:	83 e0       	ldi	r24, 0x03	; 3
    24e8:	35 95       	asr	r19
    24ea:	27 95       	ror	r18
    24ec:	8a 95       	dec	r24
    24ee:	e1 f7       	brne	.-8      	; 0x24e8 <_ZN16Adafruit_SSD130612clearDisplayEv+0x16>
    24f0:	84 81       	ldd	r24, Z+4	; 0x04
    24f2:	95 81       	ldd	r25, Z+5	; 0x05
    24f4:	28 9f       	mul	r18, r24
    24f6:	a0 01       	movw	r20, r0
    24f8:	29 9f       	mul	r18, r25
    24fa:	50 0d       	add	r21, r0
    24fc:	38 9f       	mul	r19, r24
    24fe:	50 0d       	add	r21, r0
    2500:	11 24       	eor	r1, r1
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	70 e0       	ldi	r23, 0x00	; 0
    2506:	87 8d       	ldd	r24, Z+31	; 0x1f
    2508:	90 a1       	ldd	r25, Z+32	; 0x20
    250a:	0c 94 93 26 	jmp	0x4d26	; 0x4d26 <memset>

0000250e <_ZN16Adafruit_SSD13065beginEhhbb>:
    250e:	8f 92       	push	r8
    2510:	9f 92       	push	r9
    2512:	af 92       	push	r10
    2514:	bf 92       	push	r11
    2516:	cf 92       	push	r12
    2518:	df 92       	push	r13
    251a:	ef 92       	push	r14
    251c:	ff 92       	push	r15
    251e:	0f 93       	push	r16
    2520:	1f 93       	push	r17
    2522:	cf 93       	push	r28
    2524:	df 93       	push	r29
    2526:	ec 01       	movw	r28, r24
    2528:	86 2e       	mov	r8, r22
    252a:	b4 2e       	mov	r11, r20
    252c:	a2 2e       	mov	r10, r18
    252e:	90 2e       	mov	r9, r16
    2530:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2532:	98 a1       	ldd	r25, Y+32	; 0x20
    2534:	89 2b       	or	r24, r25
    2536:	e9 f4       	brne	.+58     	; 0x2572 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    2538:	2e 81       	ldd	r18, Y+6	; 0x06
    253a:	3f 81       	ldd	r19, Y+7	; 0x07
    253c:	c9 01       	movw	r24, r18
    253e:	07 96       	adiw	r24, 0x07	; 7
    2540:	97 fd       	sbrc	r25, 7
    2542:	07 96       	adiw	r24, 0x07	; 7
    2544:	23 e0       	ldi	r18, 0x03	; 3
    2546:	95 95       	asr	r25
    2548:	87 95       	ror	r24
    254a:	2a 95       	dec	r18
    254c:	e1 f7       	brne	.-8      	; 0x2546 <_ZN16Adafruit_SSD13065beginEhhbb+0x38>
    254e:	2c 81       	ldd	r18, Y+4	; 0x04
    2550:	3d 81       	ldd	r19, Y+5	; 0x05
    2552:	ac 01       	movw	r20, r24
    2554:	42 9f       	mul	r20, r18
    2556:	c0 01       	movw	r24, r0
    2558:	43 9f       	mul	r20, r19
    255a:	90 0d       	add	r25, r0
    255c:	52 9f       	mul	r21, r18
    255e:	90 0d       	add	r25, r0
    2560:	11 24       	eor	r1, r1
    2562:	0e 94 85 24 	call	0x490a	; 0x490a <malloc>
    2566:	98 a3       	std	Y+32, r25	; 0x20
    2568:	8f 8f       	std	Y+31, r24	; 0x1f
    256a:	89 2b       	or	r24, r25
    256c:	11 f4       	brne	.+4      	; 0x2572 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	81 c1       	rjmp	.+770    	; 0x2874 <_ZN16Adafruit_SSD13065beginEhhbb+0x366>
    2572:	ce 01       	movw	r24, r28
    2574:	ae df       	rcall	.-164    	; 0x24d2 <_ZN16Adafruit_SSD130612clearDisplayEv>
    2576:	8e 81       	ldd	r24, Y+6	; 0x06
    2578:	9f 81       	ldd	r25, Y+7	; 0x07
    257a:	6c 81       	ldd	r22, Y+4	; 0x04
    257c:	7d 81       	ldd	r23, Y+5	; 0x05
    257e:	81 32       	cpi	r24, 0x21	; 33
    2580:	91 05       	cpc	r25, r1
    2582:	e4 f0       	brlt	.+56     	; 0x25bc <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    2584:	ac 01       	movw	r20, r24
    2586:	40 54       	subi	r20, 0x40	; 64
    2588:	51 09       	sbc	r21, r1
    258a:	57 ff       	sbrs	r21, 7
    258c:	02 c0       	rjmp	.+4      	; 0x2592 <_ZN16Adafruit_SSD13065beginEhhbb+0x84>
    258e:	4f 5f       	subi	r20, 0xFF	; 255
    2590:	5f 4f       	sbci	r21, 0xFF	; 255
    2592:	55 95       	asr	r21
    2594:	47 95       	ror	r20
    2596:	62 55       	subi	r22, 0x52	; 82
    2598:	71 09       	sbc	r23, r1
    259a:	77 ff       	sbrs	r23, 7
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <_ZN16Adafruit_SSD13065beginEhhbb+0x94>
    259e:	6f 5f       	subi	r22, 0xFF	; 255
    25a0:	7f 4f       	sbci	r23, 0xFF	; 255
    25a2:	75 95       	asr	r23
    25a4:	67 95       	ror	r22
    25a6:	cc 24       	eor	r12, r12
    25a8:	c3 94       	inc	r12
    25aa:	d1 2c       	mov	r13, r1
    25ac:	80 e4       	ldi	r24, 0x40	; 64
    25ae:	e8 2e       	mov	r14, r24
    25b0:	f1 2c       	mov	r15, r1
    25b2:	02 e5       	ldi	r16, 0x52	; 82
    25b4:	10 e0       	ldi	r17, 0x00	; 0
    25b6:	23 e4       	ldi	r18, 0x43	; 67
    25b8:	38 e0       	ldi	r19, 0x08	; 8
    25ba:	1b c0       	rjmp	.+54     	; 0x25f2 <_ZN16Adafruit_SSD13065beginEhhbb+0xe4>
    25bc:	ac 01       	movw	r20, r24
    25be:	40 52       	subi	r20, 0x20	; 32
    25c0:	51 09       	sbc	r21, r1
    25c2:	57 ff       	sbrs	r21, 7
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
    25c6:	4f 5f       	subi	r20, 0xFF	; 255
    25c8:	5f 4f       	sbci	r21, 0xFF	; 255
    25ca:	55 95       	asr	r21
    25cc:	47 95       	ror	r20
    25ce:	63 57       	subi	r22, 0x73	; 115
    25d0:	71 09       	sbc	r23, r1
    25d2:	77 ff       	sbrs	r23, 7
    25d4:	02 c0       	rjmp	.+4      	; 0x25da <_ZN16Adafruit_SSD13065beginEhhbb+0xcc>
    25d6:	6f 5f       	subi	r22, 0xFF	; 255
    25d8:	7f 4f       	sbci	r23, 0xFF	; 255
    25da:	75 95       	asr	r23
    25dc:	67 95       	ror	r22
    25de:	cc 24       	eor	r12, r12
    25e0:	c3 94       	inc	r12
    25e2:	d1 2c       	mov	r13, r1
    25e4:	a0 e2       	ldi	r26, 0x20	; 32
    25e6:	ea 2e       	mov	r14, r26
    25e8:	f1 2c       	mov	r15, r1
    25ea:	03 e7       	ldi	r16, 0x73	; 115
    25ec:	10 e0       	ldi	r17, 0x00	; 0
    25ee:	23 e6       	ldi	r18, 0x63	; 99
    25f0:	36 e0       	ldi	r19, 0x06	; 6
    25f2:	ce 01       	movw	r24, r28
    25f4:	51 d9       	rcall	.-3422   	; 0x1898 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    25f6:	8a a2       	std	Y+34, r8	; 0x22
    25f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25fc:	00 97       	sbiw	r24, 0x00	; 0
    25fe:	99 f0       	breq	.+38     	; 0x2626 <_ZN16Adafruit_SSD13065beginEhhbb+0x118>
    2600:	b1 10       	cpse	r11, r1
    2602:	07 c0       	rjmp	.+14     	; 0x2612 <_ZN16Adafruit_SSD13065beginEhhbb+0x104>
    2604:	2e 81       	ldd	r18, Y+6	; 0x06
    2606:	3f 81       	ldd	r19, Y+7	; 0x07
    2608:	20 32       	cpi	r18, 0x20	; 32
    260a:	31 05       	cpc	r19, r1
    260c:	21 f4       	brne	.+8      	; 0x2616 <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
    260e:	2c e3       	ldi	r18, 0x3C	; 60
    2610:	03 c0       	rjmp	.+6      	; 0x2618 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
    2612:	2b 2d       	mov	r18, r11
    2614:	01 c0       	rjmp	.+2      	; 0x2618 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
    2616:	2d e3       	ldi	r18, 0x3D	; 61
    2618:	29 a3       	std	Y+33, r18	; 0x21
    261a:	99 20       	and	r9, r9
    261c:	09 f4       	brne	.+2      	; 0x2620 <_ZN16Adafruit_SSD13065beginEhhbb+0x112>
    261e:	27 c1       	rjmp	.+590    	; 0x286e <_ZN16Adafruit_SSD13065beginEhhbb+0x360>
    2620:	0e 94 9c 1b 	call	0x3738	; 0x3738 <_ZN7TwoWire5beginEv>
    2624:	78 c0       	rjmp	.+240    	; 0x2716 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    2626:	61 e0       	ldi	r22, 0x01	; 1
    2628:	8e a1       	ldd	r24, Y+38	; 0x26
    262a:	0e 94 b5 22 	call	0x456a	; 0x456a <pinMode>
    262e:	61 e0       	ldi	r22, 0x01	; 1
    2630:	8f a1       	ldd	r24, Y+39	; 0x27
    2632:	0e 94 b5 22 	call	0x456a	; 0x456a <pinMode>
    2636:	8e a1       	ldd	r24, Y+38	; 0x26
    2638:	08 2e       	mov	r0, r24
    263a:	00 0c       	add	r0, r0
    263c:	99 0b       	sbc	r25, r25
    263e:	fc 01       	movw	r30, r24
    2640:	e1 57       	subi	r30, 0x71	; 113
    2642:	f4 4f       	sbci	r31, 0xF4	; 244
    2644:	e4 91       	lpm	r30, Z
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	ee 0f       	add	r30, r30
    264a:	ff 1f       	adc	r31, r31
    264c:	eb 52       	subi	r30, 0x2B	; 43
    264e:	f4 4f       	sbci	r31, 0xF4	; 244
    2650:	25 91       	lpm	r18, Z+
    2652:	34 91       	lpm	r19, Z
    2654:	3e a7       	std	Y+46, r19	; 0x2e
    2656:	2d a7       	std	Y+45, r18	; 0x2d
    2658:	fc 01       	movw	r30, r24
    265a:	e7 5b       	subi	r30, 0xB7	; 183
    265c:	f4 4f       	sbci	r31, 0xF4	; 244
    265e:	e4 91       	lpm	r30, Z
    2660:	eb ab       	std	Y+51, r30	; 0x33
    2662:	8f a1       	ldd	r24, Y+39	; 0x27
    2664:	08 2e       	mov	r0, r24
    2666:	00 0c       	add	r0, r0
    2668:	99 0b       	sbc	r25, r25
    266a:	fc 01       	movw	r30, r24
    266c:	e1 57       	subi	r30, 0x71	; 113
    266e:	f4 4f       	sbci	r31, 0xF4	; 244
    2670:	e4 91       	lpm	r30, Z
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	ee 0f       	add	r30, r30
    2676:	ff 1f       	adc	r31, r31
    2678:	eb 52       	subi	r30, 0x2B	; 43
    267a:	f4 4f       	sbci	r31, 0xF4	; 244
    267c:	a5 91       	lpm	r26, Z+
    267e:	b4 91       	lpm	r27, Z
    2680:	b8 ab       	std	Y+48, r27	; 0x30
    2682:	af a7       	std	Y+47, r26	; 0x2f
    2684:	fc 01       	movw	r30, r24
    2686:	e7 5b       	subi	r30, 0xB7	; 183
    2688:	f4 4f       	sbci	r31, 0xF4	; 244
    268a:	e4 91       	lpm	r30, Z
    268c:	ec ab       	std	Y+52, r30	; 0x34
    268e:	8c 91       	ld	r24, X
    2690:	e8 2b       	or	r30, r24
    2692:	ec 93       	st	X, r30
    2694:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2696:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2698:	89 2b       	or	r24, r25
    269a:	29 f0       	breq	.+10     	; 0x26a6 <_ZN16Adafruit_SSD13065beginEhhbb+0x198>
    269c:	99 20       	and	r9, r9
    269e:	09 f4       	brne	.+2      	; 0x26a2 <_ZN16Adafruit_SSD13065beginEhhbb+0x194>
    26a0:	3a c0       	rjmp	.+116    	; 0x2716 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    26a2:	82 d3       	rcall	.+1796   	; 0x2da8 <_ZN8SPIClass5beginEv>
    26a4:	38 c0       	rjmp	.+112    	; 0x2716 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    26a6:	61 e0       	ldi	r22, 0x01	; 1
    26a8:	8c a1       	ldd	r24, Y+36	; 0x24
    26aa:	0e 94 b5 22 	call	0x456a	; 0x456a <pinMode>
    26ae:	61 e0       	ldi	r22, 0x01	; 1
    26b0:	8d a1       	ldd	r24, Y+37	; 0x25
    26b2:	0e 94 b5 22 	call	0x456a	; 0x456a <pinMode>
    26b6:	8c a1       	ldd	r24, Y+36	; 0x24
    26b8:	08 2e       	mov	r0, r24
    26ba:	00 0c       	add	r0, r0
    26bc:	99 0b       	sbc	r25, r25
    26be:	fc 01       	movw	r30, r24
    26c0:	e1 57       	subi	r30, 0x71	; 113
    26c2:	f4 4f       	sbci	r31, 0xF4	; 244
    26c4:	e4 91       	lpm	r30, Z
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	ee 0f       	add	r30, r30
    26ca:	ff 1f       	adc	r31, r31
    26cc:	eb 52       	subi	r30, 0x2B	; 43
    26ce:	f4 4f       	sbci	r31, 0xF4	; 244
    26d0:	25 91       	lpm	r18, Z+
    26d2:	34 91       	lpm	r19, Z
    26d4:	3a a7       	std	Y+42, r19	; 0x2a
    26d6:	29 a7       	std	Y+41, r18	; 0x29
    26d8:	fc 01       	movw	r30, r24
    26da:	e7 5b       	subi	r30, 0xB7	; 183
    26dc:	f4 4f       	sbci	r31, 0xF4	; 244
    26de:	e4 91       	lpm	r30, Z
    26e0:	e9 ab       	std	Y+49, r30	; 0x31
    26e2:	8d a1       	ldd	r24, Y+37	; 0x25
    26e4:	08 2e       	mov	r0, r24
    26e6:	00 0c       	add	r0, r0
    26e8:	99 0b       	sbc	r25, r25
    26ea:	fc 01       	movw	r30, r24
    26ec:	e1 57       	subi	r30, 0x71	; 113
    26ee:	f4 4f       	sbci	r31, 0xF4	; 244
    26f0:	e4 91       	lpm	r30, Z
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	ee 0f       	add	r30, r30
    26f6:	ff 1f       	adc	r31, r31
    26f8:	eb 52       	subi	r30, 0x2B	; 43
    26fa:	f4 4f       	sbci	r31, 0xF4	; 244
    26fc:	a5 91       	lpm	r26, Z+
    26fe:	b4 91       	lpm	r27, Z
    2700:	bc a7       	std	Y+44, r27	; 0x2c
    2702:	ab a7       	std	Y+43, r26	; 0x2b
    2704:	fc 01       	movw	r30, r24
    2706:	e7 5b       	subi	r30, 0xB7	; 183
    2708:	f4 4f       	sbci	r31, 0xF4	; 244
    270a:	e4 91       	lpm	r30, Z
    270c:	ea ab       	std	Y+50, r30	; 0x32
    270e:	8c 91       	ld	r24, X
    2710:	e0 95       	com	r30
    2712:	e8 23       	and	r30, r24
    2714:	ec 93       	st	X, r30
    2716:	aa 20       	and	r10, r10
    2718:	f1 f0       	breq	.+60     	; 0x2756 <_ZN16Adafruit_SSD13065beginEhhbb+0x248>
    271a:	88 a5       	ldd	r24, Y+40	; 0x28
    271c:	87 fd       	sbrc	r24, 7
    271e:	1b c0       	rjmp	.+54     	; 0x2756 <_ZN16Adafruit_SSD13065beginEhhbb+0x248>
    2720:	61 e0       	ldi	r22, 0x01	; 1
    2722:	0e 94 b5 22 	call	0x456a	; 0x456a <pinMode>
    2726:	61 e0       	ldi	r22, 0x01	; 1
    2728:	88 a5       	ldd	r24, Y+40	; 0x28
    272a:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <digitalWrite>
    272e:	61 e0       	ldi	r22, 0x01	; 1
    2730:	70 e0       	ldi	r23, 0x00	; 0
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	0e 94 c5 21 	call	0x438a	; 0x438a <delay>
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	88 a5       	ldd	r24, Y+40	; 0x28
    273e:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <digitalWrite>
    2742:	6a e0       	ldi	r22, 0x0A	; 10
    2744:	70 e0       	ldi	r23, 0x00	; 0
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	0e 94 c5 21 	call	0x438a	; 0x438a <delay>
    274e:	61 e0       	ldi	r22, 0x01	; 1
    2750:	88 a5       	ldd	r24, Y+40	; 0x28
    2752:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <digitalWrite>
    2756:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2758:	9e 8d       	ldd	r25, Y+30	; 0x1e
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	31 f0       	breq	.+12     	; 0x276a <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>
    275e:	4d a9       	ldd	r20, Y+53	; 0x35
    2760:	5e a9       	ldd	r21, Y+54	; 0x36
    2762:	6f a9       	ldd	r22, Y+55	; 0x37
    2764:	78 ad       	ldd	r23, Y+56	; 0x38
    2766:	f7 d7       	rcall	.+4078   	; 0x3756 <_ZN7TwoWire8setClockEm>
    2768:	0f c0       	rjmp	.+30     	; 0x2788 <_ZN16Adafruit_SSD13065beginEhhbb+0x27a>
    276a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    276c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    276e:	89 2b       	or	r24, r25
    2770:	21 f0       	breq	.+8      	; 0x277a <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>
    2772:	8e ad       	ldd	r24, Y+62	; 0x3e
    2774:	9f ad       	ldd	r25, Y+63	; 0x3f
    2776:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZN8SPIClass16beginTransactionE11SPISettings>
    277a:	ef a5       	ldd	r30, Y+47	; 0x2f
    277c:	f8 a9       	ldd	r31, Y+48	; 0x30
    277e:	90 81       	ld	r25, Z
    2780:	8c a9       	ldd	r24, Y+52	; 0x34
    2782:	80 95       	com	r24
    2784:	89 23       	and	r24, r25
    2786:	80 83       	st	Z, r24
    2788:	44 e0       	ldi	r20, 0x04	; 4
    278a:	6f e5       	ldi	r22, 0x5F	; 95
    278c:	76 e0       	ldi	r23, 0x06	; 6
    278e:	ce 01       	movw	r24, r28
    2790:	f9 dd       	rcall	.-1038   	; 0x2384 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    2792:	6e 81       	ldd	r22, Y+6	; 0x06
    2794:	61 50       	subi	r22, 0x01	; 1
    2796:	ce 01       	movw	r24, r28
    2798:	4f dd       	rcall	.-1378   	; 0x2238 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    279a:	44 e0       	ldi	r20, 0x04	; 4
    279c:	6b e5       	ldi	r22, 0x5B	; 91
    279e:	76 e0       	ldi	r23, 0x06	; 6
    27a0:	ce 01       	movw	r24, r28
    27a2:	f0 dd       	rcall	.-1056   	; 0x2384 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    27a4:	8a a1       	ldd	r24, Y+34	; 0x22
    27a6:	81 30       	cpi	r24, 0x01	; 1
    27a8:	11 f4       	brne	.+4      	; 0x27ae <_ZN16Adafruit_SSD13065beginEhhbb+0x2a0>
    27aa:	60 e1       	ldi	r22, 0x10	; 16
    27ac:	01 c0       	rjmp	.+2      	; 0x27b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x2a2>
    27ae:	64 e1       	ldi	r22, 0x14	; 20
    27b0:	ce 01       	movw	r24, r28
    27b2:	42 dd       	rcall	.-1404   	; 0x2238 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    27b4:	44 e0       	ldi	r20, 0x04	; 4
    27b6:	67 e5       	ldi	r22, 0x57	; 87
    27b8:	76 e0       	ldi	r23, 0x06	; 6
    27ba:	ce 01       	movw	r24, r28
    27bc:	e3 dd       	rcall	.-1082   	; 0x2384 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    27be:	8f e8       	ldi	r24, 0x8F	; 143
    27c0:	8d af       	std	Y+61, r24	; 0x3d
    27c2:	8c 81       	ldd	r24, Y+4	; 0x04
    27c4:	9d 81       	ldd	r25, Y+5	; 0x05
    27c6:	80 38       	cpi	r24, 0x80	; 128
    27c8:	91 05       	cpc	r25, r1
    27ca:	71 f4       	brne	.+28     	; 0x27e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x2da>
    27cc:	8e 81       	ldd	r24, Y+6	; 0x06
    27ce:	9f 81       	ldd	r25, Y+7	; 0x07
    27d0:	80 34       	cpi	r24, 0x40	; 64
    27d2:	91 05       	cpc	r25, r1
    27d4:	b9 f4       	brne	.+46     	; 0x2804 <_ZN16Adafruit_SSD13065beginEhhbb+0x2f6>
    27d6:	8a a1       	ldd	r24, Y+34	; 0x22
    27d8:	81 30       	cpi	r24, 0x01	; 1
    27da:	11 f4       	brne	.+4      	; 0x27e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x2d2>
    27dc:	8f e9       	ldi	r24, 0x9F	; 159
    27de:	01 c0       	rjmp	.+2      	; 0x27e2 <_ZN16Adafruit_SSD13065beginEhhbb+0x2d4>
    27e0:	8f ec       	ldi	r24, 0xCF	; 207
    27e2:	8d af       	std	Y+61, r24	; 0x3d
    27e4:	12 e1       	ldi	r17, 0x12	; 18
    27e6:	0f c0       	rjmp	.+30     	; 0x2806 <_ZN16Adafruit_SSD13065beginEhhbb+0x2f8>
    27e8:	80 36       	cpi	r24, 0x60	; 96
    27ea:	91 05       	cpc	r25, r1
    27ec:	59 f4       	brne	.+22     	; 0x2804 <_ZN16Adafruit_SSD13065beginEhhbb+0x2f6>
    27ee:	8e 81       	ldd	r24, Y+6	; 0x06
    27f0:	9f 81       	ldd	r25, Y+7	; 0x07
    27f2:	40 97       	sbiw	r24, 0x10	; 16
    27f4:	39 f4       	brne	.+14     	; 0x2804 <_ZN16Adafruit_SSD13065beginEhhbb+0x2f6>
    27f6:	8a a1       	ldd	r24, Y+34	; 0x22
    27f8:	81 30       	cpi	r24, 0x01	; 1
    27fa:	11 f4       	brne	.+4      	; 0x2800 <_ZN16Adafruit_SSD13065beginEhhbb+0x2f2>
    27fc:	80 e1       	ldi	r24, 0x10	; 16
    27fe:	01 c0       	rjmp	.+2      	; 0x2802 <_ZN16Adafruit_SSD13065beginEhhbb+0x2f4>
    2800:	8f ea       	ldi	r24, 0xAF	; 175
    2802:	8d af       	std	Y+61, r24	; 0x3d
    2804:	12 e0       	ldi	r17, 0x02	; 2
    2806:	6a ed       	ldi	r22, 0xDA	; 218
    2808:	ce 01       	movw	r24, r28
    280a:	16 dd       	rcall	.-1492   	; 0x2238 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    280c:	61 2f       	mov	r22, r17
    280e:	ce 01       	movw	r24, r28
    2810:	13 dd       	rcall	.-1498   	; 0x2238 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2812:	61 e8       	ldi	r22, 0x81	; 129
    2814:	ce 01       	movw	r24, r28
    2816:	10 dd       	rcall	.-1504   	; 0x2238 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2818:	6d ad       	ldd	r22, Y+61	; 0x3d
    281a:	ce 01       	movw	r24, r28
    281c:	0d dd       	rcall	.-1510   	; 0x2238 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    281e:	69 ed       	ldi	r22, 0xD9	; 217
    2820:	ce 01       	movw	r24, r28
    2822:	0a dd       	rcall	.-1516   	; 0x2238 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2824:	8a a1       	ldd	r24, Y+34	; 0x22
    2826:	81 30       	cpi	r24, 0x01	; 1
    2828:	11 f4       	brne	.+4      	; 0x282e <_ZN16Adafruit_SSD13065beginEhhbb+0x320>
    282a:	62 e2       	ldi	r22, 0x22	; 34
    282c:	01 c0       	rjmp	.+2      	; 0x2830 <_ZN16Adafruit_SSD13065beginEhhbb+0x322>
    282e:	61 ef       	ldi	r22, 0xF1	; 241
    2830:	ce 01       	movw	r24, r28
    2832:	02 dd       	rcall	.-1532   	; 0x2238 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2834:	46 e0       	ldi	r20, 0x06	; 6
    2836:	61 e5       	ldi	r22, 0x51	; 81
    2838:	76 e0       	ldi	r23, 0x06	; 6
    283a:	ce 01       	movw	r24, r28
    283c:	a3 dd       	rcall	.-1210   	; 0x2384 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    283e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2840:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2842:	00 97       	sbiw	r24, 0x00	; 0
    2844:	31 f0       	breq	.+12     	; 0x2852 <_ZN16Adafruit_SSD13065beginEhhbb+0x344>
    2846:	49 ad       	ldd	r20, Y+57	; 0x39
    2848:	5a ad       	ldd	r21, Y+58	; 0x3a
    284a:	6b ad       	ldd	r22, Y+59	; 0x3b
    284c:	7c ad       	ldd	r23, Y+60	; 0x3c
    284e:	83 d7       	rcall	.+3846   	; 0x3756 <_ZN7TwoWire8setClockEm>
    2850:	0c c0       	rjmp	.+24     	; 0x286a <_ZN16Adafruit_SSD13065beginEhhbb+0x35c>
    2852:	ef a5       	ldd	r30, Y+47	; 0x2f
    2854:	f8 a9       	ldd	r31, Y+48	; 0x30
    2856:	90 81       	ld	r25, Z
    2858:	8c a9       	ldd	r24, Y+52	; 0x34
    285a:	89 2b       	or	r24, r25
    285c:	80 83       	st	Z, r24
    285e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2860:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2862:	89 2b       	or	r24, r25
    2864:	11 f0       	breq	.+4      	; 0x286a <_ZN16Adafruit_SSD13065beginEhhbb+0x35c>
    2866:	0e 94 7e 09 	call	0x12fc	; 0x12fc <_ZN8SPIClass14endTransactionEv>
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	03 c0       	rjmp	.+6      	; 0x2874 <_ZN16Adafruit_SSD13065beginEhhbb+0x366>
    286e:	a1 10       	cpse	r10, r1
    2870:	54 cf       	rjmp	.-344    	; 0x271a <_ZN16Adafruit_SSD13065beginEhhbb+0x20c>
    2872:	75 cf       	rjmp	.-278    	; 0x275e <_ZN16Adafruit_SSD13065beginEhhbb+0x250>
    2874:	df 91       	pop	r29
    2876:	cf 91       	pop	r28
    2878:	1f 91       	pop	r17
    287a:	0f 91       	pop	r16
    287c:	ff 90       	pop	r15
    287e:	ef 90       	pop	r14
    2880:	df 90       	pop	r13
    2882:	cf 90       	pop	r12
    2884:	bf 90       	pop	r11
    2886:	af 90       	pop	r10
    2888:	9f 90       	pop	r9
    288a:	8f 90       	pop	r8
    288c:	08 95       	ret

0000288e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>:
    288e:	0f 93       	push	r16
    2890:	1f 93       	push	r17
    2892:	cf 93       	push	r28
    2894:	df 93       	push	r29
    2896:	dc 01       	movw	r26, r24
    2898:	57 fd       	sbrc	r21, 7
    289a:	64 c0       	rjmp	.+200    	; 0x2964 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    289c:	16 96       	adiw	r26, 0x06	; 6
    289e:	8d 91       	ld	r24, X+
    28a0:	9c 91       	ld	r25, X
    28a2:	17 97       	sbiw	r26, 0x07	; 7
    28a4:	48 17       	cp	r20, r24
    28a6:	59 07       	cpc	r21, r25
    28a8:	0c f0       	brlt	.+2      	; 0x28ac <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1e>
    28aa:	5c c0       	rjmp	.+184    	; 0x2964 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    28ac:	77 ff       	sbrs	r23, 7
    28ae:	04 c0       	rjmp	.+8      	; 0x28b8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x2a>
    28b0:	26 0f       	add	r18, r22
    28b2:	37 1f       	adc	r19, r23
    28b4:	60 e0       	ldi	r22, 0x00	; 0
    28b6:	70 e0       	ldi	r23, 0x00	; 0
    28b8:	14 96       	adiw	r26, 0x04	; 4
    28ba:	cd 91       	ld	r28, X+
    28bc:	dc 91       	ld	r29, X
    28be:	15 97       	sbiw	r26, 0x05	; 5
    28c0:	cb 01       	movw	r24, r22
    28c2:	82 0f       	add	r24, r18
    28c4:	93 1f       	adc	r25, r19
    28c6:	c8 17       	cp	r28, r24
    28c8:	d9 07       	cpc	r29, r25
    28ca:	1c f4       	brge	.+6      	; 0x28d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x44>
    28cc:	9e 01       	movw	r18, r28
    28ce:	26 1b       	sub	r18, r22
    28d0:	37 0b       	sbc	r19, r23
    28d2:	12 16       	cp	r1, r18
    28d4:	13 06       	cpc	r1, r19
    28d6:	0c f0       	brlt	.+2      	; 0x28da <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x4c>
    28d8:	45 c0       	rjmp	.+138    	; 0x2964 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    28da:	fa 01       	movw	r30, r20
    28dc:	57 fd       	sbrc	r21, 7
    28de:	37 96       	adiw	r30, 0x07	; 7
    28e0:	cf 01       	movw	r24, r30
    28e2:	e3 e0       	ldi	r30, 0x03	; 3
    28e4:	95 95       	asr	r25
    28e6:	87 95       	ror	r24
    28e8:	ea 95       	dec	r30
    28ea:	e1 f7       	brne	.-8      	; 0x28e4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x56>
    28ec:	8c 9f       	mul	r24, r28
    28ee:	f0 01       	movw	r30, r0
    28f0:	8d 9f       	mul	r24, r29
    28f2:	f0 0d       	add	r31, r0
    28f4:	9c 9f       	mul	r25, r28
    28f6:	f0 0d       	add	r31, r0
    28f8:	11 24       	eor	r1, r1
    28fa:	6e 0f       	add	r22, r30
    28fc:	7f 1f       	adc	r23, r31
    28fe:	5f 96       	adiw	r26, 0x1f	; 31
    2900:	ed 91       	ld	r30, X+
    2902:	fc 91       	ld	r31, X
    2904:	90 97       	sbiw	r26, 0x20	; 32
    2906:	e6 0f       	add	r30, r22
    2908:	f7 1f       	adc	r31, r23
    290a:	47 70       	andi	r20, 0x07	; 7
    290c:	55 27       	eor	r21, r21
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	01 c0       	rjmp	.+2      	; 0x2916 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x88>
    2914:	88 0f       	add	r24, r24
    2916:	4a 95       	dec	r20
    2918:	ea f7       	brpl	.-6      	; 0x2914 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x86>
    291a:	48 2f       	mov	r20, r24
    291c:	01 30       	cpi	r16, 0x01	; 1
    291e:	11 05       	cpc	r17, r1
    2920:	39 f0       	breq	.+14     	; 0x2930 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa2>
    2922:	78 f0       	brcs	.+30     	; 0x2942 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xb4>
    2924:	02 30       	cpi	r16, 0x02	; 2
    2926:	11 05       	cpc	r17, r1
    2928:	e9 f4       	brne	.+58     	; 0x2964 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    292a:	2e 0f       	add	r18, r30
    292c:	3f 1f       	adc	r19, r31
    292e:	13 c0       	rjmp	.+38     	; 0x2956 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    2930:	2e 0f       	add	r18, r30
    2932:	3f 1f       	adc	r19, r31
    2934:	e2 17       	cp	r30, r18
    2936:	f3 07       	cpc	r31, r19
    2938:	a9 f0       	breq	.+42     	; 0x2964 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    293a:	80 81       	ld	r24, Z
    293c:	84 2b       	or	r24, r20
    293e:	81 93       	st	Z+, r24
    2940:	f9 cf       	rjmp	.-14     	; 0x2934 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa6>
    2942:	80 95       	com	r24
    2944:	2e 0f       	add	r18, r30
    2946:	3f 1f       	adc	r19, r31
    2948:	e2 17       	cp	r30, r18
    294a:	f3 07       	cpc	r31, r19
    294c:	59 f0       	breq	.+22     	; 0x2964 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    294e:	90 81       	ld	r25, Z
    2950:	98 23       	and	r25, r24
    2952:	91 93       	st	Z+, r25
    2954:	f9 cf       	rjmp	.-14     	; 0x2948 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xba>
    2956:	e2 17       	cp	r30, r18
    2958:	f3 07       	cpc	r31, r19
    295a:	21 f0       	breq	.+8      	; 0x2964 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    295c:	80 81       	ld	r24, Z
    295e:	84 27       	eor	r24, r20
    2960:	81 93       	st	Z+, r24
    2962:	f9 cf       	rjmp	.-14     	; 0x2956 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    2964:	df 91       	pop	r29
    2966:	cf 91       	pop	r28
    2968:	1f 91       	pop	r17
    296a:	0f 91       	pop	r16
    296c:	08 95       	ret

0000296e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>:
    296e:	ef 92       	push	r14
    2970:	ff 92       	push	r15
    2972:	0f 93       	push	r16
    2974:	1f 93       	push	r17
    2976:	cf 93       	push	r28
    2978:	df 93       	push	r29
    297a:	ec 01       	movw	r28, r24
    297c:	77 fd       	sbrc	r23, 7
    297e:	a5 c0       	rjmp	.+330    	; 0x2aca <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2980:	ec 80       	ldd	r14, Y+4	; 0x04
    2982:	fd 80       	ldd	r15, Y+5	; 0x05
    2984:	6e 15       	cp	r22, r14
    2986:	7f 05       	cpc	r23, r15
    2988:	0c f0       	brlt	.+2      	; 0x298c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1e>
    298a:	9f c0       	rjmp	.+318    	; 0x2aca <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    298c:	57 ff       	sbrs	r21, 7
    298e:	04 c0       	rjmp	.+8      	; 0x2998 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2a>
    2990:	24 0f       	add	r18, r20
    2992:	35 1f       	adc	r19, r21
    2994:	40 e0       	ldi	r20, 0x00	; 0
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	8e 81       	ldd	r24, Y+6	; 0x06
    299a:	9f 81       	ldd	r25, Y+7	; 0x07
    299c:	fa 01       	movw	r30, r20
    299e:	e2 0f       	add	r30, r18
    29a0:	f3 1f       	adc	r31, r19
    29a2:	8e 17       	cp	r24, r30
    29a4:	9f 07       	cpc	r25, r31
    29a6:	1c f4       	brge	.+6      	; 0x29ae <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x40>
    29a8:	9c 01       	movw	r18, r24
    29aa:	24 1b       	sub	r18, r20
    29ac:	35 0b       	sbc	r19, r21
    29ae:	12 16       	cp	r1, r18
    29b0:	13 06       	cpc	r1, r19
    29b2:	0c f0       	brlt	.+2      	; 0x29b6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x48>
    29b4:	8a c0       	rjmp	.+276    	; 0x2aca <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    29b6:	92 2f       	mov	r25, r18
    29b8:	84 2f       	mov	r24, r20
    29ba:	86 95       	lsr	r24
    29bc:	86 95       	lsr	r24
    29be:	86 95       	lsr	r24
    29c0:	8e 9d       	mul	r24, r14
    29c2:	d0 01       	movw	r26, r0
    29c4:	8f 9d       	mul	r24, r15
    29c6:	b0 0d       	add	r27, r0
    29c8:	11 24       	eor	r1, r1
    29ca:	6a 0f       	add	r22, r26
    29cc:	7b 1f       	adc	r23, r27
    29ce:	af 8d       	ldd	r26, Y+31	; 0x1f
    29d0:	b8 a1       	ldd	r27, Y+32	; 0x20
    29d2:	a6 0f       	add	r26, r22
    29d4:	b7 1f       	adc	r27, r23
    29d6:	47 70       	andi	r20, 0x07	; 7
    29d8:	b1 f1       	breq	.+108    	; 0x2a46 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    29da:	88 e0       	ldi	r24, 0x08	; 8
    29dc:	84 1b       	sub	r24, r20
    29de:	48 2f       	mov	r20, r24
    29e0:	68 2f       	mov	r22, r24
    29e2:	70 e0       	ldi	r23, 0x00	; 0
    29e4:	fb 01       	movw	r30, r22
    29e6:	e7 5b       	subi	r30, 0xB7	; 183
    29e8:	f9 4f       	sbci	r31, 0xF9	; 249
    29ea:	e4 91       	lpm	r30, Z
    29ec:	28 17       	cp	r18, r24
    29ee:	98 f4       	brcc	.+38     	; 0x2a16 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa8>
    29f0:	62 1b       	sub	r22, r18
    29f2:	71 09       	sbc	r23, r1
    29f4:	2f ef       	ldi	r18, 0xFF	; 255
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	02 c0       	rjmp	.+4      	; 0x29fe <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x90>
    29fa:	35 95       	asr	r19
    29fc:	27 95       	ror	r18
    29fe:	6a 95       	dec	r22
    2a00:	e2 f7       	brpl	.-8      	; 0x29fa <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x8c>
    2a02:	e2 23       	and	r30, r18
    2a04:	01 30       	cpi	r16, 0x01	; 1
    2a06:	11 05       	cpc	r17, r1
    2a08:	49 f0       	breq	.+18     	; 0x2a1c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xae>
    2a0a:	78 f0       	brcs	.+30     	; 0x2a2a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    2a0c:	02 30       	cpi	r16, 0x02	; 2
    2a0e:	11 05       	cpc	r17, r1
    2a10:	09 f0       	breq	.+2      	; 0x2a14 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa6>
    2a12:	5b c0       	rjmp	.+182    	; 0x2aca <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2a14:	0e c0       	rjmp	.+28     	; 0x2a32 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    2a16:	01 30       	cpi	r16, 0x01	; 1
    2a18:	11 05       	cpc	r17, r1
    2a1a:	19 f4       	brne	.+6      	; 0x2a22 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xb4>
    2a1c:	8c 91       	ld	r24, X
    2a1e:	e8 2b       	or	r30, r24
    2a20:	0a c0       	rjmp	.+20     	; 0x2a36 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    2a22:	01 30       	cpi	r16, 0x01	; 1
    2a24:	11 05       	cpc	r17, r1
    2a26:	08 f0       	brcs	.+2      	; 0x2a2a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    2a28:	49 c0       	rjmp	.+146    	; 0x2abc <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14e>
    2a2a:	e0 95       	com	r30
    2a2c:	8c 91       	ld	r24, X
    2a2e:	e8 23       	and	r30, r24
    2a30:	02 c0       	rjmp	.+4      	; 0x2a36 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    2a32:	8c 91       	ld	r24, X
    2a34:	e8 27       	eor	r30, r24
    2a36:	ec 93       	st	X, r30
    2a38:	94 17       	cp	r25, r20
    2a3a:	08 f4       	brcc	.+2      	; 0x2a3e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd0>
    2a3c:	46 c0       	rjmp	.+140    	; 0x2aca <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2a3e:	2c 81       	ldd	r18, Y+4	; 0x04
    2a40:	3d 81       	ldd	r19, Y+5	; 0x05
    2a42:	a2 0f       	add	r26, r18
    2a44:	b3 1f       	adc	r27, r19
    2a46:	e9 2f       	mov	r30, r25
    2a48:	e4 1b       	sub	r30, r20
    2a4a:	e8 30       	cpi	r30, 0x08	; 8
    2a4c:	f8 f0       	brcs	.+62     	; 0x2a8c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11e>
    2a4e:	02 30       	cpi	r16, 0x02	; 2
    2a50:	11 05       	cpc	r17, r1
    2a52:	61 f4       	brne	.+24     	; 0x2a6c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xfe>
    2a54:	8e 2f       	mov	r24, r30
    2a56:	9c 91       	ld	r25, X
    2a58:	90 95       	com	r25
    2a5a:	9c 93       	st	X, r25
    2a5c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a5e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a60:	a2 0f       	add	r26, r18
    2a62:	b3 1f       	adc	r27, r19
    2a64:	88 50       	subi	r24, 0x08	; 8
    2a66:	88 30       	cpi	r24, 0x08	; 8
    2a68:	b0 f7       	brcc	.-20     	; 0x2a56 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xe8>
    2a6a:	0f c0       	rjmp	.+30     	; 0x2a8a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11c>
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	01 15       	cp	r16, r1
    2a70:	11 05       	cpc	r17, r1
    2a72:	09 f4       	brne	.+2      	; 0x2a76 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x108>
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	81 95       	neg	r24
    2a78:	9e 2f       	mov	r25, r30
    2a7a:	8c 93       	st	X, r24
    2a7c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a7e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a80:	a2 0f       	add	r26, r18
    2a82:	b3 1f       	adc	r27, r19
    2a84:	98 50       	subi	r25, 0x08	; 8
    2a86:	98 30       	cpi	r25, 0x08	; 8
    2a88:	c0 f7       	brcc	.-16     	; 0x2a7a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x10c>
    2a8a:	e7 70       	andi	r30, 0x07	; 7
    2a8c:	ee 23       	and	r30, r30
    2a8e:	e9 f0       	breq	.+58     	; 0x2aca <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	ef 5b       	subi	r30, 0xBF	; 191
    2a94:	f9 4f       	sbci	r31, 0xF9	; 249
    2a96:	e4 91       	lpm	r30, Z
    2a98:	01 30       	cpi	r16, 0x01	; 1
    2a9a:	11 05       	cpc	r17, r1
    2a9c:	39 f0       	breq	.+14     	; 0x2aac <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x13e>
    2a9e:	48 f0       	brcs	.+18     	; 0x2ab2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x144>
    2aa0:	02 30       	cpi	r16, 0x02	; 2
    2aa2:	11 05       	cpc	r17, r1
    2aa4:	91 f4       	brne	.+36     	; 0x2aca <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2aa6:	8c 91       	ld	r24, X
    2aa8:	e8 27       	eor	r30, r24
    2aaa:	06 c0       	rjmp	.+12     	; 0x2ab8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    2aac:	8c 91       	ld	r24, X
    2aae:	e8 2b       	or	r30, r24
    2ab0:	03 c0       	rjmp	.+6      	; 0x2ab8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    2ab2:	e0 95       	com	r30
    2ab4:	8c 91       	ld	r24, X
    2ab6:	e8 23       	and	r30, r24
    2ab8:	ec 93       	st	X, r30
    2aba:	07 c0       	rjmp	.+14     	; 0x2aca <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2abc:	02 30       	cpi	r16, 0x02	; 2
    2abe:	11 05       	cpc	r17, r1
    2ac0:	09 f4       	brne	.+2      	; 0x2ac4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x156>
    2ac2:	b7 cf       	rjmp	.-146    	; 0x2a32 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    2ac4:	ae 0d       	add	r26, r14
    2ac6:	bf 1d       	adc	r27, r15
    2ac8:	be cf       	rjmp	.-132    	; 0x2a46 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	ff 90       	pop	r15
    2ad4:	ef 90       	pop	r14
    2ad6:	08 95       	ret

00002ad8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    2ad8:	0f 93       	push	r16
    2ada:	1f 93       	push	r17
    2adc:	dc 01       	movw	r26, r24
    2ade:	56 96       	adiw	r26, 0x16	; 22
    2ae0:	ec 91       	ld	r30, X
    2ae2:	56 97       	sbiw	r26, 0x16	; 22
    2ae4:	e2 30       	cpi	r30, 0x02	; 2
    2ae6:	61 f0       	breq	.+24     	; 0x2b00 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28>
    2ae8:	e3 30       	cpi	r30, 0x03	; 3
    2aea:	09 f1       	breq	.+66     	; 0x2b2e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x56>
    2aec:	e1 30       	cpi	r30, 0x01	; 1
    2aee:	79 f5       	brne	.+94     	; 0x2b4e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x76>
    2af0:	14 96       	adiw	r26, 0x04	; 4
    2af2:	ed 91       	ld	r30, X+
    2af4:	fc 91       	ld	r31, X
    2af6:	15 97       	sbiw	r26, 0x05	; 5
    2af8:	e4 1b       	sub	r30, r20
    2afa:	f5 0b       	sbc	r31, r21
    2afc:	31 97       	sbiw	r30, 0x01	; 1
    2afe:	23 c0       	rjmp	.+70     	; 0x2b46 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x6e>
    2b00:	dc 01       	movw	r26, r24
    2b02:	14 96       	adiw	r26, 0x04	; 4
    2b04:	ed 91       	ld	r30, X+
    2b06:	fc 91       	ld	r31, X
    2b08:	15 97       	sbiw	r26, 0x05	; 5
    2b0a:	df 01       	movw	r26, r30
    2b0c:	a6 1b       	sub	r26, r22
    2b0e:	b7 0b       	sbc	r27, r23
    2b10:	bd 01       	movw	r22, r26
    2b12:	dc 01       	movw	r26, r24
    2b14:	16 96       	adiw	r26, 0x06	; 6
    2b16:	ed 91       	ld	r30, X+
    2b18:	fc 91       	ld	r31, X
    2b1a:	17 97       	sbiw	r26, 0x07	; 7
    2b1c:	df 01       	movw	r26, r30
    2b1e:	a4 1b       	sub	r26, r20
    2b20:	b5 0b       	sbc	r27, r21
    2b22:	ad 01       	movw	r20, r26
    2b24:	41 50       	subi	r20, 0x01	; 1
    2b26:	51 09       	sbc	r21, r1
    2b28:	62 1b       	sub	r22, r18
    2b2a:	73 0b       	sbc	r23, r19
    2b2c:	10 c0       	rjmp	.+32     	; 0x2b4e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x76>
    2b2e:	fa 01       	movw	r30, r20
    2b30:	dc 01       	movw	r26, r24
    2b32:	16 96       	adiw	r26, 0x06	; 6
    2b34:	4d 91       	ld	r20, X+
    2b36:	5c 91       	ld	r21, X
    2b38:	17 97       	sbiw	r26, 0x07	; 7
    2b3a:	da 01       	movw	r26, r20
    2b3c:	a6 1b       	sub	r26, r22
    2b3e:	b7 0b       	sbc	r27, r23
    2b40:	bd 01       	movw	r22, r26
    2b42:	62 1b       	sub	r22, r18
    2b44:	73 0b       	sbc	r23, r19
    2b46:	ab 01       	movw	r20, r22
    2b48:	bf 01       	movw	r22, r30
    2b4a:	11 df       	rcall	.-478    	; 0x296e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    2b4c:	01 c0       	rjmp	.+2      	; 0x2b50 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    2b4e:	9f de       	rcall	.-706    	; 0x288e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    2b50:	1f 91       	pop	r17
    2b52:	0f 91       	pop	r16
    2b54:	08 95       	ret

00002b56 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    2b56:	0f 93       	push	r16
    2b58:	1f 93       	push	r17
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	56 96       	adiw	r26, 0x16	; 22
    2b5e:	ec 91       	ld	r30, X
    2b60:	56 97       	sbiw	r26, 0x16	; 22
    2b62:	e2 30       	cpi	r30, 0x02	; 2
    2b64:	69 f0       	breq	.+26     	; 0x2b80 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a>
    2b66:	e3 30       	cpi	r30, 0x03	; 3
    2b68:	11 f1       	breq	.+68     	; 0x2bae <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x58>
    2b6a:	e1 30       	cpi	r30, 0x01	; 1
    2b6c:	81 f5       	brne	.+96     	; 0x2bce <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x78>
    2b6e:	14 96       	adiw	r26, 0x04	; 4
    2b70:	ed 91       	ld	r30, X+
    2b72:	fc 91       	ld	r31, X
    2b74:	15 97       	sbiw	r26, 0x05	; 5
    2b76:	e4 1b       	sub	r30, r20
    2b78:	f5 0b       	sbc	r31, r21
    2b7a:	e2 1b       	sub	r30, r18
    2b7c:	f3 0b       	sbc	r31, r19
    2b7e:	23 c0       	rjmp	.+70     	; 0x2bc6 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x70>
    2b80:	dc 01       	movw	r26, r24
    2b82:	14 96       	adiw	r26, 0x04	; 4
    2b84:	ed 91       	ld	r30, X+
    2b86:	fc 91       	ld	r31, X
    2b88:	15 97       	sbiw	r26, 0x05	; 5
    2b8a:	df 01       	movw	r26, r30
    2b8c:	a6 1b       	sub	r26, r22
    2b8e:	b7 0b       	sbc	r27, r23
    2b90:	bd 01       	movw	r22, r26
    2b92:	61 50       	subi	r22, 0x01	; 1
    2b94:	71 09       	sbc	r23, r1
    2b96:	dc 01       	movw	r26, r24
    2b98:	16 96       	adiw	r26, 0x06	; 6
    2b9a:	ed 91       	ld	r30, X+
    2b9c:	fc 91       	ld	r31, X
    2b9e:	17 97       	sbiw	r26, 0x07	; 7
    2ba0:	df 01       	movw	r26, r30
    2ba2:	a4 1b       	sub	r26, r20
    2ba4:	b5 0b       	sbc	r27, r21
    2ba6:	ad 01       	movw	r20, r26
    2ba8:	42 1b       	sub	r20, r18
    2baa:	53 0b       	sbc	r21, r19
    2bac:	10 c0       	rjmp	.+32     	; 0x2bce <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x78>
    2bae:	fa 01       	movw	r30, r20
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	16 96       	adiw	r26, 0x06	; 6
    2bb4:	4d 91       	ld	r20, X+
    2bb6:	5c 91       	ld	r21, X
    2bb8:	17 97       	sbiw	r26, 0x07	; 7
    2bba:	da 01       	movw	r26, r20
    2bbc:	a6 1b       	sub	r26, r22
    2bbe:	b7 0b       	sbc	r27, r23
    2bc0:	bd 01       	movw	r22, r26
    2bc2:	61 50       	subi	r22, 0x01	; 1
    2bc4:	71 09       	sbc	r23, r1
    2bc6:	ab 01       	movw	r20, r22
    2bc8:	bf 01       	movw	r22, r30
    2bca:	61 de       	rcall	.-830    	; 0x288e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    2bcc:	01 c0       	rjmp	.+2      	; 0x2bd0 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    2bce:	cf de       	rcall	.-610    	; 0x296e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    2bd0:	1f 91       	pop	r17
    2bd2:	0f 91       	pop	r16
    2bd4:	08 95       	ret

00002bd6 <_ZN16Adafruit_SSD13067displayEv>:
    @return None (void).
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
    2bd6:	cf 92       	push	r12
    2bd8:	df 92       	push	r13
    2bda:	ef 92       	push	r14
    2bdc:	ff 92       	push	r15
    2bde:	0f 93       	push	r16
    2be0:	1f 93       	push	r17
    2be2:	cf 93       	push	r28
    2be4:	df 93       	push	r29
    2be6:	ec 01       	movw	r28, r24
  TRANSACTION_START
    2be8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	31 f0       	breq	.+12     	; 0x2bfc <_ZN16Adafruit_SSD13067displayEv+0x26>
    2bf0:	4d a9       	ldd	r20, Y+53	; 0x35
    2bf2:	5e a9       	ldd	r21, Y+54	; 0x36
    2bf4:	6f a9       	ldd	r22, Y+55	; 0x37
    2bf6:	78 ad       	ldd	r23, Y+56	; 0x38
    2bf8:	ae d5       	rcall	.+2908   	; 0x3756 <_ZN7TwoWire8setClockEm>
    2bfa:	0f c0       	rjmp	.+30     	; 0x2c1a <_ZN16Adafruit_SSD13067displayEv+0x44>
    2bfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c00:	89 2b       	or	r24, r25
    2c02:	21 f0       	breq	.+8      	; 0x2c0c <_ZN16Adafruit_SSD13067displayEv+0x36>
    2c04:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c06:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c08:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2c0c:	ef a5       	ldd	r30, Y+47	; 0x2f
    2c0e:	f8 a9       	ldd	r31, Y+48	; 0x30
    2c10:	90 81       	ld	r25, Z
    2c12:	8c a9       	ldd	r24, Y+52	; 0x34
    2c14:	80 95       	com	r24
    2c16:	89 23       	and	r24, r25
    2c18:	80 83       	st	Z, r24
  static const uint8_t PROGMEM dlist1[] = {
      SSD1306_PAGEADDR,
      0,                      // Page start address
      0xFF,                   // Page end (not really, but works here)
      SSD1306_COLUMNADDR, 0}; // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
    2c1a:	45 e0       	ldi	r20, 0x05	; 5
    2c1c:	6c e3       	ldi	r22, 0x3C	; 60
    2c1e:	76 e0       	ldi	r23, 0x06	; 6
    2c20:	ce 01       	movw	r24, r28
    2c22:	b0 db       	rcall	.-2208   	; 0x2384 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
    2c24:	6c 81       	ldd	r22, Y+4	; 0x04
    2c26:	61 50       	subi	r22, 0x01	; 1
    2c28:	ce 01       	movw	r24, r28
    2c2a:	06 db       	rcall	.-2548   	; 0x2238 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    2c2c:	2e 81       	ldd	r18, Y+6	; 0x06
    2c2e:	3f 81       	ldd	r19, Y+7	; 0x07
    2c30:	c9 01       	movw	r24, r18
    2c32:	07 96       	adiw	r24, 0x07	; 7
    2c34:	97 fd       	sbrc	r25, 7
    2c36:	07 96       	adiw	r24, 0x07	; 7
    2c38:	23 e0       	ldi	r18, 0x03	; 3
    2c3a:	95 95       	asr	r25
    2c3c:	87 95       	ror	r24
    2c3e:	2a 95       	dec	r18
    2c40:	e1 f7       	brne	.-8      	; 0x2c3a <_ZN16Adafruit_SSD13067displayEv+0x64>
    2c42:	2c 81       	ldd	r18, Y+4	; 0x04
    2c44:	3d 81       	ldd	r19, Y+5	; 0x05
    2c46:	82 9f       	mul	r24, r18
    2c48:	70 01       	movw	r14, r0
    2c4a:	83 9f       	mul	r24, r19
    2c4c:	f0 0c       	add	r15, r0
    2c4e:	92 9f       	mul	r25, r18
    2c50:	f0 0c       	add	r15, r0
    2c52:	11 24       	eor	r1, r1
  uint8_t *ptr = buffer;
    2c54:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2c56:	18 a1       	ldd	r17, Y+32	; 0x20
  if (wire) { // I2C
    2c58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c5c:	e0 0e       	add	r14, r16
    2c5e:	f1 1e       	adc	r15, r17
    2c60:	00 97       	sbiw	r24, 0x00	; 0
    2c62:	09 f4       	brne	.+2      	; 0x2c66 <_ZN16Adafruit_SSD13067displayEv+0x90>
    2c64:	3f c0       	rjmp	.+126    	; 0x2ce4 <_ZN16Adafruit_SSD13067displayEv+0x10e>
    wire->beginTransmission(i2caddr);
    2c66:	69 a1       	ldd	r22, Y+33	; 0x21
    2c68:	06 2e       	mov	r0, r22
    2c6a:	00 0c       	add	r0, r0
    2c6c:	77 0b       	sbc	r23, r23
    2c6e:	80 d5       	rcall	.+2816   	; 0x3770 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
    2c70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c74:	dc 01       	movw	r26, r24
    2c76:	ed 91       	ld	r30, X+
    2c78:	fc 91       	ld	r31, X
    2c7a:	01 90       	ld	r0, Z+
    2c7c:	f0 81       	ld	r31, Z
    2c7e:	e0 2d       	mov	r30, r0
    2c80:	60 e4       	ldi	r22, 0x40	; 64
    2c82:	19 95       	eicall
    2c84:	68 01       	movw	r12, r16
    uint16_t bytesOut = 1;
    2c86:	01 e0       	ldi	r16, 0x01	; 1
    2c88:	10 e0       	ldi	r17, 0x00	; 0
    2c8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    while (count--) {
    2c8e:	ec 14       	cp	r14, r12
    2c90:	fd 04       	cpc	r15, r13
      if (bytesOut >= WIRE_MAX) {
    2c92:	31 f1       	breq	.+76     	; 0x2ce0 <_ZN16Adafruit_SSD13067displayEv+0x10a>
    2c94:	00 32       	cpi	r16, 0x20	; 32
    2c96:	11 05       	cpc	r17, r1
        wire->endTransmission();
    2c98:	a0 f0       	brcs	.+40     	; 0x2cc2 <_ZN16Adafruit_SSD13067displayEv+0xec>
    2c9a:	df d5       	rcall	.+3006   	; 0x385a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
    2c9c:	69 a1       	ldd	r22, Y+33	; 0x21
    2c9e:	06 2e       	mov	r0, r22
    2ca0:	00 0c       	add	r0, r0
    2ca2:	77 0b       	sbc	r23, r23
    2ca4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ca6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ca8:	63 d5       	rcall	.+2758   	; 0x3770 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
    2caa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cae:	dc 01       	movw	r26, r24
    2cb0:	ed 91       	ld	r30, X+
    2cb2:	fc 91       	ld	r31, X
    2cb4:	01 90       	ld	r0, Z+
    2cb6:	f0 81       	ld	r31, Z
    2cb8:	e0 2d       	mov	r30, r0
    2cba:	60 e4       	ldi	r22, 0x40	; 64
    2cbc:	19 95       	eicall
        bytesOut = 1;
    2cbe:	01 e0       	ldi	r16, 0x01	; 1
    2cc0:	10 e0       	ldi	r17, 0x00	; 0
      }
      WIRE_WRITE(*ptr++);
    2cc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cc4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cc6:	f6 01       	movw	r30, r12
    2cc8:	61 91       	ld	r22, Z+
    2cca:	6f 01       	movw	r12, r30
    2ccc:	dc 01       	movw	r26, r24
    2cce:	ed 91       	ld	r30, X+
    2cd0:	fc 91       	ld	r31, X
    2cd2:	01 90       	ld	r0, Z+
    2cd4:	f0 81       	ld	r31, Z
    2cd6:	e0 2d       	mov	r30, r0
      bytesOut++;
    2cd8:	19 95       	eicall
    2cda:	0f 5f       	subi	r16, 0xFF	; 255
  uint8_t *ptr = buffer;
  if (wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    uint16_t bytesOut = 1;
    while (count--) {
    2cdc:	1f 4f       	sbci	r17, 0xFF	; 255
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
    2cde:	d5 cf       	rjmp	.-86     	; 0x2c8a <_ZN16Adafruit_SSD13067displayEv+0xb4>
    2ce0:	bc d5       	rcall	.+2936   	; 0x385a <_ZN7TwoWire15endTransmissionEv>
    2ce2:	34 c0       	rjmp	.+104    	; 0x2d4c <_ZN16Adafruit_SSD13067displayEv+0x176>
  } else { // SPI
    SSD1306_MODE_DATA
    2ce4:	ed a5       	ldd	r30, Y+45	; 0x2d
    2ce6:	fe a5       	ldd	r31, Y+46	; 0x2e
    2ce8:	90 81       	ld	r25, Z
    2cea:	8b a9       	ldd	r24, Y+51	; 0x33
    2cec:	89 2b       	or	r24, r25
    2cee:	80 83       	st	Z, r24
    while (count--)
    2cf0:	0e 15       	cp	r16, r14
    2cf2:	1f 05       	cpc	r17, r15
    2cf4:	59 f1       	breq	.+86     	; 0x2d4c <_ZN16Adafruit_SSD13067displayEv+0x176>
      SPIwrite(*ptr++);
    2cf6:	f8 01       	movw	r30, r16
    2cf8:	81 91       	ld	r24, Z+
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    2cfa:	8f 01       	movw	r16, r30
    2cfc:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2cfe:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2d00:	23 2b       	or	r18, r19
    (void)spi->transfer(d);
    2d02:	11 f0       	breq	.+4      	; 0x2d08 <_ZN16Adafruit_SSD13067displayEv+0x132>
    2d04:	3c da       	rcall	.-2952   	; 0x217e <_ZN8SPIClass8transferEh>
    2d06:	f4 cf       	rjmp	.-24     	; 0x2cf0 <_ZN16Adafruit_SSD13067displayEv+0x11a>
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    2d08:	28 e0       	ldi	r18, 0x08	; 8
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e8       	ldi	r20, 0x80	; 128
    2d0e:	e9 a5       	ldd	r30, Y+41	; 0x29
    2d10:	fa a5       	ldd	r31, Y+42	; 0x2a
    2d12:	99 a9       	ldd	r25, Y+49	; 0x31
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
#ifdef HAVE_PORTREG
      if (d & bit)
    2d14:	58 2f       	mov	r21, r24
    2d16:	54 23       	and	r21, r20
    2d18:	19 f0       	breq	.+6      	; 0x2d20 <_ZN16Adafruit_SSD13067displayEv+0x14a>
        *mosiPort |= mosiPinMask;
    2d1a:	50 81       	ld	r21, Z
    2d1c:	95 2b       	or	r25, r21
    2d1e:	03 c0       	rjmp	.+6      	; 0x2d26 <_ZN16Adafruit_SSD13067displayEv+0x150>
      else
        *mosiPort &= ~mosiPinMask;
    2d20:	50 81       	ld	r21, Z
    2d22:	90 95       	com	r25
    2d24:	95 23       	and	r25, r21
    2d26:	90 83       	st	Z, r25
      *clkPort |= clkPinMask;  // Clock high
    2d28:	eb a5       	ldd	r30, Y+43	; 0x2b
    2d2a:	fc a5       	ldd	r31, Y+44	; 0x2c
    2d2c:	50 81       	ld	r21, Z
    2d2e:	9a a9       	ldd	r25, Y+50	; 0x32
    2d30:	95 2b       	or	r25, r21
    2d32:	90 83       	st	Z, r25
      *clkPort &= ~clkPinMask; // Clock low
    2d34:	eb a5       	ldd	r30, Y+43	; 0x2b
    2d36:	fc a5       	ldd	r31, Y+44	; 0x2c
    2d38:	50 81       	ld	r21, Z
    2d3a:	9a a9       	ldd	r25, Y+50	; 0x32
    2d3c:	90 95       	com	r25
    2d3e:	95 23       	and	r25, r21
    2d40:	90 83       	st	Z, r25
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    2d42:	46 95       	lsr	r20
    2d44:	21 50       	subi	r18, 0x01	; 1
    2d46:	31 09       	sbc	r19, r1
    2d48:	11 f7       	brne	.-60     	; 0x2d0e <_ZN16Adafruit_SSD13067displayEv+0x138>
    2d4a:	d2 cf       	rjmp	.-92     	; 0x2cf0 <_ZN16Adafruit_SSD13067displayEv+0x11a>
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    2d4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d50:	00 97       	sbiw	r24, 0x00	; 0
    2d52:	69 f0       	breq	.+26     	; 0x2d6e <_ZN16Adafruit_SSD13067displayEv+0x198>
    2d54:	49 ad       	ldd	r20, Y+57	; 0x39
    2d56:	5a ad       	ldd	r21, Y+58	; 0x3a
    2d58:	6b ad       	ldd	r22, Y+59	; 0x3b
    2d5a:	7c ad       	ldd	r23, Y+60	; 0x3c
#if defined(ESP8266)
  yield();
#endif
}
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	1f 91       	pop	r17
    2d62:	0f 91       	pop	r16
    2d64:	ff 90       	pop	r15
    2d66:	ef 90       	pop	r14
    2d68:	df 90       	pop	r13
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    2d6a:	cf 90       	pop	r12
    2d6c:	f4 c4       	rjmp	.+2536   	; 0x3756 <_ZN7TwoWire8setClockEm>
    2d6e:	ef a5       	ldd	r30, Y+47	; 0x2f
    2d70:	f8 a9       	ldd	r31, Y+48	; 0x30
    2d72:	90 81       	ld	r25, Z
    2d74:	8c a9       	ldd	r24, Y+52	; 0x34
    2d76:	89 2b       	or	r24, r25
    2d78:	80 83       	st	Z, r24
    2d7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d7e:	89 2b       	or	r24, r25
    2d80:	51 f0       	breq	.+20     	; 0x2d96 <_ZN16Adafruit_SSD13067displayEv+0x1c0>
#if defined(ESP8266)
  yield();
#endif
}
    2d82:	df 91       	pop	r29
    2d84:	cf 91       	pop	r28
    2d86:	1f 91       	pop	r17
    2d88:	0f 91       	pop	r16
    2d8a:	ff 90       	pop	r15
    2d8c:	ef 90       	pop	r14
    2d8e:	df 90       	pop	r13
    2d90:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    2d92:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <_ZN8SPIClass14endTransactionEv>
#if defined(ESP8266)
  yield();
#endif
}
    2d96:	df 91       	pop	r29
    2d98:	cf 91       	pop	r28
    2d9a:	1f 91       	pop	r17
    2d9c:	0f 91       	pop	r16
    2d9e:	ff 90       	pop	r15
    2da0:	ef 90       	pop	r14
    2da2:	df 90       	pop	r13
    2da4:	cf 90       	pop	r12
    2da6:	08 95       	ret

00002da8 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    2da8:	cf 93       	push	r28
  uint8_t sreg = SREG;
    2daa:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    2dac:	f8 94       	cli
  if (!initialized) {
    2dae:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZN8SPIClass11initializedE>
    2db2:	81 11       	cpse	r24, r1
    2db4:	27 c0       	rjmp	.+78     	; 0x2e04 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    2db6:	e4 ec       	ldi	r30, 0xC4	; 196
    2db8:	fb e0       	ldi	r31, 0x0B	; 11
    2dba:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    2dbc:	ee e7       	ldi	r30, 0x7E	; 126
    2dbe:	fb e0       	ldi	r31, 0x0B	; 11
    2dc0:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    2dc2:	e8 2f       	mov	r30, r24
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	ee 0f       	add	r30, r30
    2dc8:	ff 1f       	adc	r31, r31
    2dca:	e1 51       	subi	r30, 0x11	; 17
    2dcc:	f4 4f       	sbci	r31, 0xF4	; 244
    2dce:	a5 91       	lpm	r26, Z+
    2dd0:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    2dd2:	ec 91       	ld	r30, X
    2dd4:	e9 23       	and	r30, r25
    2dd6:	21 f4       	brne	.+8      	; 0x2de0 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    2dd8:	61 e0       	ldi	r22, 0x01	; 1
    2dda:	85 e3       	ldi	r24, 0x35	; 53
    2ddc:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    2de0:	61 e0       	ldi	r22, 0x01	; 1
    2de2:	85 e3       	ldi	r24, 0x35	; 53
    2de4:	0e 94 b5 22 	call	0x456a	; 0x456a <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    2de8:	8c b5       	in	r24, 0x2c	; 44
    2dea:	80 61       	ori	r24, 0x10	; 16
    2dec:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    2dee:	8c b5       	in	r24, 0x2c	; 44
    2df0:	80 64       	ori	r24, 0x40	; 64
    2df2:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    2df4:	61 e0       	ldi	r22, 0x01	; 1
    2df6:	84 e3       	ldi	r24, 0x34	; 52
    2df8:	0e 94 b5 22 	call	0x456a	; 0x456a <pinMode>
    pinMode(MOSI, OUTPUT);
    2dfc:	61 e0       	ldi	r22, 0x01	; 1
    2dfe:	83 e3       	ldi	r24, 0x33	; 51
    2e00:	0e 94 b5 22 	call	0x456a	; 0x456a <pinMode>
  }
  initialized++; // reference count
    2e04:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZN8SPIClass11initializedE>
    2e08:	8f 5f       	subi	r24, 0xFF	; 255
    2e0a:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    2e0e:	cf bf       	out	0x3f, r28	; 63
}
    2e10:	cf 91       	pop	r28
    2e12:	08 95       	ret

00002e14 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    2e14:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <twi_state>
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <twi_sendStop>
    2e1e:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <twi_inRepStart>
    2e22:	61 e0       	ldi	r22, 0x01	; 1
    2e24:	84 e1       	ldi	r24, 0x14	; 20
    2e26:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <digitalWrite>
    2e2a:	61 e0       	ldi	r22, 0x01	; 1
    2e2c:	85 e1       	ldi	r24, 0x15	; 21
    2e2e:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <digitalWrite>
    2e32:	e9 eb       	ldi	r30, 0xB9	; 185
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	8e 7f       	andi	r24, 0xFE	; 254
    2e3a:	80 83       	st	Z, r24
    2e3c:	80 81       	ld	r24, Z
    2e3e:	8d 7f       	andi	r24, 0xFD	; 253
    2e40:	80 83       	st	Z, r24
    2e42:	88 e4       	ldi	r24, 0x48	; 72
    2e44:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2e48:	85 e4       	ldi	r24, 0x45	; 69
    2e4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2e4e:	08 95       	ret

00002e50 <twi_disable>:
    2e50:	ec eb       	ldi	r30, 0xBC	; 188
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	80 81       	ld	r24, Z
    2e56:	8a 7b       	andi	r24, 0xBA	; 186
    2e58:	80 83       	st	Z, r24
    2e5a:	60 e0       	ldi	r22, 0x00	; 0
    2e5c:	84 e1       	ldi	r24, 0x14	; 20
    2e5e:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <digitalWrite>
    2e62:	60 e0       	ldi	r22, 0x00	; 0
    2e64:	85 e1       	ldi	r24, 0x15	; 21
    2e66:	0c 94 f1 22 	jmp	0x45e2	; 0x45e2 <digitalWrite>

00002e6a <twi_setFrequency>:
    2e6a:	9b 01       	movw	r18, r22
    2e6c:	ac 01       	movw	r20, r24
    2e6e:	60 e0       	ldi	r22, 0x00	; 0
    2e70:	74 e2       	ldi	r23, 0x24	; 36
    2e72:	84 ef       	ldi	r24, 0xF4	; 244
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	0e 94 42 24 	call	0x4884	; 0x4884 <__udivmodsi4>
    2e7a:	da 01       	movw	r26, r20
    2e7c:	c9 01       	movw	r24, r18
    2e7e:	40 97       	sbiw	r24, 0x10	; 16
    2e80:	a1 09       	sbc	r26, r1
    2e82:	b1 09       	sbc	r27, r1
    2e84:	b6 95       	lsr	r27
    2e86:	a7 95       	ror	r26
    2e88:	97 95       	ror	r25
    2e8a:	87 95       	ror	r24
    2e8c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2e90:	08 95       	ret

00002e92 <twi_transmit>:
    2e92:	40 91 39 03 	lds	r20, 0x0339	; 0x800339 <twi_txBufferLength>
    2e96:	26 2f       	mov	r18, r22
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	24 0f       	add	r18, r20
    2e9c:	31 1d       	adc	r19, r1
    2e9e:	21 32       	cpi	r18, 0x21	; 33
    2ea0:	31 05       	cpc	r19, r1
    2ea2:	dc f4       	brge	.+54     	; 0x2eda <twi_transmit+0x48>
    2ea4:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <twi_state>
    2ea8:	24 30       	cpi	r18, 0x04	; 4
    2eaa:	c9 f4       	brne	.+50     	; 0x2ede <twi_transmit+0x4c>
    2eac:	fc 01       	movw	r30, r24
    2eae:	80 e0       	ldi	r24, 0x00	; 0
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	86 17       	cp	r24, r22
    2eb4:	58 f4       	brcc	.+22     	; 0x2ecc <twi_transmit+0x3a>
    2eb6:	30 91 39 03 	lds	r19, 0x0339	; 0x800339 <twi_txBufferLength>
    2eba:	21 91       	ld	r18, Z+
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	a5 5c       	subi	r26, 0xC5	; 197
    2ec0:	bc 4f       	sbci	r27, 0xFC	; 252
    2ec2:	a3 0f       	add	r26, r19
    2ec4:	b1 1d       	adc	r27, r1
    2ec6:	2c 93       	st	X, r18
    2ec8:	01 96       	adiw	r24, 0x01	; 1
    2eca:	f3 cf       	rjmp	.-26     	; 0x2eb2 <twi_transmit+0x20>
    2ecc:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <twi_txBufferLength>
    2ed0:	68 0f       	add	r22, r24
    2ed2:	60 93 39 03 	sts	0x0339, r22	; 0x800339 <twi_txBufferLength>
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	08 95       	ret
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	08 95       	ret
    2ede:	82 e0       	ldi	r24, 0x02	; 2
    2ee0:	08 95       	ret

00002ee2 <twi_attachSlaveRxEvent>:
    2ee2:	90 93 7e 03 	sts	0x037E, r25	; 0x80037e <twi_onSlaveReceive+0x1>
    2ee6:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <twi_onSlaveReceive>
    2eea:	08 95       	ret

00002eec <twi_attachSlaveTxEvent>:
    2eec:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <twi_onSlaveTransmit+0x1>
    2ef0:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <twi_onSlaveTransmit>
    2ef4:	08 95       	ret

00002ef6 <twi_releaseBus>:
    2ef6:	85 ec       	ldi	r24, 0xC5	; 197
    2ef8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2efc:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <twi_state>
    2f00:	08 95       	ret

00002f02 <twi_handleTimeout>:
    2f02:	cf 93       	push	r28
    2f04:	df 93       	push	r29
    2f06:	91 e0       	ldi	r25, 0x01	; 1
    2f08:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <twi_timed_out_flag>
    2f0c:	88 23       	and	r24, r24
    2f0e:	51 f0       	breq	.+20     	; 0x2f24 <twi_handleTimeout+0x22>
    2f10:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2f14:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    2f18:	9b df       	rcall	.-202    	; 0x2e50 <twi_disable>
    2f1a:	7c df       	rcall	.-264    	; 0x2e14 <twi_init>
    2f1c:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    2f20:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2f24:	df 91       	pop	r29
    2f26:	cf 91       	pop	r28
    2f28:	08 95       	ret

00002f2a <twi_readFrom>:
    2f2a:	4f 92       	push	r4
    2f2c:	5f 92       	push	r5
    2f2e:	6f 92       	push	r6
    2f30:	7f 92       	push	r7
    2f32:	8f 92       	push	r8
    2f34:	9f 92       	push	r9
    2f36:	af 92       	push	r10
    2f38:	bf 92       	push	r11
    2f3a:	cf 92       	push	r12
    2f3c:	df 92       	push	r13
    2f3e:	ef 92       	push	r14
    2f40:	ff 92       	push	r15
    2f42:	0f 93       	push	r16
    2f44:	1f 93       	push	r17
    2f46:	cf 93       	push	r28
    2f48:	df 93       	push	r29
    2f4a:	f8 2e       	mov	r15, r24
    2f4c:	16 2f       	mov	r17, r22
    2f4e:	07 2f       	mov	r16, r23
    2f50:	c4 2f       	mov	r28, r20
    2f52:	e2 2e       	mov	r14, r18
    2f54:	41 32       	cpi	r20, 0x21	; 33
    2f56:	08 f0       	brcs	.+2      	; 0x2f5a <twi_readFrom+0x30>
    2f58:	bc c0       	rjmp	.+376    	; 0x30d2 <twi_readFrom+0x1a8>
    2f5a:	0e 94 a0 21 	call	0x4340	; 0x4340 <micros>
    2f5e:	4b 01       	movw	r8, r22
    2f60:	5c 01       	movw	r10, r24
    2f62:	d0 91 8a 03 	lds	r29, 0x038A	; 0x80038a <twi_state>
    2f66:	dd 23       	and	r29, r29
    2f68:	29 f1       	breq	.+74     	; 0x2fb4 <twi_readFrom+0x8a>
    2f6a:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <twi_timeout_us>
    2f6e:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <twi_timeout_us+0x1>
    2f72:	a0 91 85 03 	lds	r26, 0x0385	; 0x800385 <twi_timeout_us+0x2>
    2f76:	b0 91 86 03 	lds	r27, 0x0386	; 0x800386 <twi_timeout_us+0x3>
    2f7a:	89 2b       	or	r24, r25
    2f7c:	8a 2b       	or	r24, r26
    2f7e:	8b 2b       	or	r24, r27
    2f80:	81 f3       	breq	.-32     	; 0x2f62 <twi_readFrom+0x38>
    2f82:	0e 94 a0 21 	call	0x4340	; 0x4340 <micros>
    2f86:	40 90 83 03 	lds	r4, 0x0383	; 0x800383 <twi_timeout_us>
    2f8a:	50 90 84 03 	lds	r5, 0x0384	; 0x800384 <twi_timeout_us+0x1>
    2f8e:	60 90 85 03 	lds	r6, 0x0385	; 0x800385 <twi_timeout_us+0x2>
    2f92:	70 90 86 03 	lds	r7, 0x0386	; 0x800386 <twi_timeout_us+0x3>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	88 19       	sub	r24, r8
    2f9c:	99 09       	sbc	r25, r9
    2f9e:	aa 09       	sbc	r26, r10
    2fa0:	bb 09       	sbc	r27, r11
    2fa2:	48 16       	cp	r4, r24
    2fa4:	59 06       	cpc	r5, r25
    2fa6:	6a 06       	cpc	r6, r26
    2fa8:	7b 06       	cpc	r7, r27
    2faa:	d8 f6       	brcc	.-74     	; 0x2f62 <twi_readFrom+0x38>
    2fac:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <twi_do_reset_on_timeout>
    2fb0:	a8 df       	rcall	.-176    	; 0x2f02 <twi_handleTimeout>
    2fb2:	8f c0       	rjmp	.+286    	; 0x30d2 <twi_readFrom+0x1a8>
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <twi_state>
    2fba:	e0 92 88 03 	sts	0x0388, r14	; 0x800388 <twi_sendStop>
    2fbe:	9f ef       	ldi	r25, 0xFF	; 255
    2fc0:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <twi_error>
    2fc4:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <twi_masterBufferIndex>
    2fc8:	9c 0f       	add	r25, r28
    2fca:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <twi_masterBufferLength>
    2fce:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <twi_slarw>
    2fd2:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <twi_slarw>
    2fd6:	8f 2d       	mov	r24, r15
    2fd8:	88 0f       	add	r24, r24
    2fda:	89 2b       	or	r24, r25
    2fdc:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <twi_slarw>
    2fe0:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <twi_inRepStart>
    2fe4:	81 30       	cpi	r24, 0x01	; 1
    2fe6:	89 f5       	brne	.+98     	; 0x304a <twi_readFrom+0x120>
    2fe8:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <twi_inRepStart>
    2fec:	0e 94 a0 21 	call	0x4340	; 0x4340 <micros>
    2ff0:	6b 01       	movw	r12, r22
    2ff2:	7c 01       	movw	r14, r24
    2ff4:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <twi_slarw>
    2ff8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    2ffc:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <twi_timeout_us>
    3000:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <twi_timeout_us+0x1>
    3004:	a0 91 85 03 	lds	r26, 0x0385	; 0x800385 <twi_timeout_us+0x2>
    3008:	b0 91 86 03 	lds	r27, 0x0386	; 0x800386 <twi_timeout_us+0x3>
    300c:	89 2b       	or	r24, r25
    300e:	8a 2b       	or	r24, r26
    3010:	8b 2b       	or	r24, r27
    3012:	a9 f0       	breq	.+42     	; 0x303e <twi_readFrom+0x114>
    3014:	0e 94 a0 21 	call	0x4340	; 0x4340 <micros>
    3018:	80 90 83 03 	lds	r8, 0x0383	; 0x800383 <twi_timeout_us>
    301c:	90 90 84 03 	lds	r9, 0x0384	; 0x800384 <twi_timeout_us+0x1>
    3020:	a0 90 85 03 	lds	r10, 0x0385	; 0x800385 <twi_timeout_us+0x2>
    3024:	b0 90 86 03 	lds	r11, 0x0386	; 0x800386 <twi_timeout_us+0x3>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	8c 19       	sub	r24, r12
    302e:	9d 09       	sbc	r25, r13
    3030:	ae 09       	sbc	r26, r14
    3032:	bf 09       	sbc	r27, r15
    3034:	88 16       	cp	r8, r24
    3036:	99 06       	cpc	r9, r25
    3038:	aa 06       	cpc	r10, r26
    303a:	bb 06       	cpc	r11, r27
    303c:	90 f1       	brcs	.+100    	; 0x30a2 <twi_readFrom+0x178>
    303e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3042:	83 fd       	sbrc	r24, 3
    3044:	d7 cf       	rjmp	.-82     	; 0x2ff4 <twi_readFrom+0xca>
    3046:	85 ec       	ldi	r24, 0xC5	; 197
    3048:	01 c0       	rjmp	.+2      	; 0x304c <twi_readFrom+0x122>
    304a:	85 ee       	ldi	r24, 0xE5	; 229
    304c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3050:	0e 94 a0 21 	call	0x4340	; 0x4340 <micros>
    3054:	6b 01       	movw	r12, r22
    3056:	7c 01       	movw	r14, r24
    3058:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <twi_state>
    305c:	81 30       	cpi	r24, 0x01	; 1
    305e:	29 f5       	brne	.+74     	; 0x30aa <twi_readFrom+0x180>
    3060:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <twi_timeout_us>
    3064:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <twi_timeout_us+0x1>
    3068:	a0 91 85 03 	lds	r26, 0x0385	; 0x800385 <twi_timeout_us+0x2>
    306c:	b0 91 86 03 	lds	r27, 0x0386	; 0x800386 <twi_timeout_us+0x3>
    3070:	89 2b       	or	r24, r25
    3072:	8a 2b       	or	r24, r26
    3074:	8b 2b       	or	r24, r27
    3076:	81 f3       	breq	.-32     	; 0x3058 <twi_readFrom+0x12e>
    3078:	0e 94 a0 21 	call	0x4340	; 0x4340 <micros>
    307c:	80 90 83 03 	lds	r8, 0x0383	; 0x800383 <twi_timeout_us>
    3080:	90 90 84 03 	lds	r9, 0x0384	; 0x800384 <twi_timeout_us+0x1>
    3084:	a0 90 85 03 	lds	r10, 0x0385	; 0x800385 <twi_timeout_us+0x2>
    3088:	b0 90 86 03 	lds	r11, 0x0386	; 0x800386 <twi_timeout_us+0x3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	8c 19       	sub	r24, r12
    3092:	9d 09       	sbc	r25, r13
    3094:	ae 09       	sbc	r26, r14
    3096:	bf 09       	sbc	r27, r15
    3098:	88 16       	cp	r8, r24
    309a:	99 06       	cpc	r9, r25
    309c:	aa 06       	cpc	r10, r26
    309e:	bb 06       	cpc	r11, r27
    30a0:	d8 f6       	brcc	.-74     	; 0x3058 <twi_readFrom+0x12e>
    30a2:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <twi_do_reset_on_timeout>
    30a6:	2d df       	rcall	.-422    	; 0x2f02 <twi_handleTimeout>
    30a8:	15 c0       	rjmp	.+42     	; 0x30d4 <twi_readFrom+0x1aa>
    30aa:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <twi_masterBufferIndex>
    30ae:	8c 17       	cp	r24, r28
    30b0:	10 f4       	brcc	.+4      	; 0x30b6 <twi_readFrom+0x18c>
    30b2:	c0 91 5c 03 	lds	r28, 0x035C	; 0x80035c <twi_masterBufferIndex>
    30b6:	ad e5       	ldi	r26, 0x5D	; 93
    30b8:	b3 e0       	ldi	r27, 0x03	; 3
    30ba:	91 2f       	mov	r25, r17
    30bc:	e1 2f       	mov	r30, r17
    30be:	f0 2f       	mov	r31, r16
    30c0:	8e 2f       	mov	r24, r30
    30c2:	89 1b       	sub	r24, r25
    30c4:	8c 17       	cp	r24, r28
    30c6:	18 f4       	brcc	.+6      	; 0x30ce <twi_readFrom+0x1a4>
    30c8:	8d 91       	ld	r24, X+
    30ca:	81 93       	st	Z+, r24
    30cc:	f9 cf       	rjmp	.-14     	; 0x30c0 <twi_readFrom+0x196>
    30ce:	dc 2f       	mov	r29, r28
    30d0:	01 c0       	rjmp	.+2      	; 0x30d4 <twi_readFrom+0x1aa>
    30d2:	d0 e0       	ldi	r29, 0x00	; 0
    30d4:	8d 2f       	mov	r24, r29
    30d6:	df 91       	pop	r29
    30d8:	cf 91       	pop	r28
    30da:	1f 91       	pop	r17
    30dc:	0f 91       	pop	r16
    30de:	ff 90       	pop	r15
    30e0:	ef 90       	pop	r14
    30e2:	df 90       	pop	r13
    30e4:	cf 90       	pop	r12
    30e6:	bf 90       	pop	r11
    30e8:	af 90       	pop	r10
    30ea:	9f 90       	pop	r9
    30ec:	8f 90       	pop	r8
    30ee:	7f 90       	pop	r7
    30f0:	6f 90       	pop	r6
    30f2:	5f 90       	pop	r5
    30f4:	4f 90       	pop	r4
    30f6:	08 95       	ret

000030f8 <twi_writeTo>:
    30f8:	4f 92       	push	r4
    30fa:	5f 92       	push	r5
    30fc:	6f 92       	push	r6
    30fe:	7f 92       	push	r7
    3100:	8f 92       	push	r8
    3102:	9f 92       	push	r9
    3104:	af 92       	push	r10
    3106:	bf 92       	push	r11
    3108:	cf 92       	push	r12
    310a:	df 92       	push	r13
    310c:	ef 92       	push	r14
    310e:	ff 92       	push	r15
    3110:	0f 93       	push	r16
    3112:	1f 93       	push	r17
    3114:	cf 93       	push	r28
    3116:	df 93       	push	r29
    3118:	41 32       	cpi	r20, 0x21	; 33
    311a:	08 f0       	brcs	.+2      	; 0x311e <twi_writeTo+0x26>
    311c:	c5 c0       	rjmp	.+394    	; 0x32a8 <twi_writeTo+0x1b0>
    311e:	12 2f       	mov	r17, r18
    3120:	f4 2e       	mov	r15, r20
    3122:	d7 2e       	mov	r13, r23
    3124:	e6 2e       	mov	r14, r22
    3126:	d8 2f       	mov	r29, r24
    3128:	0e 94 a0 21 	call	0x4340	; 0x4340 <micros>
    312c:	4b 01       	movw	r8, r22
    312e:	5c 01       	movw	r10, r24
    3130:	c0 91 8a 03 	lds	r28, 0x038A	; 0x80038a <twi_state>
    3134:	cc 23       	and	r28, r28
    3136:	11 f1       	breq	.+68     	; 0x317c <twi_writeTo+0x84>
    3138:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <twi_timeout_us>
    313c:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <twi_timeout_us+0x1>
    3140:	a0 91 85 03 	lds	r26, 0x0385	; 0x800385 <twi_timeout_us+0x2>
    3144:	b0 91 86 03 	lds	r27, 0x0386	; 0x800386 <twi_timeout_us+0x3>
    3148:	89 2b       	or	r24, r25
    314a:	8a 2b       	or	r24, r26
    314c:	8b 2b       	or	r24, r27
    314e:	81 f3       	breq	.-32     	; 0x3130 <twi_writeTo+0x38>
    3150:	0e 94 a0 21 	call	0x4340	; 0x4340 <micros>
    3154:	40 90 83 03 	lds	r4, 0x0383	; 0x800383 <twi_timeout_us>
    3158:	50 90 84 03 	lds	r5, 0x0384	; 0x800384 <twi_timeout_us+0x1>
    315c:	60 90 85 03 	lds	r6, 0x0385	; 0x800385 <twi_timeout_us+0x2>
    3160:	70 90 86 03 	lds	r7, 0x0386	; 0x800386 <twi_timeout_us+0x3>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	88 19       	sub	r24, r8
    316a:	99 09       	sbc	r25, r9
    316c:	aa 09       	sbc	r26, r10
    316e:	bb 09       	sbc	r27, r11
    3170:	48 16       	cp	r4, r24
    3172:	59 06       	cpc	r5, r25
    3174:	6a 06       	cpc	r6, r26
    3176:	7b 06       	cpc	r7, r27
    3178:	d8 f6       	brcc	.-74     	; 0x3130 <twi_writeTo+0x38>
    317a:	83 c0       	rjmp	.+262    	; 0x3282 <twi_writeTo+0x18a>
    317c:	82 e0       	ldi	r24, 0x02	; 2
    317e:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <twi_state>
    3182:	00 93 88 03 	sts	0x0388, r16	; 0x800388 <twi_sendStop>
    3186:	8f ef       	ldi	r24, 0xFF	; 255
    3188:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <twi_error>
    318c:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <twi_masterBufferIndex>
    3190:	f0 92 5b 03 	sts	0x035B, r15	; 0x80035b <twi_masterBufferLength>
    3194:	9e 2d       	mov	r25, r14
    3196:	ad e5       	ldi	r26, 0x5D	; 93
    3198:	b3 e0       	ldi	r27, 0x03	; 3
    319a:	ee 2d       	mov	r30, r14
    319c:	fd 2d       	mov	r31, r13
    319e:	8e 2f       	mov	r24, r30
    31a0:	89 1b       	sub	r24, r25
    31a2:	8f 15       	cp	r24, r15
    31a4:	18 f4       	brcc	.+6      	; 0x31ac <twi_writeTo+0xb4>
    31a6:	81 91       	ld	r24, Z+
    31a8:	8d 93       	st	X+, r24
    31aa:	f9 cf       	rjmp	.-14     	; 0x319e <twi_writeTo+0xa6>
    31ac:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <twi_slarw>
    31b0:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <twi_slarw>
    31b4:	dd 0f       	add	r29, r29
    31b6:	d9 2b       	or	r29, r25
    31b8:	d0 93 89 03 	sts	0x0389, r29	; 0x800389 <twi_slarw>
    31bc:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <twi_inRepStart>
    31c0:	81 30       	cpi	r24, 0x01	; 1
    31c2:	89 f5       	brne	.+98     	; 0x3226 <twi_writeTo+0x12e>
    31c4:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <twi_inRepStart>
    31c8:	0e 94 a0 21 	call	0x4340	; 0x4340 <micros>
    31cc:	6b 01       	movw	r12, r22
    31ce:	7c 01       	movw	r14, r24
    31d0:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <twi_slarw>
    31d4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    31d8:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <twi_timeout_us>
    31dc:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <twi_timeout_us+0x1>
    31e0:	a0 91 85 03 	lds	r26, 0x0385	; 0x800385 <twi_timeout_us+0x2>
    31e4:	b0 91 86 03 	lds	r27, 0x0386	; 0x800386 <twi_timeout_us+0x3>
    31e8:	89 2b       	or	r24, r25
    31ea:	8a 2b       	or	r24, r26
    31ec:	8b 2b       	or	r24, r27
    31ee:	a9 f0       	breq	.+42     	; 0x321a <twi_writeTo+0x122>
    31f0:	0e 94 a0 21 	call	0x4340	; 0x4340 <micros>
    31f4:	80 90 83 03 	lds	r8, 0x0383	; 0x800383 <twi_timeout_us>
    31f8:	90 90 84 03 	lds	r9, 0x0384	; 0x800384 <twi_timeout_us+0x1>
    31fc:	a0 90 85 03 	lds	r10, 0x0385	; 0x800385 <twi_timeout_us+0x2>
    3200:	b0 90 86 03 	lds	r11, 0x0386	; 0x800386 <twi_timeout_us+0x3>
    3204:	dc 01       	movw	r26, r24
    3206:	cb 01       	movw	r24, r22
    3208:	8c 19       	sub	r24, r12
    320a:	9d 09       	sbc	r25, r13
    320c:	ae 09       	sbc	r26, r14
    320e:	bf 09       	sbc	r27, r15
    3210:	88 16       	cp	r8, r24
    3212:	99 06       	cpc	r9, r25
    3214:	aa 06       	cpc	r10, r26
    3216:	bb 06       	cpc	r11, r27
    3218:	a0 f1       	brcs	.+104    	; 0x3282 <twi_writeTo+0x18a>
    321a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    321e:	83 fd       	sbrc	r24, 3
    3220:	d7 cf       	rjmp	.-82     	; 0x31d0 <twi_writeTo+0xd8>
    3222:	85 ec       	ldi	r24, 0xC5	; 197
    3224:	01 c0       	rjmp	.+2      	; 0x3228 <twi_writeTo+0x130>
    3226:	85 ee       	ldi	r24, 0xE5	; 229
    3228:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    322c:	0e 94 a0 21 	call	0x4340	; 0x4340 <micros>
    3230:	6b 01       	movw	r12, r22
    3232:	7c 01       	movw	r14, r24
    3234:	11 23       	and	r17, r17
    3236:	51 f1       	breq	.+84     	; 0x328c <twi_writeTo+0x194>
    3238:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <twi_state>
    323c:	82 30       	cpi	r24, 0x02	; 2
    323e:	31 f5       	brne	.+76     	; 0x328c <twi_writeTo+0x194>
    3240:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <twi_timeout_us>
    3244:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <twi_timeout_us+0x1>
    3248:	a0 91 85 03 	lds	r26, 0x0385	; 0x800385 <twi_timeout_us+0x2>
    324c:	b0 91 86 03 	lds	r27, 0x0386	; 0x800386 <twi_timeout_us+0x3>
    3250:	89 2b       	or	r24, r25
    3252:	8a 2b       	or	r24, r26
    3254:	8b 2b       	or	r24, r27
    3256:	71 f3       	breq	.-36     	; 0x3234 <twi_writeTo+0x13c>
    3258:	0e 94 a0 21 	call	0x4340	; 0x4340 <micros>
    325c:	80 90 83 03 	lds	r8, 0x0383	; 0x800383 <twi_timeout_us>
    3260:	90 90 84 03 	lds	r9, 0x0384	; 0x800384 <twi_timeout_us+0x1>
    3264:	a0 90 85 03 	lds	r10, 0x0385	; 0x800385 <twi_timeout_us+0x2>
    3268:	b0 90 86 03 	lds	r11, 0x0386	; 0x800386 <twi_timeout_us+0x3>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	8c 19       	sub	r24, r12
    3272:	9d 09       	sbc	r25, r13
    3274:	ae 09       	sbc	r26, r14
    3276:	bf 09       	sbc	r27, r15
    3278:	88 16       	cp	r8, r24
    327a:	99 06       	cpc	r9, r25
    327c:	aa 06       	cpc	r10, r26
    327e:	bb 06       	cpc	r11, r27
    3280:	c8 f6       	brcc	.-78     	; 0x3234 <twi_writeTo+0x13c>
    3282:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <twi_do_reset_on_timeout>
    3286:	3d de       	rcall	.-902    	; 0x2f02 <twi_handleTimeout>
    3288:	c5 e0       	ldi	r28, 0x05	; 5
    328a:	13 c0       	rjmp	.+38     	; 0x32b2 <twi_writeTo+0x1ba>
    328c:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <twi_error>
    3290:	8f 3f       	cpi	r24, 0xFF	; 255
    3292:	79 f0       	breq	.+30     	; 0x32b2 <twi_writeTo+0x1ba>
    3294:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <twi_error>
    3298:	80 32       	cpi	r24, 0x20	; 32
    329a:	41 f0       	breq	.+16     	; 0x32ac <twi_writeTo+0x1b4>
    329c:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <twi_error>
    32a0:	80 33       	cpi	r24, 0x30	; 48
    32a2:	31 f0       	breq	.+12     	; 0x32b0 <twi_writeTo+0x1b8>
    32a4:	c4 e0       	ldi	r28, 0x04	; 4
    32a6:	05 c0       	rjmp	.+10     	; 0x32b2 <twi_writeTo+0x1ba>
    32a8:	c1 e0       	ldi	r28, 0x01	; 1
    32aa:	03 c0       	rjmp	.+6      	; 0x32b2 <twi_writeTo+0x1ba>
    32ac:	c2 e0       	ldi	r28, 0x02	; 2
    32ae:	01 c0       	rjmp	.+2      	; 0x32b2 <twi_writeTo+0x1ba>
    32b0:	c3 e0       	ldi	r28, 0x03	; 3
    32b2:	8c 2f       	mov	r24, r28
    32b4:	df 91       	pop	r29
    32b6:	cf 91       	pop	r28
    32b8:	1f 91       	pop	r17
    32ba:	0f 91       	pop	r16
    32bc:	ff 90       	pop	r15
    32be:	ef 90       	pop	r14
    32c0:	df 90       	pop	r13
    32c2:	cf 90       	pop	r12
    32c4:	bf 90       	pop	r11
    32c6:	af 90       	pop	r10
    32c8:	9f 90       	pop	r9
    32ca:	8f 90       	pop	r8
    32cc:	7f 90       	pop	r7
    32ce:	6f 90       	pop	r6
    32d0:	5f 90       	pop	r5
    32d2:	4f 90       	pop	r4
    32d4:	08 95       	ret

000032d6 <twi_stop>:
    32d6:	85 ed       	ldi	r24, 0xD5	; 213
    32d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    32dc:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <twi_timeout_us>
    32e0:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <twi_timeout_us+0x1>
    32e4:	a0 91 85 03 	lds	r26, 0x0385	; 0x800385 <twi_timeout_us+0x2>
    32e8:	b0 91 86 03 	lds	r27, 0x0386	; 0x800386 <twi_timeout_us+0x3>
    32ec:	07 96       	adiw	r24, 0x07	; 7
    32ee:	a1 1d       	adc	r26, r1
    32f0:	b1 1d       	adc	r27, r1
    32f2:	23 e0       	ldi	r18, 0x03	; 3
    32f4:	b6 95       	lsr	r27
    32f6:	a7 95       	ror	r26
    32f8:	97 95       	ror	r25
    32fa:	87 95       	ror	r24
    32fc:	2a 95       	dec	r18
    32fe:	d1 f7       	brne	.-12     	; 0x32f4 <twi_stop+0x1e>
    3300:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3304:	24 ff       	sbrs	r18, 4
    3306:	1b c0       	rjmp	.+54     	; 0x333e <twi_stop+0x68>
    3308:	40 91 83 03 	lds	r20, 0x0383	; 0x800383 <twi_timeout_us>
    330c:	50 91 84 03 	lds	r21, 0x0384	; 0x800384 <twi_timeout_us+0x1>
    3310:	60 91 85 03 	lds	r22, 0x0385	; 0x800385 <twi_timeout_us+0x2>
    3314:	70 91 86 03 	lds	r23, 0x0386	; 0x800386 <twi_timeout_us+0x3>
    3318:	45 2b       	or	r20, r21
    331a:	46 2b       	or	r20, r22
    331c:	47 2b       	or	r20, r23
    331e:	81 f3       	breq	.-32     	; 0x3300 <twi_stop+0x2a>
    3320:	00 97       	sbiw	r24, 0x00	; 0
    3322:	a1 05       	cpc	r26, r1
    3324:	b1 05       	cpc	r27, r1
    3326:	41 f0       	breq	.+16     	; 0x3338 <twi_stop+0x62>
    3328:	25 e3       	ldi	r18, 0x35	; 53
    332a:	2a 95       	dec	r18
    332c:	f1 f7       	brne	.-4      	; 0x332a <twi_stop+0x54>
    332e:	00 00       	nop
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	a1 09       	sbc	r26, r1
    3334:	b1 09       	sbc	r27, r1
    3336:	e4 cf       	rjmp	.-56     	; 0x3300 <twi_stop+0x2a>
    3338:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <twi_do_reset_on_timeout>
    333c:	e2 cd       	rjmp	.-1084   	; 0x2f02 <twi_handleTimeout>
    333e:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <twi_state>
    3342:	08 95       	ret

00003344 <__vector_39>:

ISR(TWI_vect)
{
    3344:	1f 92       	push	r1
    3346:	0f 92       	push	r0
    3348:	0f b6       	in	r0, 0x3f	; 63
    334a:	0f 92       	push	r0
    334c:	11 24       	eor	r1, r1
    334e:	0b b6       	in	r0, 0x3b	; 59
    3350:	0f 92       	push	r0
    3352:	2f 93       	push	r18
    3354:	3f 93       	push	r19
    3356:	4f 93       	push	r20
    3358:	5f 93       	push	r21
    335a:	6f 93       	push	r22
    335c:	7f 93       	push	r23
    335e:	8f 93       	push	r24
    3360:	9f 93       	push	r25
    3362:	af 93       	push	r26
    3364:	bf 93       	push	r27
    3366:	ef 93       	push	r30
    3368:	ff 93       	push	r31
  switch(TW_STATUS){
    336a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    336e:	88 7f       	andi	r24, 0xF8	; 248
    3370:	80 36       	cpi	r24, 0x60	; 96
    3372:	09 f4       	brne	.+2      	; 0x3376 <__vector_39+0x32>
    3374:	9d c0       	rjmp	.+314    	; 0x34b0 <__vector_39+0x16c>
    3376:	70 f5       	brcc	.+92     	; 0x33d4 <__vector_39+0x90>
    3378:	88 32       	cpi	r24, 0x28	; 40
    337a:	09 f4       	brne	.+2      	; 0x337e <__vector_39+0x3a>
    337c:	5c c0       	rjmp	.+184    	; 0x3436 <__vector_39+0xf2>
    337e:	90 f4       	brcc	.+36     	; 0x33a4 <__vector_39+0x60>
    3380:	80 31       	cpi	r24, 0x10	; 16
    3382:	09 f4       	brne	.+2      	; 0x3386 <__vector_39+0x42>
    3384:	55 c0       	rjmp	.+170    	; 0x3430 <__vector_39+0xec>
    3386:	38 f4       	brcc	.+14     	; 0x3396 <__vector_39+0x52>
    3388:	88 23       	and	r24, r24
    338a:	09 f4       	brne	.+2      	; 0x338e <__vector_39+0x4a>
    338c:	f3 c0       	rjmp	.+486    	; 0x3574 <__vector_39+0x230>
    338e:	88 30       	cpi	r24, 0x08	; 8
    3390:	09 f4       	brne	.+2      	; 0x3394 <__vector_39+0x50>
    3392:	4e c0       	rjmp	.+156    	; 0x3430 <__vector_39+0xec>
    3394:	f2 c0       	rjmp	.+484    	; 0x357a <__vector_39+0x236>
    3396:	88 31       	cpi	r24, 0x18	; 24
    3398:	09 f4       	brne	.+2      	; 0x339c <__vector_39+0x58>
    339a:	4d c0       	rjmp	.+154    	; 0x3436 <__vector_39+0xf2>
    339c:	80 32       	cpi	r24, 0x20	; 32
    339e:	09 f4       	brne	.+2      	; 0x33a2 <__vector_39+0x5e>
    33a0:	5e c0       	rjmp	.+188    	; 0x345e <__vector_39+0x11a>
    33a2:	eb c0       	rjmp	.+470    	; 0x357a <__vector_39+0x236>
    33a4:	80 34       	cpi	r24, 0x40	; 64
    33a6:	09 f4       	brne	.+2      	; 0x33aa <__vector_39+0x66>
    33a8:	69 c0       	rjmp	.+210    	; 0x347c <__vector_39+0x138>
    33aa:	50 f4       	brcc	.+20     	; 0x33c0 <__vector_39+0x7c>
    33ac:	80 33       	cpi	r24, 0x30	; 48
    33ae:	09 f4       	brne	.+2      	; 0x33b2 <__vector_39+0x6e>
    33b0:	56 c0       	rjmp	.+172    	; 0x345e <__vector_39+0x11a>
    33b2:	88 33       	cpi	r24, 0x38	; 56
    33b4:	09 f0       	breq	.+2      	; 0x33b8 <__vector_39+0x74>
    33b6:	e1 c0       	rjmp	.+450    	; 0x357a <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    33b8:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <twi_error>
      twi_releaseBus();
    33bc:	9c dd       	rcall	.-1224   	; 0x2ef6 <twi_releaseBus>
      break;
    33be:	dd c0       	rjmp	.+442    	; 0x357a <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    33c0:	80 35       	cpi	r24, 0x50	; 80
    33c2:	09 f4       	brne	.+2      	; 0x33c6 <__vector_39+0x82>
    33c4:	4f c0       	rjmp	.+158    	; 0x3464 <__vector_39+0x120>
    33c6:	88 35       	cpi	r24, 0x58	; 88
    33c8:	09 f4       	brne	.+2      	; 0x33cc <__vector_39+0x88>
    33ca:	5d c0       	rjmp	.+186    	; 0x3486 <__vector_39+0x142>
    33cc:	88 34       	cpi	r24, 0x48	; 72
    33ce:	09 f0       	breq	.+2      	; 0x33d2 <__vector_39+0x8e>
    33d0:	d4 c0       	rjmp	.+424    	; 0x357a <__vector_39+0x236>
    33d2:	d2 c0       	rjmp	.+420    	; 0x3578 <__vector_39+0x234>
    33d4:	88 39       	cpi	r24, 0x98	; 152
    33d6:	09 f4       	brne	.+2      	; 0x33da <__vector_39+0x96>
    33d8:	c3 c0       	rjmp	.+390    	; 0x3560 <__vector_39+0x21c>
    33da:	a8 f4       	brcc	.+42     	; 0x3406 <__vector_39+0xc2>
    33dc:	88 37       	cpi	r24, 0x78	; 120
    33de:	09 f4       	brne	.+2      	; 0x33e2 <__vector_39+0x9e>
    33e0:	67 c0       	rjmp	.+206    	; 0x34b0 <__vector_39+0x16c>
    33e2:	38 f4       	brcc	.+14     	; 0x33f2 <__vector_39+0xae>
    33e4:	88 36       	cpi	r24, 0x68	; 104
    33e6:	09 f4       	brne	.+2      	; 0x33ea <__vector_39+0xa6>
    33e8:	63 c0       	rjmp	.+198    	; 0x34b0 <__vector_39+0x16c>
    33ea:	80 37       	cpi	r24, 0x70	; 112
    33ec:	09 f4       	brne	.+2      	; 0x33f0 <__vector_39+0xac>
    33ee:	60 c0       	rjmp	.+192    	; 0x34b0 <__vector_39+0x16c>
    33f0:	c4 c0       	rjmp	.+392    	; 0x357a <__vector_39+0x236>
    33f2:	88 38       	cpi	r24, 0x88	; 136
    33f4:	09 f4       	brne	.+2      	; 0x33f8 <__vector_39+0xb4>
    33f6:	b4 c0       	rjmp	.+360    	; 0x3560 <__vector_39+0x21c>
    33f8:	80 39       	cpi	r24, 0x90	; 144
    33fa:	09 f4       	brne	.+2      	; 0x33fe <__vector_39+0xba>
    33fc:	5f c0       	rjmp	.+190    	; 0x34bc <__vector_39+0x178>
    33fe:	80 38       	cpi	r24, 0x80	; 128
    3400:	09 f0       	breq	.+2      	; 0x3404 <__vector_39+0xc0>
    3402:	bb c0       	rjmp	.+374    	; 0x357a <__vector_39+0x236>
    3404:	5b c0       	rjmp	.+182    	; 0x34bc <__vector_39+0x178>
    3406:	80 3b       	cpi	r24, 0xB0	; 176
    3408:	09 f4       	brne	.+2      	; 0x340c <__vector_39+0xc8>
    340a:	82 c0       	rjmp	.+260    	; 0x3510 <__vector_39+0x1cc>
    340c:	38 f4       	brcc	.+14     	; 0x341c <__vector_39+0xd8>
    340e:	80 3a       	cpi	r24, 0xA0	; 160
    3410:	09 f4       	brne	.+2      	; 0x3414 <__vector_39+0xd0>
    3412:	66 c0       	rjmp	.+204    	; 0x34e0 <__vector_39+0x19c>
    3414:	88 3a       	cpi	r24, 0xA8	; 168
    3416:	09 f4       	brne	.+2      	; 0x341a <__vector_39+0xd6>
    3418:	7b c0       	rjmp	.+246    	; 0x3510 <__vector_39+0x1cc>
    341a:	af c0       	rjmp	.+350    	; 0x357a <__vector_39+0x236>
    341c:	80 3c       	cpi	r24, 0xC0	; 192
    341e:	09 f4       	brne	.+2      	; 0x3422 <__vector_39+0xde>
    3420:	a3 c0       	rjmp	.+326    	; 0x3568 <__vector_39+0x224>
    3422:	88 3c       	cpi	r24, 0xC8	; 200
    3424:	09 f4       	brne	.+2      	; 0x3428 <__vector_39+0xe4>
    3426:	a0 c0       	rjmp	.+320    	; 0x3568 <__vector_39+0x224>
    3428:	88 3b       	cpi	r24, 0xB8	; 184
    342a:	09 f4       	brne	.+2      	; 0x342e <__vector_39+0xea>
    342c:	86 c0       	rjmp	.+268    	; 0x353a <__vector_39+0x1f6>
    342e:	a5 c0       	rjmp	.+330    	; 0x357a <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3430:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <twi_slarw>
    3434:	10 c0       	rjmp	.+32     	; 0x3456 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3436:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <twi_masterBufferIndex>
    343a:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <twi_masterBufferLength>
    343e:	98 17       	cp	r25, r24
    3440:	70 f5       	brcc	.+92     	; 0x349e <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3442:	e0 91 5c 03 	lds	r30, 0x035C	; 0x80035c <twi_masterBufferIndex>
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	8e 0f       	add	r24, r30
    344a:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <twi_masterBufferIndex>
    344e:	f0 e0       	ldi	r31, 0x00	; 0
    3450:	e3 5a       	subi	r30, 0xA3	; 163
    3452:	fc 4f       	sbci	r31, 0xFC	; 252
    3454:	80 81       	ld	r24, Z
    3456:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    345a:	85 ec       	ldi	r24, 0xC5	; 197
    345c:	82 c0       	rjmp	.+260    	; 0x3562 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    345e:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <twi_error>
    3462:	8a c0       	rjmp	.+276    	; 0x3578 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3464:	e0 91 5c 03 	lds	r30, 0x035C	; 0x80035c <twi_masterBufferIndex>
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	8e 0f       	add	r24, r30
    346c:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <twi_masterBufferIndex>
    3470:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3474:	f0 e0       	ldi	r31, 0x00	; 0
    3476:	e3 5a       	subi	r30, 0xA3	; 163
    3478:	fc 4f       	sbci	r31, 0xFC	; 252
    347a:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    347c:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <twi_masterBufferIndex>
    3480:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <twi_masterBufferLength>
    3484:	6a c0       	rjmp	.+212    	; 0x355a <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3486:	e0 91 5c 03 	lds	r30, 0x035C	; 0x80035c <twi_masterBufferIndex>
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	8e 0f       	add	r24, r30
    348e:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <twi_masterBufferIndex>
    3492:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3496:	f0 e0       	ldi	r31, 0x00	; 0
    3498:	e3 5a       	subi	r30, 0xA3	; 163
    349a:	fc 4f       	sbci	r31, 0xFC	; 252
    349c:	80 83       	st	Z, r24
      if (twi_sendStop){
    349e:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <twi_sendStop>
    34a2:	81 11       	cpse	r24, r1
    34a4:	69 c0       	rjmp	.+210    	; 0x3578 <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    34ac:	84 ea       	ldi	r24, 0xA4	; 164
    34ae:	5d c0       	rjmp	.+186    	; 0x356a <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    34b0:	83 e0       	ldi	r24, 0x03	; 3
    34b2:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    34b6:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <twi_rxBufferIndex>
    34ba:	cf cf       	rjmp	.-98     	; 0x345a <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    34bc:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <twi_rxBufferIndex>
    34c0:	80 32       	cpi	r24, 0x20	; 32
    34c2:	08 f0       	brcs	.+2      	; 0x34c6 <__vector_39+0x182>
    34c4:	4d c0       	rjmp	.+154    	; 0x3560 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    34c6:	e0 91 18 03 	lds	r30, 0x0318	; 0x800318 <twi_rxBufferIndex>
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	8e 0f       	add	r24, r30
    34ce:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <twi_rxBufferIndex>
    34d2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    34d6:	f0 e0       	ldi	r31, 0x00	; 0
    34d8:	e7 5e       	subi	r30, 0xE7	; 231
    34da:	fc 4f       	sbci	r31, 0xFC	; 252
    34dc:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    34de:	bd cf       	rjmp	.-134    	; 0x345a <__vector_39+0x116>
    34e0:	0a dd       	rcall	.-1516   	; 0x2ef6 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    34e2:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <twi_rxBufferIndex>
    34e6:	80 32       	cpi	r24, 0x20	; 32
    34e8:	30 f4       	brcc	.+12     	; 0x34f6 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    34ea:	e0 91 18 03 	lds	r30, 0x0318	; 0x800318 <twi_rxBufferIndex>
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	e7 5e       	subi	r30, 0xE7	; 231
    34f2:	fc 4f       	sbci	r31, 0xFC	; 252
    34f4:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    34f6:	60 91 18 03 	lds	r22, 0x0318	; 0x800318 <twi_rxBufferIndex>
    34fa:	70 e0       	ldi	r23, 0x00	; 0
    34fc:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <twi_onSlaveReceive>
    3500:	f0 91 7e 03 	lds	r31, 0x037E	; 0x80037e <twi_onSlaveReceive+0x1>
    3504:	89 e1       	ldi	r24, 0x19	; 25
    3506:	93 e0       	ldi	r25, 0x03	; 3
    3508:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    350a:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <twi_rxBufferIndex>
      break;
    350e:	35 c0       	rjmp	.+106    	; 0x357a <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3510:	84 e0       	ldi	r24, 0x04	; 4
    3512:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3516:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    351a:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    351e:	e0 91 7f 03 	lds	r30, 0x037F	; 0x80037f <twi_onSlaveTransmit>
    3522:	f0 91 80 03 	lds	r31, 0x0380	; 0x800380 <twi_onSlaveTransmit+0x1>
    3526:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3528:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <twi_txBufferLength>
    352c:	81 11       	cpse	r24, r1
    352e:	05 c0       	rjmp	.+10     	; 0x353a <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    3530:	81 e0       	ldi	r24, 0x01	; 1
    3532:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3536:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    353a:	e0 91 3a 03 	lds	r30, 0x033A	; 0x80033a <twi_txBufferIndex>
    353e:	81 e0       	ldi	r24, 0x01	; 1
    3540:	8e 0f       	add	r24, r30
    3542:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <twi_txBufferIndex>
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	e5 5c       	subi	r30, 0xC5	; 197
    354a:	fc 4f       	sbci	r31, 0xFC	; 252
    354c:	80 81       	ld	r24, Z
    354e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3552:	90 91 3a 03 	lds	r25, 0x033A	; 0x80033a <twi_txBufferIndex>
    3556:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <twi_txBufferLength>
    355a:	98 17       	cp	r25, r24
    355c:	08 f4       	brcc	.+2      	; 0x3560 <__vector_39+0x21c>
    355e:	7d cf       	rjmp	.-262    	; 0x345a <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3560:	85 e8       	ldi	r24, 0x85	; 133
    3562:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3566:	09 c0       	rjmp	.+18     	; 0x357a <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3568:	85 ec       	ldi	r24, 0xC5	; 197
    356a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    356e:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <twi_state>
      break;
    3572:	03 c0       	rjmp	.+6      	; 0x357a <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3574:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <twi_error>
      twi_stop();
    3578:	ae de       	rcall	.-676    	; 0x32d6 <twi_stop>
      break;
  }
}
    357a:	ff 91       	pop	r31
    357c:	ef 91       	pop	r30
    357e:	bf 91       	pop	r27
    3580:	af 91       	pop	r26
    3582:	9f 91       	pop	r25
    3584:	8f 91       	pop	r24
    3586:	7f 91       	pop	r23
    3588:	6f 91       	pop	r22
    358a:	5f 91       	pop	r21
    358c:	4f 91       	pop	r20
    358e:	3f 91       	pop	r19
    3590:	2f 91       	pop	r18
    3592:	0f 90       	pop	r0
    3594:	0b be       	out	0x3b, r0	; 59
    3596:	0f 90       	pop	r0
    3598:	0f be       	out	0x3f, r0	; 63
    359a:	0f 90       	pop	r0
    359c:	1f 90       	pop	r1
    359e:	18 95       	reti

000035a0 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    35a0:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <_ZN7TwoWire14rxBufferLengthE>
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <_ZN7TwoWire13rxBufferIndexE>
    35aa:	82 1b       	sub	r24, r18
    35ac:	91 09       	sbc	r25, r1
    35ae:	08 95       	ret

000035b0 <_ZN7TwoWire4readEv>:
    35b0:	90 91 c0 03 	lds	r25, 0x03C0	; 0x8003c0 <_ZN7TwoWire13rxBufferIndexE>
    35b4:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <_ZN7TwoWire14rxBufferLengthE>
    35b8:	98 17       	cp	r25, r24
    35ba:	50 f4       	brcc	.+20     	; 0x35d0 <_ZN7TwoWire4readEv+0x20>
    35bc:	e9 2f       	mov	r30, r25
    35be:	f0 e0       	ldi	r31, 0x00	; 0
    35c0:	ef 53       	subi	r30, 0x3F	; 63
    35c2:	fc 4f       	sbci	r31, 0xFC	; 252
    35c4:	20 81       	ld	r18, Z
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	9f 5f       	subi	r25, 0xFF	; 255
    35ca:	90 93 c0 03 	sts	0x03C0, r25	; 0x8003c0 <_ZN7TwoWire13rxBufferIndexE>
    35ce:	02 c0       	rjmp	.+4      	; 0x35d4 <_ZN7TwoWire4readEv+0x24>
    35d0:	2f ef       	ldi	r18, 0xFF	; 255
    35d2:	3f ef       	ldi	r19, 0xFF	; 255
    35d4:	c9 01       	movw	r24, r18
    35d6:	08 95       	ret

000035d8 <_ZN7TwoWire4peekEv>:
    35d8:	e0 91 c0 03 	lds	r30, 0x03C0	; 0x8003c0 <_ZN7TwoWire13rxBufferIndexE>
    35dc:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <_ZN7TwoWire14rxBufferLengthE>
    35e0:	e8 17       	cp	r30, r24
    35e2:	30 f4       	brcc	.+12     	; 0x35f0 <_ZN7TwoWire4peekEv+0x18>
    35e4:	f0 e0       	ldi	r31, 0x00	; 0
    35e6:	ef 53       	subi	r30, 0x3F	; 63
    35e8:	fc 4f       	sbci	r31, 0xFC	; 252
    35ea:	80 81       	ld	r24, Z
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	08 95       	ret
    35f0:	8f ef       	ldi	r24, 0xFF	; 255
    35f2:	9f ef       	ldi	r25, 0xFF	; 255
    35f4:	08 95       	ret

000035f6 <_ZN7TwoWire5flushEv>:
    35f6:	08 95       	ret

000035f8 <_ZN7TwoWire16onReceiveServiceEPhi>:
    35f8:	cf 93       	push	r28
    35fa:	df 93       	push	r29
    35fc:	ec 01       	movw	r28, r24
    35fe:	e0 91 97 03 	lds	r30, 0x0397	; 0x800397 <_ZN7TwoWire14user_onReceiveE>
    3602:	f0 91 98 03 	lds	r31, 0x0398	; 0x800398 <_ZN7TwoWire14user_onReceiveE+0x1>
    3606:	30 97       	sbiw	r30, 0x00	; 0
    3608:	f1 f0       	breq	.+60     	; 0x3646 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    360a:	90 91 c0 03 	lds	r25, 0x03C0	; 0x8003c0 <_ZN7TwoWire13rxBufferIndexE>
    360e:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <_ZN7TwoWire14rxBufferLengthE>
    3612:	98 17       	cp	r25, r24
    3614:	c0 f0       	brcs	.+48     	; 0x3646 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	29 2f       	mov	r18, r25
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	26 17       	cp	r18, r22
    361e:	37 07       	cpc	r19, r23
    3620:	54 f4       	brge	.+20     	; 0x3636 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    3622:	de 01       	movw	r26, r28
    3624:	a2 0f       	add	r26, r18
    3626:	b3 1f       	adc	r27, r19
    3628:	4c 91       	ld	r20, X
    362a:	d9 01       	movw	r26, r18
    362c:	af 53       	subi	r26, 0x3F	; 63
    362e:	bc 4f       	sbci	r27, 0xFC	; 252
    3630:	4c 93       	st	X, r20
    3632:	9f 5f       	subi	r25, 0xFF	; 255
    3634:	f1 cf       	rjmp	.-30     	; 0x3618 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    3636:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <_ZN7TwoWire13rxBufferIndexE>
    363a:	60 93 bf 03 	sts	0x03BF, r22	; 0x8003bf <_ZN7TwoWire14rxBufferLengthE>
    363e:	cb 01       	movw	r24, r22
    3640:	df 91       	pop	r29
    3642:	cf 91       	pop	r28
    3644:	19 94       	eijmp
    3646:	df 91       	pop	r29
    3648:	cf 91       	pop	r28
    364a:	08 95       	ret

0000364c <_ZN7TwoWire16onRequestServiceEv>:
    364c:	e0 91 99 03 	lds	r30, 0x0399	; 0x800399 <_ZN7TwoWire14user_onRequestE>
    3650:	f0 91 9a 03 	lds	r31, 0x039A	; 0x80039a <_ZN7TwoWire14user_onRequestE+0x1>
    3654:	30 97       	sbiw	r30, 0x00	; 0
    3656:	29 f0       	breq	.+10     	; 0x3662 <_ZN7TwoWire16onRequestServiceEv+0x16>
    3658:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <_ZN7TwoWire13txBufferIndexE>
    365c:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <_ZN7TwoWire14txBufferLengthE>
    3660:	19 94       	eijmp
    3662:	08 95       	ret

00003664 <_ZN7TwoWire5writeEPKhj>:
    3664:	cf 92       	push	r12
    3666:	df 92       	push	r13
    3668:	ef 92       	push	r14
    366a:	ff 92       	push	r15
    366c:	0f 93       	push	r16
    366e:	1f 93       	push	r17
    3670:	cf 93       	push	r28
    3672:	df 93       	push	r29
    3674:	7c 01       	movw	r14, r24
    3676:	cb 01       	movw	r24, r22
    3678:	8a 01       	movw	r16, r20
    367a:	20 91 9b 03 	lds	r18, 0x039B	; 0x80039b <_ZN7TwoWire12transmittingE>
    367e:	22 23       	and	r18, r18
    3680:	89 f0       	breq	.+34     	; 0x36a4 <_ZN7TwoWire5writeEPKhj+0x40>
    3682:	eb 01       	movw	r28, r22
    3684:	6b 01       	movw	r12, r22
    3686:	c4 0e       	add	r12, r20
    3688:	d5 1e       	adc	r13, r21
    368a:	cc 15       	cp	r28, r12
    368c:	dd 05       	cpc	r29, r13
    368e:	61 f0       	breq	.+24     	; 0x36a8 <_ZN7TwoWire5writeEPKhj+0x44>
    3690:	69 91       	ld	r22, Y+
    3692:	d7 01       	movw	r26, r14
    3694:	ed 91       	ld	r30, X+
    3696:	fc 91       	ld	r31, X
    3698:	01 90       	ld	r0, Z+
    369a:	f0 81       	ld	r31, Z
    369c:	e0 2d       	mov	r30, r0
    369e:	c7 01       	movw	r24, r14
    36a0:	19 95       	eicall
    36a2:	f3 cf       	rjmp	.-26     	; 0x368a <_ZN7TwoWire5writeEPKhj+0x26>
    36a4:	64 2f       	mov	r22, r20
    36a6:	f5 db       	rcall	.-2070   	; 0x2e92 <twi_transmit>
    36a8:	c8 01       	movw	r24, r16
    36aa:	df 91       	pop	r29
    36ac:	cf 91       	pop	r28
    36ae:	1f 91       	pop	r17
    36b0:	0f 91       	pop	r16
    36b2:	ff 90       	pop	r15
    36b4:	ef 90       	pop	r14
    36b6:	df 90       	pop	r13
    36b8:	cf 90       	pop	r12
    36ba:	08 95       	ret

000036bc <_ZN7TwoWire5writeEh>:
    36bc:	cf 93       	push	r28
    36be:	df 93       	push	r29
    36c0:	1f 92       	push	r1
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
    36c6:	69 83       	std	Y+1, r22	; 0x01
    36c8:	20 91 9b 03 	lds	r18, 0x039B	; 0x80039b <_ZN7TwoWire12transmittingE>
    36cc:	22 23       	and	r18, r18
    36ce:	d1 f0       	breq	.+52     	; 0x3704 <_ZN7TwoWire5writeEh+0x48>
    36d0:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <_ZN7TwoWire14txBufferLengthE>
    36d4:	20 32       	cpi	r18, 0x20	; 32
    36d6:	40 f0       	brcs	.+16     	; 0x36e8 <_ZN7TwoWire5writeEh+0x2c>
    36d8:	21 e0       	ldi	r18, 0x01	; 1
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	fc 01       	movw	r30, r24
    36de:	33 83       	std	Z+3, r19	; 0x03
    36e0:	22 83       	std	Z+2, r18	; 0x02
    36e2:	80 e0       	ldi	r24, 0x00	; 0
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	14 c0       	rjmp	.+40     	; 0x3710 <_ZN7TwoWire5writeEh+0x54>
    36e8:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <_ZN7TwoWire13txBufferIndexE>
    36ec:	e8 2f       	mov	r30, r24
    36ee:	f0 e0       	ldi	r31, 0x00	; 0
    36f0:	e2 56       	subi	r30, 0x62	; 98
    36f2:	fc 4f       	sbci	r31, 0xFC	; 252
    36f4:	99 81       	ldd	r25, Y+1	; 0x01
    36f6:	90 83       	st	Z, r25
    36f8:	8f 5f       	subi	r24, 0xFF	; 255
    36fa:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <_ZN7TwoWire13txBufferIndexE>
    36fe:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <_ZN7TwoWire14txBufferLengthE>
    3702:	04 c0       	rjmp	.+8      	; 0x370c <_ZN7TwoWire5writeEh+0x50>
    3704:	61 e0       	ldi	r22, 0x01	; 1
    3706:	ce 01       	movw	r24, r28
    3708:	01 96       	adiw	r24, 0x01	; 1
    370a:	c3 db       	rcall	.-2170   	; 0x2e92 <twi_transmit>
    370c:	81 e0       	ldi	r24, 0x01	; 1
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	0f 90       	pop	r0
    3712:	df 91       	pop	r29
    3714:	cf 91       	pop	r28
    3716:	08 95       	ret

00003718 <_ZN7TwoWireC1Ev>:
    3718:	fc 01       	movw	r30, r24
    371a:	13 82       	std	Z+3, r1	; 0x03
    371c:	12 82       	std	Z+2, r1	; 0x02
    371e:	88 ee       	ldi	r24, 0xE8	; 232
    3720:	93 e0       	ldi	r25, 0x03	; 3
    3722:	a0 e0       	ldi	r26, 0x00	; 0
    3724:	b0 e0       	ldi	r27, 0x00	; 0
    3726:	84 83       	std	Z+4, r24	; 0x04
    3728:	95 83       	std	Z+5, r25	; 0x05
    372a:	a6 83       	std	Z+6, r26	; 0x06
    372c:	b7 83       	std	Z+7, r27	; 0x07
    372e:	8d e7       	ldi	r24, 0x7D	; 125
    3730:	92 e0       	ldi	r25, 0x02	; 2
    3732:	91 83       	std	Z+1, r25	; 0x01
    3734:	80 83       	st	Z, r24
    3736:	08 95       	ret

00003738 <_ZN7TwoWire5beginEv>:
    3738:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <_ZN7TwoWire13rxBufferIndexE>
    373c:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <_ZN7TwoWire14rxBufferLengthE>
    3740:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <_ZN7TwoWire13txBufferIndexE>
    3744:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <_ZN7TwoWire14txBufferLengthE>
    3748:	65 db       	rcall	.-2358   	; 0x2e14 <twi_init>
    374a:	86 e2       	ldi	r24, 0x26	; 38
    374c:	9b e1       	ldi	r25, 0x1B	; 27
    374e:	ce db       	rcall	.-2148   	; 0x2eec <twi_attachSlaveTxEvent>
    3750:	8c ef       	ldi	r24, 0xFC	; 252
    3752:	9a e1       	ldi	r25, 0x1A	; 26
    3754:	c6 cb       	rjmp	.-2164   	; 0x2ee2 <twi_attachSlaveRxEvent>

00003756 <_ZN7TwoWire8setClockEm>:
    3756:	cb 01       	movw	r24, r22
    3758:	ba 01       	movw	r22, r20
    375a:	87 cb       	rjmp	.-2290   	; 0x2e6a <twi_setFrequency>

0000375c <_ZN7TwoWire17beginTransmissionEh>:
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <_ZN7TwoWire12transmittingE>
    3762:	60 93 be 03 	sts	0x03BE, r22	; 0x8003be <_ZN7TwoWire9txAddressE>
    3766:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <_ZN7TwoWire13txBufferIndexE>
    376a:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <_ZN7TwoWire14txBufferLengthE>
    376e:	08 95       	ret

00003770 <_ZN7TwoWire17beginTransmissionEi>:
    3770:	f5 cf       	rjmp	.-22     	; 0x375c <_ZN7TwoWire17beginTransmissionEh>

00003772 <_ZN7TwoWire15endTransmissionEh>:
    3772:	0f 93       	push	r16
    3774:	06 2f       	mov	r16, r22
    3776:	21 e0       	ldi	r18, 0x01	; 1
    3778:	40 91 9c 03 	lds	r20, 0x039C	; 0x80039c <_ZN7TwoWire14txBufferLengthE>
    377c:	6e e9       	ldi	r22, 0x9E	; 158
    377e:	73 e0       	ldi	r23, 0x03	; 3
    3780:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <_ZN7TwoWire9txAddressE>
    3784:	b9 dc       	rcall	.-1678   	; 0x30f8 <twi_writeTo>
    3786:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <_ZN7TwoWire13txBufferIndexE>
    378a:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <_ZN7TwoWire14txBufferLengthE>
    378e:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <_ZN7TwoWire12transmittingE>
    3792:	0f 91       	pop	r16
    3794:	08 95       	ret

00003796 <_ZN7TwoWire11requestFromEhhmhh>:
    3796:	4f 92       	push	r4
    3798:	5f 92       	push	r5
    379a:	6f 92       	push	r6
    379c:	7f 92       	push	r7
    379e:	af 92       	push	r10
    37a0:	bf 92       	push	r11
    37a2:	cf 92       	push	r12
    37a4:	ef 92       	push	r14
    37a6:	ff 92       	push	r15
    37a8:	0f 93       	push	r16
    37aa:	1f 93       	push	r17
    37ac:	cf 93       	push	r28
    37ae:	df 93       	push	r29
    37b0:	5c 01       	movw	r10, r24
    37b2:	f6 2e       	mov	r15, r22
    37b4:	d4 2f       	mov	r29, r20
    37b6:	28 01       	movw	r4, r16
    37b8:	39 01       	movw	r6, r18
    37ba:	ee 20       	and	r14, r14
    37bc:	11 f1       	breq	.+68     	; 0x3802 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    37be:	ce df       	rcall	.-100    	; 0x375c <_ZN7TwoWire17beginTransmissionEh>
    37c0:	ce 2d       	mov	r28, r14
    37c2:	c4 30       	cpi	r28, 0x04	; 4
    37c4:	08 f0       	brcs	.+2      	; 0x37c8 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    37c6:	c3 e0       	ldi	r28, 0x03	; 3
    37c8:	c1 50       	subi	r28, 0x01	; 1
    37ca:	c0 f0       	brcs	.+48     	; 0x37fc <_ZN7TwoWire11requestFromEhhmhh+0x66>
    37cc:	28 e0       	ldi	r18, 0x08	; 8
    37ce:	c2 9f       	mul	r28, r18
    37d0:	c0 01       	movw	r24, r0
    37d2:	11 24       	eor	r1, r1
    37d4:	a3 01       	movw	r20, r6
    37d6:	92 01       	movw	r18, r4
    37d8:	04 c0       	rjmp	.+8      	; 0x37e2 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    37da:	56 95       	lsr	r21
    37dc:	47 95       	ror	r20
    37de:	37 95       	ror	r19
    37e0:	27 95       	ror	r18
    37e2:	8a 95       	dec	r24
    37e4:	d2 f7       	brpl	.-12     	; 0x37da <_ZN7TwoWire11requestFromEhhmhh+0x44>
    37e6:	ca 01       	movw	r24, r20
    37e8:	b9 01       	movw	r22, r18
    37ea:	d5 01       	movw	r26, r10
    37ec:	ed 91       	ld	r30, X+
    37ee:	fc 91       	ld	r31, X
    37f0:	01 90       	ld	r0, Z+
    37f2:	f0 81       	ld	r31, Z
    37f4:	e0 2d       	mov	r30, r0
    37f6:	c5 01       	movw	r24, r10
    37f8:	19 95       	eicall
    37fa:	e6 cf       	rjmp	.-52     	; 0x37c8 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    37fc:	60 e0       	ldi	r22, 0x00	; 0
    37fe:	c5 01       	movw	r24, r10
    3800:	b8 df       	rcall	.-144    	; 0x3772 <_ZN7TwoWire15endTransmissionEh>
    3802:	4d 2f       	mov	r20, r29
    3804:	d1 32       	cpi	r29, 0x21	; 33
    3806:	08 f0       	brcs	.+2      	; 0x380a <_ZN7TwoWire11requestFromEhhmhh+0x74>
    3808:	40 e2       	ldi	r20, 0x20	; 32
    380a:	2c 2d       	mov	r18, r12
    380c:	61 ec       	ldi	r22, 0xC1	; 193
    380e:	73 e0       	ldi	r23, 0x03	; 3
    3810:	8f 2d       	mov	r24, r15
    3812:	8b db       	rcall	.-2282   	; 0x2f2a <twi_readFrom>
    3814:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <_ZN7TwoWire13rxBufferIndexE>
    3818:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <_ZN7TwoWire14rxBufferLengthE>
    381c:	df 91       	pop	r29
    381e:	cf 91       	pop	r28
    3820:	1f 91       	pop	r17
    3822:	0f 91       	pop	r16
    3824:	ff 90       	pop	r15
    3826:	ef 90       	pop	r14
    3828:	cf 90       	pop	r12
    382a:	bf 90       	pop	r11
    382c:	af 90       	pop	r10
    382e:	7f 90       	pop	r7
    3830:	6f 90       	pop	r6
    3832:	5f 90       	pop	r5
    3834:	4f 90       	pop	r4
    3836:	08 95       	ret

00003838 <_ZN7TwoWire11requestFromEhhh>:
    3838:	cf 92       	push	r12
    383a:	ef 92       	push	r14
    383c:	0f 93       	push	r16
    383e:	1f 93       	push	r17
    3840:	c2 2e       	mov	r12, r18
    3842:	e1 2c       	mov	r14, r1
    3844:	00 e0       	ldi	r16, 0x00	; 0
    3846:	10 e0       	ldi	r17, 0x00	; 0
    3848:	98 01       	movw	r18, r16
    384a:	a5 df       	rcall	.-182    	; 0x3796 <_ZN7TwoWire11requestFromEhhmhh>
    384c:	1f 91       	pop	r17
    384e:	0f 91       	pop	r16
    3850:	ef 90       	pop	r14
    3852:	cf 90       	pop	r12
    3854:	08 95       	ret

00003856 <_ZN7TwoWire11requestFromEii>:
    3856:	21 e0       	ldi	r18, 0x01	; 1
    3858:	ef cf       	rjmp	.-34     	; 0x3838 <_ZN7TwoWire11requestFromEhhh>

0000385a <_ZN7TwoWire15endTransmissionEv>:
    385a:	61 e0       	ldi	r22, 0x01	; 1
    385c:	8a cf       	rjmp	.-236    	; 0x3772 <_ZN7TwoWire15endTransmissionEh>

0000385e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    385e:	8b e8       	ldi	r24, 0x8B	; 139
    3860:	93 e0       	ldi	r25, 0x03	; 3
    3862:	5a cf       	rjmp	.-332    	; 0x3718 <_ZN7TwoWireC1Ev>

00003864 <__cxa_pure_virtual>:
    3864:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <abort>

00003868 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3868:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    386a:	91 8d       	ldd	r25, Z+25	; 0x19
    386c:	22 8d       	ldd	r18, Z+26	; 0x1a
    386e:	89 2f       	mov	r24, r25
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	80 5c       	subi	r24, 0xC0	; 192
    3874:	9f 4f       	sbci	r25, 0xFF	; 255
    3876:	82 1b       	sub	r24, r18
    3878:	91 09       	sbc	r25, r1
}
    387a:	8f 73       	andi	r24, 0x3F	; 63
    387c:	99 27       	eor	r25, r25
    387e:	08 95       	ret

00003880 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3880:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3882:	91 8d       	ldd	r25, Z+25	; 0x19
    3884:	82 8d       	ldd	r24, Z+26	; 0x1a
    3886:	98 17       	cp	r25, r24
    3888:	31 f0       	breq	.+12     	; 0x3896 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    388a:	82 8d       	ldd	r24, Z+26	; 0x1a
    388c:	e8 0f       	add	r30, r24
    388e:	f1 1d       	adc	r31, r1
    3890:	85 8d       	ldd	r24, Z+29	; 0x1d
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3896:	8f ef       	ldi	r24, 0xFF	; 255
    3898:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    389a:	08 95       	ret

0000389c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    389c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    389e:	91 8d       	ldd	r25, Z+25	; 0x19
    38a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    38a2:	98 17       	cp	r25, r24
    38a4:	61 f0       	breq	.+24     	; 0x38be <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    38a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    38a8:	df 01       	movw	r26, r30
    38aa:	a8 0f       	add	r26, r24
    38ac:	b1 1d       	adc	r27, r1
    38ae:	5d 96       	adiw	r26, 0x1d	; 29
    38b0:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    38b2:	92 8d       	ldd	r25, Z+26	; 0x1a
    38b4:	9f 5f       	subi	r25, 0xFF	; 255
    38b6:	9f 73       	andi	r25, 0x3F	; 63
    38b8:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    38be:	8f ef       	ldi	r24, 0xFF	; 255
    38c0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    38c2:	08 95       	ret

000038c4 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    38c4:	fc 01       	movw	r30, r24
    38c6:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    38c8:	44 8d       	ldd	r20, Z+28	; 0x1c
    38ca:	25 2f       	mov	r18, r21
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	84 2f       	mov	r24, r20
    38d0:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    38d2:	82 1b       	sub	r24, r18
    38d4:	93 0b       	sbc	r25, r19
    38d6:	54 17       	cp	r21, r20
    38d8:	10 f0       	brcs	.+4      	; 0x38de <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    38da:	cf 96       	adiw	r24, 0x3f	; 63
    38dc:	08 95       	ret
  return tail - head - 1;
    38de:	01 97       	sbiw	r24, 0x01	; 1
}
    38e0:	08 95       	ret

000038e2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    38e2:	8e ef       	ldi	r24, 0xFE	; 254
    38e4:	9d e1       	ldi	r25, 0x1D	; 29
    38e6:	89 2b       	or	r24, r25
    38e8:	39 f0       	breq	.+14     	; 0x38f8 <_Z14serialEventRunv+0x16>
    38ea:	80 e0       	ldi	r24, 0x00	; 0
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	89 2b       	or	r24, r25
    38f0:	19 f0       	breq	.+6      	; 0x38f8 <_Z14serialEventRunv+0x16>
    38f2:	84 d1       	rcall	.+776    	; 0x3bfc <_Z17Serial0_availablev>
    38f4:	81 11       	cpse	r24, r1
    38f6:	25 c0       	rjmp	.+74     	; 0x3942 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	89 2b       	or	r24, r25
    38fe:	41 f0       	breq	.+16     	; 0x3910 <_Z14serialEventRunv+0x2e>
    3900:	80 e0       	ldi	r24, 0x00	; 0
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	89 2b       	or	r24, r25
    3906:	21 f0       	breq	.+8      	; 0x3910 <_Z14serialEventRunv+0x2e>
    3908:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    390c:	81 11       	cpse	r24, r1
    390e:	1c c0       	rjmp	.+56     	; 0x3948 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    3910:	80 e0       	ldi	r24, 0x00	; 0
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	89 2b       	or	r24, r25
    3916:	41 f0       	breq	.+16     	; 0x3928 <_Z14serialEventRunv+0x46>
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	89 2b       	or	r24, r25
    391e:	21 f0       	breq	.+8      	; 0x3928 <_Z14serialEventRunv+0x46>
    3920:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3924:	81 11       	cpse	r24, r1
    3926:	13 c0       	rjmp	.+38     	; 0x394e <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    3928:	80 e0       	ldi	r24, 0x00	; 0
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	89 2b       	or	r24, r25
    392e:	a1 f0       	breq	.+40     	; 0x3958 <_Z14serialEventRunv+0x76>
    3930:	80 e0       	ldi	r24, 0x00	; 0
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	89 2b       	or	r24, r25
    3936:	81 f0       	breq	.+32     	; 0x3958 <_Z14serialEventRunv+0x76>
    3938:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    393c:	81 11       	cpse	r24, r1
    393e:	0a c0       	rjmp	.+20     	; 0x3954 <_Z14serialEventRunv+0x72>
    3940:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3942:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3946:	d8 cf       	rjmp	.-80     	; 0x38f8 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    3948:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    394c:	e1 cf       	rjmp	.-62     	; 0x3910 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    394e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3952:	ea cf       	rjmp	.-44     	; 0x3928 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    3954:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3958:	08 95       	ret

0000395a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    395a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    395c:	84 8d       	ldd	r24, Z+28	; 0x1c
    395e:	df 01       	movw	r26, r30
    3960:	a8 0f       	add	r26, r24
    3962:	b1 1d       	adc	r27, r1
    3964:	a3 5a       	subi	r26, 0xA3	; 163
    3966:	bf 4f       	sbci	r27, 0xFF	; 255
    3968:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    396a:	84 8d       	ldd	r24, Z+28	; 0x1c
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	01 96       	adiw	r24, 0x01	; 1
    3970:	8f 73       	andi	r24, 0x3F	; 63
    3972:	99 27       	eor	r25, r25
    3974:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3976:	a6 89       	ldd	r26, Z+22	; 0x16
    3978:	b7 89       	ldd	r27, Z+23	; 0x17
    397a:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    397c:	a0 89       	ldd	r26, Z+16	; 0x10
    397e:	b1 89       	ldd	r27, Z+17	; 0x11
    3980:	8c 91       	ld	r24, X
    3982:	83 70       	andi	r24, 0x03	; 3
    3984:	80 64       	ori	r24, 0x40	; 64
    3986:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    3988:	93 8d       	ldd	r25, Z+27	; 0x1b
    398a:	84 8d       	ldd	r24, Z+28	; 0x1c
    398c:	98 13       	cpse	r25, r24
    398e:	06 c0       	rjmp	.+12     	; 0x399c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3990:	02 88       	ldd	r0, Z+18	; 0x12
    3992:	f3 89       	ldd	r31, Z+19	; 0x13
    3994:	e0 2d       	mov	r30, r0
    3996:	80 81       	ld	r24, Z
    3998:	8f 7d       	andi	r24, 0xDF	; 223
    399a:	80 83       	st	Z, r24
    399c:	08 95       	ret

0000399e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    399e:	ef 92       	push	r14
    39a0:	ff 92       	push	r15
    39a2:	0f 93       	push	r16
    39a4:	1f 93       	push	r17
    39a6:	cf 93       	push	r28
    39a8:	df 93       	push	r29
    39aa:	ec 01       	movw	r28, r24
  _written = true;
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    39b0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    39b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    39b4:	98 13       	cpse	r25, r24
    39b6:	05 c0       	rjmp	.+10     	; 0x39c2 <_ZN14HardwareSerial5writeEh+0x24>
    39b8:	e8 89       	ldd	r30, Y+16	; 0x10
    39ba:	f9 89       	ldd	r31, Y+17	; 0x11
    39bc:	80 81       	ld	r24, Z
    39be:	85 fd       	sbrc	r24, 5
    39c0:	25 c0       	rjmp	.+74     	; 0x3a0c <_ZN14HardwareSerial5writeEh+0x6e>
    39c2:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    39c4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    39c6:	10 e0       	ldi	r17, 0x00	; 0
    39c8:	0f 5f       	subi	r16, 0xFF	; 255
    39ca:	1f 4f       	sbci	r17, 0xFF	; 255
    39cc:	0f 73       	andi	r16, 0x3F	; 63
    39ce:	11 27       	eor	r17, r17
    39d0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    39d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    39d4:	e8 12       	cpse	r14, r24
    39d6:	0b c0       	rjmp	.+22     	; 0x39ee <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    39d8:	0f b6       	in	r0, 0x3f	; 63
    39da:	07 fc       	sbrc	r0, 7
    39dc:	fa cf       	rjmp	.-12     	; 0x39d2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    39de:	e8 89       	ldd	r30, Y+16	; 0x10
    39e0:	f9 89       	ldd	r31, Y+17	; 0x11
    39e2:	80 81       	ld	r24, Z
    39e4:	85 ff       	sbrs	r24, 5
    39e6:	f5 cf       	rjmp	.-22     	; 0x39d2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    39e8:	ce 01       	movw	r24, r28
    39ea:	b7 df       	rcall	.-146    	; 0x395a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    39ec:	f2 cf       	rjmp	.-28     	; 0x39d2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    39ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39f0:	fe 01       	movw	r30, r28
    39f2:	e8 0f       	add	r30, r24
    39f4:	f1 1d       	adc	r31, r1
    39f6:	e3 5a       	subi	r30, 0xA3	; 163
    39f8:	ff 4f       	sbci	r31, 0xFF	; 255
    39fa:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    39fc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    39fe:	f8 94       	cli
    _tx_buffer_head = i;
    3a00:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    3a02:	ea 89       	ldd	r30, Y+18	; 0x12
    3a04:	fb 89       	ldd	r31, Y+19	; 0x13
    3a06:	80 81       	ld	r24, Z
    3a08:	80 62       	ori	r24, 0x20	; 32
    3a0a:	0a c0       	rjmp	.+20     	; 0x3a20 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3a0c:	9f b7       	in	r25, 0x3f	; 63
    3a0e:	f8 94       	cli
      *_udr = c;
    3a10:	ee 89       	ldd	r30, Y+22	; 0x16
    3a12:	ff 89       	ldd	r31, Y+23	; 0x17
    3a14:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3a16:	e8 89       	ldd	r30, Y+16	; 0x10
    3a18:	f9 89       	ldd	r31, Y+17	; 0x11
    3a1a:	80 81       	ld	r24, Z
    3a1c:	83 70       	andi	r24, 0x03	; 3
    3a1e:	80 64       	ori	r24, 0x40	; 64
    3a20:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3a22:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	df 91       	pop	r29
    3a2a:	cf 91       	pop	r28
    3a2c:	1f 91       	pop	r17
    3a2e:	0f 91       	pop	r16
    3a30:	ff 90       	pop	r15
    3a32:	ef 90       	pop	r14
    3a34:	08 95       	ret

00003a36 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3a36:	cf 93       	push	r28
    3a38:	df 93       	push	r29
    3a3a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3a3c:	88 8d       	ldd	r24, Y+24	; 0x18
    3a3e:	88 23       	and	r24, r24
    3a40:	c1 f0       	breq	.+48     	; 0x3a72 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3a42:	ea 89       	ldd	r30, Y+18	; 0x12
    3a44:	fb 89       	ldd	r31, Y+19	; 0x13
    3a46:	80 81       	ld	r24, Z
    3a48:	85 fd       	sbrc	r24, 5
    3a4a:	05 c0       	rjmp	.+10     	; 0x3a56 <_ZN14HardwareSerial5flushEv+0x20>
    3a4c:	a8 89       	ldd	r26, Y+16	; 0x10
    3a4e:	b9 89       	ldd	r27, Y+17	; 0x11
    3a50:	8c 91       	ld	r24, X
    3a52:	86 fd       	sbrc	r24, 6
    3a54:	0e c0       	rjmp	.+28     	; 0x3a72 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3a56:	0f b6       	in	r0, 0x3f	; 63
    3a58:	07 fc       	sbrc	r0, 7
    3a5a:	f5 cf       	rjmp	.-22     	; 0x3a46 <_ZN14HardwareSerial5flushEv+0x10>
    3a5c:	80 81       	ld	r24, Z
    3a5e:	85 ff       	sbrs	r24, 5
    3a60:	f2 cf       	rjmp	.-28     	; 0x3a46 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3a62:	a8 89       	ldd	r26, Y+16	; 0x10
    3a64:	b9 89       	ldd	r27, Y+17	; 0x11
    3a66:	8c 91       	ld	r24, X
    3a68:	85 ff       	sbrs	r24, 5
    3a6a:	ed cf       	rjmp	.-38     	; 0x3a46 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3a6c:	ce 01       	movw	r24, r28
    3a6e:	75 df       	rcall	.-278    	; 0x395a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3a70:	e8 cf       	rjmp	.-48     	; 0x3a42 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3a72:	df 91       	pop	r29
    3a74:	cf 91       	pop	r28
    3a76:	08 95       	ret

00003a78 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3a78:	cf 92       	push	r12
    3a7a:	df 92       	push	r13
    3a7c:	ef 92       	push	r14
    3a7e:	ff 92       	push	r15
    3a80:	1f 93       	push	r17
    3a82:	cf 93       	push	r28
    3a84:	df 93       	push	r29
    3a86:	ec 01       	movw	r28, r24
    3a88:	6a 01       	movw	r12, r20
    3a8a:	7b 01       	movw	r14, r22
    3a8c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3a8e:	e8 89       	ldd	r30, Y+16	; 0x10
    3a90:	f9 89       	ldd	r31, Y+17	; 0x11
    3a92:	82 e0       	ldi	r24, 0x02	; 2
    3a94:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3a96:	41 15       	cp	r20, r1
    3a98:	51 4e       	sbci	r21, 0xE1	; 225
    3a9a:	61 05       	cpc	r22, r1
    3a9c:	71 05       	cpc	r23, r1
    3a9e:	a9 f0       	breq	.+42     	; 0x3aca <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3aa0:	60 e0       	ldi	r22, 0x00	; 0
    3aa2:	79 e0       	ldi	r23, 0x09	; 9
    3aa4:	8d e3       	ldi	r24, 0x3D	; 61
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	a7 01       	movw	r20, r14
    3aaa:	96 01       	movw	r18, r12
    3aac:	eb d6       	rcall	.+3542   	; 0x4884 <__udivmodsi4>
    3aae:	da 01       	movw	r26, r20
    3ab0:	c9 01       	movw	r24, r18
    3ab2:	01 97       	sbiw	r24, 0x01	; 1
    3ab4:	a1 09       	sbc	r26, r1
    3ab6:	b1 09       	sbc	r27, r1
    3ab8:	b6 95       	lsr	r27
    3aba:	a7 95       	ror	r26
    3abc:	97 95       	ror	r25
    3abe:	87 95       	ror	r24
    3ac0:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3ac2:	21 15       	cp	r18, r1
    3ac4:	80 e1       	ldi	r24, 0x10	; 16
    3ac6:	38 07       	cpc	r19, r24
    3ac8:	a0 f0       	brcs	.+40     	; 0x3af2 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    3aca:	e8 89       	ldd	r30, Y+16	; 0x10
    3acc:	f9 89       	ldd	r31, Y+17	; 0x11
    3ace:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3ad0:	60 e8       	ldi	r22, 0x80	; 128
    3ad2:	74 e8       	ldi	r23, 0x84	; 132
    3ad4:	8e e1       	ldi	r24, 0x1E	; 30
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	a7 01       	movw	r20, r14
    3ada:	96 01       	movw	r18, r12
    3adc:	d3 d6       	rcall	.+3494   	; 0x4884 <__udivmodsi4>
    3ade:	da 01       	movw	r26, r20
    3ae0:	c9 01       	movw	r24, r18
    3ae2:	01 97       	sbiw	r24, 0x01	; 1
    3ae4:	a1 09       	sbc	r26, r1
    3ae6:	b1 09       	sbc	r27, r1
    3ae8:	b6 95       	lsr	r27
    3aea:	a7 95       	ror	r26
    3aec:	97 95       	ror	r25
    3aee:	87 95       	ror	r24
    3af0:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3af2:	ec 85       	ldd	r30, Y+12	; 0x0c
    3af4:	fd 85       	ldd	r31, Y+13	; 0x0d
    3af6:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3af8:	ee 85       	ldd	r30, Y+14	; 0x0e
    3afa:	ff 85       	ldd	r31, Y+15	; 0x0f
    3afc:	20 83       	st	Z, r18

  _written = false;
    3afe:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3b00:	ec 89       	ldd	r30, Y+20	; 0x14
    3b02:	fd 89       	ldd	r31, Y+21	; 0x15
    3b04:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3b06:	ea 89       	ldd	r30, Y+18	; 0x12
    3b08:	fb 89       	ldd	r31, Y+19	; 0x13
    3b0a:	80 81       	ld	r24, Z
    3b0c:	80 61       	ori	r24, 0x10	; 16
    3b0e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3b10:	ea 89       	ldd	r30, Y+18	; 0x12
    3b12:	fb 89       	ldd	r31, Y+19	; 0x13
    3b14:	80 81       	ld	r24, Z
    3b16:	88 60       	ori	r24, 0x08	; 8
    3b18:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3b1a:	ea 89       	ldd	r30, Y+18	; 0x12
    3b1c:	fb 89       	ldd	r31, Y+19	; 0x13
    3b1e:	80 81       	ld	r24, Z
    3b20:	80 68       	ori	r24, 0x80	; 128
    3b22:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3b24:	ea 89       	ldd	r30, Y+18	; 0x12
    3b26:	fb 89       	ldd	r31, Y+19	; 0x13
    3b28:	80 81       	ld	r24, Z
    3b2a:	8f 7d       	andi	r24, 0xDF	; 223
    3b2c:	80 83       	st	Z, r24
}
    3b2e:	df 91       	pop	r29
    3b30:	cf 91       	pop	r28
    3b32:	1f 91       	pop	r17
    3b34:	ff 90       	pop	r15
    3b36:	ef 90       	pop	r14
    3b38:	df 90       	pop	r13
    3b3a:	cf 90       	pop	r12
    3b3c:	08 95       	ret

00003b3e <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3b3e:	1f 92       	push	r1
    3b40:	0f 92       	push	r0
    3b42:	0f b6       	in	r0, 0x3f	; 63
    3b44:	0f 92       	push	r0
    3b46:	11 24       	eor	r1, r1
    3b48:	0b b6       	in	r0, 0x3b	; 59
    3b4a:	0f 92       	push	r0
    3b4c:	2f 93       	push	r18
    3b4e:	8f 93       	push	r24
    3b50:	9f 93       	push	r25
    3b52:	ef 93       	push	r30
    3b54:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3b56:	e0 91 f1 03 	lds	r30, 0x03F1	; 0x8003f1 <Serial+0x10>
    3b5a:	f0 91 f2 03 	lds	r31, 0x03F2	; 0x8003f2 <Serial+0x11>
    3b5e:	80 81       	ld	r24, Z
    3b60:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <Serial+0x16>
    3b64:	f0 91 f8 03 	lds	r31, 0x03F8	; 0x8003f8 <Serial+0x17>
    3b68:	82 fd       	sbrc	r24, 2
    3b6a:	12 c0       	rjmp	.+36     	; 0x3b90 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3b6c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3b6e:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <Serial+0x19>
    3b72:	8f 5f       	subi	r24, 0xFF	; 255
    3b74:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3b76:	20 91 fb 03 	lds	r18, 0x03FB	; 0x8003fb <Serial+0x1a>
    3b7a:	82 17       	cp	r24, r18
    3b7c:	51 f0       	breq	.+20     	; 0x3b92 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    3b7e:	e0 91 fa 03 	lds	r30, 0x03FA	; 0x8003fa <Serial+0x19>
    3b82:	f0 e0       	ldi	r31, 0x00	; 0
    3b84:	ef 51       	subi	r30, 0x1F	; 31
    3b86:	fc 4f       	sbci	r31, 0xFC	; 252
    3b88:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3b8a:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <Serial+0x19>
    3b8e:	01 c0       	rjmp	.+2      	; 0x3b92 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3b90:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3b92:	ff 91       	pop	r31
    3b94:	ef 91       	pop	r30
    3b96:	9f 91       	pop	r25
    3b98:	8f 91       	pop	r24
    3b9a:	2f 91       	pop	r18
    3b9c:	0f 90       	pop	r0
    3b9e:	0b be       	out	0x3b, r0	; 59
    3ba0:	0f 90       	pop	r0
    3ba2:	0f be       	out	0x3f, r0	; 63
    3ba4:	0f 90       	pop	r0
    3ba6:	1f 90       	pop	r1
    3ba8:	18 95       	reti

00003baa <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3baa:	1f 92       	push	r1
    3bac:	0f 92       	push	r0
    3bae:	0f b6       	in	r0, 0x3f	; 63
    3bb0:	0f 92       	push	r0
    3bb2:	11 24       	eor	r1, r1
    3bb4:	0b b6       	in	r0, 0x3b	; 59
    3bb6:	0f 92       	push	r0
    3bb8:	2f 93       	push	r18
    3bba:	3f 93       	push	r19
    3bbc:	4f 93       	push	r20
    3bbe:	5f 93       	push	r21
    3bc0:	6f 93       	push	r22
    3bc2:	7f 93       	push	r23
    3bc4:	8f 93       	push	r24
    3bc6:	9f 93       	push	r25
    3bc8:	af 93       	push	r26
    3bca:	bf 93       	push	r27
    3bcc:	ef 93       	push	r30
    3bce:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3bd0:	81 ee       	ldi	r24, 0xE1	; 225
    3bd2:	93 e0       	ldi	r25, 0x03	; 3
    3bd4:	c2 de       	rcall	.-636    	; 0x395a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3bd6:	ff 91       	pop	r31
    3bd8:	ef 91       	pop	r30
    3bda:	bf 91       	pop	r27
    3bdc:	af 91       	pop	r26
    3bde:	9f 91       	pop	r25
    3be0:	8f 91       	pop	r24
    3be2:	7f 91       	pop	r23
    3be4:	6f 91       	pop	r22
    3be6:	5f 91       	pop	r21
    3be8:	4f 91       	pop	r20
    3bea:	3f 91       	pop	r19
    3bec:	2f 91       	pop	r18
    3bee:	0f 90       	pop	r0
    3bf0:	0b be       	out	0x3b, r0	; 59
    3bf2:	0f 90       	pop	r0
    3bf4:	0f be       	out	0x3f, r0	; 63
    3bf6:	0f 90       	pop	r0
    3bf8:	1f 90       	pop	r1
    3bfa:	18 95       	reti

00003bfc <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3bfc:	81 ee       	ldi	r24, 0xE1	; 225
    3bfe:	93 e0       	ldi	r25, 0x03	; 3
    3c00:	33 de       	rcall	.-922    	; 0x3868 <_ZN14HardwareSerial9availableEv>
    3c02:	21 e0       	ldi	r18, 0x01	; 1
    3c04:	89 2b       	or	r24, r25
    3c06:	09 f4       	brne	.+2      	; 0x3c0a <_Z17Serial0_availablev+0xe>
    3c08:	20 e0       	ldi	r18, 0x00	; 0
}
    3c0a:	82 2f       	mov	r24, r18
    3c0c:	08 95       	ret

00003c0e <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3c0e:	e1 ee       	ldi	r30, 0xE1	; 225
    3c10:	f3 e0       	ldi	r31, 0x03	; 3
    3c12:	13 82       	std	Z+3, r1	; 0x03
    3c14:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3c16:	88 ee       	ldi	r24, 0xE8	; 232
    3c18:	93 e0       	ldi	r25, 0x03	; 3
    3c1a:	a0 e0       	ldi	r26, 0x00	; 0
    3c1c:	b0 e0       	ldi	r27, 0x00	; 0
    3c1e:	84 83       	std	Z+4, r24	; 0x04
    3c20:	95 83       	std	Z+5, r25	; 0x05
    3c22:	a6 83       	std	Z+6, r26	; 0x06
    3c24:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3c26:	8f e8       	ldi	r24, 0x8F	; 143
    3c28:	92 e0       	ldi	r25, 0x02	; 2
    3c2a:	91 83       	std	Z+1, r25	; 0x01
    3c2c:	80 83       	st	Z, r24
    3c2e:	85 ec       	ldi	r24, 0xC5	; 197
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	95 87       	std	Z+13, r25	; 0x0d
    3c34:	84 87       	std	Z+12, r24	; 0x0c
    3c36:	84 ec       	ldi	r24, 0xC4	; 196
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	97 87       	std	Z+15, r25	; 0x0f
    3c3c:	86 87       	std	Z+14, r24	; 0x0e
    3c3e:	80 ec       	ldi	r24, 0xC0	; 192
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	91 8b       	std	Z+17, r25	; 0x11
    3c44:	80 8b       	std	Z+16, r24	; 0x10
    3c46:	81 ec       	ldi	r24, 0xC1	; 193
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	93 8b       	std	Z+19, r25	; 0x13
    3c4c:	82 8b       	std	Z+18, r24	; 0x12
    3c4e:	82 ec       	ldi	r24, 0xC2	; 194
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	95 8b       	std	Z+21, r25	; 0x15
    3c54:	84 8b       	std	Z+20, r24	; 0x14
    3c56:	86 ec       	ldi	r24, 0xC6	; 198
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	97 8b       	std	Z+23, r25	; 0x17
    3c5c:	86 8b       	std	Z+22, r24	; 0x16
    3c5e:	11 8e       	std	Z+25, r1	; 0x19
    3c60:	12 8e       	std	Z+26, r1	; 0x1a
    3c62:	13 8e       	std	Z+27, r1	; 0x1b
    3c64:	14 8e       	std	Z+28, r1	; 0x1c
    3c66:	08 95       	ret

00003c68 <initVariant>:
    3c68:	08 95       	ret

00003c6a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    3c6a:	c8 d3       	rcall	.+1936   	; 0x43fc <init>

	initVariant();
    3c6c:	fd df       	rcall	.-6      	; 0x3c68 <initVariant>
    3c6e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3c72:	c1 e7       	ldi	r28, 0x71	; 113
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3c74:	dc e1       	ldi	r29, 0x1C	; 28
    3c76:	0e 94 99 08 	call	0x1132	; 0x1132 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    3c7a:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    3c7c:	e1 f3       	breq	.-8      	; 0x3c76 <main+0xc>
    3c7e:	31 de       	rcall	.-926    	; 0x38e2 <_Z14serialEventRunv>
    3c80:	fa cf       	rjmp	.-12     	; 0x3c76 <main+0xc>

00003c82 <_ZN5Print5writeEPKhj>:
    3c82:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    3c84:	df 92       	push	r13
    3c86:	ef 92       	push	r14
    3c88:	ff 92       	push	r15
    3c8a:	0f 93       	push	r16
    3c8c:	1f 93       	push	r17
    3c8e:	cf 93       	push	r28
    3c90:	df 93       	push	r29
    3c92:	6c 01       	movw	r12, r24
    3c94:	7a 01       	movw	r14, r20
    3c96:	8b 01       	movw	r16, r22
    3c98:	c0 e0       	ldi	r28, 0x00	; 0
    3c9a:	d0 e0       	ldi	r29, 0x00	; 0
    3c9c:	ce 15       	cp	r28, r14
    3c9e:	df 05       	cpc	r29, r15
    3ca0:	81 f0       	breq	.+32     	; 0x3cc2 <_ZN5Print5writeEPKhj+0x40>
    3ca2:	d8 01       	movw	r26, r16
    3ca4:	6d 91       	ld	r22, X+
    3ca6:	8d 01       	movw	r16, r26
    3ca8:	d6 01       	movw	r26, r12
    3caa:	ed 91       	ld	r30, X+
    3cac:	fc 91       	ld	r31, X
    3cae:	01 90       	ld	r0, Z+
    3cb0:	f0 81       	ld	r31, Z
    3cb2:	e0 2d       	mov	r30, r0
    3cb4:	c6 01       	movw	r24, r12
    3cb6:	19 95       	eicall
    3cb8:	89 2b       	or	r24, r25
    3cba:	11 f0       	breq	.+4      	; 0x3cc0 <_ZN5Print5writeEPKhj+0x3e>
    3cbc:	21 96       	adiw	r28, 0x01	; 1
    3cbe:	ee cf       	rjmp	.-36     	; 0x3c9c <_ZN5Print5writeEPKhj+0x1a>
    3cc0:	7e 01       	movw	r14, r28
    3cc2:	c7 01       	movw	r24, r14
    3cc4:	df 91       	pop	r29
    3cc6:	cf 91       	pop	r28
    3cc8:	1f 91       	pop	r17
    3cca:	0f 91       	pop	r16
    3ccc:	ff 90       	pop	r15
    3cce:	ef 90       	pop	r14
    3cd0:	df 90       	pop	r13
    3cd2:	cf 90       	pop	r12
    3cd4:	08 95       	ret

00003cd6 <_ZN5Print5writeEPKc>:
    3cd6:	61 15       	cp	r22, r1
    3cd8:	71 05       	cpc	r23, r1
    3cda:	79 f0       	breq	.+30     	; 0x3cfa <_ZN5Print5writeEPKc+0x24>
    3cdc:	fb 01       	movw	r30, r22
    3cde:	01 90       	ld	r0, Z+
    3ce0:	00 20       	and	r0, r0
    3ce2:	e9 f7       	brne	.-6      	; 0x3cde <_ZN5Print5writeEPKc+0x8>
    3ce4:	31 97       	sbiw	r30, 0x01	; 1
    3ce6:	af 01       	movw	r20, r30
    3ce8:	46 1b       	sub	r20, r22
    3cea:	57 0b       	sbc	r21, r23
    3cec:	dc 01       	movw	r26, r24
    3cee:	ed 91       	ld	r30, X+
    3cf0:	fc 91       	ld	r31, X
    3cf2:	02 80       	ldd	r0, Z+2	; 0x02
    3cf4:	f3 81       	ldd	r31, Z+3	; 0x03
    3cf6:	e0 2d       	mov	r30, r0
    3cf8:	19 94       	eijmp
    3cfa:	80 e0       	ldi	r24, 0x00	; 0
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	08 95       	ret

00003d00 <_ZN5Print5printEPK19__FlashStringHelper>:
    3d00:	ef 92       	push	r14
    3d02:	ff 92       	push	r15
    3d04:	0f 93       	push	r16
    3d06:	1f 93       	push	r17
    3d08:	cf 93       	push	r28
    3d0a:	df 93       	push	r29
    3d0c:	8c 01       	movw	r16, r24
    3d0e:	7b 01       	movw	r14, r22
    3d10:	c0 e0       	ldi	r28, 0x00	; 0
    3d12:	d0 e0       	ldi	r29, 0x00	; 0
    3d14:	f7 01       	movw	r30, r14
    3d16:	ec 0f       	add	r30, r28
    3d18:	fd 1f       	adc	r31, r29
    3d1a:	64 91       	lpm	r22, Z
    3d1c:	66 23       	and	r22, r22
    3d1e:	61 f0       	breq	.+24     	; 0x3d38 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3d20:	d8 01       	movw	r26, r16
    3d22:	ed 91       	ld	r30, X+
    3d24:	fc 91       	ld	r31, X
    3d26:	01 90       	ld	r0, Z+
    3d28:	f0 81       	ld	r31, Z
    3d2a:	e0 2d       	mov	r30, r0
    3d2c:	c8 01       	movw	r24, r16
    3d2e:	19 95       	eicall
    3d30:	89 2b       	or	r24, r25
    3d32:	11 f0       	breq	.+4      	; 0x3d38 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3d34:	21 96       	adiw	r28, 0x01	; 1
    3d36:	ee cf       	rjmp	.-36     	; 0x3d14 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    3d38:	ce 01       	movw	r24, r28
    3d3a:	df 91       	pop	r29
    3d3c:	cf 91       	pop	r28
    3d3e:	1f 91       	pop	r17
    3d40:	0f 91       	pop	r16
    3d42:	ff 90       	pop	r15
    3d44:	ef 90       	pop	r14
    3d46:	08 95       	ret

00003d48 <_ZN5Print5printERK6String>:
    3d48:	db 01       	movw	r26, r22
    3d4a:	14 96       	adiw	r26, 0x04	; 4
    3d4c:	4d 91       	ld	r20, X+
    3d4e:	5c 91       	ld	r21, X
    3d50:	15 97       	sbiw	r26, 0x05	; 5
    3d52:	6d 91       	ld	r22, X+
    3d54:	7c 91       	ld	r23, X
    3d56:	dc 01       	movw	r26, r24
    3d58:	ed 91       	ld	r30, X+
    3d5a:	fc 91       	ld	r31, X
    3d5c:	02 80       	ldd	r0, Z+2	; 0x02
    3d5e:	f3 81       	ldd	r31, Z+3	; 0x03
    3d60:	e0 2d       	mov	r30, r0
    3d62:	19 94       	eijmp

00003d64 <_ZN5Print5printEc>:
    3d64:	dc 01       	movw	r26, r24
    3d66:	ed 91       	ld	r30, X+
    3d68:	fc 91       	ld	r31, X
    3d6a:	01 90       	ld	r0, Z+
    3d6c:	f0 81       	ld	r31, Z
    3d6e:	e0 2d       	mov	r30, r0
    3d70:	19 94       	eijmp

00003d72 <_ZN5Print7printlnEv>:
    3d72:	6d e9       	ldi	r22, 0x9D	; 157
    3d74:	72 e0       	ldi	r23, 0x02	; 2
    3d76:	af cf       	rjmp	.-162    	; 0x3cd6 <_ZN5Print5writeEPKc>

00003d78 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    3d78:	0f 93       	push	r16
    3d7a:	1f 93       	push	r17
    3d7c:	cf 93       	push	r28
    3d7e:	df 93       	push	r29
    3d80:	ec 01       	movw	r28, r24
    3d82:	be df       	rcall	.-132    	; 0x3d00 <_ZN5Print5printEPK19__FlashStringHelper>
    3d84:	8c 01       	movw	r16, r24
    3d86:	ce 01       	movw	r24, r28
    3d88:	f4 df       	rcall	.-24     	; 0x3d72 <_ZN5Print7printlnEv>
    3d8a:	80 0f       	add	r24, r16
    3d8c:	91 1f       	adc	r25, r17
    3d8e:	df 91       	pop	r29
    3d90:	cf 91       	pop	r28
    3d92:	1f 91       	pop	r17
    3d94:	0f 91       	pop	r16
    3d96:	08 95       	ret

00003d98 <_ZN5Print7printlnERK6String>:
    3d98:	0f 93       	push	r16
    3d9a:	1f 93       	push	r17
    3d9c:	cf 93       	push	r28
    3d9e:	df 93       	push	r29
    3da0:	ec 01       	movw	r28, r24
    3da2:	d2 df       	rcall	.-92     	; 0x3d48 <_ZN5Print5printERK6String>
    3da4:	8c 01       	movw	r16, r24
    3da6:	ce 01       	movw	r24, r28
    3da8:	e4 df       	rcall	.-56     	; 0x3d72 <_ZN5Print7printlnEv>
    3daa:	80 0f       	add	r24, r16
    3dac:	91 1f       	adc	r25, r17
    3dae:	df 91       	pop	r29
    3db0:	cf 91       	pop	r28
    3db2:	1f 91       	pop	r17
    3db4:	0f 91       	pop	r16
    3db6:	08 95       	ret

00003db8 <_ZN5Print11printNumberEmh>:
    3db8:	8f 92       	push	r8
    3dba:	9f 92       	push	r9
    3dbc:	af 92       	push	r10
    3dbe:	bf 92       	push	r11
    3dc0:	ef 92       	push	r14
    3dc2:	ff 92       	push	r15
    3dc4:	0f 93       	push	r16
    3dc6:	1f 93       	push	r17
    3dc8:	cf 93       	push	r28
    3dca:	df 93       	push	r29
    3dcc:	cd b7       	in	r28, 0x3d	; 61
    3dce:	de b7       	in	r29, 0x3e	; 62
    3dd0:	a1 97       	sbiw	r28, 0x21	; 33
    3dd2:	0f b6       	in	r0, 0x3f	; 63
    3dd4:	f8 94       	cli
    3dd6:	de bf       	out	0x3e, r29	; 62
    3dd8:	0f be       	out	0x3f, r0	; 63
    3dda:	cd bf       	out	0x3d, r28	; 61
    3ddc:	7c 01       	movw	r14, r24
    3dde:	fa 01       	movw	r30, r20
    3de0:	cb 01       	movw	r24, r22
    3de2:	19 a2       	std	Y+33, r1	; 0x21
    3de4:	22 30       	cpi	r18, 0x02	; 2
    3de6:	08 f4       	brcc	.+2      	; 0x3dea <_ZN5Print11printNumberEmh+0x32>
    3de8:	2a e0       	ldi	r18, 0x0A	; 10
    3dea:	8e 01       	movw	r16, r28
    3dec:	0f 5d       	subi	r16, 0xDF	; 223
    3dee:	1f 4f       	sbci	r17, 0xFF	; 255
    3df0:	82 2e       	mov	r8, r18
    3df2:	91 2c       	mov	r9, r1
    3df4:	a1 2c       	mov	r10, r1
    3df6:	b1 2c       	mov	r11, r1
    3df8:	bf 01       	movw	r22, r30
    3dfa:	a5 01       	movw	r20, r10
    3dfc:	94 01       	movw	r18, r8
    3dfe:	42 d5       	rcall	.+2692   	; 0x4884 <__udivmodsi4>
    3e00:	f9 01       	movw	r30, r18
    3e02:	ca 01       	movw	r24, r20
    3e04:	01 50       	subi	r16, 0x01	; 1
    3e06:	11 09       	sbc	r17, r1
    3e08:	6a 30       	cpi	r22, 0x0A	; 10
    3e0a:	10 f4       	brcc	.+4      	; 0x3e10 <_ZN5Print11printNumberEmh+0x58>
    3e0c:	60 5d       	subi	r22, 0xD0	; 208
    3e0e:	01 c0       	rjmp	.+2      	; 0x3e12 <_ZN5Print11printNumberEmh+0x5a>
    3e10:	69 5c       	subi	r22, 0xC9	; 201
    3e12:	d8 01       	movw	r26, r16
    3e14:	6c 93       	st	X, r22
    3e16:	23 2b       	or	r18, r19
    3e18:	24 2b       	or	r18, r20
    3e1a:	25 2b       	or	r18, r21
    3e1c:	69 f7       	brne	.-38     	; 0x3df8 <_ZN5Print11printNumberEmh+0x40>
    3e1e:	b8 01       	movw	r22, r16
    3e20:	c7 01       	movw	r24, r14
    3e22:	59 df       	rcall	.-334    	; 0x3cd6 <_ZN5Print5writeEPKc>
    3e24:	a1 96       	adiw	r28, 0x21	; 33
    3e26:	0f b6       	in	r0, 0x3f	; 63
    3e28:	f8 94       	cli
    3e2a:	de bf       	out	0x3e, r29	; 62
    3e2c:	0f be       	out	0x3f, r0	; 63
    3e2e:	cd bf       	out	0x3d, r28	; 61
    3e30:	df 91       	pop	r29
    3e32:	cf 91       	pop	r28
    3e34:	1f 91       	pop	r17
    3e36:	0f 91       	pop	r16
    3e38:	ff 90       	pop	r15
    3e3a:	ef 90       	pop	r14
    3e3c:	bf 90       	pop	r11
    3e3e:	af 90       	pop	r10
    3e40:	9f 90       	pop	r9
    3e42:	8f 90       	pop	r8
    3e44:	08 95       	ret

00003e46 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    3e46:	cf 92       	push	r12
    3e48:	df 92       	push	r13
    3e4a:	ef 92       	push	r14
    3e4c:	ff 92       	push	r15
    3e4e:	0f 93       	push	r16
    3e50:	1f 93       	push	r17
    3e52:	cf 93       	push	r28
    3e54:	df 93       	push	r29
  if (base == 0) {
    3e56:	21 15       	cp	r18, r1
    3e58:	31 05       	cpc	r19, r1
    3e5a:	81 f4       	brne	.+32     	; 0x3e7c <_ZN5Print5printEli+0x36>
    return write(n);
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	ed 91       	ld	r30, X+
    3e60:	fc 91       	ld	r31, X
    3e62:	01 90       	ld	r0, Z+
    3e64:	f0 81       	ld	r31, Z
    3e66:	e0 2d       	mov	r30, r0
    3e68:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3e6a:	df 91       	pop	r29
    3e6c:	cf 91       	pop	r28
    3e6e:	1f 91       	pop	r17
    3e70:	0f 91       	pop	r16
    3e72:	ff 90       	pop	r15
    3e74:	ef 90       	pop	r14
    3e76:	df 90       	pop	r13
    3e78:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    3e7a:	19 94       	eijmp
  } else if (base == 10) {
    3e7c:	2a 30       	cpi	r18, 0x0A	; 10
    3e7e:	31 05       	cpc	r19, r1
    3e80:	f1 f4       	brne	.+60     	; 0x3ebe <_ZN5Print5printEli+0x78>
    if (n < 0) {
    3e82:	77 ff       	sbrs	r23, 7
    3e84:	1b c0       	rjmp	.+54     	; 0x3ebc <_ZN5Print5printEli+0x76>
    3e86:	6a 01       	movw	r12, r20
    3e88:	7b 01       	movw	r14, r22
    3e8a:	ec 01       	movw	r28, r24
      int t = print('-');
    3e8c:	6d e2       	ldi	r22, 0x2D	; 45
    3e8e:	6a df       	rcall	.-300    	; 0x3d64 <_ZN5Print5printEc>
    3e90:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    3e92:	44 27       	eor	r20, r20
    3e94:	55 27       	eor	r21, r21
    3e96:	ba 01       	movw	r22, r20
    3e98:	4c 19       	sub	r20, r12
    3e9a:	5d 09       	sbc	r21, r13
    3e9c:	6e 09       	sbc	r22, r14
    3e9e:	7f 09       	sbc	r23, r15
    3ea0:	2a e0       	ldi	r18, 0x0A	; 10
    3ea2:	ce 01       	movw	r24, r28
    3ea4:	89 df       	rcall	.-238    	; 0x3db8 <_ZN5Print11printNumberEmh>
    3ea6:	80 0f       	add	r24, r16
    3ea8:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3eaa:	df 91       	pop	r29
    3eac:	cf 91       	pop	r28
    3eae:	1f 91       	pop	r17
    3eb0:	0f 91       	pop	r16
    3eb2:	ff 90       	pop	r15
    3eb4:	ef 90       	pop	r14
    3eb6:	df 90       	pop	r13
    3eb8:	cf 90       	pop	r12
    3eba:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    3ebc:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    3ebe:	df 91       	pop	r29
    3ec0:	cf 91       	pop	r28
    3ec2:	1f 91       	pop	r17
    3ec4:	0f 91       	pop	r16
    3ec6:	ff 90       	pop	r15
    3ec8:	ef 90       	pop	r14
    3eca:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    3ecc:	cf 90       	pop	r12
    3ece:	74 cf       	rjmp	.-280    	; 0x3db8 <_ZN5Print11printNumberEmh>

00003ed0 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    3ed0:	9a 01       	movw	r18, r20
  return print((long) n, base);
    3ed2:	ab 01       	movw	r20, r22
    3ed4:	77 0f       	add	r23, r23
    3ed6:	66 0b       	sbc	r22, r22
    3ed8:	77 0b       	sbc	r23, r23
    3eda:	b5 cf       	rjmp	.-150    	; 0x3e46 <_ZN5Print5printEli>

00003edc <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    3edc:	0f 93       	push	r16
    3ede:	1f 93       	push	r17
    3ee0:	cf 93       	push	r28
    3ee2:	df 93       	push	r29
    3ee4:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3ee6:	f4 df       	rcall	.-24     	; 0x3ed0 <_ZN5Print5printEii>
    3ee8:	8c 01       	movw	r16, r24
  n += println();
    3eea:	ce 01       	movw	r24, r28
    3eec:	42 df       	rcall	.-380    	; 0x3d72 <_ZN5Print7printlnEv>
  return n;
}
    3eee:	80 0f       	add	r24, r16
    3ef0:	91 1f       	adc	r25, r17
    3ef2:	df 91       	pop	r29
    3ef4:	cf 91       	pop	r28
    3ef6:	1f 91       	pop	r17
    3ef8:	0f 91       	pop	r16
    3efa:	08 95       	ret

00003efc <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    3efc:	08 95       	ret

00003efe <attachInterrupt>:
    3efe:	88 30       	cpi	r24, 0x08	; 8
    3f00:	08 f0       	brcs	.+2      	; 0x3f04 <attachInterrupt+0x6>
    3f02:	6f c0       	rjmp	.+222    	; 0x3fe2 <attachInterrupt+0xe4>
    3f04:	a8 2f       	mov	r26, r24
    3f06:	b0 e0       	ldi	r27, 0x00	; 0
    3f08:	aa 0f       	add	r26, r26
    3f0a:	bb 1f       	adc	r27, r27
    3f0c:	a8 5f       	subi	r26, 0xF8	; 248
    3f0e:	bd 4f       	sbci	r27, 0xFD	; 253
    3f10:	11 96       	adiw	r26, 0x01	; 1
    3f12:	7c 93       	st	X, r23
    3f14:	6e 93       	st	-X, r22
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	fc 01       	movw	r30, r24
    3f1a:	31 97       	sbiw	r30, 0x01	; 1
    3f1c:	e7 30       	cpi	r30, 0x07	; 7
    3f1e:	f1 05       	cpc	r31, r1
    3f20:	98 f5       	brcc	.+102    	; 0x3f88 <attachInterrupt+0x8a>
    3f22:	88 27       	eor	r24, r24
    3f24:	ee 58       	subi	r30, 0x8E	; 142
    3f26:	ff 4f       	sbci	r31, 0xFF	; 255
    3f28:	8f 4f       	sbci	r24, 0xFF	; 255
    3f2a:	ce c4       	rjmp	.+2460   	; 0x48c8 <__tablejump2__>
    3f2c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    3f30:	8c 7f       	andi	r24, 0xFC	; 252
    3f32:	48 2b       	or	r20, r24
    3f34:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    3f38:	e8 9a       	sbi	0x1d, 0	; 29
    3f3a:	08 95       	ret
    3f3c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    3f40:	83 7f       	andi	r24, 0xF3	; 243
    3f42:	44 0f       	add	r20, r20
    3f44:	55 1f       	adc	r21, r21
    3f46:	44 0f       	add	r20, r20
    3f48:	55 1f       	adc	r21, r21
    3f4a:	48 2b       	or	r20, r24
    3f4c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    3f50:	e9 9a       	sbi	0x1d, 1	; 29
    3f52:	08 95       	ret
    3f54:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    3f58:	8f 7c       	andi	r24, 0xCF	; 207
    3f5a:	74 e0       	ldi	r23, 0x04	; 4
    3f5c:	44 0f       	add	r20, r20
    3f5e:	55 1f       	adc	r21, r21
    3f60:	7a 95       	dec	r23
    3f62:	e1 f7       	brne	.-8      	; 0x3f5c <attachInterrupt+0x5e>
    3f64:	48 2b       	or	r20, r24
    3f66:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    3f6a:	ea 9a       	sbi	0x1d, 2	; 29
    3f6c:	08 95       	ret
    3f6e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    3f72:	8f 73       	andi	r24, 0x3F	; 63
    3f74:	66 e0       	ldi	r22, 0x06	; 6
    3f76:	44 0f       	add	r20, r20
    3f78:	55 1f       	adc	r21, r21
    3f7a:	6a 95       	dec	r22
    3f7c:	e1 f7       	brne	.-8      	; 0x3f76 <attachInterrupt+0x78>
    3f7e:	48 2b       	or	r20, r24
    3f80:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
    3f84:	eb 9a       	sbi	0x1d, 3	; 29
    3f86:	08 95       	ret
    3f88:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    3f8c:	8c 7f       	andi	r24, 0xFC	; 252
    3f8e:	48 2b       	or	r20, r24
    3f90:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    3f94:	ec 9a       	sbi	0x1d, 4	; 29
    3f96:	08 95       	ret
    3f98:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    3f9c:	83 7f       	andi	r24, 0xF3	; 243
    3f9e:	44 0f       	add	r20, r20
    3fa0:	55 1f       	adc	r21, r21
    3fa2:	44 0f       	add	r20, r20
    3fa4:	55 1f       	adc	r21, r21
    3fa6:	48 2b       	or	r20, r24
    3fa8:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    3fac:	ed 9a       	sbi	0x1d, 5	; 29
    3fae:	08 95       	ret
    3fb0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    3fb4:	8f 7c       	andi	r24, 0xCF	; 207
    3fb6:	24 e0       	ldi	r18, 0x04	; 4
    3fb8:	44 0f       	add	r20, r20
    3fba:	55 1f       	adc	r21, r21
    3fbc:	2a 95       	dec	r18
    3fbe:	e1 f7       	brne	.-8      	; 0x3fb8 <attachInterrupt+0xba>
    3fc0:	48 2b       	or	r20, r24
    3fc2:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    3fc6:	ee 9a       	sbi	0x1d, 6	; 29
    3fc8:	08 95       	ret
    3fca:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    3fce:	8f 73       	andi	r24, 0x3F	; 63
    3fd0:	96 e0       	ldi	r25, 0x06	; 6
    3fd2:	44 0f       	add	r20, r20
    3fd4:	55 1f       	adc	r21, r21
    3fd6:	9a 95       	dec	r25
    3fd8:	e1 f7       	brne	.-8      	; 0x3fd2 <attachInterrupt+0xd4>
    3fda:	48 2b       	or	r20, r24
    3fdc:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
    3fe0:	ef 9a       	sbi	0x1d, 7	; 29
    3fe2:	08 95       	ret

00003fe4 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
    3fe4:	1f 92       	push	r1
    3fe6:	0f 92       	push	r0
    3fe8:	0f b6       	in	r0, 0x3f	; 63
    3fea:	0f 92       	push	r0
    3fec:	11 24       	eor	r1, r1
    3fee:	0b b6       	in	r0, 0x3b	; 59
    3ff0:	0f 92       	push	r0
    3ff2:	2f 93       	push	r18
    3ff4:	3f 93       	push	r19
    3ff6:	4f 93       	push	r20
    3ff8:	5f 93       	push	r21
    3ffa:	6f 93       	push	r22
    3ffc:	7f 93       	push	r23
    3ffe:	8f 93       	push	r24
    4000:	9f 93       	push	r25
    4002:	af 93       	push	r26
    4004:	bf 93       	push	r27
    4006:	ef 93       	push	r30
    4008:	ff 93       	push	r31
    400a:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0x4>
    400e:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0x5>
    4012:	19 95       	eicall
    4014:	ff 91       	pop	r31
    4016:	ef 91       	pop	r30
    4018:	bf 91       	pop	r27
    401a:	af 91       	pop	r26
    401c:	9f 91       	pop	r25
    401e:	8f 91       	pop	r24
    4020:	7f 91       	pop	r23
    4022:	6f 91       	pop	r22
    4024:	5f 91       	pop	r21
    4026:	4f 91       	pop	r20
    4028:	3f 91       	pop	r19
    402a:	2f 91       	pop	r18
    402c:	0f 90       	pop	r0
    402e:	0b be       	out	0x3b, r0	; 59
    4030:	0f 90       	pop	r0
    4032:	0f be       	out	0x3f, r0	; 63
    4034:	0f 90       	pop	r0
    4036:	1f 90       	pop	r1
    4038:	18 95       	reti

0000403a <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
    403a:	1f 92       	push	r1
    403c:	0f 92       	push	r0
    403e:	0f b6       	in	r0, 0x3f	; 63
    4040:	0f 92       	push	r0
    4042:	11 24       	eor	r1, r1
    4044:	0b b6       	in	r0, 0x3b	; 59
    4046:	0f 92       	push	r0
    4048:	2f 93       	push	r18
    404a:	3f 93       	push	r19
    404c:	4f 93       	push	r20
    404e:	5f 93       	push	r21
    4050:	6f 93       	push	r22
    4052:	7f 93       	push	r23
    4054:	8f 93       	push	r24
    4056:	9f 93       	push	r25
    4058:	af 93       	push	r26
    405a:	bf 93       	push	r27
    405c:	ef 93       	push	r30
    405e:	ff 93       	push	r31
    4060:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0x6>
    4064:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0x7>
    4068:	19 95       	eicall
    406a:	ff 91       	pop	r31
    406c:	ef 91       	pop	r30
    406e:	bf 91       	pop	r27
    4070:	af 91       	pop	r26
    4072:	9f 91       	pop	r25
    4074:	8f 91       	pop	r24
    4076:	7f 91       	pop	r23
    4078:	6f 91       	pop	r22
    407a:	5f 91       	pop	r21
    407c:	4f 91       	pop	r20
    407e:	3f 91       	pop	r19
    4080:	2f 91       	pop	r18
    4082:	0f 90       	pop	r0
    4084:	0b be       	out	0x3b, r0	; 59
    4086:	0f 90       	pop	r0
    4088:	0f be       	out	0x3f, r0	; 63
    408a:	0f 90       	pop	r0
    408c:	1f 90       	pop	r1
    408e:	18 95       	reti

00004090 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
    4090:	1f 92       	push	r1
    4092:	0f 92       	push	r0
    4094:	0f b6       	in	r0, 0x3f	; 63
    4096:	0f 92       	push	r0
    4098:	11 24       	eor	r1, r1
    409a:	0b b6       	in	r0, 0x3b	; 59
    409c:	0f 92       	push	r0
    409e:	2f 93       	push	r18
    40a0:	3f 93       	push	r19
    40a2:	4f 93       	push	r20
    40a4:	5f 93       	push	r21
    40a6:	6f 93       	push	r22
    40a8:	7f 93       	push	r23
    40aa:	8f 93       	push	r24
    40ac:	9f 93       	push	r25
    40ae:	af 93       	push	r26
    40b0:	bf 93       	push	r27
    40b2:	ef 93       	push	r30
    40b4:	ff 93       	push	r31
    40b6:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0x8>
    40ba:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0x9>
    40be:	19 95       	eicall
    40c0:	ff 91       	pop	r31
    40c2:	ef 91       	pop	r30
    40c4:	bf 91       	pop	r27
    40c6:	af 91       	pop	r26
    40c8:	9f 91       	pop	r25
    40ca:	8f 91       	pop	r24
    40cc:	7f 91       	pop	r23
    40ce:	6f 91       	pop	r22
    40d0:	5f 91       	pop	r21
    40d2:	4f 91       	pop	r20
    40d4:	3f 91       	pop	r19
    40d6:	2f 91       	pop	r18
    40d8:	0f 90       	pop	r0
    40da:	0b be       	out	0x3b, r0	; 59
    40dc:	0f 90       	pop	r0
    40de:	0f be       	out	0x3f, r0	; 63
    40e0:	0f 90       	pop	r0
    40e2:	1f 90       	pop	r1
    40e4:	18 95       	reti

000040e6 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
    40e6:	1f 92       	push	r1
    40e8:	0f 92       	push	r0
    40ea:	0f b6       	in	r0, 0x3f	; 63
    40ec:	0f 92       	push	r0
    40ee:	11 24       	eor	r1, r1
    40f0:	0b b6       	in	r0, 0x3b	; 59
    40f2:	0f 92       	push	r0
    40f4:	2f 93       	push	r18
    40f6:	3f 93       	push	r19
    40f8:	4f 93       	push	r20
    40fa:	5f 93       	push	r21
    40fc:	6f 93       	push	r22
    40fe:	7f 93       	push	r23
    4100:	8f 93       	push	r24
    4102:	9f 93       	push	r25
    4104:	af 93       	push	r26
    4106:	bf 93       	push	r27
    4108:	ef 93       	push	r30
    410a:	ff 93       	push	r31
    410c:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <intFunc+0xa>
    4110:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <intFunc+0xb>
    4114:	19 95       	eicall
    4116:	ff 91       	pop	r31
    4118:	ef 91       	pop	r30
    411a:	bf 91       	pop	r27
    411c:	af 91       	pop	r26
    411e:	9f 91       	pop	r25
    4120:	8f 91       	pop	r24
    4122:	7f 91       	pop	r23
    4124:	6f 91       	pop	r22
    4126:	5f 91       	pop	r21
    4128:	4f 91       	pop	r20
    412a:	3f 91       	pop	r19
    412c:	2f 91       	pop	r18
    412e:	0f 90       	pop	r0
    4130:	0b be       	out	0x3b, r0	; 59
    4132:	0f 90       	pop	r0
    4134:	0f be       	out	0x3f, r0	; 63
    4136:	0f 90       	pop	r0
    4138:	1f 90       	pop	r1
    413a:	18 95       	reti

0000413c <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
    413c:	1f 92       	push	r1
    413e:	0f 92       	push	r0
    4140:	0f b6       	in	r0, 0x3f	; 63
    4142:	0f 92       	push	r0
    4144:	11 24       	eor	r1, r1
    4146:	0b b6       	in	r0, 0x3b	; 59
    4148:	0f 92       	push	r0
    414a:	2f 93       	push	r18
    414c:	3f 93       	push	r19
    414e:	4f 93       	push	r20
    4150:	5f 93       	push	r21
    4152:	6f 93       	push	r22
    4154:	7f 93       	push	r23
    4156:	8f 93       	push	r24
    4158:	9f 93       	push	r25
    415a:	af 93       	push	r26
    415c:	bf 93       	push	r27
    415e:	ef 93       	push	r30
    4160:	ff 93       	push	r31
    4162:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <intFunc>
    4166:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <intFunc+0x1>
    416a:	19 95       	eicall
    416c:	ff 91       	pop	r31
    416e:	ef 91       	pop	r30
    4170:	bf 91       	pop	r27
    4172:	af 91       	pop	r26
    4174:	9f 91       	pop	r25
    4176:	8f 91       	pop	r24
    4178:	7f 91       	pop	r23
    417a:	6f 91       	pop	r22
    417c:	5f 91       	pop	r21
    417e:	4f 91       	pop	r20
    4180:	3f 91       	pop	r19
    4182:	2f 91       	pop	r18
    4184:	0f 90       	pop	r0
    4186:	0b be       	out	0x3b, r0	; 59
    4188:	0f 90       	pop	r0
    418a:	0f be       	out	0x3f, r0	; 63
    418c:	0f 90       	pop	r0
    418e:	1f 90       	pop	r1
    4190:	18 95       	reti

00004192 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
    4192:	1f 92       	push	r1
    4194:	0f 92       	push	r0
    4196:	0f b6       	in	r0, 0x3f	; 63
    4198:	0f 92       	push	r0
    419a:	11 24       	eor	r1, r1
    419c:	0b b6       	in	r0, 0x3b	; 59
    419e:	0f 92       	push	r0
    41a0:	2f 93       	push	r18
    41a2:	3f 93       	push	r19
    41a4:	4f 93       	push	r20
    41a6:	5f 93       	push	r21
    41a8:	6f 93       	push	r22
    41aa:	7f 93       	push	r23
    41ac:	8f 93       	push	r24
    41ae:	9f 93       	push	r25
    41b0:	af 93       	push	r26
    41b2:	bf 93       	push	r27
    41b4:	ef 93       	push	r30
    41b6:	ff 93       	push	r31
    41b8:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc+0x2>
    41bc:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x3>
    41c0:	19 95       	eicall
    41c2:	ff 91       	pop	r31
    41c4:	ef 91       	pop	r30
    41c6:	bf 91       	pop	r27
    41c8:	af 91       	pop	r26
    41ca:	9f 91       	pop	r25
    41cc:	8f 91       	pop	r24
    41ce:	7f 91       	pop	r23
    41d0:	6f 91       	pop	r22
    41d2:	5f 91       	pop	r21
    41d4:	4f 91       	pop	r20
    41d6:	3f 91       	pop	r19
    41d8:	2f 91       	pop	r18
    41da:	0f 90       	pop	r0
    41dc:	0b be       	out	0x3b, r0	; 59
    41de:	0f 90       	pop	r0
    41e0:	0f be       	out	0x3f, r0	; 63
    41e2:	0f 90       	pop	r0
    41e4:	1f 90       	pop	r1
    41e6:	18 95       	reti

000041e8 <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    41e8:	1f 92       	push	r1
    41ea:	0f 92       	push	r0
    41ec:	0f b6       	in	r0, 0x3f	; 63
    41ee:	0f 92       	push	r0
    41f0:	11 24       	eor	r1, r1
    41f2:	0b b6       	in	r0, 0x3b	; 59
    41f4:	0f 92       	push	r0
    41f6:	2f 93       	push	r18
    41f8:	3f 93       	push	r19
    41fa:	4f 93       	push	r20
    41fc:	5f 93       	push	r21
    41fe:	6f 93       	push	r22
    4200:	7f 93       	push	r23
    4202:	8f 93       	push	r24
    4204:	9f 93       	push	r25
    4206:	af 93       	push	r26
    4208:	bf 93       	push	r27
    420a:	ef 93       	push	r30
    420c:	ff 93       	push	r31
    420e:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <intFunc+0xc>
    4212:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <intFunc+0xd>
    4216:	19 95       	eicall
    4218:	ff 91       	pop	r31
    421a:	ef 91       	pop	r30
    421c:	bf 91       	pop	r27
    421e:	af 91       	pop	r26
    4220:	9f 91       	pop	r25
    4222:	8f 91       	pop	r24
    4224:	7f 91       	pop	r23
    4226:	6f 91       	pop	r22
    4228:	5f 91       	pop	r21
    422a:	4f 91       	pop	r20
    422c:	3f 91       	pop	r19
    422e:	2f 91       	pop	r18
    4230:	0f 90       	pop	r0
    4232:	0b be       	out	0x3b, r0	; 59
    4234:	0f 90       	pop	r0
    4236:	0f be       	out	0x3f, r0	; 63
    4238:	0f 90       	pop	r0
    423a:	1f 90       	pop	r1
    423c:	18 95       	reti

0000423e <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    423e:	1f 92       	push	r1
    4240:	0f 92       	push	r0
    4242:	0f b6       	in	r0, 0x3f	; 63
    4244:	0f 92       	push	r0
    4246:	11 24       	eor	r1, r1
    4248:	0b b6       	in	r0, 0x3b	; 59
    424a:	0f 92       	push	r0
    424c:	2f 93       	push	r18
    424e:	3f 93       	push	r19
    4250:	4f 93       	push	r20
    4252:	5f 93       	push	r21
    4254:	6f 93       	push	r22
    4256:	7f 93       	push	r23
    4258:	8f 93       	push	r24
    425a:	9f 93       	push	r25
    425c:	af 93       	push	r26
    425e:	bf 93       	push	r27
    4260:	ef 93       	push	r30
    4262:	ff 93       	push	r31
    4264:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <intFunc+0xe>
    4268:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <intFunc+0xf>
    426c:	19 95       	eicall
    426e:	ff 91       	pop	r31
    4270:	ef 91       	pop	r30
    4272:	bf 91       	pop	r27
    4274:	af 91       	pop	r26
    4276:	9f 91       	pop	r25
    4278:	8f 91       	pop	r24
    427a:	7f 91       	pop	r23
    427c:	6f 91       	pop	r22
    427e:	5f 91       	pop	r21
    4280:	4f 91       	pop	r20
    4282:	3f 91       	pop	r19
    4284:	2f 91       	pop	r18
    4286:	0f 90       	pop	r0
    4288:	0b be       	out	0x3b, r0	; 59
    428a:	0f 90       	pop	r0
    428c:	0f be       	out	0x3f, r0	; 63
    428e:	0f 90       	pop	r0
    4290:	1f 90       	pop	r1
    4292:	18 95       	reti

00004294 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    4294:	1f 92       	push	r1
    4296:	0f 92       	push	r0
    4298:	0f b6       	in	r0, 0x3f	; 63
    429a:	0f 92       	push	r0
    429c:	11 24       	eor	r1, r1
    429e:	2f 93       	push	r18
    42a0:	3f 93       	push	r19
    42a2:	8f 93       	push	r24
    42a4:	9f 93       	push	r25
    42a6:	af 93       	push	r26
    42a8:	bf 93       	push	r27
    42aa:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <timer0_millis>
    42ae:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <timer0_millis+0x1>
    42b2:	a0 91 81 04 	lds	r26, 0x0481	; 0x800481 <timer0_millis+0x2>
    42b6:	b0 91 82 04 	lds	r27, 0x0482	; 0x800482 <timer0_millis+0x3>
    42ba:	30 91 7e 04 	lds	r19, 0x047E	; 0x80047e <timer0_fract>
    42be:	23 e0       	ldi	r18, 0x03	; 3
    42c0:	23 0f       	add	r18, r19
    42c2:	2d 37       	cpi	r18, 0x7D	; 125
    42c4:	20 f4       	brcc	.+8      	; 0x42ce <__vector_23+0x3a>
    42c6:	01 96       	adiw	r24, 0x01	; 1
    42c8:	a1 1d       	adc	r26, r1
    42ca:	b1 1d       	adc	r27, r1
    42cc:	05 c0       	rjmp	.+10     	; 0x42d8 <__vector_23+0x44>
    42ce:	26 e8       	ldi	r18, 0x86	; 134
    42d0:	23 0f       	add	r18, r19
    42d2:	02 96       	adiw	r24, 0x02	; 2
    42d4:	a1 1d       	adc	r26, r1
    42d6:	b1 1d       	adc	r27, r1
    42d8:	20 93 7e 04 	sts	0x047E, r18	; 0x80047e <timer0_fract>
    42dc:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <timer0_millis>
    42e0:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <timer0_millis+0x1>
    42e4:	a0 93 81 04 	sts	0x0481, r26	; 0x800481 <timer0_millis+0x2>
    42e8:	b0 93 82 04 	sts	0x0482, r27	; 0x800482 <timer0_millis+0x3>
    42ec:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <timer0_overflow_count>
    42f0:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <timer0_overflow_count+0x1>
    42f4:	a0 91 85 04 	lds	r26, 0x0485	; 0x800485 <timer0_overflow_count+0x2>
    42f8:	b0 91 86 04 	lds	r27, 0x0486	; 0x800486 <timer0_overflow_count+0x3>
    42fc:	01 96       	adiw	r24, 0x01	; 1
    42fe:	a1 1d       	adc	r26, r1
    4300:	b1 1d       	adc	r27, r1
    4302:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <timer0_overflow_count>
    4306:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <timer0_overflow_count+0x1>
    430a:	a0 93 85 04 	sts	0x0485, r26	; 0x800485 <timer0_overflow_count+0x2>
    430e:	b0 93 86 04 	sts	0x0486, r27	; 0x800486 <timer0_overflow_count+0x3>
    4312:	bf 91       	pop	r27
    4314:	af 91       	pop	r26
    4316:	9f 91       	pop	r25
    4318:	8f 91       	pop	r24
    431a:	3f 91       	pop	r19
    431c:	2f 91       	pop	r18
    431e:	0f 90       	pop	r0
    4320:	0f be       	out	0x3f, r0	; 63
    4322:	0f 90       	pop	r0
    4324:	1f 90       	pop	r1
    4326:	18 95       	reti

00004328 <millis>:
    4328:	2f b7       	in	r18, 0x3f	; 63
    432a:	f8 94       	cli
    432c:	60 91 7f 04 	lds	r22, 0x047F	; 0x80047f <timer0_millis>
    4330:	70 91 80 04 	lds	r23, 0x0480	; 0x800480 <timer0_millis+0x1>
    4334:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <timer0_millis+0x2>
    4338:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <timer0_millis+0x3>
    433c:	2f bf       	out	0x3f, r18	; 63
    433e:	08 95       	ret

00004340 <micros>:
    4340:	3f b7       	in	r19, 0x3f	; 63
    4342:	f8 94       	cli
    4344:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <timer0_overflow_count>
    4348:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <timer0_overflow_count+0x1>
    434c:	a0 91 85 04 	lds	r26, 0x0485	; 0x800485 <timer0_overflow_count+0x2>
    4350:	b0 91 86 04 	lds	r27, 0x0486	; 0x800486 <timer0_overflow_count+0x3>
    4354:	26 b5       	in	r18, 0x26	; 38
    4356:	a8 9b       	sbis	0x15, 0	; 21
    4358:	05 c0       	rjmp	.+10     	; 0x4364 <micros+0x24>
    435a:	2f 3f       	cpi	r18, 0xFF	; 255
    435c:	19 f0       	breq	.+6      	; 0x4364 <micros+0x24>
    435e:	01 96       	adiw	r24, 0x01	; 1
    4360:	a1 1d       	adc	r26, r1
    4362:	b1 1d       	adc	r27, r1
    4364:	3f bf       	out	0x3f, r19	; 63
    4366:	ba 2f       	mov	r27, r26
    4368:	a9 2f       	mov	r26, r25
    436a:	98 2f       	mov	r25, r24
    436c:	88 27       	eor	r24, r24
    436e:	82 0f       	add	r24, r18
    4370:	91 1d       	adc	r25, r1
    4372:	a1 1d       	adc	r26, r1
    4374:	b1 1d       	adc	r27, r1
    4376:	bc 01       	movw	r22, r24
    4378:	cd 01       	movw	r24, r26
    437a:	42 e0       	ldi	r20, 0x02	; 2
    437c:	66 0f       	add	r22, r22
    437e:	77 1f       	adc	r23, r23
    4380:	88 1f       	adc	r24, r24
    4382:	99 1f       	adc	r25, r25
    4384:	4a 95       	dec	r20
    4386:	d1 f7       	brne	.-12     	; 0x437c <micros+0x3c>
    4388:	08 95       	ret

0000438a <delay>:
    438a:	8f 92       	push	r8
    438c:	9f 92       	push	r9
    438e:	af 92       	push	r10
    4390:	bf 92       	push	r11
    4392:	cf 92       	push	r12
    4394:	df 92       	push	r13
    4396:	ef 92       	push	r14
    4398:	ff 92       	push	r15
    439a:	6b 01       	movw	r12, r22
    439c:	7c 01       	movw	r14, r24
    439e:	d0 df       	rcall	.-96     	; 0x4340 <micros>
    43a0:	4b 01       	movw	r8, r22
    43a2:	5c 01       	movw	r10, r24
    43a4:	c1 14       	cp	r12, r1
    43a6:	d1 04       	cpc	r13, r1
    43a8:	e1 04       	cpc	r14, r1
    43aa:	f1 04       	cpc	r15, r1
    43ac:	f1 f0       	breq	.+60     	; 0x43ea <delay+0x60>
    43ae:	69 d2       	rcall	.+1234   	; 0x4882 <yield>
    43b0:	c7 df       	rcall	.-114    	; 0x4340 <micros>
    43b2:	dc 01       	movw	r26, r24
    43b4:	cb 01       	movw	r24, r22
    43b6:	88 19       	sub	r24, r8
    43b8:	99 09       	sbc	r25, r9
    43ba:	aa 09       	sbc	r26, r10
    43bc:	bb 09       	sbc	r27, r11
    43be:	88 3e       	cpi	r24, 0xE8	; 232
    43c0:	93 40       	sbci	r25, 0x03	; 3
    43c2:	a1 05       	cpc	r26, r1
    43c4:	b1 05       	cpc	r27, r1
    43c6:	70 f3       	brcs	.-36     	; 0x43a4 <delay+0x1a>
    43c8:	21 e0       	ldi	r18, 0x01	; 1
    43ca:	c2 1a       	sub	r12, r18
    43cc:	d1 08       	sbc	r13, r1
    43ce:	e1 08       	sbc	r14, r1
    43d0:	f1 08       	sbc	r15, r1
    43d2:	88 ee       	ldi	r24, 0xE8	; 232
    43d4:	88 0e       	add	r8, r24
    43d6:	83 e0       	ldi	r24, 0x03	; 3
    43d8:	98 1e       	adc	r9, r24
    43da:	a1 1c       	adc	r10, r1
    43dc:	b1 1c       	adc	r11, r1
    43de:	c1 14       	cp	r12, r1
    43e0:	d1 04       	cpc	r13, r1
    43e2:	e1 04       	cpc	r14, r1
    43e4:	f1 04       	cpc	r15, r1
    43e6:	21 f7       	brne	.-56     	; 0x43b0 <delay+0x26>
    43e8:	dd cf       	rjmp	.-70     	; 0x43a4 <delay+0x1a>
    43ea:	ff 90       	pop	r15
    43ec:	ef 90       	pop	r14
    43ee:	df 90       	pop	r13
    43f0:	cf 90       	pop	r12
    43f2:	bf 90       	pop	r11
    43f4:	af 90       	pop	r10
    43f6:	9f 90       	pop	r9
    43f8:	8f 90       	pop	r8
    43fa:	08 95       	ret

000043fc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    43fc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    43fe:	84 b5       	in	r24, 0x24	; 36
    4400:	82 60       	ori	r24, 0x02	; 2
    4402:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4404:	84 b5       	in	r24, 0x24	; 36
    4406:	81 60       	ori	r24, 0x01	; 1
    4408:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    440a:	85 b5       	in	r24, 0x25	; 37
    440c:	82 60       	ori	r24, 0x02	; 2
    440e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    4410:	85 b5       	in	r24, 0x25	; 37
    4412:	81 60       	ori	r24, 0x01	; 1
    4414:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    4416:	ee e6       	ldi	r30, 0x6E	; 110
    4418:	f0 e0       	ldi	r31, 0x00	; 0
    441a:	80 81       	ld	r24, Z
    441c:	81 60       	ori	r24, 0x01	; 1
    441e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    4420:	e1 e8       	ldi	r30, 0x81	; 129
    4422:	f0 e0       	ldi	r31, 0x00	; 0
    4424:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    4426:	80 81       	ld	r24, Z
    4428:	82 60       	ori	r24, 0x02	; 2
    442a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    442c:	80 81       	ld	r24, Z
    442e:	81 60       	ori	r24, 0x01	; 1
    4430:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    4432:	e0 e8       	ldi	r30, 0x80	; 128
    4434:	f0 e0       	ldi	r31, 0x00	; 0
    4436:	80 81       	ld	r24, Z
    4438:	81 60       	ori	r24, 0x01	; 1
    443a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    443c:	e1 eb       	ldi	r30, 0xB1	; 177
    443e:	f0 e0       	ldi	r31, 0x00	; 0
    4440:	80 81       	ld	r24, Z
    4442:	84 60       	ori	r24, 0x04	; 4
    4444:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    4446:	e0 eb       	ldi	r30, 0xB0	; 176
    4448:	f0 e0       	ldi	r31, 0x00	; 0
    444a:	80 81       	ld	r24, Z
    444c:	81 60       	ori	r24, 0x01	; 1
    444e:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    4450:	e1 e9       	ldi	r30, 0x91	; 145
    4452:	f0 e0       	ldi	r31, 0x00	; 0
    4454:	80 81       	ld	r24, Z
    4456:	82 60       	ori	r24, 0x02	; 2
    4458:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    445a:	80 81       	ld	r24, Z
    445c:	81 60       	ori	r24, 0x01	; 1
    445e:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    4460:	e0 e9       	ldi	r30, 0x90	; 144
    4462:	f0 e0       	ldi	r31, 0x00	; 0
    4464:	80 81       	ld	r24, Z
    4466:	81 60       	ori	r24, 0x01	; 1
    4468:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    446a:	e1 ea       	ldi	r30, 0xA1	; 161
    446c:	f0 e0       	ldi	r31, 0x00	; 0
    446e:	80 81       	ld	r24, Z
    4470:	82 60       	ori	r24, 0x02	; 2
    4472:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    4474:	80 81       	ld	r24, Z
    4476:	81 60       	ori	r24, 0x01	; 1
    4478:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    447a:	e0 ea       	ldi	r30, 0xA0	; 160
    447c:	f0 e0       	ldi	r31, 0x00	; 0
    447e:	80 81       	ld	r24, Z
    4480:	81 60       	ori	r24, 0x01	; 1
    4482:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    4484:	e1 e2       	ldi	r30, 0x21	; 33
    4486:	f1 e0       	ldi	r31, 0x01	; 1
    4488:	80 81       	ld	r24, Z
    448a:	82 60       	ori	r24, 0x02	; 2
    448c:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    448e:	80 81       	ld	r24, Z
    4490:	81 60       	ori	r24, 0x01	; 1
    4492:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    4494:	e0 e2       	ldi	r30, 0x20	; 32
    4496:	f1 e0       	ldi	r31, 0x01	; 1
    4498:	80 81       	ld	r24, Z
    449a:	81 60       	ori	r24, 0x01	; 1
    449c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    449e:	ea e7       	ldi	r30, 0x7A	; 122
    44a0:	f0 e0       	ldi	r31, 0x00	; 0
    44a2:	80 81       	ld	r24, Z
    44a4:	84 60       	ori	r24, 0x04	; 4
    44a6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    44a8:	80 81       	ld	r24, Z
    44aa:	82 60       	ori	r24, 0x02	; 2
    44ac:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    44ae:	80 81       	ld	r24, Z
    44b0:	81 60       	ori	r24, 0x01	; 1
    44b2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    44b4:	80 81       	ld	r24, Z
    44b6:	80 68       	ori	r24, 0x80	; 128
    44b8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    44ba:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    44be:	08 95       	ret

000044c0 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	fc 01       	movw	r30, r24
    44c4:	31 97       	sbiw	r30, 0x01	; 1
    44c6:	e2 31       	cpi	r30, 0x12	; 18
    44c8:	f1 05       	cpc	r31, r1
    44ca:	08 f0       	brcs	.+2      	; 0x44ce <turnOffPWM+0xe>
    44cc:	4d c0       	rjmp	.+154    	; 0x4568 <turnOffPWM+0xa8>
    44ce:	88 27       	eor	r24, r24
    44d0:	e7 58       	subi	r30, 0x87	; 135
    44d2:	ff 4f       	sbci	r31, 0xFF	; 255
    44d4:	8f 4f       	sbci	r24, 0xFF	; 255
    44d6:	f8 c1       	rjmp	.+1008   	; 0x48c8 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    44d8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    44dc:	8f 77       	andi	r24, 0x7F	; 127
    44de:	03 c0       	rjmp	.+6      	; 0x44e6 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    44e0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    44e4:	8f 7d       	andi	r24, 0xDF	; 223
    44e6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    44ea:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    44ec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    44f0:	87 7f       	andi	r24, 0xF7	; 247
    44f2:	f9 cf       	rjmp	.-14     	; 0x44e6 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    44f4:	84 b5       	in	r24, 0x24	; 36
    44f6:	8f 77       	andi	r24, 0x7F	; 127
    44f8:	02 c0       	rjmp	.+4      	; 0x44fe <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    44fa:	84 b5       	in	r24, 0x24	; 36
    44fc:	8f 7d       	andi	r24, 0xDF	; 223
    44fe:	84 bd       	out	0x24, r24	; 36
    4500:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    4502:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    4506:	8f 77       	andi	r24, 0x7F	; 127
    4508:	03 c0       	rjmp	.+6      	; 0x4510 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    450a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    450e:	8f 7d       	andi	r24, 0xDF	; 223
    4510:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    4514:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    4516:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    451a:	8f 77       	andi	r24, 0x7F	; 127
    451c:	07 c0       	rjmp	.+14     	; 0x452c <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    451e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    4522:	8f 7d       	andi	r24, 0xDF	; 223
    4524:	03 c0       	rjmp	.+6      	; 0x452c <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    4526:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    452a:	87 7f       	andi	r24, 0xF7	; 247
    452c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    4530:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    4532:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    4536:	8f 77       	andi	r24, 0x7F	; 127
    4538:	07 c0       	rjmp	.+14     	; 0x4548 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    453a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    453e:	8f 7d       	andi	r24, 0xDF	; 223
    4540:	03 c0       	rjmp	.+6      	; 0x4548 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    4542:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    4546:	87 7f       	andi	r24, 0xF7	; 247
    4548:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    454c:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    454e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    4552:	8f 77       	andi	r24, 0x7F	; 127
    4554:	07 c0       	rjmp	.+14     	; 0x4564 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    4556:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    455a:	8f 7d       	andi	r24, 0xDF	; 223
    455c:	03 c0       	rjmp	.+6      	; 0x4564 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    455e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    4562:	87 7f       	andi	r24, 0xF7	; 247
    4564:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    4568:	08 95       	ret

0000456a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    456a:	cf 93       	push	r28
    456c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    456e:	90 e0       	ldi	r25, 0x00	; 0
    4570:	fc 01       	movw	r30, r24
    4572:	e7 5b       	subi	r30, 0xB7	; 183
    4574:	f4 4f       	sbci	r31, 0xF4	; 244
    4576:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    4578:	fc 01       	movw	r30, r24
    457a:	e1 57       	subi	r30, 0x71	; 113
    457c:	f4 4f       	sbci	r31, 0xF4	; 244
    457e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4580:	88 23       	and	r24, r24
    4582:	61 f1       	breq	.+88     	; 0x45dc <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	88 0f       	add	r24, r24
    4588:	99 1f       	adc	r25, r25
    458a:	fc 01       	movw	r30, r24
    458c:	e1 51       	subi	r30, 0x11	; 17
    458e:	f4 4f       	sbci	r31, 0xF4	; 244
    4590:	c5 91       	lpm	r28, Z+
    4592:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    4594:	fc 01       	movw	r30, r24
    4596:	eb 52       	subi	r30, 0x2B	; 43
    4598:	f4 4f       	sbci	r31, 0xF4	; 244
    459a:	a5 91       	lpm	r26, Z+
    459c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    459e:	61 11       	cpse	r22, r1
    45a0:	09 c0       	rjmp	.+18     	; 0x45b4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    45a2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    45a4:	f8 94       	cli
		*reg &= ~bit;
    45a6:	88 81       	ld	r24, Y
    45a8:	20 95       	com	r18
    45aa:	82 23       	and	r24, r18
    45ac:	88 83       	st	Y, r24
		*out &= ~bit;
    45ae:	ec 91       	ld	r30, X
    45b0:	2e 23       	and	r18, r30
    45b2:	0b c0       	rjmp	.+22     	; 0x45ca <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    45b4:	62 30       	cpi	r22, 0x02	; 2
    45b6:	61 f4       	brne	.+24     	; 0x45d0 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    45b8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    45ba:	f8 94       	cli
		*reg &= ~bit;
    45bc:	88 81       	ld	r24, Y
    45be:	32 2f       	mov	r19, r18
    45c0:	30 95       	com	r19
    45c2:	83 23       	and	r24, r19
    45c4:	88 83       	st	Y, r24
		*out |= bit;
    45c6:	ec 91       	ld	r30, X
    45c8:	2e 2b       	or	r18, r30
    45ca:	2c 93       	st	X, r18
		SREG = oldSREG;
    45cc:	9f bf       	out	0x3f, r25	; 63
    45ce:	06 c0       	rjmp	.+12     	; 0x45dc <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    45d0:	8f b7       	in	r24, 0x3f	; 63
                cli();
    45d2:	f8 94       	cli
		*reg |= bit;
    45d4:	e8 81       	ld	r30, Y
    45d6:	2e 2b       	or	r18, r30
    45d8:	28 83       	st	Y, r18
		SREG = oldSREG;
    45da:	8f bf       	out	0x3f, r24	; 63
	}
}
    45dc:	df 91       	pop	r29
    45de:	cf 91       	pop	r28
    45e0:	08 95       	ret

000045e2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    45e2:	1f 93       	push	r17
    45e4:	cf 93       	push	r28
    45e6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    45e8:	28 2f       	mov	r18, r24
    45ea:	30 e0       	ldi	r19, 0x00	; 0
    45ec:	f9 01       	movw	r30, r18
    45ee:	ed 5f       	subi	r30, 0xFD	; 253
    45f0:	f4 4f       	sbci	r31, 0xF4	; 244
    45f2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    45f4:	f9 01       	movw	r30, r18
    45f6:	e7 5b       	subi	r30, 0xB7	; 183
    45f8:	f4 4f       	sbci	r31, 0xF4	; 244
    45fa:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    45fc:	f9 01       	movw	r30, r18
    45fe:	e1 57       	subi	r30, 0x71	; 113
    4600:	f4 4f       	sbci	r31, 0xF4	; 244
    4602:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4604:	cc 23       	and	r28, r28
    4606:	b9 f0       	breq	.+46     	; 0x4636 <digitalWrite+0x54>
    4608:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    460a:	81 11       	cpse	r24, r1
    460c:	59 df       	rcall	.-334    	; 0x44c0 <turnOffPWM>

	out = portOutputRegister(port);
    460e:	ec 2f       	mov	r30, r28
    4610:	f0 e0       	ldi	r31, 0x00	; 0
    4612:	ee 0f       	add	r30, r30
    4614:	ff 1f       	adc	r31, r31
    4616:	eb 52       	subi	r30, 0x2B	; 43
    4618:	f4 4f       	sbci	r31, 0xF4	; 244
    461a:	a5 91       	lpm	r26, Z+
    461c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    461e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4620:	f8 94       	cli

	if (val == LOW) {
    4622:	11 11       	cpse	r17, r1
    4624:	04 c0       	rjmp	.+8      	; 0x462e <digitalWrite+0x4c>
		*out &= ~bit;
    4626:	8c 91       	ld	r24, X
    4628:	d0 95       	com	r29
    462a:	d8 23       	and	r29, r24
    462c:	02 c0       	rjmp	.+4      	; 0x4632 <digitalWrite+0x50>
	} else {
		*out |= bit;
    462e:	ec 91       	ld	r30, X
    4630:	de 2b       	or	r29, r30
    4632:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    4634:	9f bf       	out	0x3f, r25	; 63
}
    4636:	df 91       	pop	r29
    4638:	cf 91       	pop	r28
    463a:	1f 91       	pop	r17
    463c:	08 95       	ret

0000463e <_ZN6StringD1Ev>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
    463e:	fc 01       	movw	r30, r24
    4640:	80 81       	ld	r24, Z
    4642:	91 81       	ldd	r25, Z+1	; 0x01
    4644:	00 97       	sbiw	r24, 0x00	; 0
    4646:	09 f0       	breq	.+2      	; 0x464a <_ZN6StringD1Ev+0xc>
    4648:	f8 c1       	rjmp	.+1008   	; 0x4a3a <free>
    464a:	08 95       	ret

0000464c <_ZN6String10invalidateEv>:
    464c:	cf 93       	push	r28
    464e:	df 93       	push	r29
    4650:	ec 01       	movw	r28, r24
    4652:	88 81       	ld	r24, Y
    4654:	99 81       	ldd	r25, Y+1	; 0x01
    4656:	00 97       	sbiw	r24, 0x00	; 0
    4658:	09 f0       	breq	.+2      	; 0x465c <_ZN6String10invalidateEv+0x10>
    465a:	ef d1       	rcall	.+990    	; 0x4a3a <free>
    465c:	19 82       	std	Y+1, r1	; 0x01
    465e:	18 82       	st	Y, r1
    4660:	1d 82       	std	Y+5, r1	; 0x05
    4662:	1c 82       	std	Y+4, r1	; 0x04
    4664:	1b 82       	std	Y+3, r1	; 0x03
    4666:	1a 82       	std	Y+2, r1	; 0x02
    4668:	df 91       	pop	r29
    466a:	cf 91       	pop	r28
    466c:	08 95       	ret

0000466e <_ZN6String12changeBufferEj>:
    466e:	0f 93       	push	r16
    4670:	1f 93       	push	r17
    4672:	cf 93       	push	r28
    4674:	df 93       	push	r29
    4676:	ec 01       	movw	r28, r24
    4678:	8b 01       	movw	r16, r22
    467a:	6f 5f       	subi	r22, 0xFF	; 255
    467c:	7f 4f       	sbci	r23, 0xFF	; 255
    467e:	88 81       	ld	r24, Y
    4680:	99 81       	ldd	r25, Y+1	; 0x01
    4682:	64 d2       	rcall	.+1224   	; 0x4b4c <realloc>
    4684:	00 97       	sbiw	r24, 0x00	; 0
    4686:	31 f0       	breq	.+12     	; 0x4694 <_ZN6String12changeBufferEj+0x26>
    4688:	99 83       	std	Y+1, r25	; 0x01
    468a:	88 83       	st	Y, r24
    468c:	1b 83       	std	Y+3, r17	; 0x03
    468e:	0a 83       	std	Y+2, r16	; 0x02
    4690:	81 e0       	ldi	r24, 0x01	; 1
    4692:	01 c0       	rjmp	.+2      	; 0x4696 <_ZN6String12changeBufferEj+0x28>
    4694:	80 e0       	ldi	r24, 0x00	; 0
    4696:	df 91       	pop	r29
    4698:	cf 91       	pop	r28
    469a:	1f 91       	pop	r17
    469c:	0f 91       	pop	r16
    469e:	08 95       	ret

000046a0 <_ZN6String7reserveEj>:
    46a0:	cf 93       	push	r28
    46a2:	df 93       	push	r29
    46a4:	ec 01       	movw	r28, r24
    46a6:	88 81       	ld	r24, Y
    46a8:	99 81       	ldd	r25, Y+1	; 0x01
    46aa:	89 2b       	or	r24, r25
    46ac:	29 f0       	breq	.+10     	; 0x46b8 <_ZN6String7reserveEj+0x18>
    46ae:	8a 81       	ldd	r24, Y+2	; 0x02
    46b0:	9b 81       	ldd	r25, Y+3	; 0x03
    46b2:	86 17       	cp	r24, r22
    46b4:	97 07       	cpc	r25, r23
    46b6:	58 f4       	brcc	.+22     	; 0x46ce <_ZN6String7reserveEj+0x2e>
    46b8:	ce 01       	movw	r24, r28
    46ba:	d9 df       	rcall	.-78     	; 0x466e <_ZN6String12changeBufferEj>
    46bc:	88 23       	and	r24, r24
    46be:	41 f0       	breq	.+16     	; 0x46d0 <_ZN6String7reserveEj+0x30>
    46c0:	8c 81       	ldd	r24, Y+4	; 0x04
    46c2:	9d 81       	ldd	r25, Y+5	; 0x05
    46c4:	89 2b       	or	r24, r25
    46c6:	19 f4       	brne	.+6      	; 0x46ce <_ZN6String7reserveEj+0x2e>
    46c8:	e8 81       	ld	r30, Y
    46ca:	f9 81       	ldd	r31, Y+1	; 0x01
    46cc:	10 82       	st	Z, r1
    46ce:	81 e0       	ldi	r24, 0x01	; 1
    46d0:	df 91       	pop	r29
    46d2:	cf 91       	pop	r28
    46d4:	08 95       	ret

000046d6 <_ZN6String4copyEPKcj>:
    46d6:	ef 92       	push	r14
    46d8:	ff 92       	push	r15
    46da:	0f 93       	push	r16
    46dc:	1f 93       	push	r17
    46de:	cf 93       	push	r28
    46e0:	df 93       	push	r29
    46e2:	ec 01       	movw	r28, r24
    46e4:	7b 01       	movw	r14, r22
    46e6:	8a 01       	movw	r16, r20
    46e8:	ba 01       	movw	r22, r20
    46ea:	da df       	rcall	.-76     	; 0x46a0 <_ZN6String7reserveEj>
    46ec:	81 11       	cpse	r24, r1
    46ee:	03 c0       	rjmp	.+6      	; 0x46f6 <_ZN6String4copyEPKcj+0x20>
    46f0:	ce 01       	movw	r24, r28
    46f2:	ac df       	rcall	.-168    	; 0x464c <_ZN6String10invalidateEv>
    46f4:	06 c0       	rjmp	.+12     	; 0x4702 <_ZN6String4copyEPKcj+0x2c>
    46f6:	1d 83       	std	Y+5, r17	; 0x05
    46f8:	0c 83       	std	Y+4, r16	; 0x04
    46fa:	b7 01       	movw	r22, r14
    46fc:	88 81       	ld	r24, Y
    46fe:	99 81       	ldd	r25, Y+1	; 0x01
    4700:	19 d3       	rcall	.+1586   	; 0x4d34 <strcpy>
    4702:	ce 01       	movw	r24, r28
    4704:	df 91       	pop	r29
    4706:	cf 91       	pop	r28
    4708:	1f 91       	pop	r17
    470a:	0f 91       	pop	r16
    470c:	ff 90       	pop	r15
    470e:	ef 90       	pop	r14
    4710:	08 95       	ret

00004712 <_ZN6StringC1EPKc>:
    4712:	fc 01       	movw	r30, r24
    4714:	11 82       	std	Z+1, r1	; 0x01
    4716:	10 82       	st	Z, r1
    4718:	13 82       	std	Z+3, r1	; 0x03
    471a:	12 82       	std	Z+2, r1	; 0x02
    471c:	15 82       	std	Z+5, r1	; 0x05
    471e:	14 82       	std	Z+4, r1	; 0x04
    4720:	61 15       	cp	r22, r1
    4722:	71 05       	cpc	r23, r1
    4724:	49 f0       	breq	.+18     	; 0x4738 <_ZN6StringC1EPKc+0x26>
    4726:	fb 01       	movw	r30, r22
    4728:	01 90       	ld	r0, Z+
    472a:	00 20       	and	r0, r0
    472c:	e9 f7       	brne	.-6      	; 0x4728 <_ZN6StringC1EPKc+0x16>
    472e:	31 97       	sbiw	r30, 0x01	; 1
    4730:	af 01       	movw	r20, r30
    4732:	46 1b       	sub	r20, r22
    4734:	57 0b       	sbc	r21, r23
    4736:	cf cf       	rjmp	.-98     	; 0x46d6 <_ZN6String4copyEPKcj>
    4738:	08 95       	ret

0000473a <_ZN6String6concatEPKcj>:
    473a:	ef 92       	push	r14
    473c:	ff 92       	push	r15
    473e:	0f 93       	push	r16
    4740:	1f 93       	push	r17
    4742:	cf 93       	push	r28
    4744:	df 93       	push	r29
    4746:	61 15       	cp	r22, r1
    4748:	71 05       	cpc	r23, r1
    474a:	11 f4       	brne	.+4      	; 0x4750 <_ZN6String6concatEPKcj+0x16>
    474c:	80 e0       	ldi	r24, 0x00	; 0
    474e:	1a c0       	rjmp	.+52     	; 0x4784 <_ZN6String6concatEPKcj+0x4a>
    4750:	41 15       	cp	r20, r1
    4752:	51 05       	cpc	r21, r1
    4754:	b1 f0       	breq	.+44     	; 0x4782 <_ZN6String6concatEPKcj+0x48>
    4756:	7b 01       	movw	r14, r22
    4758:	ec 01       	movw	r28, r24
    475a:	8c 81       	ldd	r24, Y+4	; 0x04
    475c:	9d 81       	ldd	r25, Y+5	; 0x05
    475e:	8a 01       	movw	r16, r20
    4760:	08 0f       	add	r16, r24
    4762:	19 1f       	adc	r17, r25
    4764:	b8 01       	movw	r22, r16
    4766:	ce 01       	movw	r24, r28
    4768:	9b df       	rcall	.-202    	; 0x46a0 <_ZN6String7reserveEj>
    476a:	88 23       	and	r24, r24
    476c:	79 f3       	breq	.-34     	; 0x474c <_ZN6String6concatEPKcj+0x12>
    476e:	28 81       	ld	r18, Y
    4770:	39 81       	ldd	r19, Y+1	; 0x01
    4772:	8c 81       	ldd	r24, Y+4	; 0x04
    4774:	9d 81       	ldd	r25, Y+5	; 0x05
    4776:	b7 01       	movw	r22, r14
    4778:	82 0f       	add	r24, r18
    477a:	93 1f       	adc	r25, r19
    477c:	db d2       	rcall	.+1462   	; 0x4d34 <strcpy>
    477e:	1d 83       	std	Y+5, r17	; 0x05
    4780:	0c 83       	std	Y+4, r16	; 0x04
    4782:	81 e0       	ldi	r24, 0x01	; 1
    4784:	df 91       	pop	r29
    4786:	cf 91       	pop	r28
    4788:	1f 91       	pop	r17
    478a:	0f 91       	pop	r16
    478c:	ff 90       	pop	r15
    478e:	ef 90       	pop	r14
    4790:	08 95       	ret

00004792 <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    4792:	61 15       	cp	r22, r1
    4794:	71 05       	cpc	r23, r1
    4796:	49 f0       	breq	.+18     	; 0x47aa <_ZN6String6concatEPKc+0x18>
	return concat(cstr, strlen(cstr));
    4798:	fb 01       	movw	r30, r22
    479a:	01 90       	ld	r0, Z+
    479c:	00 20       	and	r0, r0
    479e:	e9 f7       	brne	.-6      	; 0x479a <_ZN6String6concatEPKc+0x8>
    47a0:	31 97       	sbiw	r30, 0x01	; 1
    47a2:	af 01       	movw	r20, r30
    47a4:	46 1b       	sub	r20, r22
    47a6:	57 0b       	sbc	r21, r23
    47a8:	c8 cf       	rjmp	.-112    	; 0x473a <_ZN6String6concatEPKcj>
}
    47aa:	80 e0       	ldi	r24, 0x00	; 0
    47ac:	08 95       	ret

000047ae <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    47ae:	cf 93       	push	r28
    47b0:	df 93       	push	r29
    47b2:	1f 92       	push	r1
    47b4:	1f 92       	push	r1
    47b6:	cd b7       	in	r28, 0x3d	; 61
    47b8:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
    47ba:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    47bc:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    47be:	41 e0       	ldi	r20, 0x01	; 1
    47c0:	50 e0       	ldi	r21, 0x00	; 0
    47c2:	be 01       	movw	r22, r28
    47c4:	6f 5f       	subi	r22, 0xFF	; 255
    47c6:	7f 4f       	sbci	r23, 0xFF	; 255
    47c8:	b8 df       	rcall	.-144    	; 0x473a <_ZN6String6concatEPKcj>
}
    47ca:	0f 90       	pop	r0
    47cc:	0f 90       	pop	r0
    47ce:	df 91       	pop	r29
    47d0:	cf 91       	pop	r28
    47d2:	08 95       	ret

000047d4 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    47d4:	ef 92       	push	r14
    47d6:	ff 92       	push	r15
    47d8:	0f 93       	push	r16
    47da:	1f 93       	push	r17
    47dc:	cf 93       	push	r28
    47de:	df 93       	push	r29
    47e0:	00 d0       	rcall	.+0      	; 0x47e2 <_ZN6String6concatEh+0xe>
    47e2:	1f 92       	push	r1
    47e4:	cd b7       	in	r28, 0x3d	; 61
    47e6:	de b7       	in	r29, 0x3e	; 62
    47e8:	7c 01       	movw	r14, r24
    47ea:	86 2f       	mov	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    47ec:	4a e0       	ldi	r20, 0x0A	; 10
    47ee:	8e 01       	movw	r16, r28
    47f0:	0f 5f       	subi	r16, 0xFF	; 255
    47f2:	1f 4f       	sbci	r17, 0xFF	; 255
    47f4:	b8 01       	movw	r22, r16
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	a4 d2       	rcall	.+1352   	; 0x4d42 <__itoa_ncheck>
	char buf[1 + 3 * sizeof(unsigned char)];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
    47fa:	f8 01       	movw	r30, r16
    47fc:	01 90       	ld	r0, Z+
    47fe:	00 20       	and	r0, r0
    4800:	e9 f7       	brne	.-6      	; 0x47fc <_ZN6String6concatEh+0x28>
    4802:	31 97       	sbiw	r30, 0x01	; 1
    4804:	af 01       	movw	r20, r30
    4806:	40 1b       	sub	r20, r16
    4808:	51 0b       	sbc	r21, r17
    480a:	b8 01       	movw	r22, r16
    480c:	c7 01       	movw	r24, r14
    480e:	95 df       	rcall	.-214    	; 0x473a <_ZN6String6concatEPKcj>
}
    4810:	0f 90       	pop	r0
    4812:	0f 90       	pop	r0
    4814:	0f 90       	pop	r0
    4816:	0f 90       	pop	r0
    4818:	df 91       	pop	r29
    481a:	cf 91       	pop	r28
    481c:	1f 91       	pop	r17
    481e:	0f 91       	pop	r16
    4820:	ff 90       	pop	r15
    4822:	ef 90       	pop	r14
    4824:	08 95       	ret

00004826 <_ZN6String6concatEi>:

unsigned char String::concat(int num)
{
    4826:	ef 92       	push	r14
    4828:	ff 92       	push	r15
    482a:	0f 93       	push	r16
    482c:	1f 93       	push	r17
    482e:	cf 93       	push	r28
    4830:	df 93       	push	r29
    4832:	cd b7       	in	r28, 0x3d	; 61
    4834:	de b7       	in	r29, 0x3e	; 62
    4836:	28 97       	sbiw	r28, 0x08	; 8
    4838:	0f b6       	in	r0, 0x3f	; 63
    483a:	f8 94       	cli
    483c:	de bf       	out	0x3e, r29	; 62
    483e:	0f be       	out	0x3f, r0	; 63
    4840:	cd bf       	out	0x3d, r28	; 61
    4842:	7c 01       	movw	r14, r24
    4844:	cb 01       	movw	r24, r22
    4846:	4a e0       	ldi	r20, 0x0A	; 10
    4848:	8e 01       	movw	r16, r28
    484a:	0f 5f       	subi	r16, 0xFF	; 255
    484c:	1f 4f       	sbci	r17, 0xFF	; 255
    484e:	b8 01       	movw	r22, r16
    4850:	78 d2       	rcall	.+1264   	; 0x4d42 <__itoa_ncheck>
	char buf[2 + 3 * sizeof(int)];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
    4852:	f8 01       	movw	r30, r16
    4854:	01 90       	ld	r0, Z+
    4856:	00 20       	and	r0, r0
    4858:	e9 f7       	brne	.-6      	; 0x4854 <_ZN6String6concatEi+0x2e>
    485a:	31 97       	sbiw	r30, 0x01	; 1
    485c:	af 01       	movw	r20, r30
    485e:	40 1b       	sub	r20, r16
    4860:	51 0b       	sbc	r21, r17
    4862:	b8 01       	movw	r22, r16
    4864:	c7 01       	movw	r24, r14
    4866:	69 df       	rcall	.-302    	; 0x473a <_ZN6String6concatEPKcj>
}
    4868:	28 96       	adiw	r28, 0x08	; 8
    486a:	0f b6       	in	r0, 0x3f	; 63
    486c:	f8 94       	cli
    486e:	de bf       	out	0x3e, r29	; 62
    4870:	0f be       	out	0x3f, r0	; 63
    4872:	cd bf       	out	0x3d, r28	; 61
    4874:	df 91       	pop	r29
    4876:	cf 91       	pop	r28
    4878:	1f 91       	pop	r17
    487a:	0f 91       	pop	r16
    487c:	ff 90       	pop	r15
    487e:	ef 90       	pop	r14
    4880:	08 95       	ret

00004882 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4882:	08 95       	ret

00004884 <__udivmodsi4>:
    4884:	a1 e2       	ldi	r26, 0x21	; 33
    4886:	1a 2e       	mov	r1, r26
    4888:	aa 1b       	sub	r26, r26
    488a:	bb 1b       	sub	r27, r27
    488c:	fd 01       	movw	r30, r26
    488e:	0d c0       	rjmp	.+26     	; 0x48aa <__udivmodsi4_ep>

00004890 <__udivmodsi4_loop>:
    4890:	aa 1f       	adc	r26, r26
    4892:	bb 1f       	adc	r27, r27
    4894:	ee 1f       	adc	r30, r30
    4896:	ff 1f       	adc	r31, r31
    4898:	a2 17       	cp	r26, r18
    489a:	b3 07       	cpc	r27, r19
    489c:	e4 07       	cpc	r30, r20
    489e:	f5 07       	cpc	r31, r21
    48a0:	20 f0       	brcs	.+8      	; 0x48aa <__udivmodsi4_ep>
    48a2:	a2 1b       	sub	r26, r18
    48a4:	b3 0b       	sbc	r27, r19
    48a6:	e4 0b       	sbc	r30, r20
    48a8:	f5 0b       	sbc	r31, r21

000048aa <__udivmodsi4_ep>:
    48aa:	66 1f       	adc	r22, r22
    48ac:	77 1f       	adc	r23, r23
    48ae:	88 1f       	adc	r24, r24
    48b0:	99 1f       	adc	r25, r25
    48b2:	1a 94       	dec	r1
    48b4:	69 f7       	brne	.-38     	; 0x4890 <__udivmodsi4_loop>
    48b6:	60 95       	com	r22
    48b8:	70 95       	com	r23
    48ba:	80 95       	com	r24
    48bc:	90 95       	com	r25
    48be:	9b 01       	movw	r18, r22
    48c0:	ac 01       	movw	r20, r24
    48c2:	bd 01       	movw	r22, r26
    48c4:	cf 01       	movw	r24, r30
    48c6:	08 95       	ret

000048c8 <__tablejump2__>:
    48c8:	ee 0f       	add	r30, r30
    48ca:	ff 1f       	adc	r31, r31
    48cc:	88 1f       	adc	r24, r24
    48ce:	8b bf       	out	0x3b, r24	; 59
    48d0:	07 90       	elpm	r0, Z+
    48d2:	f6 91       	elpm	r31, Z
    48d4:	e0 2d       	mov	r30, r0
    48d6:	19 94       	eijmp

000048d8 <__umulhisi3>:
    48d8:	a2 9f       	mul	r26, r18
    48da:	b0 01       	movw	r22, r0
    48dc:	b3 9f       	mul	r27, r19
    48de:	c0 01       	movw	r24, r0
    48e0:	a3 9f       	mul	r26, r19
    48e2:	70 0d       	add	r23, r0
    48e4:	81 1d       	adc	r24, r1
    48e6:	11 24       	eor	r1, r1
    48e8:	91 1d       	adc	r25, r1
    48ea:	b2 9f       	mul	r27, r18
    48ec:	70 0d       	add	r23, r0
    48ee:	81 1d       	adc	r24, r1
    48f0:	11 24       	eor	r1, r1
    48f2:	91 1d       	adc	r25, r1
    48f4:	08 95       	ret

000048f6 <__muluhisi3>:
    48f6:	f0 df       	rcall	.-32     	; 0x48d8 <__umulhisi3>
    48f8:	a5 9f       	mul	r26, r21
    48fa:	90 0d       	add	r25, r0
    48fc:	b4 9f       	mul	r27, r20
    48fe:	90 0d       	add	r25, r0
    4900:	a4 9f       	mul	r26, r20
    4902:	80 0d       	add	r24, r0
    4904:	91 1d       	adc	r25, r1
    4906:	11 24       	eor	r1, r1
    4908:	08 95       	ret

0000490a <malloc>:
    490a:	0f 93       	push	r16
    490c:	1f 93       	push	r17
    490e:	cf 93       	push	r28
    4910:	df 93       	push	r29
    4912:	82 30       	cpi	r24, 0x02	; 2
    4914:	91 05       	cpc	r25, r1
    4916:	10 f4       	brcc	.+4      	; 0x491c <malloc+0x12>
    4918:	82 e0       	ldi	r24, 0x02	; 2
    491a:	90 e0       	ldi	r25, 0x00	; 0
    491c:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <__flp>
    4920:	f0 91 8a 04 	lds	r31, 0x048A	; 0x80048a <__flp+0x1>
    4924:	20 e0       	ldi	r18, 0x00	; 0
    4926:	30 e0       	ldi	r19, 0x00	; 0
    4928:	a0 e0       	ldi	r26, 0x00	; 0
    492a:	b0 e0       	ldi	r27, 0x00	; 0
    492c:	30 97       	sbiw	r30, 0x00	; 0
    492e:	19 f1       	breq	.+70     	; 0x4976 <malloc+0x6c>
    4930:	40 81       	ld	r20, Z
    4932:	51 81       	ldd	r21, Z+1	; 0x01
    4934:	02 81       	ldd	r16, Z+2	; 0x02
    4936:	13 81       	ldd	r17, Z+3	; 0x03
    4938:	48 17       	cp	r20, r24
    493a:	59 07       	cpc	r21, r25
    493c:	c8 f0       	brcs	.+50     	; 0x4970 <malloc+0x66>
    493e:	84 17       	cp	r24, r20
    4940:	95 07       	cpc	r25, r21
    4942:	69 f4       	brne	.+26     	; 0x495e <malloc+0x54>
    4944:	10 97       	sbiw	r26, 0x00	; 0
    4946:	31 f0       	breq	.+12     	; 0x4954 <malloc+0x4a>
    4948:	12 96       	adiw	r26, 0x02	; 2
    494a:	0c 93       	st	X, r16
    494c:	12 97       	sbiw	r26, 0x02	; 2
    494e:	13 96       	adiw	r26, 0x03	; 3
    4950:	1c 93       	st	X, r17
    4952:	27 c0       	rjmp	.+78     	; 0x49a2 <malloc+0x98>
    4954:	00 93 89 04 	sts	0x0489, r16	; 0x800489 <__flp>
    4958:	10 93 8a 04 	sts	0x048A, r17	; 0x80048a <__flp+0x1>
    495c:	22 c0       	rjmp	.+68     	; 0x49a2 <malloc+0x98>
    495e:	21 15       	cp	r18, r1
    4960:	31 05       	cpc	r19, r1
    4962:	19 f0       	breq	.+6      	; 0x496a <malloc+0x60>
    4964:	42 17       	cp	r20, r18
    4966:	53 07       	cpc	r21, r19
    4968:	18 f4       	brcc	.+6      	; 0x4970 <malloc+0x66>
    496a:	9a 01       	movw	r18, r20
    496c:	bd 01       	movw	r22, r26
    496e:	ef 01       	movw	r28, r30
    4970:	df 01       	movw	r26, r30
    4972:	f8 01       	movw	r30, r16
    4974:	db cf       	rjmp	.-74     	; 0x492c <malloc+0x22>
    4976:	21 15       	cp	r18, r1
    4978:	31 05       	cpc	r19, r1
    497a:	f9 f0       	breq	.+62     	; 0x49ba <malloc+0xb0>
    497c:	28 1b       	sub	r18, r24
    497e:	39 0b       	sbc	r19, r25
    4980:	24 30       	cpi	r18, 0x04	; 4
    4982:	31 05       	cpc	r19, r1
    4984:	80 f4       	brcc	.+32     	; 0x49a6 <malloc+0x9c>
    4986:	8a 81       	ldd	r24, Y+2	; 0x02
    4988:	9b 81       	ldd	r25, Y+3	; 0x03
    498a:	61 15       	cp	r22, r1
    498c:	71 05       	cpc	r23, r1
    498e:	21 f0       	breq	.+8      	; 0x4998 <malloc+0x8e>
    4990:	fb 01       	movw	r30, r22
    4992:	93 83       	std	Z+3, r25	; 0x03
    4994:	82 83       	std	Z+2, r24	; 0x02
    4996:	04 c0       	rjmp	.+8      	; 0x49a0 <malloc+0x96>
    4998:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <__flp+0x1>
    499c:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <__flp>
    49a0:	fe 01       	movw	r30, r28
    49a2:	32 96       	adiw	r30, 0x02	; 2
    49a4:	44 c0       	rjmp	.+136    	; 0x4a2e <malloc+0x124>
    49a6:	fe 01       	movw	r30, r28
    49a8:	e2 0f       	add	r30, r18
    49aa:	f3 1f       	adc	r31, r19
    49ac:	81 93       	st	Z+, r24
    49ae:	91 93       	st	Z+, r25
    49b0:	22 50       	subi	r18, 0x02	; 2
    49b2:	31 09       	sbc	r19, r1
    49b4:	39 83       	std	Y+1, r19	; 0x01
    49b6:	28 83       	st	Y, r18
    49b8:	3a c0       	rjmp	.+116    	; 0x4a2e <malloc+0x124>
    49ba:	20 91 87 04 	lds	r18, 0x0487	; 0x800487 <__brkval>
    49be:	30 91 88 04 	lds	r19, 0x0488	; 0x800488 <__brkval+0x1>
    49c2:	23 2b       	or	r18, r19
    49c4:	41 f4       	brne	.+16     	; 0x49d6 <malloc+0xcc>
    49c6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    49ca:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    49ce:	30 93 88 04 	sts	0x0488, r19	; 0x800488 <__brkval+0x1>
    49d2:	20 93 87 04 	sts	0x0487, r18	; 0x800487 <__brkval>
    49d6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    49da:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    49de:	21 15       	cp	r18, r1
    49e0:	31 05       	cpc	r19, r1
    49e2:	41 f4       	brne	.+16     	; 0x49f4 <malloc+0xea>
    49e4:	2d b7       	in	r18, 0x3d	; 61
    49e6:	3e b7       	in	r19, 0x3e	; 62
    49e8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    49ec:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    49f0:	24 1b       	sub	r18, r20
    49f2:	35 0b       	sbc	r19, r21
    49f4:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <__brkval>
    49f8:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <__brkval+0x1>
    49fc:	e2 17       	cp	r30, r18
    49fe:	f3 07       	cpc	r31, r19
    4a00:	a0 f4       	brcc	.+40     	; 0x4a2a <malloc+0x120>
    4a02:	2e 1b       	sub	r18, r30
    4a04:	3f 0b       	sbc	r19, r31
    4a06:	28 17       	cp	r18, r24
    4a08:	39 07       	cpc	r19, r25
    4a0a:	78 f0       	brcs	.+30     	; 0x4a2a <malloc+0x120>
    4a0c:	ac 01       	movw	r20, r24
    4a0e:	4e 5f       	subi	r20, 0xFE	; 254
    4a10:	5f 4f       	sbci	r21, 0xFF	; 255
    4a12:	24 17       	cp	r18, r20
    4a14:	35 07       	cpc	r19, r21
    4a16:	48 f0       	brcs	.+18     	; 0x4a2a <malloc+0x120>
    4a18:	4e 0f       	add	r20, r30
    4a1a:	5f 1f       	adc	r21, r31
    4a1c:	50 93 88 04 	sts	0x0488, r21	; 0x800488 <__brkval+0x1>
    4a20:	40 93 87 04 	sts	0x0487, r20	; 0x800487 <__brkval>
    4a24:	81 93       	st	Z+, r24
    4a26:	91 93       	st	Z+, r25
    4a28:	02 c0       	rjmp	.+4      	; 0x4a2e <malloc+0x124>
    4a2a:	e0 e0       	ldi	r30, 0x00	; 0
    4a2c:	f0 e0       	ldi	r31, 0x00	; 0
    4a2e:	cf 01       	movw	r24, r30
    4a30:	df 91       	pop	r29
    4a32:	cf 91       	pop	r28
    4a34:	1f 91       	pop	r17
    4a36:	0f 91       	pop	r16
    4a38:	08 95       	ret

00004a3a <free>:
    4a3a:	cf 93       	push	r28
    4a3c:	df 93       	push	r29
    4a3e:	00 97       	sbiw	r24, 0x00	; 0
    4a40:	09 f4       	brne	.+2      	; 0x4a44 <free+0xa>
    4a42:	81 c0       	rjmp	.+258    	; 0x4b46 <free+0x10c>
    4a44:	fc 01       	movw	r30, r24
    4a46:	32 97       	sbiw	r30, 0x02	; 2
    4a48:	13 82       	std	Z+3, r1	; 0x03
    4a4a:	12 82       	std	Z+2, r1	; 0x02
    4a4c:	a0 91 89 04 	lds	r26, 0x0489	; 0x800489 <__flp>
    4a50:	b0 91 8a 04 	lds	r27, 0x048A	; 0x80048a <__flp+0x1>
    4a54:	10 97       	sbiw	r26, 0x00	; 0
    4a56:	81 f4       	brne	.+32     	; 0x4a78 <free+0x3e>
    4a58:	20 81       	ld	r18, Z
    4a5a:	31 81       	ldd	r19, Z+1	; 0x01
    4a5c:	82 0f       	add	r24, r18
    4a5e:	93 1f       	adc	r25, r19
    4a60:	20 91 87 04 	lds	r18, 0x0487	; 0x800487 <__brkval>
    4a64:	30 91 88 04 	lds	r19, 0x0488	; 0x800488 <__brkval+0x1>
    4a68:	28 17       	cp	r18, r24
    4a6a:	39 07       	cpc	r19, r25
    4a6c:	51 f5       	brne	.+84     	; 0x4ac2 <free+0x88>
    4a6e:	f0 93 88 04 	sts	0x0488, r31	; 0x800488 <__brkval+0x1>
    4a72:	e0 93 87 04 	sts	0x0487, r30	; 0x800487 <__brkval>
    4a76:	67 c0       	rjmp	.+206    	; 0x4b46 <free+0x10c>
    4a78:	ed 01       	movw	r28, r26
    4a7a:	20 e0       	ldi	r18, 0x00	; 0
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
    4a7e:	ce 17       	cp	r28, r30
    4a80:	df 07       	cpc	r29, r31
    4a82:	40 f4       	brcc	.+16     	; 0x4a94 <free+0x5a>
    4a84:	4a 81       	ldd	r20, Y+2	; 0x02
    4a86:	5b 81       	ldd	r21, Y+3	; 0x03
    4a88:	9e 01       	movw	r18, r28
    4a8a:	41 15       	cp	r20, r1
    4a8c:	51 05       	cpc	r21, r1
    4a8e:	f1 f0       	breq	.+60     	; 0x4acc <free+0x92>
    4a90:	ea 01       	movw	r28, r20
    4a92:	f5 cf       	rjmp	.-22     	; 0x4a7e <free+0x44>
    4a94:	d3 83       	std	Z+3, r29	; 0x03
    4a96:	c2 83       	std	Z+2, r28	; 0x02
    4a98:	40 81       	ld	r20, Z
    4a9a:	51 81       	ldd	r21, Z+1	; 0x01
    4a9c:	84 0f       	add	r24, r20
    4a9e:	95 1f       	adc	r25, r21
    4aa0:	c8 17       	cp	r28, r24
    4aa2:	d9 07       	cpc	r29, r25
    4aa4:	59 f4       	brne	.+22     	; 0x4abc <free+0x82>
    4aa6:	88 81       	ld	r24, Y
    4aa8:	99 81       	ldd	r25, Y+1	; 0x01
    4aaa:	84 0f       	add	r24, r20
    4aac:	95 1f       	adc	r25, r21
    4aae:	02 96       	adiw	r24, 0x02	; 2
    4ab0:	91 83       	std	Z+1, r25	; 0x01
    4ab2:	80 83       	st	Z, r24
    4ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ab8:	93 83       	std	Z+3, r25	; 0x03
    4aba:	82 83       	std	Z+2, r24	; 0x02
    4abc:	21 15       	cp	r18, r1
    4abe:	31 05       	cpc	r19, r1
    4ac0:	29 f4       	brne	.+10     	; 0x4acc <free+0x92>
    4ac2:	f0 93 8a 04 	sts	0x048A, r31	; 0x80048a <__flp+0x1>
    4ac6:	e0 93 89 04 	sts	0x0489, r30	; 0x800489 <__flp>
    4aca:	3d c0       	rjmp	.+122    	; 0x4b46 <free+0x10c>
    4acc:	e9 01       	movw	r28, r18
    4ace:	fb 83       	std	Y+3, r31	; 0x03
    4ad0:	ea 83       	std	Y+2, r30	; 0x02
    4ad2:	49 91       	ld	r20, Y+
    4ad4:	59 91       	ld	r21, Y+
    4ad6:	c4 0f       	add	r28, r20
    4ad8:	d5 1f       	adc	r29, r21
    4ada:	ec 17       	cp	r30, r28
    4adc:	fd 07       	cpc	r31, r29
    4ade:	61 f4       	brne	.+24     	; 0x4af8 <free+0xbe>
    4ae0:	80 81       	ld	r24, Z
    4ae2:	91 81       	ldd	r25, Z+1	; 0x01
    4ae4:	84 0f       	add	r24, r20
    4ae6:	95 1f       	adc	r25, r21
    4ae8:	02 96       	adiw	r24, 0x02	; 2
    4aea:	e9 01       	movw	r28, r18
    4aec:	99 83       	std	Y+1, r25	; 0x01
    4aee:	88 83       	st	Y, r24
    4af0:	82 81       	ldd	r24, Z+2	; 0x02
    4af2:	93 81       	ldd	r25, Z+3	; 0x03
    4af4:	9b 83       	std	Y+3, r25	; 0x03
    4af6:	8a 83       	std	Y+2, r24	; 0x02
    4af8:	e0 e0       	ldi	r30, 0x00	; 0
    4afa:	f0 e0       	ldi	r31, 0x00	; 0
    4afc:	12 96       	adiw	r26, 0x02	; 2
    4afe:	8d 91       	ld	r24, X+
    4b00:	9c 91       	ld	r25, X
    4b02:	13 97       	sbiw	r26, 0x03	; 3
    4b04:	00 97       	sbiw	r24, 0x00	; 0
    4b06:	19 f0       	breq	.+6      	; 0x4b0e <free+0xd4>
    4b08:	fd 01       	movw	r30, r26
    4b0a:	dc 01       	movw	r26, r24
    4b0c:	f7 cf       	rjmp	.-18     	; 0x4afc <free+0xc2>
    4b0e:	8d 91       	ld	r24, X+
    4b10:	9c 91       	ld	r25, X
    4b12:	11 97       	sbiw	r26, 0x01	; 1
    4b14:	9d 01       	movw	r18, r26
    4b16:	2e 5f       	subi	r18, 0xFE	; 254
    4b18:	3f 4f       	sbci	r19, 0xFF	; 255
    4b1a:	82 0f       	add	r24, r18
    4b1c:	93 1f       	adc	r25, r19
    4b1e:	20 91 87 04 	lds	r18, 0x0487	; 0x800487 <__brkval>
    4b22:	30 91 88 04 	lds	r19, 0x0488	; 0x800488 <__brkval+0x1>
    4b26:	28 17       	cp	r18, r24
    4b28:	39 07       	cpc	r19, r25
    4b2a:	69 f4       	brne	.+26     	; 0x4b46 <free+0x10c>
    4b2c:	30 97       	sbiw	r30, 0x00	; 0
    4b2e:	29 f4       	brne	.+10     	; 0x4b3a <free+0x100>
    4b30:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <__flp+0x1>
    4b34:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <__flp>
    4b38:	02 c0       	rjmp	.+4      	; 0x4b3e <free+0x104>
    4b3a:	13 82       	std	Z+3, r1	; 0x03
    4b3c:	12 82       	std	Z+2, r1	; 0x02
    4b3e:	b0 93 88 04 	sts	0x0488, r27	; 0x800488 <__brkval+0x1>
    4b42:	a0 93 87 04 	sts	0x0487, r26	; 0x800487 <__brkval>
    4b46:	df 91       	pop	r29
    4b48:	cf 91       	pop	r28
    4b4a:	08 95       	ret

00004b4c <realloc>:
    4b4c:	6f 92       	push	r6
    4b4e:	7f 92       	push	r7
    4b50:	8f 92       	push	r8
    4b52:	9f 92       	push	r9
    4b54:	af 92       	push	r10
    4b56:	bf 92       	push	r11
    4b58:	cf 92       	push	r12
    4b5a:	df 92       	push	r13
    4b5c:	ef 92       	push	r14
    4b5e:	ff 92       	push	r15
    4b60:	0f 93       	push	r16
    4b62:	1f 93       	push	r17
    4b64:	cf 93       	push	r28
    4b66:	df 93       	push	r29
    4b68:	00 97       	sbiw	r24, 0x00	; 0
    4b6a:	81 f4       	brne	.+32     	; 0x4b8c <realloc+0x40>
    4b6c:	cb 01       	movw	r24, r22
    4b6e:	df 91       	pop	r29
    4b70:	cf 91       	pop	r28
    4b72:	1f 91       	pop	r17
    4b74:	0f 91       	pop	r16
    4b76:	ff 90       	pop	r15
    4b78:	ef 90       	pop	r14
    4b7a:	df 90       	pop	r13
    4b7c:	cf 90       	pop	r12
    4b7e:	bf 90       	pop	r11
    4b80:	af 90       	pop	r10
    4b82:	9f 90       	pop	r9
    4b84:	8f 90       	pop	r8
    4b86:	7f 90       	pop	r7
    4b88:	6f 90       	pop	r6
    4b8a:	bf ce       	rjmp	.-642    	; 0x490a <malloc>
    4b8c:	fc 01       	movw	r30, r24
    4b8e:	e6 0f       	add	r30, r22
    4b90:	f7 1f       	adc	r31, r23
    4b92:	9c 01       	movw	r18, r24
    4b94:	22 50       	subi	r18, 0x02	; 2
    4b96:	31 09       	sbc	r19, r1
    4b98:	e2 17       	cp	r30, r18
    4b9a:	f3 07       	cpc	r31, r19
    4b9c:	08 f4       	brcc	.+2      	; 0x4ba0 <realloc+0x54>
    4b9e:	a5 c0       	rjmp	.+330    	; 0x4cea <realloc+0x19e>
    4ba0:	ec 01       	movw	r28, r24
    4ba2:	d9 01       	movw	r26, r18
    4ba4:	0d 91       	ld	r16, X+
    4ba6:	1c 91       	ld	r17, X
    4ba8:	11 97       	sbiw	r26, 0x01	; 1
    4baa:	06 17       	cp	r16, r22
    4bac:	17 07       	cpc	r17, r23
    4bae:	a8 f0       	brcs	.+42     	; 0x4bda <realloc+0x8e>
    4bb0:	05 30       	cpi	r16, 0x05	; 5
    4bb2:	11 05       	cpc	r17, r1
    4bb4:	08 f4       	brcc	.+2      	; 0x4bb8 <realloc+0x6c>
    4bb6:	97 c0       	rjmp	.+302    	; 0x4ce6 <realloc+0x19a>
    4bb8:	c8 01       	movw	r24, r16
    4bba:	04 97       	sbiw	r24, 0x04	; 4
    4bbc:	86 17       	cp	r24, r22
    4bbe:	97 07       	cpc	r25, r23
    4bc0:	08 f4       	brcc	.+2      	; 0x4bc4 <realloc+0x78>
    4bc2:	91 c0       	rjmp	.+290    	; 0x4ce6 <realloc+0x19a>
    4bc4:	02 50       	subi	r16, 0x02	; 2
    4bc6:	11 09       	sbc	r17, r1
    4bc8:	06 1b       	sub	r16, r22
    4bca:	17 0b       	sbc	r17, r23
    4bcc:	01 93       	st	Z+, r16
    4bce:	11 93       	st	Z+, r17
    4bd0:	6d 93       	st	X+, r22
    4bd2:	7c 93       	st	X, r23
    4bd4:	cf 01       	movw	r24, r30
    4bd6:	31 df       	rcall	.-414    	; 0x4a3a <free>
    4bd8:	86 c0       	rjmp	.+268    	; 0x4ce6 <realloc+0x19a>
    4bda:	5b 01       	movw	r10, r22
    4bdc:	a0 1a       	sub	r10, r16
    4bde:	b1 0a       	sbc	r11, r17
    4be0:	4c 01       	movw	r8, r24
    4be2:	80 0e       	add	r8, r16
    4be4:	91 1e       	adc	r9, r17
    4be6:	a0 91 89 04 	lds	r26, 0x0489	; 0x800489 <__flp>
    4bea:	b0 91 8a 04 	lds	r27, 0x048A	; 0x80048a <__flp+0x1>
    4bee:	61 2c       	mov	r6, r1
    4bf0:	71 2c       	mov	r7, r1
    4bf2:	e1 2c       	mov	r14, r1
    4bf4:	f1 2c       	mov	r15, r1
    4bf6:	10 97       	sbiw	r26, 0x00	; 0
    4bf8:	09 f4       	brne	.+2      	; 0x4bfc <realloc+0xb0>
    4bfa:	46 c0       	rjmp	.+140    	; 0x4c88 <realloc+0x13c>
    4bfc:	8d 91       	ld	r24, X+
    4bfe:	9c 91       	ld	r25, X
    4c00:	11 97       	sbiw	r26, 0x01	; 1
    4c02:	a8 15       	cp	r26, r8
    4c04:	b9 05       	cpc	r27, r9
    4c06:	b1 f5       	brne	.+108    	; 0x4c74 <realloc+0x128>
    4c08:	6c 01       	movw	r12, r24
    4c0a:	42 e0       	ldi	r20, 0x02	; 2
    4c0c:	c4 0e       	add	r12, r20
    4c0e:	d1 1c       	adc	r13, r1
    4c10:	ca 14       	cp	r12, r10
    4c12:	db 04       	cpc	r13, r11
    4c14:	78 f1       	brcs	.+94     	; 0x4c74 <realloc+0x128>
    4c16:	4c 01       	movw	r8, r24
    4c18:	8a 18       	sub	r8, r10
    4c1a:	9b 08       	sbc	r9, r11
    4c1c:	64 01       	movw	r12, r8
    4c1e:	42 e0       	ldi	r20, 0x02	; 2
    4c20:	c4 0e       	add	r12, r20
    4c22:	d1 1c       	adc	r13, r1
    4c24:	12 96       	adiw	r26, 0x02	; 2
    4c26:	bc 90       	ld	r11, X
    4c28:	12 97       	sbiw	r26, 0x02	; 2
    4c2a:	13 96       	adiw	r26, 0x03	; 3
    4c2c:	ac 91       	ld	r26, X
    4c2e:	b5 e0       	ldi	r27, 0x05	; 5
    4c30:	cb 16       	cp	r12, r27
    4c32:	d1 04       	cpc	r13, r1
    4c34:	40 f0       	brcs	.+16     	; 0x4c46 <realloc+0xfa>
    4c36:	b2 82       	std	Z+2, r11	; 0x02
    4c38:	a3 83       	std	Z+3, r26	; 0x03
    4c3a:	91 82       	std	Z+1, r9	; 0x01
    4c3c:	80 82       	st	Z, r8
    4c3e:	d9 01       	movw	r26, r18
    4c40:	6d 93       	st	X+, r22
    4c42:	7c 93       	st	X, r23
    4c44:	09 c0       	rjmp	.+18     	; 0x4c58 <realloc+0x10c>
    4c46:	0e 5f       	subi	r16, 0xFE	; 254
    4c48:	1f 4f       	sbci	r17, 0xFF	; 255
    4c4a:	80 0f       	add	r24, r16
    4c4c:	91 1f       	adc	r25, r17
    4c4e:	f9 01       	movw	r30, r18
    4c50:	91 83       	std	Z+1, r25	; 0x01
    4c52:	80 83       	st	Z, r24
    4c54:	eb 2d       	mov	r30, r11
    4c56:	fa 2f       	mov	r31, r26
    4c58:	e1 14       	cp	r14, r1
    4c5a:	f1 04       	cpc	r15, r1
    4c5c:	31 f0       	breq	.+12     	; 0x4c6a <realloc+0x11e>
    4c5e:	d7 01       	movw	r26, r14
    4c60:	13 96       	adiw	r26, 0x03	; 3
    4c62:	fc 93       	st	X, r31
    4c64:	ee 93       	st	-X, r30
    4c66:	12 97       	sbiw	r26, 0x02	; 2
    4c68:	3e c0       	rjmp	.+124    	; 0x4ce6 <realloc+0x19a>
    4c6a:	f0 93 8a 04 	sts	0x048A, r31	; 0x80048a <__flp+0x1>
    4c6e:	e0 93 89 04 	sts	0x0489, r30	; 0x800489 <__flp>
    4c72:	39 c0       	rjmp	.+114    	; 0x4ce6 <realloc+0x19a>
    4c74:	68 16       	cp	r6, r24
    4c76:	79 06       	cpc	r7, r25
    4c78:	08 f4       	brcc	.+2      	; 0x4c7c <realloc+0x130>
    4c7a:	3c 01       	movw	r6, r24
    4c7c:	7d 01       	movw	r14, r26
    4c7e:	12 96       	adiw	r26, 0x02	; 2
    4c80:	0d 90       	ld	r0, X+
    4c82:	bc 91       	ld	r27, X
    4c84:	a0 2d       	mov	r26, r0
    4c86:	b7 cf       	rjmp	.-146    	; 0x4bf6 <realloc+0xaa>
    4c88:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <__brkval>
    4c8c:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <__brkval+0x1>
    4c90:	88 16       	cp	r8, r24
    4c92:	99 06       	cpc	r9, r25
    4c94:	e1 f4       	brne	.+56     	; 0x4cce <realloc+0x182>
    4c96:	66 16       	cp	r6, r22
    4c98:	77 06       	cpc	r7, r23
    4c9a:	c8 f4       	brcc	.+50     	; 0x4cce <realloc+0x182>
    4c9c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4ca0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4ca4:	00 97       	sbiw	r24, 0x00	; 0
    4ca6:	41 f4       	brne	.+16     	; 0x4cb8 <realloc+0x16c>
    4ca8:	8d b7       	in	r24, 0x3d	; 61
    4caa:	9e b7       	in	r25, 0x3e	; 62
    4cac:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4cb0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4cb4:	84 1b       	sub	r24, r20
    4cb6:	95 0b       	sbc	r25, r21
    4cb8:	e8 17       	cp	r30, r24
    4cba:	f9 07       	cpc	r31, r25
    4cbc:	b0 f4       	brcc	.+44     	; 0x4cea <realloc+0x19e>
    4cbe:	f0 93 88 04 	sts	0x0488, r31	; 0x800488 <__brkval+0x1>
    4cc2:	e0 93 87 04 	sts	0x0487, r30	; 0x800487 <__brkval>
    4cc6:	f9 01       	movw	r30, r18
    4cc8:	71 83       	std	Z+1, r23	; 0x01
    4cca:	60 83       	st	Z, r22
    4ccc:	0c c0       	rjmp	.+24     	; 0x4ce6 <realloc+0x19a>
    4cce:	cb 01       	movw	r24, r22
    4cd0:	1c de       	rcall	.-968    	; 0x490a <malloc>
    4cd2:	7c 01       	movw	r14, r24
    4cd4:	00 97       	sbiw	r24, 0x00	; 0
    4cd6:	49 f0       	breq	.+18     	; 0x4cea <realloc+0x19e>
    4cd8:	a8 01       	movw	r20, r16
    4cda:	be 01       	movw	r22, r28
    4cdc:	1b d0       	rcall	.+54     	; 0x4d14 <memcpy>
    4cde:	ce 01       	movw	r24, r28
    4ce0:	ac de       	rcall	.-680    	; 0x4a3a <free>
    4ce2:	c7 01       	movw	r24, r14
    4ce4:	04 c0       	rjmp	.+8      	; 0x4cee <realloc+0x1a2>
    4ce6:	ce 01       	movw	r24, r28
    4ce8:	02 c0       	rjmp	.+4      	; 0x4cee <realloc+0x1a2>
    4cea:	80 e0       	ldi	r24, 0x00	; 0
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	df 91       	pop	r29
    4cf0:	cf 91       	pop	r28
    4cf2:	1f 91       	pop	r17
    4cf4:	0f 91       	pop	r16
    4cf6:	ff 90       	pop	r15
    4cf8:	ef 90       	pop	r14
    4cfa:	df 90       	pop	r13
    4cfc:	cf 90       	pop	r12
    4cfe:	bf 90       	pop	r11
    4d00:	af 90       	pop	r10
    4d02:	9f 90       	pop	r9
    4d04:	8f 90       	pop	r8
    4d06:	7f 90       	pop	r7
    4d08:	6f 90       	pop	r6
    4d0a:	08 95       	ret

00004d0c <abort>:
    4d0c:	81 e0       	ldi	r24, 0x01	; 1
    4d0e:	90 e0       	ldi	r25, 0x00	; 0
    4d10:	f8 94       	cli
    4d12:	4a c0       	rjmp	.+148    	; 0x4da8 <__do_global_dtors>

00004d14 <memcpy>:
    4d14:	fb 01       	movw	r30, r22
    4d16:	dc 01       	movw	r26, r24
    4d18:	02 c0       	rjmp	.+4      	; 0x4d1e <memcpy+0xa>
    4d1a:	01 90       	ld	r0, Z+
    4d1c:	0d 92       	st	X+, r0
    4d1e:	41 50       	subi	r20, 0x01	; 1
    4d20:	50 40       	sbci	r21, 0x00	; 0
    4d22:	d8 f7       	brcc	.-10     	; 0x4d1a <memcpy+0x6>
    4d24:	08 95       	ret

00004d26 <memset>:
    4d26:	dc 01       	movw	r26, r24
    4d28:	01 c0       	rjmp	.+2      	; 0x4d2c <memset+0x6>
    4d2a:	6d 93       	st	X+, r22
    4d2c:	41 50       	subi	r20, 0x01	; 1
    4d2e:	50 40       	sbci	r21, 0x00	; 0
    4d30:	e0 f7       	brcc	.-8      	; 0x4d2a <memset+0x4>
    4d32:	08 95       	ret

00004d34 <strcpy>:
    4d34:	fb 01       	movw	r30, r22
    4d36:	dc 01       	movw	r26, r24
    4d38:	01 90       	ld	r0, Z+
    4d3a:	0d 92       	st	X+, r0
    4d3c:	00 20       	and	r0, r0
    4d3e:	e1 f7       	brne	.-8      	; 0x4d38 <strcpy+0x4>
    4d40:	08 95       	ret

00004d42 <__itoa_ncheck>:
    4d42:	bb 27       	eor	r27, r27
    4d44:	4a 30       	cpi	r20, 0x0A	; 10
    4d46:	31 f4       	brne	.+12     	; 0x4d54 <__itoa_ncheck+0x12>
    4d48:	99 23       	and	r25, r25
    4d4a:	22 f4       	brpl	.+8      	; 0x4d54 <__itoa_ncheck+0x12>
    4d4c:	bd e2       	ldi	r27, 0x2D	; 45
    4d4e:	90 95       	com	r25
    4d50:	81 95       	neg	r24
    4d52:	9f 4f       	sbci	r25, 0xFF	; 255
    4d54:	01 c0       	rjmp	.+2      	; 0x4d58 <__utoa_common>

00004d56 <__utoa_ncheck>:
    4d56:	bb 27       	eor	r27, r27

00004d58 <__utoa_common>:
    4d58:	fb 01       	movw	r30, r22
    4d5a:	55 27       	eor	r21, r21
    4d5c:	aa 27       	eor	r26, r26
    4d5e:	88 0f       	add	r24, r24
    4d60:	99 1f       	adc	r25, r25
    4d62:	aa 1f       	adc	r26, r26
    4d64:	a4 17       	cp	r26, r20
    4d66:	10 f0       	brcs	.+4      	; 0x4d6c <__utoa_common+0x14>
    4d68:	a4 1b       	sub	r26, r20
    4d6a:	83 95       	inc	r24
    4d6c:	50 51       	subi	r21, 0x10	; 16
    4d6e:	b9 f7       	brne	.-18     	; 0x4d5e <__utoa_common+0x6>
    4d70:	a0 5d       	subi	r26, 0xD0	; 208
    4d72:	aa 33       	cpi	r26, 0x3A	; 58
    4d74:	08 f0       	brcs	.+2      	; 0x4d78 <__utoa_common+0x20>
    4d76:	a9 5d       	subi	r26, 0xD9	; 217
    4d78:	a1 93       	st	Z+, r26
    4d7a:	00 97       	sbiw	r24, 0x00	; 0
    4d7c:	79 f7       	brne	.-34     	; 0x4d5c <__utoa_common+0x4>
    4d7e:	b1 11       	cpse	r27, r1
    4d80:	b1 93       	st	Z+, r27
    4d82:	11 92       	st	Z+, r1
    4d84:	cb 01       	movw	r24, r22
    4d86:	00 c0       	rjmp	.+0      	; 0x4d88 <strrev>

00004d88 <strrev>:
    4d88:	dc 01       	movw	r26, r24
    4d8a:	fc 01       	movw	r30, r24
    4d8c:	67 2f       	mov	r22, r23
    4d8e:	71 91       	ld	r23, Z+
    4d90:	77 23       	and	r23, r23
    4d92:	e1 f7       	brne	.-8      	; 0x4d8c <strrev+0x4>
    4d94:	32 97       	sbiw	r30, 0x02	; 2
    4d96:	04 c0       	rjmp	.+8      	; 0x4da0 <strrev+0x18>
    4d98:	7c 91       	ld	r23, X
    4d9a:	6d 93       	st	X+, r22
    4d9c:	70 83       	st	Z, r23
    4d9e:	62 91       	ld	r22, -Z
    4da0:	ae 17       	cp	r26, r30
    4da2:	bf 07       	cpc	r27, r31
    4da4:	c8 f3       	brcs	.-14     	; 0x4d98 <strrev+0x10>
    4da6:	08 95       	ret

00004da8 <__do_global_dtors>:
    4da8:	16 e0       	ldi	r17, 0x06	; 6
    4daa:	c8 e0       	ldi	r28, 0x08	; 8
    4dac:	d6 e0       	ldi	r29, 0x06	; 6
    4dae:	00 e0       	ldi	r16, 0x00	; 0
    4db0:	05 c0       	rjmp	.+10     	; 0x4dbc <__do_global_dtors+0x14>
    4db2:	80 2f       	mov	r24, r16
    4db4:	fe 01       	movw	r30, r28
    4db6:	88 dd       	rcall	.-1264   	; 0x48c8 <__tablejump2__>
    4db8:	21 96       	adiw	r28, 0x01	; 1
    4dba:	01 1d       	adc	r16, r1
    4dbc:	c9 30       	cpi	r28, 0x09	; 9
    4dbe:	d1 07       	cpc	r29, r17
    4dc0:	80 e0       	ldi	r24, 0x00	; 0
    4dc2:	08 07       	cpc	r16, r24
    4dc4:	b1 f7       	brne	.-20     	; 0x4db2 <__do_global_dtors+0xa>
    4dc6:	f8 94       	cli

00004dc8 <__stop_program>:
    4dc8:	ff cf       	rjmp	.-2      	; 0x4dc8 <__stop_program>
